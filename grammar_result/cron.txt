
5 Mot inconnu : CRON => ====== Programmer des tâches avec CRON ====== <|> cron

7 Mot inconnu : Cron => ===== Qu'est-ce que Cron ? ===== <|> cron

8 Mot inconnu : Cron => **Cron** est un programme pour exécuter automatiquement des scripts, des commandes ou des logiciels à une date et une heure spécifiée précise, ou selon un cycle défini à l’avance. \\ <|> cron

9 Mot inconnu : crontab => Chaque utilisateur a un fichier **crontab**, lui permettant d'indiquer les actions à exécuter.\\ <|> crontab

10 Mot inconnu : Cron => Cron est parfois appelé « planificateur de tâches » ou « gestionnaire de tâches planifiées ». <|> cron

12 Mot inconnu : Cron => ===== Comment fonctionne Cron ? ===== <|> cron

14 Mot inconnu : cron => Les tâches planifiées cron sont définies au niveau du système dans le fichier /etc/crontab et dans le dossier /etc/cron.d/\\ <|> cron
15 Mot inconnu : crontab => Pour modifier vos tâches planifiées tapez : **crontab -e** (lance un éditeur du fichier crontab)\\ <|> crontab
15 Il manque un espace à côté du tiret. => Pour modifier vos tâches planifiées tapez : **crontab -e** (lance un éditeur du fichier crontab)\\ <|>  - => suggestions : [' – ', ' — ']
15 Mot inconnu : crontab => Pour modifier vos tâches planifiées tapez : **crontab -e** (lance un éditeur du fichier crontab)\\ <|> crontab

16 Mot inconnu : crontab => Les tâches définies dans **crontab** sont par principe exécutées par //[[root|root]]// (l'utilisateur avec le maximum de droits), sans demande de mot de passe. Cela permet d'exécuter potentiellement n'importe quelle tâche système, d'où un certain risque : soyez prudent, et abstenez-vous si vous ne maitrisez pas bien ce que vous faite. <|> crontab

18 Mot inconnu : crontab => Voici une courte description de la structure d'une entrée dans un fichier crontab. Les champs à renseigner sont __dans l'ordre__ (un champs qu'on ne souhaite pas renseigner doit être remplis avec une *) : <|> crontab
18 Mot inconnu : __dans => Voici une courte description de la structure d'une entrée dans un fichier crontab. Les champs à renseigner sont __dans l'ordre__ (un champs qu'on ne souhaite pas renseigner doit être remplis avec une *) : <|> __dans
18 Mot inconnu : ordre__ => Voici une courte description de la structure d'une entrée dans un fichier crontab. Les champs à renseigner sont __dans l'ordre__ (un champs qu'on ne souhaite pas renseigner doit être remplis avec une *) : <|> ordre__
18 Accord de nombre erroné : « champs » devrait être au singulier. => Voici une courte description de la structure d'une entrée dans un fichier crontab. Les champs à renseigner sont __dans l'ordre__ (un champs qu'on ne souhaite pas renseigner doit être remplis avec une *) : <|> champs => suggestions : ['champ']
18 Accord avec la forme verbale “doit” : “remplis” devrait être au singulier. => Voici une courte description de la structure d'une entrée dans un fichier crontab. Les champs à renseigner sont __dans l'ordre__ (un champs qu'on ne souhaite pas renseigner doit être remplis avec une *) : <|> remplis => suggestions : ['rempli']

27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __
27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __
27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __
27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __
27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __
27 Mot inconnu : __ => Si __//jour du mois//__ et __//mois//__ sont définis, __//jour de la semaine//__ n'est pas nécessaire. Cependant, si le champ est indiqué en plus, la commande sera exécutée à la date //jour du mois// et //mois// mais AUSSI tous les  //jour de la semaine// définis. <|> __

29 Guillemets typographiques ouvrants. => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> " => suggestions : ['«\xa0', '“']
29 Guillemets typographiques fermants. => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> " => suggestions : ['\xa0»', '”']
29 Mot inconnu : mn => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> mn
29 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> 13e => suggestions : ['13ᵉ']
29 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> 1er => suggestions : ['1ᵉʳ']
29 Mot inconnu : __ET__ => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> __et__
29 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => La "tâche" (non définie ici) sera exécutée 0mn et 0H après le démarrage, le 13e jour du 1er mois (janvier) __ET__ tous les vendredis (5e J. de la semaine). <|> 5e => suggestions : ['5ᵉ']

31 Mot inconnu : update => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> update
31 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> 5e => suggestions : ['5ᵉ']
31 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> 3e => suggestions : ['3ᵉ']
31 Guillemets typographiques ouvrants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['«\xa0', '“']
31 Guillemets typographiques fermants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['\xa0»', '”']
31 Guillemets typographiques ouvrants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['«\xa0', '“']
31 Guillemets typographiques fermants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['\xa0»', '”']
31 Guillemets typographiques ouvrants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['«\xa0', '“']
31 Guillemets typographiques fermants. => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> " => suggestions : ['\xa0»', '”']
31 Mot inconnu : nomdutilisateur => ---- L'exemple ci-dessous exécutera ///usr/bin/apt-get update// à 3:05 (5e minute de la 3e heure), chaque jour de chaque mois (les * dans "jour", "mois" et "jours de la semaine", avec les droits de l'utilisateur **nomdutilisateur**. <|> nomdutilisateur

35 Mot inconnu : cron => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> cron
35 Guillemets typographiques ouvrants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['«\xa0', '“']
35 Forme interrogative ? Mettez un trait d’union. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> es tu => suggestions : ['es-tu']
35 Guillemets typographiques fermants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['\xa0»', '”']
35 Guillemets typographiques ouvrants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['«\xa0', '“']
35 Guillemets typographiques fermants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['\xa0»', '”']
35 Guillemets typographiques ouvrants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['«\xa0', '“']
35 Guillemets typographiques fermants. => ---- Vous pouvez faire tourner **cron** toutes les 5 minutes, entre 9H à 17H, et uniquement du lundi au vendredi, avec un message "Où en es tu ?" (on met * pour les colonnes "jour dans le mois" et "mois", puisqu'on utilise pas ces données) : <|> " => suggestions : ['\xa0»', '”']

67 Mot inconnu : Cron => ===== Commandes pour gérer les tâches planifiées Cron ===== <|> cron

69 Mot inconnu : crontab => Pour examiner les tâches planifiées de l'utilisateur courant (le contenu de votre **crontab**, tapez : <|> crontab

81 Mot inconnu : crontab => Quand vous sortez de l'éditeur, le nouveau fichier **crontab** sera installé. Le fichier est stocké dans ///var/spool/cron/crontabs/<user>// mais doit seulement être modifié par l'intermédiaire de la commande **crontab**. <|> crontab
81 Mot inconnu : crontab => Quand vous sortez de l'éditeur, le nouveau fichier **crontab** sera installé. Le fichier est stocké dans ///var/spool/cron/crontabs/<user>// mais doit seulement être modifié par l'intermédiaire de la commande **crontab**. <|> crontab
83 Mot inconnu : xubuntu => Note : sur xubuntu, il faut auparavant indiquer que l'utilisateur a le droit d'utiliser crontab. Pour cela il faut créer un fichier ///etc/cron.allow// et y saisir le nom des utilisateurs autorisés à utiliser crontab. <|> xubuntu
83 Mot inconnu : crontab => Note : sur xubuntu, il faut auparavant indiquer que l'utilisateur a le droit d'utiliser crontab. Pour cela il faut créer un fichier ///etc/cron.allow// et y saisir le nom des utilisateurs autorisés à utiliser crontab. <|> crontab
83 Mot inconnu : crontab => Note : sur xubuntu, il faut auparavant indiquer que l'utilisateur a le droit d'utiliser crontab. Pour cela il faut créer un fichier ///etc/cron.allow// et y saisir le nom des utilisateurs autorisés à utiliser crontab. <|> crontab

85 Mot inconnu : crontab => L'éditeur utilisé pour modifier la crontab peut être modifié par la commande : <|> crontab
92 Mot inconnu : crontab => <note tip>  Lors du premier accès à « crontab -e » un menu apparaît et donne le choix de l'éditeur à utiliser.</note> <|> crontab
92 Il manque un espace à côté du tiret. => <note tip>  Lors du premier accès à « crontab -e » un menu apparaît et donne le choix de l'éditeur à utiliser.</note> <|>  - => suggestions : [' – ', ' — ']

94 Mot inconnu : KDE => Certains environnements de bureau, comme KDE dans sa « Configuration du système », offrent une interface graphique pour gérer les tâches cron. <|> kde
94 Mot inconnu : cron => Certains environnements de bureau, comme KDE dans sa « Configuration du système », offrent une interface graphique pour gérer les tâches cron. <|> cron

99 Mot inconnu : cron => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> cron
99 Mot inconnu : kdialog => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> kdialog
99 Mot inconnu : dialog => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> dialog
99 Une de ces ponctuations est superflue. => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> , . => suggestions : [',', '.']
99 Typographie : points de suspension. Utilisez le caractère dédié. => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> ... => suggestions : ['…']
99 Mot inconnu : DISPLAY => Par défaut, l'exécution de **cron** n'affiche rien. Si vous avez besoin de démarrer une interface graphique par exemple pour utiliser [[zenity|zenity]], kdialog, dialog ou encore [[totem|totem]], [[vlc|vlc]], ... Il vous faudra ajouter un **DISPLAY=:0** devant la commande lancée. Exemple : <|> display

104 Guillemets typographiques ouvrants. => <note important>Il est parfois nécessaire de faire "xhost +" dans un terminal pour autoriser l'accès à X</note> <|> " => suggestions : ['«\xa0', '“']
104 Mot inconnu : xhost => <note important>Il est parfois nécessaire de faire "xhost +" dans un terminal pour autoriser l'accès à X</note> <|> xhost

106 Mot inconnu : UTF8 => ===== Caractères UTF8 ===== <|> utf8

107 Mot inconnu : LANG => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> lang
107 Guillemets typographiques ouvrants. => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> " => suggestions : ['«\xa0', '“']
107 Mot inconnu : fr_FR => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> fr_fr
107 Guillemets typographiques fermants. => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> " => suggestions : ['\xa0»', '”']
107 Mot inconnu : LANG => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> lang
107 Guillemets typographiques ouvrants. => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> " => suggestions : ['«\xa0', '“']
107 Mot inconnu : fr_BE => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> fr_be
107 Guillemets typographiques fermants. => Si vous utilisez un script nécessitant des caractères tels que des accents, n'oubliez pas d'ajouter un export **LANG="fr_FR.UTF-8"** ou **LANG="fr_BE.UTF-8"** au début de ce script.  <|> " => suggestions : ['\xa0»', '”']

110 Mot inconnu : Cron => Cron n'a pas de PATH par défaut. Il est donc __grandement conseillé__ de mettre le chemin absolu vers les exécutables et fichiers. Exemple : <|> cron
110 Mot inconnu : PATH => Cron n'a pas de PATH par défaut. Il est donc __grandement conseillé__ de mettre le chemin absolu vers les exécutables et fichiers. Exemple : <|> path
110 Mot inconnu : __grandement => Cron n'a pas de PATH par défaut. Il est donc __grandement conseillé__ de mettre le chemin absolu vers les exécutables et fichiers. Exemple : <|> __grandement
110 Mot inconnu : conseillé__ => Cron n'a pas de PATH par défaut. Il est donc __grandement conseillé__ de mettre le chemin absolu vers les exécutables et fichiers. Exemple : <|> conseillé__
119 Mot inconnu : weekly => ===== Utilisation des répertoires /etc/cron.hourly, daily, weekly, monthly  ===== <|> weekly
119 Mot inconnu : monthly => ===== Utilisation des répertoires /etc/cron.hourly, daily, weekly, monthly  ===== <|> monthly
121 Mot inconnu : weekly => Si vous avez examiné le fichier /etc/crontab de votre système, vous avez remarqué qu'il contient des tâches pour exécuter toutes les heures, jours, semaines, mois les fichiers contenus dans les dossiers /etc/cron.hourly, daily, weekly, monthly. <|> weekly
121 Mot inconnu : monthly => Si vous avez examiné le fichier /etc/crontab de votre système, vous avez remarqué qu'il contient des tâches pour exécuter toutes les heures, jours, semaines, mois les fichiers contenus dans les dossiers /etc/cron.hourly, daily, weekly, monthly. <|> monthly

123 Mot inconnu : root => Si vous avez besoin qu'un script soit exécuté toutes les heures au niveau du système (par root), il suffit donc de le placer dans le dossier /etc/cron.hourly et de le rendre exécutable. De même s'il s'agit d'une tâche quotidienne (daily), hebdomadaire (weekly) ou mensuelle (monthly). <|> root
123 Mot inconnu : weekly => Si vous avez besoin qu'un script soit exécuté toutes les heures au niveau du système (par root), il suffit donc de le placer dans le dossier /etc/cron.hourly et de le rendre exécutable. De même s'il s'agit d'une tâche quotidienne (daily), hebdomadaire (weekly) ou mensuelle (monthly). <|> weekly
123 Mot inconnu : monthly => Si vous avez besoin qu'un script soit exécuté toutes les heures au niveau du système (par root), il suffit donc de le placer dans le dossier /etc/cron.hourly et de le rendre exécutable. De même s'il s'agit d'une tâche quotidienne (daily), hebdomadaire (weekly) ou mensuelle (monthly). <|> monthly


129 Mot inconnu : crontab => Attention contrairement aux lignes d'un fichier crontab, elles doivent préciser quel utilisateur (nom_utilisateur dans l'exemple ci dessous)  exécute le script :  <|> crontab
129 Mot inconnu : nom_utilisateur => Attention contrairement aux lignes d'un fichier crontab, elles doivent préciser quel utilisateur (nom_utilisateur dans l'exemple ci dessous)  exécute le script :  <|> nom_utilisateur
129 Il manque un trait d’union. => Attention contrairement aux lignes d'un fichier crontab, elles doivent préciser quel utilisateur (nom_utilisateur dans l'exemple ci dessous)  exécute le script :  <|> ci dessous => suggestions : ['ci-dessous']

134 Mot inconnu : crontab => Les commandes ci-dessus sont stockées dans un fichier **crontab** appartenant à votre compte d'utilisateur et exécutées avec votre niveau des permissions. Si vous voulez exécuter, régulièrement, une commande exigeant un plus haut niveau de permission (root), vous devez utiliser le fichier **crontab** root (ou racine) : <|> crontab
134 Mot inconnu : root => Les commandes ci-dessus sont stockées dans un fichier **crontab** appartenant à votre compte d'utilisateur et exécutées avec votre niveau des permissions. Si vous voulez exécuter, régulièrement, une commande exigeant un plus haut niveau de permission (root), vous devez utiliser le fichier **crontab** root (ou racine) : <|> root
134 Mot inconnu : crontab => Les commandes ci-dessus sont stockées dans un fichier **crontab** appartenant à votre compte d'utilisateur et exécutées avec votre niveau des permissions. Si vous voulez exécuter, régulièrement, une commande exigeant un plus haut niveau de permission (root), vous devez utiliser le fichier **crontab** root (ou racine) : <|> crontab
134 Mot inconnu : root => Les commandes ci-dessus sont stockées dans un fichier **crontab** appartenant à votre compte d'utilisateur et exécutées avec votre niveau des permissions. Si vous voulez exécuter, régulièrement, une commande exigeant un plus haut niveau de permission (root), vous devez utiliser le fichier **crontab** root (ou racine) : <|> root

140 Mot inconnu : root => Une autre façon de créer une tâche planifiée devant être exécutée par root est d'ajouter une entrée au fichier /etc/crontab ou de créer un nouveau fichier dans /etc/cron.d (cf. point précédent) en précisant bien root comme nom d'utilisateur. <|> root
140 Mot inconnu : root => Une autre façon de créer une tâche planifiée devant être exécutée par root est d'ajouter une entrée au fichier /etc/crontab ou de créer un nouveau fichier dans /etc/cron.d (cf. point précédent) en précisant bien root comme nom d'utilisateur. <|> root

143 Mot inconnu : cron => Une tâche cron est exécutée dans un shell non connecté (non-login) et non interactif. Les variables d'environnement habituelles et en particulier **PATH** ne sont pas connues. <|> cron
143 Mot inconnu : PATH => Une tâche cron est exécutée dans un shell non connecté (non-login) et non interactif. Les variables d'environnement habituelles et en particulier **PATH** ne sont pas connues. <|> path

145 Mot inconnu : cron => Il faut donc soit mettre les emplacements complets des exécutables dans les commandes et les scripts appelés par cron, soit définir PATH dans le fichier crontab : <|> cron
145 Mot inconnu : PATH => Il faut donc soit mettre les emplacements complets des exécutables dans les commandes et les scripts appelés par cron, soit définir PATH dans le fichier crontab : <|> path
145 Mot inconnu : crontab => Il faut donc soit mettre les emplacements complets des exécutables dans les commandes et les scripts appelés par cron, soit définir PATH dans le fichier crontab : <|> crontab

156 Mot inconnu : programm => De même, si le programm (script) exécuté doit sauvegarder des fichiers, il peut être utile de précéder l'exécution de votre script par un changement de répertoire : <|> programm

163 Mot inconnu : cron => Il est important de vérifier que vos travaux dans **cron** fonctionnent comme prévu. Une méthode pour faire un test est de paramétrer la tâche dans le **crontab** pour qu'elle s'exécute quelques minutes plus tard et contrôler le résultat, avant de mettre la synchronisation de cette tâche à la bonne heure. Vous pouvez également trouver utile d'envoyer les retours des commandes dans un fichier texte pour voir les succès ou les échecs, par exemple : <|> cron
163 Mot inconnu : crontab => Il est important de vérifier que vos travaux dans **cron** fonctionnent comme prévu. Une méthode pour faire un test est de paramétrer la tâche dans le **crontab** pour qu'elle s'exécute quelques minutes plus tard et contrôler le résultat, avant de mettre la synchronisation de cette tâche à la bonne heure. Vous pouvez également trouver utile d'envoyer les retours des commandes dans un fichier texte pour voir les succès ou les échecs, par exemple : <|> crontab

169 Mot inconnu : cron => Une autre façon de contrôler la bonne exécution des tâches cron est d'utiliser sa capacité à envoyer des courriels. <|> cron

170 Mot inconnu : MAILTO => Pour cela il suffit de renseigner la variable MAILTO dans votre fichier crontab, exemple : <|> mailto
170 Mot inconnu : crontab => Pour cela il suffit de renseigner la variable MAILTO dans votre fichier crontab, exemple : <|> crontab
175 Mot inconnu : cron => Sur une machine qui n'est pas allumée en permanence**[[anacron|anacron]]** (installé par défaut) permet de s'assurer que les taches cron sont bien exécutées en vérifiant à intervalles régulier si un tâche n'est pas en retard. <|> cron
175 Accord de nombre erroné avec « régulier ». => Sur une machine qui n'est pas allumée en permanence**[[anacron|anacron]]** (installé par défaut) permet de s'assurer que les taches cron sont bien exécutées en vérifiant à intervalles régulier si un tâche n'est pas en retard. <|> intervalles => suggestions : ['intervalle']
175 Accord de nombre erroné avec « intervalles ». => Sur une machine qui n'est pas allumée en permanence**[[anacron|anacron]]** (installé par défaut) permet de s'assurer que les taches cron sont bien exécutées en vérifiant à intervalles régulier si un tâche n'est pas en retard. <|> régulier => suggestions : ['réguliers']
175 Accord de genre erroné : « tâche » est féminin. => Sur une machine qui n'est pas allumée en permanence**[[anacron|anacron]]** (installé par défaut) permet de s'assurer que les taches cron sont bien exécutées en vérifiant à intervalles régulier si un tâche n'est pas en retard. <|> un => suggestions : ['une']
175 Accord de genre erroné : « un » est un déterminant masculin. => Sur une machine qui n'est pas allumée en permanence**[[anacron|anacron]]** (installé par défaut) permet de s'assurer que les taches cron sont bien exécutées en vérifiant à intervalles régulier si un tâche n'est pas en retard. <|> tâche => suggestions : ['tâché']

179 Accord de nombre erroné : « log » devrait être au pluriel. => Par défaut on retrouve des log de commandes CRON dans ///var/log/syslog// mais ce n'est pas très pratique.\\ <|> log => suggestions : ['logs']
179 Mot inconnu : CRON => Par défaut on retrouve des log de commandes CRON dans ///var/log/syslog// mais ce n'est pas très pratique.\\ <|> cron

180 Mot inconnu : CRON => Pour activer le log spécifique de CRON:\\ <|> cron

181 Mot inconnu : décommenter => Éditer le fichier ///etc/rsyslog.d/50-default.conf// qui est appelé par ///etc/rsyslog.conf// et décommenter la ligne <|> décommenter

186 Mot inconnu : rsyslog => Relancer //rsyslog// et //cron// <|> rsyslog
186 Mot inconnu : cron => Relancer //rsyslog// et //cron// <|> cron

191 Accord de nombre erroné : « log » devrait être au pluriel. => Il ne reste plus qu'à surveiller les log de CRON: <|> log => suggestions : ['logs']
191 Mot inconnu : CRON => Il ne reste plus qu'à surveiller les log de CRON: <|> cron

196 Mot inconnu : CRON => et si vous voulez des tâches silencieuses ((https://unix.stackexchange.com/questions/163352/what-does-dev-null-21-mean-in-this-article-of-crontab-basics)), ajouter à la fin de vos lignes CRON <code bash> > /dev/null 2>&1</code> pour rediriger les messages ET les erreurs vers le « trou noir ». <|> cron
199 Mot inconnu : crontab =>   * [[http://www.math-linux.com/spip.php?article16|Programmation des tâches régulières : crontab]] <|> crontab
201 Mot inconnu : incron =>   * [[incron]] : effectuer une action, commande(s), scripts, etc, en cas de modifications de fichiers ou de répertoires donnés <|> incron
201 Écriture invariable. Utilisez un point médian. =>   * [[incron]] : effectuer une action, commande(s), scripts, etc, en cas de modifications de fichiers ou de répertoires donnés <|> commande(s) => suggestions : ['commande·s']
202 Mot inconnu : EasyCron =>   * [[https://www.easycron.com/|EasyCron - Cron Jobs Alternatives]] <|> easycron
202 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[https://www.easycron.com/|EasyCron - Cron Jobs Alternatives]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
202 Mot inconnu : Cron =>   * [[https://www.easycron.com/|EasyCron - Cron Jobs Alternatives]] <|> cron
204 Mot inconnu : fcron =>   * [[fcron]] : programmer des tâches devant être exécutées/ <|> fcron
205 Mot inconnu : why =>   * [[https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working|why crontab scripts are not working?]] <|> why
205 Mot inconnu : crontab =>   * [[https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working|why crontab scripts are not working?]] <|> crontab
205 Mot inconnu : not =>   * [[https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working|why crontab scripts are not working?]] <|> not
205 Mot inconnu : working =>   * [[https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working|why crontab scripts are not working?]] <|> working
