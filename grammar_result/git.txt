
9 Espace(s) en fin de ligne à supprimer. => **Git** est un logiciel de gestion de versions décentralisé. Il est conçu pour être efficace tant avec les petits projets, que les plus importants.  |   => suggestions : ['']

11 Mot inconnu : linux => Git a spécialement été créé pour le développement du noyau linux.  | linux
11 Espace(s) en fin de ligne à supprimer. => Git a spécialement été créé pour le développement du noyau linux.  |   => suggestions : ['']

13 Mot inconnu : Torvalds => Ce projet a débuté en 2005, Linus Torvalds voulait créer une alternative au logiciel propriétaire BitKeeper. Depuis, Git a beaucoup évolué et est utilisé par de nombreux projets. | torvalds
13 Mot inconnu : BitKeeper => Ce projet a débuté en 2005, Linus Torvalds voulait créer une alternative au logiciel propriétaire BitKeeper. Depuis, Git a beaucoup évolué et est utilisé par de nombreux projets. | bitkeeper

15 Mot inconnu : SVN => Contrairement à des outils comme SVN ou CVS, Git fonctionne de façon décentralisée, c'est-à-dire que le développement ne se fait pas sur un serveur centralisé, mais chaque personne peut développer sur son propre dépôt. Git facilite ensuite la fusion (//merge//) des différents dépôts. | svn
15 Mot inconnu : CVS => Contrairement à des outils comme SVN ou CVS, Git fonctionne de façon décentralisée, c'est-à-dire que le développement ne se fait pas sur un serveur centralisé, mais chaque personne peut développer sur son propre dépôt. Git facilite ensuite la fusion (//merge//) des différents dépôts. | cvs
15 Mot inconnu : merge => Contrairement à des outils comme SVN ou CVS, Git fonctionne de façon décentralisée, c'est-à-dire que le développement ne se fait pas sur un serveur centralisé, mais chaque personne peut développer sur son propre dépôt. Git facilite ensuite la fusion (//merge//) des différents dépôts. | merge

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[apt>git-lfs]] : Gestion des //gros// fichiers, notamment binaires (large file storage) ([[https://github.com/git-lfs/git-lfs/wiki/Tutorial|tuto (en)]]) |    => suggestions : ['']
22 Mot inconnu : git-lfs =>   * [[apt>git-lfs]] : Gestion des //gros// fichiers, notamment binaires (large file storage) ([[https://github.com/git-lfs/git-lfs/wiki/Tutorial|tuto (en)]]) | git-lfs
22 Mot inconnu : storage =>   * [[apt>git-lfs]] : Gestion des //gros// fichiers, notamment binaires (large file storage) ([[https://github.com/git-lfs/git-lfs/wiki/Tutorial|tuto (en)]]) | storage

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * etc. |    => suggestions : ['']

29 Espace(s) en fin de ligne à supprimer. => <file bash> [user]  |   => suggestions : ['']

30 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     email = p.nom@ubuntu-fr.org |      => suggestions : ['']
30 Mot inconnu : email =>     email = p.nom@ubuntu-fr.org | email

31 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     name = nom_programmeur  |      => suggestions : ['']
31 Mot inconnu : name =>     name = nom_programmeur  | name
31 Mot inconnu : nom_programmeur =>     name = nom_programmeur  | nom_programmeur
31 Espace(s) en fin de ligne à supprimer. =>     name = nom_programmeur  |   => suggestions : ['']

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  [alias]  |   => suggestions : ['']
33 Espace(s) en fin de ligne à supprimer. =>  [alias]  |   => suggestions : ['']

34 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ci = commit  |      => suggestions : ['']
34 Espace(s) en fin de ligne à supprimer. =>     ci = commit  |   => suggestions : ['']

35 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     co = checkout  |      => suggestions : ['']
35 Mot inconnu : co =>     co = checkout  | co
35 Mot inconnu : checkout =>     co = checkout  | checkout
35 Espace(s) en fin de ligne à supprimer. =>     co = checkout  |   => suggestions : ['']

36 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     st = status  |      => suggestions : ['']
36 Espace(s) en fin de ligne à supprimer. =>     st = status  |   => suggestions : ['']

37 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     br = branch  </file> |      => suggestions : ['']
37 Mot inconnu : br =>     br = branch  </file> | br
37 Mot inconnu : branch =>     br = branch  </file> | branch
37 Espace(s) surnuméraire(s) à supprimer. =>     br = branch  </file> |    => suggestions : [' ']
38 Espace(s) surnuméraire(s) à supprimer. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) |    => suggestions : [' ']
38 Guillemets typographiques ouvrants. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) | '' => suggestions : ['«\xa0', '“']
38 Guillemets typographiques fermants. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) | '' => suggestions : ['\xa0»', '”']
38 Espace(s) surnuméraire(s) à supprimer. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) |    => suggestions : [' ']
38 Guillemets typographiques ouvrants. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) | '' => suggestions : ['«\xa0', '“']
38 Guillemets typographiques fermants. => Les alias quant à eux permettent de raccourcir les commandes, exemple :  ''git st''  au lieu de  ''git status''((autres exemples sur : [[https://touticphoto.fr/developpement/14-git-pour-la-gestion-de-depot-de-codes-source-resume]])) | '' => suggestions : ['\xa0»', '”']

40 Incohérence avec “de” : “git” est une forme verbale conjuguée. => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ | git => suggestions : ['gisant']
40 Mot inconnu : v2 => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ | v2
40 Incohérence avec “par” : “git” est une forme verbale conjuguée. => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ | git => suggestions : ['gisant']

42 Mot inconnu : bash_aliases => dans votre fichier //~/.bash_aliases//, ajouter, par exemple, la ligne :\\ | bash_aliases

46 Confusion probable : “a” est la conjugaison du verbe “avoir”. Utilisez la préposition “à”. => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. | a => suggestions : ['à']
46 Incohérence probable avec “a” : “retourner” n’est pas un participe passé. => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. | retourner => suggestions : ['retourné']
46 Mot inconnu : giten => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. | giten

51 Espace(s) en fin de ligne à supprimer. => Avant de commencer à utiliser Git, il faut lui demander de créer un nouveau dépôt.  |   => suggestions : ['']

53 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   mkdir nom_depot |    => suggestions : ['']
53 Mot inconnu : mkdir =>   mkdir nom_depot | mkdir
53 Mot inconnu : nom_depot =>   mkdir nom_depot | nom_depot

54 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd nom_depot |    => suggestions : ['']
54 Mot inconnu : nom_depot =>   cd nom_depot | nom_depot

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git init |    => suggestions : ['']
55 Mot inconnu : init =>   git init | init

57 Guillemets typographiques ouvrants. => Dans le répertoire ''nom_depot'', vous aurez alors un dossier caché ''.git'', c'est dans ce dossier que Git stockera les différentes révisions et informations du projet. | '' => suggestions : ['«\xa0', '“']
57 Mot inconnu : nom_depot => Dans le répertoire ''nom_depot'', vous aurez alors un dossier caché ''.git'', c'est dans ce dossier que Git stockera les différentes révisions et informations du projet. | nom_depot
57 Guillemets typographiques fermants. => Dans le répertoire ''nom_depot'', vous aurez alors un dossier caché ''.git'', c'est dans ce dossier que Git stockera les différentes révisions et informations du projet. | '' => suggestions : ['\xa0»', '”']
57 Guillemets fermants. => Dans le répertoire ''nom_depot'', vous aurez alors un dossier caché ''.git'', c'est dans ce dossier que Git stockera les différentes révisions et informations du projet. |  '' => suggestions : ['\xa0»', '”']
57 Guillemets typographiques fermants. => Dans le répertoire ''nom_depot'', vous aurez alors un dossier caché ''.git'', c'est dans ce dossier que Git stockera les différentes révisions et informations du projet. | '' => suggestions : ['\xa0»', '”']

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git clone git://<dépot> |    => suggestions : ['']

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git clone https://<dépot> |    => suggestions : ['']

65 Guillemets typographiques ouvrants. => Vous pourrez ensuite (si vous avez les droits suffisants sur le dépôt distant), envoyer vos changements avec ''git push''. | '' => suggestions : ['«\xa0', '“']
65 Mot inconnu : push => Vous pourrez ensuite (si vous avez les droits suffisants sur le dépôt distant), envoyer vos changements avec ''git push''. | push
65 Guillemets typographiques fermants. => Vous pourrez ensuite (si vous avez les droits suffisants sur le dépôt distant), envoyer vos changements avec ''git push''. | '' => suggestions : ['\xa0»', '”']

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git diff |    => suggestions : ['']
69 Mot inconnu : diff =>   git diff | diff

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git diff <commit1> <commit2> |    => suggestions : ['']
70 Mot inconnu : diff =>   git diff <commit1> <commit2> | diff

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

72 Guillemets typographiques ouvrants. => Permet de comparer 2 versions. Vous pourrez ainsi voir les changements effectués. Si vous avez des changements pas encore //commités//, la commande ''git diff'' affichera les modifications effectuées depuis le dernier //commit//. | '' => suggestions : ['«\xa0', '“']
72 Mot inconnu : diff => Permet de comparer 2 versions. Vous pourrez ainsi voir les changements effectués. Si vous avez des changements pas encore //commités//, la commande ''git diff'' affichera les modifications effectuées depuis le dernier //commit//. | diff
72 Guillemets typographiques fermants. => Permet de comparer 2 versions. Vous pourrez ainsi voir les changements effectués. Si vous avez des changements pas encore //commités//, la commande ''git diff'' affichera les modifications effectuées depuis le dernier //commit//. | '' => suggestions : ['\xa0»', '”']

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git status |    => suggestions : ['']

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git log |    => suggestions : ['']

80 S’il s’agit d’un impératif, mettez un trait d’union. => Liste les //commits// effectués dans le dépôt. Vous pourrez ainsi voir les modifications qui ont été faites. | liste les => suggestions : ['Liste-les']

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git add <nom_fichier_ou_dossier> |    => suggestions : ['']
84 Mot inconnu : add =>   git add <nom_fichier_ou_dossier> | add

86 Guillemets typographiques ouvrants. => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. | " => suggestions : ['«\xa0', '“']
86 Mot inconnu : nom_fichier_ou_dossier => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. | nom_fichier_ou_dossier
86 Guillemets typographiques fermants. => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. | " => suggestions : ['\xa0»', '”']

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git add --all * |    => suggestions : ['']
88 Mot inconnu : add =>   git add --all * | add
88 Mot inconnu : all =>   git add --all * | all

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

92 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git rm <nom_fichier> |    => suggestions : ['']
92 Mot inconnu : rm =>   git rm <nom_fichier> | rm

93 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git mv <nom_fichier> <nouvelle_destination> |    => suggestions : ['']
96 Mot inconnu : mv =>   git mv <nom_fichier> <nouvelle_destination> | mv

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git pull |    => suggestions : ['']

104 Il manque un trait d’union. => Met à jour votre dépôt local (à faire avant de commencer à modifier des fichiers pour être sûr de travailler sur leurs dernières versions et avant tout //commit// pour éviter les éventuels conflits avec des modifications effectuées par d'autres utilisateurs entre temps). | entre temps => suggestions : ['entre-temps']

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git commit <fichier1> <fichier2> |    => suggestions : ['']

108 Mot inconnu : fichier1 => Crée un //commit// contenant fichier1 et fichier2. Ces fichiers auront dû être au préalable ajoutés au dépôt avec la commande ''git add''. | fichier1
108 Mot inconnu : fichier2 => Crée un //commit// contenant fichier1 et fichier2. Ces fichiers auront dû être au préalable ajoutés au dépôt avec la commande ''git add''. | fichier2
108 Guillemets typographiques ouvrants. => Crée un //commit// contenant fichier1 et fichier2. Ces fichiers auront dû être au préalable ajoutés au dépôt avec la commande ''git add''. | '' => suggestions : ['«\xa0', '“']
108 Mot inconnu : add => Crée un //commit// contenant fichier1 et fichier2. Ces fichiers auront dû être au préalable ajoutés au dépôt avec la commande ''git add''. | add
108 Guillemets typographiques fermants. => Crée un //commit// contenant fichier1 et fichier2. Ces fichiers auront dû être au préalable ajoutés au dépôt avec la commande ''git add''. | '' => suggestions : ['\xa0»', '”']

113 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git commit -a |    => suggestions : ['']
113 Il manque un espace à côté du tiret. =>   git commit -a |  - => suggestions : [' – ', ' — ']

115 Mot inconnu : add => Crée un nouveau //commit// contenant tous les changements effectués sur les fichiers (''git add'' n'est donc pas nécessaire avant un ''commit -a''). | add
115 Guillemets typographiques fermants. => Crée un nouveau //commit// contenant tous les changements effectués sur les fichiers (''git add'' n'est donc pas nécessaire avant un ''commit -a''). | '' => suggestions : ['\xa0»', '”']
115 Guillemets typographiques ouvrants. => Crée un nouveau //commit// contenant tous les changements effectués sur les fichiers (''git add'' n'est donc pas nécessaire avant un ''commit -a''). | '' => suggestions : ['«\xa0', '“']
115 Il manque un espace à côté du tiret. => Crée un nouveau //commit// contenant tous les changements effectués sur les fichiers (''git add'' n'est donc pas nécessaire avant un ''commit -a''). |  - => suggestions : [' – ', ' — ']
115 Guillemets typographiques fermants. => Crée un nouveau //commit// contenant tous les changements effectués sur les fichiers (''git add'' n'est donc pas nécessaire avant un ''commit -a''). | '' => suggestions : ['\xa0»', '”']

117 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git push origin master |    => suggestions : ['']
117 Mot inconnu : push =>   git push origin master | push
117 Mot inconnu : origin =>   git push origin master | origin

119 S’il s’agit d’un impératif, mettez un trait d’union. => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | envoie le => suggestions : ['Envoie-le']
119 Guillemets typographiques ouvrants. => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | " => suggestions : ['«\xa0', '“']
119 Guillemets typographiques fermants. => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | " => suggestions : ['\xa0»', '”']
119 Guillemets typographiques ouvrants. => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | " => suggestions : ['«\xa0', '“']
119 Mot inconnu : origin => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | origin
119 Guillemets typographiques fermants. => Envoie le //commit// dans la branche principale "master" du dépôt "origin". | " => suggestions : ['\xa0»', '”']

124 Espace(s) surnuméraire(s) à supprimer. => ^ Commande                                                               ^ Effet                                                                                     ^ |                                                                 => suggestions : [' ']
124 Espace(s) surnuméraire(s) à supprimer. => ^ Commande                                                               ^ Effet                                                                                     ^ |                                                                                       => suggestions : [' ']

125 Guillemets typographiques ouvrants. => | ''git reset --hard HEAD''                                             | Annule les changements effectués depuis le dernier //commit//. | | '' => suggestions : ['«\xa0', '“']
125 Mot inconnu : reset => | ''git reset --hard HEAD''                                             | Annule les changements effectués depuis le dernier //commit//. | | reset
125 Mot inconnu : HEAD => | ''git reset --hard HEAD''                                             | Annule les changements effectués depuis le dernier //commit//. | | head
125 Guillemets typographiques fermants. => | ''git reset --hard HEAD''                                             | Annule les changements effectués depuis le dernier //commit//. | | '' => suggestions : ['\xa0»', '”']

126 Guillemets typographiques ouvrants. => | ''git reset --hard HEAD<nowiki>^</nowiki>''                | Supprime le dernier //commit//. Cette action peut être répétée autant de fois que vous le désirez. | | '' => suggestions : ['«\xa0', '“']
126 Mot inconnu : reset => | ''git reset --hard HEAD<nowiki>^</nowiki>''                | Supprime le dernier //commit//. Cette action peut être répétée autant de fois que vous le désirez. | | reset
126 Mot inconnu : HEAD => | ''git reset --hard HEAD<nowiki>^</nowiki>''                | Supprime le dernier //commit//. Cette action peut être répétée autant de fois que vous le désirez. | | head

127 Guillemets typographiques ouvrants. => | ''git revert commit''                                                     | Restaure le dépôt tel qu'il l'était lors du //commit// spécifié.| | '' => suggestions : ['«\xa0', '“']
127 Mot inconnu : revert => | ''git revert commit''                                                     | Restaure le dépôt tel qu'il l'était lors du //commit// spécifié.| | revert
127 Guillemets typographiques fermants. => | ''git revert commit''                                                     | Restaure le dépôt tel qu'il l'était lors du //commit// spécifié.| | '' => suggestions : ['\xa0»', '”']

129 Guillemets typographiques ouvrants. => |                                                                                   |  (ou annulées avec ''git reset''). | | '' => suggestions : ['«\xa0', '“']
129 Mot inconnu : reset => |                                                                                   |  (ou annulées avec ''git reset''). | | reset
129 Guillemets typographiques fermants. => |                                                                                   |  (ou annulées avec ''git reset''). | | '' => suggestions : ['\xa0»', '”']

134 Mot inconnu : github => Ici, nous supposerons qu'on travaille avec deux dépôts Git distincts nommés respectivement moi et bob. Le dépôt moi est votre dépôt, bob est celui d'une autre personne, admettons qu'il est situé à l'adresse [[git://github.com/bob]] | github

138 Mot inconnu : merges => Git permet une gestion efficace des branches, et des //merges// (fusion de branches). Les branches permettent d'avoir simultanément plusieurs versions de votre programme dans votre dépôt Git. C'est très utile, par exemple pour développer une nouvelle fonctionnalité, tout en gardant la branche principale intacte. Ainsi, vous pouvez toujours faire des changements dans la branche principale (corrections de bugs par exemple), tout en développant en parallèle une nouvelle fonctionnalité. | merges

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git branch test |    => suggestions : ['']
140 Mot inconnu : branch =>   git branch test | branch

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

142 Guillemets typographiques ouvrants. => Crée une nouvelle branche nommée "test". | " => suggestions : ['«\xa0', '“']
142 Guillemets typographiques fermants. => Crée une nouvelle branche nommée "test". | " => suggestions : ['\xa0»', '”']

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git branch |    => suggestions : ['']
144 Mot inconnu : branch =>   git branch | branch

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git checkout <nom_branche> |    => suggestions : ['']
148 Mot inconnu : checkout =>   git checkout <nom_branche> | checkout

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

150 Guillemets typographiques ouvrants. => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". | " => suggestions : ['«\xa0', '“']
150 Mot inconnu : nom_branche => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". | nom_branche
150 Guillemets typographiques fermants. => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". | " => suggestions : ['\xa0»', '”']

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git merge <nom_branche> |    => suggestions : ['']
153 Mot inconnu : merge =>   git merge <nom_branche> | merge

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

155 Guillemets typographiques ouvrants. => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  | " => suggestions : ['«\xa0', '“']
155 Mot inconnu : nom_branche => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  | nom_branche
155 Guillemets typographiques fermants. => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  | " => suggestions : ['\xa0»', '”']
155 Il faut élider “si” et l’accoler au pronom. => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  | si  => suggestions : ['S’']
155 Mot inconnu : merge => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  | merge
155 Espace(s) en fin de ligne à supprimer. => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//.  |   => suggestions : ['']

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git reset --hard HEAD |    => suggestions : ['']
159 Mot inconnu : reset =>   git reset --hard HEAD | reset
159 Mot inconnu : HEAD =>   git reset --hard HEAD | head

165 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git remote add bob git://github.com/bob |    => suggestions : ['']
165 Mot inconnu : remote =>   git remote add bob git://github.com/bob | remote
165 Mot inconnu : add =>   git remote add bob git://github.com/bob | add
165 Mot inconnu : github =>   git remote add bob git://github.com/bob | github

166 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git fetch bob |    => suggestions : ['']
166 Mot inconnu : fetch =>   git fetch bob | fetch

167 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git merge bob/master |    => suggestions : ['']
167 Mot inconnu : merge =>   git merge bob/master | merge

170 Guillemets typographiques ouvrants. => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | '' => suggestions : ['«\xa0', '“']
170 Mot inconnu : fetch => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | fetch
170 Guillemets typographiques fermants. => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | '' => suggestions : ['\xa0»', '”']
170 Guillemets typographiques ouvrants. => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | '' => suggestions : ['«\xa0', '“']
170 Mot inconnu : merge => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | merge
170 Guillemets typographiques fermants. => Il existe une commande qui a le même effet que ''git fetch'' suivi de ''git merge'' : | '' => suggestions : ['\xa0»', '”']

172 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   git pull bob |    => suggestions : ['']

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[https://live.gnome.org/giggle|Giggle]] (GTK+) |    => suggestions : ['']

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[https://github.com/krig/git-age|git-age]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/5_trouver_les_probl%25C3%25A8mes_-_git_blame.html|git blame]] (PyGTK) |    => suggestions : ['']
179 Mot inconnu : blame =>   * **(en)** [[https://github.com/krig/git-age|git-age]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/5_trouver_les_probl%25C3%25A8mes_-_git_blame.html|git blame]] (PyGTK) | blame
179 Mot inconnu : PyGTK =>   * **(en)** [[https://github.com/krig/git-age|git-age]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/5_trouver_les_probl%25C3%25A8mes_-_git_blame.html|git blame]] (PyGTK) | pygtk

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://git-cola.github.com/|git-cola]] (PyQt) |     => suggestions : ['']
180 Mot inconnu : PyQt =>    * **(en)** [[http://git-cola.github.com/|git-cola]] (PyQt) | pyqt

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://www.collab.net/giteyeapp|GitEye]] (propriétaire ?) |     => suggestions : ['']

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[https://github.com/gdevic/GitForce|GitForce]] (Mono) |    => suggestions : ['']

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[apt>gitg]] (GTK+) |    => suggestions : ['']
183 Mot inconnu : gitg =>   * [[apt>gitg]] (GTK+) | gitg

184 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[apt>git-gui]] et [[apt>gitk]], interfaces graphiques (Tcl/Tk) livrées avec Git |    => suggestions : ['']
184 Mot inconnu : gitk =>   * [[apt>git-gui]] et [[apt>gitk]], interfaces graphiques (Tcl/Tk) livrées avec Git | gitk
184 Mot inconnu : Tcl =>   * [[apt>git-gui]] et [[apt>gitk]], interfaces graphiques (Tcl/Tk) livrées avec Git | tcl
184 Mot inconnu : Tk =>   * [[apt>git-gui]] et [[apt>gitk]], interfaces graphiques (Tcl/Tk) livrées avec Git | tk

185 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[apt>qgit]] (Qt) |    => suggestions : ['']
185 Mot inconnu : qgit =>   * [[apt>qgit]] (Qt) | qgit

186 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://github.com/qgrit/qgrit/wiki|qgrit]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/4_recombinaison_interactive.html|git rebase -i]] (Qt) |     => suggestions : ['']
186 Mot inconnu : rebase =>    * **(en)** [[https://github.com/qgrit/qgrit/wiki|qgrit]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/4_recombinaison_interactive.html|git rebase -i]] (Qt) | rebase
186 Il manque un espace à côté du tiret. =>    * **(en)** [[https://github.com/qgrit/qgrit/wiki|qgrit]], interface graphique pour la commande [[http://www.alexgirard.com/git-book/4_recombinaison_interactive.html|git rebase -i]] (Qt) |  - => suggestions : [' – ', ' — ']

187 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://www.rabbitvcs.org/|RabbitVCS]] (PyGTK) |     => suggestions : ['']
187 Mot inconnu : PyGTK =>    * **(en)** [[http://www.rabbitvcs.org/|RabbitVCS]] (PyGTK) | pygtk

188 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://www.syntevo.com/smartgithg/|SmartGit]] (propriétaire ?) |     => suggestions : ['']

189 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://github.com/gyim/stupidgit/wiki|StupidGit]] (wxPython) |     => suggestions : ['']
189 Mot inconnu : wxPython =>    * **(en)** [[https://github.com/gyim/stupidgit/wiki|StupidGit]] (wxPython) | wxpython

190 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[http://www.devslashzero.com/teamgit|Team Git]] (Qt) |    => suggestions : ['']
190 Mot inconnu : Team =>   * **(en)** [[http://www.devslashzero.com/teamgit|Team Git]] (Qt) | team

191 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://jonas.nitro.dk/tig/|Tig]], interface en mode texte |     => suggestions : ['']

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://github.com/FredrikNoren/ungit|Ungit]] Interopérable (Linux, Mac, Windows) et moderne |     => suggestions : ['']

193 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://www.gitkraken.com/|GitKraken]] Linux, Windows et Mac |     => suggestions : ['']

196 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[http://www.eclipse.org/egit/|EGit]], extension ajoutant le support de Git dans Eclipse |    => suggestions : ['']

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[https://gogs.io/|Gogs]]: serveur de gestion de dépôts comme Gitolite avec interface http(s) inclus par défaut. |    => suggestions : ['']
198 Mot inconnu : Gitolite =>   * **(fr)** [[https://gogs.io/|Gogs]]: serveur de gestion de dépôts comme Gitolite avec interface http(s) inclus par défaut. | gitolite
198 Écriture invariable. Utilisez un point médian. =>   * **(fr)** [[https://gogs.io/|Gogs]]: serveur de gestion de dépôts comme Gitolite avec interface http(s) inclus par défaut. | http(s) => suggestions : ['http·s']

199 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[http://philjackson.github.com/magit/|Magit]], intégration de Git dans Emacs. |     => suggestions : ['']
199 Mot inconnu : Emacs =>    * **(en)** [[http://philjackson.github.com/magit/|Magit]], intégration de Git dans Emacs. | emacs

200 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://www.vim.org/scripts/script.php?script_id=2975|Fugitive]], Intégration de Git dans Vim. |     => suggestions : ['']

205 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(fr)** [[http://actual-it.info/2013/gitg/|GITg]], GIT en mode graphique - Tutoriel d'utilisation de GITg |     => suggestions : ['']
205 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>    * **(fr)** [[http://actual-it.info/2013/gitg/|GITg]], GIT en mode graphique - Tutoriel d'utilisation de GITg |  -  => suggestions : [' – ', ' — ', ' − ']

206 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * **(en)** [[https://git-lfs.github.com/|git-lfs Large File Storage]], gestion des fichiers lourds associés au projet: fichiers audio, vidéo, jeux de données (test…), graphiques… qui sont déposés sur un serveur à part. |     => suggestions : ['']
206 Mot inconnu : git-lfs =>    * **(en)** [[https://git-lfs.github.com/|git-lfs Large File Storage]], gestion des fichiers lourds associés au projet: fichiers audio, vidéo, jeux de données (test…), graphiques… qui sont déposés sur un serveur à part. | git-lfs
206 Mot inconnu : Storage =>    * **(en)** [[https://git-lfs.github.com/|git-lfs Large File Storage]], gestion des fichiers lourds associés au projet: fichiers audio, vidéo, jeux de données (test…), graphiques… qui sont déposés sur un serveur à part. | storage

210 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[https://git-scm.com/|Le site officiel de git maintenu par Scott Chacon]] ; |    => suggestions : ['']
210 Incohérence avec “de” : “git” est une forme verbale conjuguée. =>   * **(en)** [[https://git-scm.com/|Le site officiel de git maintenu par Scott Chacon]] ; | git => suggestions : ['gisant']
210 Mot inconnu : Chacon =>   * **(en)** [[https://git-scm.com/|Le site officiel de git maintenu par Scott Chacon]] ; | chacon

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[https://git-scm.com/book/fr|le livre en français sur le site officiel]]; |    => suggestions : ['']

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[http://git.or.cz/index.html|Le site officiel de git maintenu par Petr Baudis]] ; |    => suggestions : ['']
212 Incohérence avec “de” : “git” est une forme verbale conjuguée. =>   * **(en)** [[http://git.or.cz/index.html|Le site officiel de git maintenu par Petr Baudis]] ; | git => suggestions : ['gisant']
212 Mot inconnu : Petr =>   * **(en)** [[http://git.or.cz/index.html|Le site officiel de git maintenu par Petr Baudis]] ; | petr
212 Mot inconnu : Baudis =>   * **(en)** [[http://git.or.cz/index.html|Le site officiel de git maintenu par Petr Baudis]] ; | baudis

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(en)** [[http://www.kernel.org/pub/software/scm/git/docs/user-manual.html|Manuel utilisateur Git]] : Une référence très complète ; |    => suggestions : ['']

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[http://www.alexgirard.com/git-book/index.html|Le livre communautaire (libre et gratuit;) entièrement dédié à Git]] ; |    => suggestions : ['']

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[http://gitimmersion.fr|Git immersion en français]], un des guides références anglais traduit en Français |    => suggestions : ['']
215 Si vous parlez de la langue, pas de majuscule. =>   * **(fr)** [[http://gitimmersion.fr|Git immersion en français]], un des guides références anglais traduit en Français | français => suggestions : ['français']

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://github.com|GitHub]] : très bon dépôt gratuit. Une bonne gestion du travail en équipe, avec la possibilité de forker un dépôt, pour contribuer au développement sur son propre dépôt, tout en gardant un contact étroit avec le dépôt original. Appartient à microsoft depuis 2018. |    => suggestions : ['']
218 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. =>   * [[http://github.com|GitHub]] : très bon dépôt gratuit. Une bonne gestion du travail en équipe, avec la possibilité de forker un dépôt, pour contribuer au développement sur son propre dépôt, tout en gardant un contact étroit avec le dépôt original. Appartient à microsoft depuis 2018. | appartient => suggestions : ['Appartiens']
218 Mot inconnu : microsoft =>   * [[http://github.com|GitHub]] : très bon dépôt gratuit. Une bonne gestion du travail en équipe, avec la possibilité de forker un dépôt, pour contribuer au développement sur son propre dépôt, tout en gardant un contact étroit avec le dépôt original. Appartient à microsoft depuis 2018. | microsoft

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.gitorious.org/|Gitorious]] : utilisé par de gros projets comme le framework Qt. A noter que le site web gitorious est un logiciel libre et donc installable sur son propre serveur à l'inverse de GitHub qui est propriétaire. Les fonctionnalités communautaires des 2 me semblent assez proches. |    => suggestions : ['']
219 S’il s’agit de la préposition « à », il faut accentuer la majuscule. =>   * [[http://www.gitorious.org/|Gitorious]] : utilisé par de gros projets comme le framework Qt. A noter que le site web gitorious est un logiciel libre et donc installable sur son propre serveur à l'inverse de GitHub qui est propriétaire. Les fonctionnalités communautaires des 2 me semblent assez proches. | a => suggestions : ['À']
219 Mot inconnu : gitorious =>   * [[http://www.gitorious.org/|Gitorious]] : utilisé par de gros projets comme le framework Qt. A noter que le site web gitorious est un logiciel libre et donc installable sur son propre serveur à l'inverse de GitHub qui est propriétaire. Les fonctionnalités communautaires des 2 me semblent assez proches. | gitorious
219 Mot inconnu : GitHub =>   * [[http://www.gitorious.org/|Gitorious]] : utilisé par de gros projets comme le framework Qt. A noter que le site web gitorious est un logiciel libre et donc installable sur son propre serveur à l'inverse de GitHub qui est propriétaire. Les fonctionnalités communautaires des 2 me semblent assez proches. | github

220 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://bitbucket.org/|BitBucket]] : concurrent de Github. Propose de faire des __dépôts privés__ gratuits (jusqu'a **5 utilisateurs** sur le même dépôt. Pas d'autre restriction). |    => suggestions : ['']
220 Mot inconnu : Github =>   * [[https://bitbucket.org/|BitBucket]] : concurrent de Github. Propose de faire des __dépôts privés__ gratuits (jusqu'a **5 utilisateurs** sur le même dépôt. Pas d'autre restriction). | github
220 Mot inconnu : __dépôts =>   * [[https://bitbucket.org/|BitBucket]] : concurrent de Github. Propose de faire des __dépôts privés__ gratuits (jusqu'a **5 utilisateurs** sur le même dépôt. Pas d'autre restriction). | __dépôts
220 Mot inconnu : privés__ =>   * [[https://bitbucket.org/|BitBucket]] : concurrent de Github. Propose de faire des __dépôts privés__ gratuits (jusqu'a **5 utilisateurs** sur le même dépôt. Pas d'autre restriction). | privés__
220 Confusion : “a” est une forme conjuguée de “avoir”. Pour la préposition, écrivez “à”. =>   * [[https://bitbucket.org/|BitBucket]] : concurrent de Github. Propose de faire des __dépôts privés__ gratuits (jusqu'a **5 utilisateurs** sur le même dépôt. Pas d'autre restriction). | a => suggestions : ['à']

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://github.com/gitlabhq/gitlabhq|GitLab]] : [[tutoriel:comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail|Comment installer Gitlab-ce avec Docker pour son poste de travail]]. Logiciel open-source de dépôt, à installer sur sa machine depuis les sources [[https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md|Manuel d'installation]]. |    => suggestions : ['']
221 Il manque un espace. =>   * [[https://github.com/gitlabhq/gitlabhq|GitLab]] : [[tutoriel:comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail|Comment installer Gitlab-ce avec Docker pour son poste de travail]]. Logiciel open-source de dépôt, à installer sur sa machine depuis les sources [[https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md|Manuel d'installation]]. | comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail => suggestions : [' comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail']
221 Mot inconnu : comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail =>   * [[https://github.com/gitlabhq/gitlabhq|GitLab]] : [[tutoriel:comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail|Comment installer Gitlab-ce avec Docker pour son poste de travail]]. Logiciel open-source de dépôt, à installer sur sa machine depuis les sources [[https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md|Manuel d'installation]]. | comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail
221 Mot inconnu : Gitlab-ce =>   * [[https://github.com/gitlabhq/gitlabhq|GitLab]] : [[tutoriel:comment_installer_gitlab-ce_avec_docker_pour_son_poste_de_travail|Comment installer Gitlab-ce avec Docker pour son poste de travail]]. Logiciel open-source de dépôt, à installer sur sa machine depuis les sources [[https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md|Manuel d'installation]]. | gitlab-ce

223 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://framagit.org|FramaGit]] : dépôt fonctionnant sous GitLab géré par FramaSoft, une alternative aux dépôts propriétaires comme GitHub. |    => suggestions : ['']
223 Mot inconnu : GitLab =>   * [[https://framagit.org|FramaGit]] : dépôt fonctionnant sous GitLab géré par FramaSoft, une alternative aux dépôts propriétaires comme GitHub. | gitlab
223 Mot inconnu : FramaSoft =>   * [[https://framagit.org|FramaGit]] : dépôt fonctionnant sous GitLab géré par FramaSoft, une alternative aux dépôts propriétaires comme GitHub. | framasoft
223 Mot inconnu : GitHub =>   * [[https://framagit.org|FramaGit]] : dépôt fonctionnant sous GitLab géré par FramaSoft, une alternative aux dépôts propriétaires comme GitHub. | github

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** Discussion [[https://forum.ubuntu-fr.org/viewtopic.php?id=692171|«Conversion d'un dépôt bzr en un dépôt git»]] sur le forum ubuntu-fr. |    => suggestions : ['']
226 Mot inconnu : bzr =>   * **(fr)** Discussion [[https://forum.ubuntu-fr.org/viewtopic.php?id=692171|«Conversion d'un dépôt bzr en un dépôt git»]] sur le forum ubuntu-fr. | bzr
226 Mot inconnu : ubuntu-fr =>   * **(fr)** Discussion [[https://forum.ubuntu-fr.org/viewtopic.php?id=692171|«Conversion d'un dépôt bzr en un dépôt git»]] sur le forum ubuntu-fr. | ubuntu-fr

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://forum.ubuntu-fr.org/viewtopic.php?id=1310241|Création rapide de serveur git avec tutoriel]] |    => suggestions : ['']

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[http://blogs.media-tips.com/bernard.opic/2013/12/01/initiez-vous-a-git-avec-laide-memoire-interactif-dandrew-peterson/|Aide-mémoire interactif]] |    => suggestions : ['']

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **(fr)** [[http://www.chtiland.fr/page.php?id=informatique:developpement:start#docs|Aide mémoire GIT au format PDF]] |    => suggestions : ['']
229 Mot inconnu : developpement =>   * **(fr)** [[http://www.chtiland.fr/page.php?id=informatique:developpement:start#docs|Aide mémoire GIT au format PDF]] | developpement
229 Il manque un espace. =>   * **(fr)** [[http://www.chtiland.fr/page.php?id=informatique:developpement:start#docs|Aide mémoire GIT au format PDF]] | start => suggestions : [' start']
229 Mot inconnu : start =>   * **(fr)** [[http://www.chtiland.fr/page.php?id=informatique:developpement:start#docs|Aide mémoire GIT au format PDF]] | start
233 Il manque un espace. => //Contributeurs principaux : [[utilisateurs:geenux]], [[utilisateurs:bcag2]].// | geenux => suggestions : [' geenux']
233 Il manque un espace. => //Contributeurs principaux : [[utilisateurs:geenux]], [[utilisateurs:bcag2]].// | bcag2 => suggestions : [' bcag2']
