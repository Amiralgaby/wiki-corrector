
13 Mot inconnu : Torvalds [[34:42]] => Ce projet a débuté en 2005, Linus Torvalds voulait créer une alternative au logiciel propriétaire BitKeeper. Depuis, Git a beaucoup évolué et est utilisé par de nombreux projets. <|> torvalds
13 Mot inconnu : BitKeeper [[98:107]] => Ce projet a débuté en 2005, Linus Torvalds voulait créer une alternative au logiciel propriétaire BitKeeper. Depuis, Git a beaucoup évolué et est utilisé par de nombreux projets. <|> bitkeeper
15 Mot inconnu : merge [[253:258]] => Contrairement à des outils comme SVN ou CVS, Git fonctionne de façon décentralisée, c'est-à-dire que le développement ne se fait pas sur un serveur centralisé, mais chaque personne peut développer sur son propre dépôt. Git facilite ensuite la fusion (//merge//) des différents dépôts. <|> merge

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  [alias] <|>   => suggestions : ['']

40 Incohérence avec “de” : “git” est une forme verbale conjuguée. [[30:33]] => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ <|> git => suggestions : ['gisant']
40 Mot inconnu : v2 [[48:50]] => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ <|> v2
40 Incohérence avec “par” : “git” est une forme verbale conjuguée. [[83:86]] => Avec les récentes versions de git (notamment la v2.25), les messages retournés par git sont assez bien traduits. Mais pour remonter des problèmes sur des forums ou dépôts en anglais, ça peut-être bien de pouvoir les avoir en anglais.\\ <|> git => suggestions : ['gisant']

42 Mot inconnu : bash_aliases [[24:36]] => dans votre fichier //~/.bash_aliases//, ajouter, par exemple, la ligne :\\ <|> bash_aliases

46 Confusion probable : “a” est la conjugaison du verbe “avoir”. Utilisez la préposition “à”. [[24:25]] => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. <|> a => suggestions : ['à']
46 Incohérence probable avec “a” : “retourner” n’est pas un participe passé. [[26:35]] => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. <|> retourner => suggestions : ['retourné']
46 Mot inconnu : giten [[71:76]] => ainsi, **git** continue a retourner des commentaires en français, et **giten** les retournent en anglais. <|> giten

80 S’il s’agit d’un impératif, mettez un trait d’union. [[0:9]] => Liste les //commits// effectués dans le dépôt. Vous pourrez ainsi voir les modifications qui ont été faites. <|> liste les => suggestions : ['Liste-les']

86 Guillemets typographiques ouvrants. [[63:64]] => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. <|> " => suggestions : ['«\xa0', '“']
86 Mot inconnu : nom_fichier_ou_dossier [[64:86]] => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. <|> nom_fichier_ou_dossier
86 Guillemets typographiques fermants. [[86:87]] => Cette commande indique à Git que le fichier (ou dossier) nommé "nom_fichier_ou_dossier" devra être versionné. <|> " => suggestions : ['\xa0»', '”']

104 Il manque un trait d’union. [[258:269]] => Met à jour votre dépôt local (à faire avant de commencer à modifier des fichiers pour être sûr de travailler sur leurs dernières versions et avant tout //commit// pour éviter les éventuels conflits avec des modifications effectuées par d'autres utilisateurs entre temps). <|> entre temps => suggestions : ['entre-temps']

119 S’il s’agit d’un impératif, mettez un trait d’union. [[0:9]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> envoie le => suggestions : ['Envoie-le']
119 Guillemets typographiques ouvrants. [[48:49]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> " => suggestions : ['«\xa0', '“']
119 Guillemets typographiques fermants. [[55:56]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> " => suggestions : ['\xa0»', '”']
119 Guillemets typographiques ouvrants. [[66:67]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> " => suggestions : ['«\xa0', '“']
119 Mot inconnu : origin [[67:73]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> origin
119 Guillemets typographiques fermants. [[73:74]] => Envoie le //commit// dans la branche principale "master" du dépôt "origin". <|> " => suggestions : ['\xa0»', '”']

124 Espace(s) surnuméraire(s) à supprimer. [[10:73]] => ^ Commande                                                               ^ Effet                                                                                     ^ <|>                                                                 => suggestions : [' ']
124 Espace(s) surnuméraire(s) à supprimer. [[80:165]] => ^ Commande                                                               ^ Effet                                                                                     ^ <|>                                                                                       => suggestions : [' ']

138 Mot inconnu : merges [[55:61]] => Git permet une gestion efficace des branches, et des //merges// (fusion de branches). Les branches permettent d'avoir simultanément plusieurs versions de votre programme dans votre dépôt Git. C'est très utile, par exemple pour développer une nouvelle fonctionnalité, tout en gardant la branche principale intacte. Ainsi, vous pouvez toujours faire des changements dans la branche principale (corrections de bugs par exemple), tout en développant en parallèle une nouvelle fonctionnalité. <|> merges

142 Guillemets typographiques ouvrants. [[33:34]] => Crée une nouvelle branche nommée "test". <|> " => suggestions : ['«\xa0', '“']
142 Guillemets typographiques fermants. [[38:39]] => Crée une nouvelle branche nommée "test". <|> " => suggestions : ['\xa0»', '”']

150 Guillemets typographiques ouvrants. [[109:110]] => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". <|> " => suggestions : ['«\xa0', '“']
150 Mot inconnu : nom_branche [[110:121]] => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". <|> nom_branche
150 Guillemets typographiques fermants. [[121:122]] => Change de branche. Après cette commande, vous aurez alors accès aux fichiers présents dans la branche nommée "nom_branche". <|> " => suggestions : ['\xa0»', '”']

155 Guillemets typographiques ouvrants. [[52:53]] => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//. <|> " => suggestions : ['«\xa0', '“']
155 Mot inconnu : nom_branche [[53:64]] => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//. <|> nom_branche
155 Guillemets typographiques fermants. [[64:65]] => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//. <|> " => suggestions : ['\xa0»', '”']
155 Il faut élider “si” et l’accoler au pronom. [[251:254]] => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//. <|> si  => suggestions : ['S’']
155 Mot inconnu : merge [[552:557]] => Fusionne la branche courante avec la branche nommée "nom_branche". Il se peut qu'il y ait des conflits et que Git ne soit pas capable de les résoudre tout seul. Les conflits apparaissent lors de changements divergents au même endroit dans un fichier. Si il y a des conflits, Git laissera un marquage directement dans le fichier, contenant le code de la branche courante, et celui de la branche que vous voulez fusionner. Vous devrez alors corriger le problème manuellement. Une fois corrigé, vous devez //commiter// les changements pour finaliser le //merge//. <|> merge
