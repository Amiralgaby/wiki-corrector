
5 Mot inconnu : Nautilus => ====== Les scripts pour Nautilus ====== | nautilus

7 Mot inconnu : Nautilus => Le gestionnaire de fichiers Nautilus permet d'exécuter des [[tutoriel:script_shell|scripts]], sous la forme de fichiers textes. | nautilus
7 Il manque un espace. => Le gestionnaire de fichiers Nautilus permet d'exécuter des [[tutoriel:script_shell|scripts]], sous la forme de fichiers textes. | script_shell => suggestions : [' script_shell']
7 Mot inconnu : script_shell => Le gestionnaire de fichiers Nautilus permet d'exécuter des [[tutoriel:script_shell|scripts]], sous la forme de fichiers textes. | script_shell

8 Guillemets typographiques ouvrants. => Les scripts sont de "petits" programmes permettant une multitude de fonctionnalités. | " => suggestions : ['«\xa0', '“']
8 Guillemets typographiques fermants. => Les scripts sont de "petits" programmes permettant une multitude de fonctionnalités. | " => suggestions : ['\xa0»', '”']

20 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Vos scripts seront alors disponibles dans toutes les fenêtres Nautilus dans //Fichier // → Scripts, ainsi que dans le menu contextuel (clic droit). Vous ne verrez pas le menu //Fichier // tant que vous n'aurez pas ajouté votre premier script dans **~/.local/share/nautilus/scripts/**. |   => suggestions : ['']
20 Mot inconnu : Nautilus =>  Vos scripts seront alors disponibles dans toutes les fenêtres Nautilus dans //Fichier // → Scripts, ainsi que dans le menu contextuel (clic droit). Vous ne verrez pas le menu //Fichier // tant que vous n'aurez pas ajouté votre premier script dans **~/.local/share/nautilus/scripts/**. | nautilus
20 Mot inconnu : share =>  Vos scripts seront alors disponibles dans toutes les fenêtres Nautilus dans //Fichier // → Scripts, ainsi que dans le menu contextuel (clic droit). Vous ne verrez pas le menu //Fichier // tant que vous n'aurez pas ajouté votre premier script dans **~/.local/share/nautilus/scripts/**. | share
20 Mot inconnu : nautilus =>  Vos scripts seront alors disponibles dans toutes les fenêtres Nautilus dans //Fichier // → Scripts, ainsi que dans le menu contextuel (clic droit). Vous ne verrez pas le menu //Fichier // tant que vous n'aurez pas ajouté votre premier script dans **~/.local/share/nautilus/scripts/**. | nautilus

35 Mot inconnu : Nautilus => Le script [[https://www.linux-apps.com/content/show.php/Script+Installer?content=67612|Script Installer]] permet d'installer automatiquement les scripts Nautilus.(dernière maj en 2008, il doit être obsolète ?). | nautilus
35 Mot inconnu : maj => Le script [[https://www.linux-apps.com/content/show.php/Script+Installer?content=67612|Script Installer]] permet d'installer automatiquement les scripts Nautilus.(dernière maj en 2008, il doit être obsolète ?). | maj

37 Mot inconnu : Canonical => ==== Les scripts dans les dépôts Canonical ==== | canonical

106 Mot inconnu : editeur_de_texte => Il vous suffit d'un [[editeur_de_texte|éditeur de texte]] pour écrire votre script. | editeur_de_texte

111 Mot inconnu : Nautilus => Chaque fois qu'un script est appelé, Nautilus définit automatiquement des variables qui peuvent être utilisées dans vos scripts. | nautilus
123 Mot inconnu : shellcheck => **[[apt>shellcheck]]**. | shellcheck

127 Mot inconnu : Nautilus => La première chose qu'un **script Nautilus** doit récupérer, c'est la liste des fichiers sur lesquels il doit opérer (les fichiers qui étaient sélectionnés par l'utilisateur lorsqu'il a lancé le script). Comme pour tout script, il faut pour cela rédiger correctement le script et éviter certaines erreurs. | nautilus

129 Espace(s) surnuméraire(s) à supprimer. => ==== Attention en utilisant les arguments passés aux scripts  ==== |    => suggestions : [' ']

133 Mot inconnu : Nautilus => Premier problème, Nautilus offre une vue liste (qui pourrait d'ailleurs se nommer "arborescente"), on peut donc sélectionner des fichiers qui sont dans des sous-répertoires du répertoire courant. | nautilus
133 Guillemets typographiques ouvrants. => Premier problème, Nautilus offre une vue liste (qui pourrait d'ailleurs se nommer "arborescente"), on peut donc sélectionner des fichiers qui sont dans des sous-répertoires du répertoire courant. | " => suggestions : ['«\xa0', '“']
133 Guillemets typographiques fermants. => Premier problème, Nautilus offre une vue liste (qui pourrait d'ailleurs se nommer "arborescente"), on peut donc sélectionner des fichiers qui sont dans des sous-répertoires du répertoire courant. | " => suggestions : ['\xa0»', '”']

163 Guillemets typographiques ouvrants. => Le problème, c'est que des fichiers peuvent contenir des espaces, et aussi des \n (un '\' suivi d'un 'n'), et que certaines solutions ne sont pas correctes à cause de ces cas particuliers. | ' => suggestions : ['“', '‘', '‹']

174 Apostrophe incorrecte. => **n'est pas correct sans les guillemets aux variables**, car si les chemins sont '/tmp/a b/c' et '/tmp/d e', la boucle fera 4 itérations : '/tmp/a', 'b/c', '/tmp/d' et 'e'. | c'  => suggestions : ['c’']
174 Guillemets typographiques fermants. => **n'est pas correct sans les guillemets aux variables**, car si les chemins sont '/tmp/a b/c' et '/tmp/d e', la boucle fera 4 itérations : '/tmp/a', 'b/c', '/tmp/d' et 'e'. | ' => suggestions : ['”', '’', '›']
174 Incohérence avec « c’ » : « et » devrait être un verbe. => **n'est pas correct sans les guillemets aux variables**, car si les chemins sont '/tmp/a b/c' et '/tmp/d e', la boucle fera 4 itérations : '/tmp/a', 'b/c', '/tmp/d' et 'e'. | et => suggestions : ['est', 'hait', 'ait']
174 Guillemets typographiques ouvrants. => **n'est pas correct sans les guillemets aux variables**, car si les chemins sont '/tmp/a b/c' et '/tmp/d e', la boucle fera 4 itérations : '/tmp/a', 'b/c', '/tmp/d' et 'e'. | ' => suggestions : ['“', '‘', '‹']
174 Guillemets typographiques ouvrants. => **n'est pas correct sans les guillemets aux variables**, car si les chemins sont '/tmp/a b/c' et '/tmp/d e', la boucle fera 4 itérations : '/tmp/a', 'b/c', '/tmp/d' et 'e'. | ' => suggestions : ['“', '‘', '‹']

185 Mot inconnu : echo => Il ne faut pas utiliser **echo** (en **sh**, il ne fonctionnerait pas sur un fichier contenant un '\' suivi d'un 'n'), et il faut bien passer l'argument **-r** à **read** (même raison).\\  | echo
185 Mot inconnu : sh => Il ne faut pas utiliser **echo** (en **sh**, il ne fonctionnerait pas sur un fichier contenant un '\' suivi d'un 'n'), et il faut bien passer l'argument **-r** à **read** (même raison).\\  | sh
185 Guillemets typographiques ouvrants. => Il ne faut pas utiliser **echo** (en **sh**, il ne fonctionnerait pas sur un fichier contenant un '\' suivi d'un 'n'), et il faut bien passer l'argument **-r** à **read** (même raison).\\  | ' => suggestions : ['“', '‘', '‹']
185 Mot inconnu : read => Il ne faut pas utiliser **echo** (en **sh**, il ne fonctionnerait pas sur un fichier contenant un '\' suivi d'un 'n'), et il faut bien passer l'argument **-r** à **read** (même raison).\\  | read
185 Espace(s) en fin de ligne à supprimer. => Il ne faut pas utiliser **echo** (en **sh**, il ne fonctionnerait pas sur un fichier contenant un '\' suivi d'un 'n'), et il faut bien passer l'argument **-r** à **read** (même raison).\\  |   => suggestions : ['']
186 Mot inconnu : Input_Field_Separators => Une seconde solution est de changer l'[[wp>Input_Field_Separators|IFS]] : | input_field_separators

206 Espace(s) en fin de ligne à supprimer. => Si vous respectez ceci, votre script fonctionnera aussi bien en **/bin/bash** qu'en **/bin/sh** (du moins pour cette partie) et pour tous les fichiers, mêmes les cas particuliers.\\  |   => suggestions : ['']

208 Mot inconnu : find => utiliser la commande **find** ! | find
222 Accord de nombre erroné : « fichier » devrait être au pluriel. => Le *.mp3 va prendre en compte les fichier mp3 contenus dans votre sélection et le {} remplace le nom de fichier dans votre commande à appliquer sur les mp3. | fichier => suggestions : ['fichiers']

226 Mot inconnu : Gedit => ==== Supprimer les fichiers de sauvegarde de Gedit ==== | gedit

227 Mot inconnu : Gedit => Gedit copie chaque fichier avant la sauvegarde sous le nom « $fichier~ ». Il suffira d'appliquer le script d'un //clic droit -> Scripts -> rm-backups.sh// : | gedit
227 Mot inconnu : rm-backups => Gedit copie chaque fichier avant la sauvegarde sous le nom « $fichier~ ». Il suffira d'appliquer le script d'un //clic droit -> Scripts -> rm-backups.sh// : | rm-backups
227 Mot inconnu : sh => Gedit copie chaque fichier avant la sauvegarde sous le nom « $fichier~ ». Il suffira d'appliquer le script d'un //clic droit -> Scripts -> rm-backups.sh// : | sh

236 Mot inconnu : Gedit => <note tip> On peut désactiver la création de fichier de sauvegarde par Gedit en décochant la case "Créer une copie de sauvegarde des fichiers avant l’enregistrement" dans **Édition -> Préférences -> Éditeur**.</note> | gedit
236 Guillemets typographiques ouvrants. => <note tip> On peut désactiver la création de fichier de sauvegarde par Gedit en décochant la case "Créer une copie de sauvegarde des fichiers avant l’enregistrement" dans **Édition -> Préférences -> Éditeur**.</note> | " => suggestions : ['«\xa0', '“']
236 Guillemets typographiques fermants. => <note tip> On peut désactiver la création de fichier de sauvegarde par Gedit en décochant la case "Créer une copie de sauvegarde des fichiers avant l’enregistrement" dans **Édition -> Préférences -> Éditeur**.</note> | " => suggestions : ['\xa0»', '”']

240 Mot inconnu : ROOT => === Éditer un fichier avec VIM avec les privilèges ROOT === | root

249 Mot inconnu : Rhythmbox => ==== Lire les fichiers du répertoire avec Rhythmbox ==== | rhythmbox
