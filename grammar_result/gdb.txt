
4 Mot inconnu : Débuggage => ====== Débuggage avec gdb ====== <|> débuggage
4 Mot inconnu : gdb => ====== Débuggage avec gdb ====== <|> gdb

7 Mot inconnu : gdb => gdb, acronyme de GNU DeBugger, est un programme qui, comme son nom l'indique, permet de débugger un programme (langages C et C++ principalement, ainsi que d'autres : fortran 77, etc..). Il permet donc de traquer les bugs/erreurs se trouvant dans tout programme. <|> gdb
7 Mot inconnu : DeBugger => gdb, acronyme de GNU DeBugger, est un programme qui, comme son nom l'indique, permet de débugger un programme (langages C et C++ principalement, ainsi que d'autres : fortran 77, etc..). Il permet donc de traquer les bugs/erreurs se trouvant dans tout programme. <|> debugger
7 Mot inconnu : débugger => gdb, acronyme de GNU DeBugger, est un programme qui, comme son nom l'indique, permet de débugger un programme (langages C et C++ principalement, ainsi que d'autres : fortran 77, etc..). Il permet donc de traquer les bugs/erreurs se trouvant dans tout programme. <|> débugger
7 Mot inconnu : fortran => gdb, acronyme de GNU DeBugger, est un programme qui, comme son nom l'indique, permet de débugger un programme (langages C et C++ principalement, ainsi que d'autres : fortran 77, etc..). Il permet donc de traquer les bugs/erreurs se trouvant dans tout programme. <|> fortran
7 Typographie : un ou trois points ? => gdb, acronyme de GNU DeBugger, est un programme qui, comme son nom l'indique, permet de débugger un programme (langages C et C++ principalement, ainsi que d'autres : fortran 77, etc..). Il permet donc de traquer les bugs/erreurs se trouvant dans tout programme. <|> .. => suggestions : ['…', '.']

9 Mot inconnu : débuggage => Cet outil, indispensable à tout programmeur, bien que très performant n'est disponible qu'avec une interface en ligne de commande. Heureusement, il existe des interfaces graphiques qui facilitent le débuggage. <|> débuggage

15 Mot inconnu : débuggage => Si vous développez en utilisant une bibliothèque particulière, vous pouvez éventuellement installer le paquet de débuggage, dont le nom finit par **-dbg**, en plus du paquet de développement (dont le nom finit par **-dev**). <|> débuggage
15 Mot inconnu : dbg => Si vous développez en utilisant une bibliothèque particulière, vous pouvez éventuellement installer le paquet de débuggage, dont le nom finit par **-dbg**, en plus du paquet de développement (dont le nom finit par **-dev**). <|> dbg
15 Mot inconnu : dev => Si vous développez en utilisant une bibliothèque particulière, vous pouvez éventuellement installer le paquet de débuggage, dont le nom finit par **-dbg**, en plus du paquet de développement (dont le nom finit par **-dev**). <|> dev

19 Mot inconnu : débuggage => ==== Compilation du programme pour le débuggage ==== <|> débuggage

20 Mot inconnu : gdb => Pour que gdb puisse débugger un programme, il a besoin des informations de débuggage, qui peuvent être ajoutées en ajoutant l'option **-g** au compilateur. <|> gdb
20 Mot inconnu : débugger => Pour que gdb puisse débugger un programme, il a besoin des informations de débuggage, qui peuvent être ajoutées en ajoutant l'option **-g** au compilateur. <|> débugger
20 Mot inconnu : débuggage => Pour que gdb puisse débugger un programme, il a besoin des informations de débuggage, qui peuvent être ajoutées en ajoutant l'option **-g** au compilateur. <|> débuggage

25 Mot inconnu : gdb => ==== Lancement de gdb ==== <|> gdb

26 Accord de genre erroné : « fois » est féminin. => Un fois le programme compilé, invoquez gdb comme ceci : <|> un => suggestions : ['Une']
26 Accord de genre erroné : « Un » est un déterminant masculin. => Un fois le programme compilé, invoquez gdb comme ceci : <|> fois => suggestions : ['foie']
26 Mot inconnu : gdb => Un fois le programme compilé, invoquez gdb comme ceci : <|> gdb

29 Mot inconnu : tui => <note tip>on peut lancer avec l'option //-tui//  <|> tui

31 Mot inconnu : buggé => qui permet de visualiser le code, les points d'arrêt… bref plus visuel… mais semble buggé  <|> buggé

33 Mot inconnu : gdb => Dans l'interface de gdb, vous pouvez lancer le programme avec **run** et quitter le débogueur avec **quit**. <|> gdb
33 Mot inconnu : run => Dans l'interface de gdb, vous pouvez lancer le programme avec **run** et quitter le débogueur avec **quit**. <|> run
33 Mot inconnu : quit => Dans l'interface de gdb, vous pouvez lancer le programme avec **run** et quitter le débogueur avec **quit**. <|> quit

34 Mot inconnu : where => À tout moment, vous pouvez interrompre le programme avec le raccourci clavier **Ctrl+C** dans le terminal. La commande **where** vous permettra alors de voir la pile des appels. <|> where

37 Mot inconnu : gdb => Si vous souhaitez changer l'exécutable ciblé par gdb, **exec monexecutable** peut vous être utile. <|> gdb
37 Mot inconnu : exec => Si vous souhaitez changer l'exécutable ciblé par gdb, **exec monexecutable** peut vous être utile. <|> exec
37 Mot inconnu : monexecutable => Si vous souhaitez changer l'exécutable ciblé par gdb, **exec monexecutable** peut vous être utile. <|> monexecutable

39 Mot inconnu : start => La commande **start** lance le programme et s'arrête à la première ligne : la commande "n" permet ensuite de faire du pas-à-pas. <|> start
39 Guillemets typographiques ouvrants. => La commande **start** lance le programme et s'arrête à la première ligne : la commande "n" permet ensuite de faire du pas-à-pas. <|> " => suggestions : ['«\xa0', '“']
39 Guillemets typographiques fermants. => La commande **start** lance le programme et s'arrête à la première ligne : la commande "n" permet ensuite de faire du pas-à-pas. <|> " => suggestions : ['\xa0»', '”']

41 Mot inconnu : run => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> run
41 Mot inconnu : start => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> start
41 Mot inconnu : gdb => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> gdb
41 Mot inconnu : args => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> args
41 Mot inconnu : monprogramme => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> monprogramme
41 Mot inconnu : monoption => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> monoption
41 Mot inconnu : mesoptions => <note>Si le programme a des paramètres d'entrée, il faut les ajouter à la suite de **run** (ou **start**) ou le mettre en ligne de commande (attention, taper **gdb --args monprogramme monoption mesoptions**).</note>  <|> mesoptions

45 Espace(s) surnuméraire(s) à supprimer. => ^commande             ^raccourci                ^effet                                                  ^ <|>               => suggestions : [' ']
45 Espace(s) surnuméraire(s) à supprimer. => ^commande             ^raccourci                ^effet                                                  ^ <|>                  => suggestions : [' ']
45 Espace(s) surnuméraire(s) à supprimer. => ^commande             ^raccourci                ^effet                                                  ^ <|>                                                    => suggestions : [' ']

46 Mot inconnu : run => |run                         | r                         | lance le programme (s'arrête au prochain point d'arrêt)                   | <|> run
46 Espace(s) surnuméraire(s) à supprimer. => |run                         | r                         | lance le programme (s'arrête au prochain point d'arrêt)                   | <|>                           => suggestions : [' ']
46 Espace(s) surnuméraire(s) à supprimer. => |run                         | r                         | lance le programme (s'arrête au prochain point d'arrêt)                   | <|>                           => suggestions : [' ']

47 Espace(s) surnuméraire(s) à supprimer. => |continue                 | c                        | relance le programme  (s'arrête au prochain point d'arrêt)               | <|>                   => suggestions : [' ']
47 Espace(s) surnuméraire(s) à supprimer. => |continue                 | c                        | relance le programme  (s'arrête au prochain point d'arrêt)               | <|>                          => suggestions : [' ']
47 Espace(s) surnuméraire(s) à supprimer. => |continue                 | c                        | relance le programme  (s'arrête au prochain point d'arrêt)               | <|>    => suggestions : [' ']

49 Espace(s) surnuméraire(s) à supprimer. => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|>    => suggestions : [' ']
49 Mot inconnu : yyy => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> yyy
49 Mot inconnu : xx => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> xx
49 Espace(s) surnuméraire(s) à supprimer. => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|>       => suggestions : [' ']
49 Mot inconnu : yyy => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> yyy
49 Mot inconnu : xx => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> xx
49 Espace(s) surnuméraire(s) à supprimer. => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|>          => suggestions : [' ']
49 Mot inconnu : xx => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> xx
49 Mot inconnu : yyy => |break  [yyy.c:]xx     | b [yyy.c:]xx        | place un point d'arrêt à la ligne xx du fichier yyy.c (si indiqué)         | <|> yyy

50 Mot inconnu : breakpoints => |info breakpoints     | info breakpoints | liste les points d'arrêts                                                                      | <|> breakpoints
50 Espace(s) surnuméraire(s) à supprimer. => |info breakpoints     | info breakpoints | liste les points d'arrêts                                                                      | <|>       => suggestions : [' ']
50 Mot inconnu : breakpoints => |info breakpoints     | info breakpoints | liste les points d'arrêts                                                                      | <|> breakpoints
50 Espace(s) surnuméraire(s) à supprimer. => |info breakpoints     | info breakpoints | liste les points d'arrêts                                                                      | <|>                                                                        => suggestions : [' ']

51 Mot inconnu : delete => |delete [x]                | d [x]                   | efface les points d'arrêts si pas d'argument, ou le point d'arrêt correspondant au n° x | <|> delete

53 Mot inconnu : next => |next                      | n                          | exécute une instruction (ne rentre pas dans les fonctions)  peut-être suivi du nombre de ligne à exécuter  | <|> next
53 Espace(s) surnuméraire(s) à supprimer. => |next                      | n                          | exécute une instruction (ne rentre pas dans les fonctions)  peut-être suivi du nombre de ligne à exécuter  | <|>                        => suggestions : [' ']
53 Espace(s) surnuméraire(s) à supprimer. => |next                      | n                          | exécute une instruction (ne rentre pas dans les fonctions)  peut-être suivi du nombre de ligne à exécuter  | <|>                            => suggestions : [' ']
53 Espace(s) surnuméraire(s) à supprimer. => |next                      | n                          | exécute une instruction (ne rentre pas dans les fonctions)  peut-être suivi du nombre de ligne à exécuter  | <|>    => suggestions : [' ']

54 Espace(s) surnuméraire(s) à supprimer. => |step                      | s                          | exécute une instruction (rentre potentiellement dans les fonctions) | <|>                        => suggestions : [' ']
54 Espace(s) surnuméraire(s) à supprimer. => |step                      | s                          | exécute une instruction (rentre potentiellement dans les fonctions) | <|>                            => suggestions : [' ']

55 Espace(s) surnuméraire(s) à supprimer. => |finish                    | f                           | exécute les instructions jusqu'à la sortie de la fonction                    | <|>                      => suggestions : [' ']
55 Espace(s) surnuméraire(s) à supprimer. => |finish                    | f                           | exécute les instructions jusqu'à la sortie de la fonction                    | <|>                             => suggestions : [' ']
55 Espace(s) surnuméraire(s) à supprimer. => |finish                    | f                           | exécute les instructions jusqu'à la sortie de la fonction                    | <|>                      => suggestions : [' ']

56 Mot inconnu : list => |list                        | l                           | affiche 10 lignes de code centrée sur la ligne à exécuter                 | <|> list
56 Espace(s) surnuméraire(s) à supprimer. => |list                        | l                           | affiche 10 lignes de code centrée sur la ligne à exécuter                 | <|>                          => suggestions : [' ']
56 Espace(s) surnuméraire(s) à supprimer. => |list                        | l                           | affiche 10 lignes de code centrée sur la ligne à exécuter                 | <|>                             => suggestions : [' ']
56 Espace(s) surnuméraire(s) à supprimer. => |list                        | l                           | affiche 10 lignes de code centrée sur la ligne à exécuter                 | <|>                   => suggestions : [' ']

57 Mot inconnu : until => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|> until
57 Mot inconnu : xx => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|> xx
57 Espace(s) surnuméraire(s) à supprimer. => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|>                   => suggestions : [' ']
57 Mot inconnu : xx => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|> xx
57 Espace(s) surnuméraire(s) à supprimer. => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|>                        => suggestions : [' ']
57 Mot inconnu : xx => |until xx                 | u xx                      | exécute les instructions jusqu'à la ligne xx                                        <|> xx

60 Mot inconnu : reset => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> reset
60 Mot inconnu : halt => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> halt
60 Espace(s) surnuméraire(s) à supprimer. => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|>         => suggestions : [' ']
60 Mot inconnu : reset => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> reset
60 Mot inconnu : target => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> target
60 Mot inconnu : execution => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> execution
60 Mot inconnu : debug => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> debug
60 Espace(s) surnuméraire(s) à supprimer. => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|>                   => suggestions : [' ']
60 Mot inconnu : debut => |monitor reset halt       |                           | reset la target, permet de recommencer l'execution et le debug depuis le                 debut du code <|> debut

67 Mot inconnu : breakpoints => ==== Placer des points d'arrêt (breakpoints) ==== <|> breakpoints

69 Mot inconnu : bugger => Si vous soupçonnez une fonction particulière de faire bugger votre programme, vous pouvez placer un //breakpoint// (point d'arrêt) avant le lancement de cette fonction. Pour ce faire, utilisez la commande **break mafonction** (sans les parenthèses). <|> bugger
69 Mot inconnu : breakpoint => Si vous soupçonnez une fonction particulière de faire bugger votre programme, vous pouvez placer un //breakpoint// (point d'arrêt) avant le lancement de cette fonction. Pour ce faire, utilisez la commande **break mafonction** (sans les parenthèses). <|> breakpoint
69 Mot inconnu : mafonction => Si vous soupçonnez une fonction particulière de faire bugger votre programme, vous pouvez placer un //breakpoint// (point d'arrêt) avant le lancement de cette fonction. Pour ce faire, utilisez la commande **break mafonction** (sans les parenthèses). <|> mafonction

71 Mot inconnu : namespace => Si la fonction désirée est située dans une classe ou un //namespace// (espace de noms) **niveau_englobant**, elle est accessible depuis **niveau_englobant::mafonction**. <|> namespace
71 Mot inconnu : niveau_englobant => Si la fonction désirée est située dans une classe ou un //namespace// (espace de noms) **niveau_englobant**, elle est accessible depuis **niveau_englobant::mafonction**. <|> niveau_englobant
71 Mot inconnu : niveau_englobant => Si la fonction désirée est située dans une classe ou un //namespace// (espace de noms) **niveau_englobant**, elle est accessible depuis **niveau_englobant::mafonction**. <|> niveau_englobant
71 Une de ces ponctuations est superflue. => Si la fonction désirée est située dans une classe ou un //namespace// (espace de noms) **niveau_englobant**, elle est accessible depuis **niveau_englobant::mafonction**. <|> :: => suggestions : [':', ':']
71 Mot inconnu : mafonction => Si la fonction désirée est située dans une classe ou un //namespace// (espace de noms) **niveau_englobant**, elle est accessible depuis **niveau_englobant::mafonction**. <|> mafonction

73 Mot inconnu : breakpoints => Pour afficher la liste des points d'arrêt, utilisez **info breakpoints**. Vous remarquerez que chaque point d'arrêt est identifié par un numéro : <|> breakpoints

78 Mot inconnu : delete => Ici, il a pour identifiant 1. S'il ne vous intéresse plus, vous pouvez le supprimer avec la commande **delete 1**. <|> delete

87 Mot inconnu : abbrégé => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> abbrégé
87 Il manque un espace. => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> hexa => suggestions : [' hexa']
87 Mot inconnu : hexa => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> hexa
87 Il manque un espace. => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> decimal => suggestions : [' decimal']
87 Mot inconnu : decimal => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> decimal
87 Il manque un espace. => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> float => suggestions : [' float']
87 Mot inconnu : float => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> float
87 Il manque un espace. => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> char => suggestions : [' char']
87 Il manque un espace. => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> string => suggestions : [' string']
87 Mot inconnu : help => ou encore, en abbrégé et en spécifiant un type (x:hexa, d:decimal, f:float, c:char, s:string… help x pour les voir tous): <|> help

95 Mot inconnu : gdb => Il existe de multiples interfaces graphiques pour gdb qui facilitent grandement le débuggage en affichant le code source, créant des schémas représentant les variables, etc. En voici quelques-unes : <|> gdb
95 Mot inconnu : débuggage => Il existe de multiples interfaces graphiques pour gdb qui facilitent grandement le débuggage en affichant le code source, créant des schémas représentant les variables, etc. En voici quelques-unes : <|> débuggage

104 Mot inconnu : GVim => ==== Pour Vim/GVim ==== <|> gvim
106 Mot inconnu : GDB =>   * [[https://www.vim.org/scripts/script.php?script_id=4582|Conque GDB]] <|> gdb

114 Mot inconnu : idb => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> idb
114 Mot inconnu : intel => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> intel
114 Guillemets typographiques ouvrants. => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> " => suggestions : ['«\xa0', '“']
114 Mot inconnu : gdb => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> gdb
114 Guillemets typographiques fermants. => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> " => suggestions : ['\xa0»', '”']
114 Mot inconnu : gdb => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> gdb
114 Mot inconnu : fortran => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> fortran
114 Mot inconnu : fortran => Enfin signalons le concurrent **idb** (d'intel, non libre) qui a un mode "gdb" (même syntaxe) et qui affiche correctement les tableaux, ce qui n'est pas le cas de gdb pour le [[fortran]]. Il s'installe en même temps que le compilateur [[fortran#intel_fortran_compiler|ifort]]. <|> fortran

115 Mot inconnu : ifort => <note>Pas besoin de compiler avec ifort pour déboguer avec idb.</note> <|> ifort
115 Mot inconnu : idb => <note>Pas besoin de compiler avec ifort pour déboguer avec idb.</note> <|> idb
