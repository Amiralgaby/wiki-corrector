
5 Mot inconnu : Knocking [[12:20]] => ====== Port Knocking : sécuriser l'accès à un port ====== <|> knocking

7 Mot inconnu : port-knocking [[5:18]] => Le **port-knocking** est une méthode permettant de modifier le comportement d'un firewall en temps réel pour provoquer l'ouverture d'un port suite au lancement préalable d'une suite de connexions sur des ports distincts dans le bon ordre, à l'instar d'un code frappé à une porte. <|> port-knocking
7 Mot inconnu : firewall [[81:89]] => Le **port-knocking** est une méthode permettant de modifier le comportement d'un firewall en temps réel pour provoquer l'ouverture d'un port suite au lancement préalable d'une suite de connexions sur des ports distincts dans le bon ordre, à l'instar d'un code frappé à une porte. <|> firewall

9 Mot inconnu : Secure [[81:87]] => Cette technique est notamment utilisée pour protéger l'accès au port 22 dédié au Secure shell (SSH) ; elle ne nécessite pas beaucoup de ressources et reste facile à mettre en œuvre. <|> secure
9 Mot inconnu : SSH [[95:98]] => Cette technique est notamment utilisée pour protéger l'accès au port 22 dédié au Secure shell (SSH) ; elle ne nécessite pas beaucoup de ressources et reste facile à mettre en œuvre. <|> ssh

11 Mot inconnu : knocking [[21:29]] => En résumé, **le port knocking est donc une méthode simple pour autoriser un accès distant sur un port non constamment ouvert**. Cela permet d'éviter les scans de ports et certaines attaques. <|> knocking

13 Mot inconnu : port-knocking [[14:27]] => La méthode de port-knocking est considérée comme sécurisée étant donné qu'elle est située à un niveau bas des couches TCP/IP et qu'elle ne requière pas de port ouvert (le service knockd est lui aussi invisible). C'est donc une méthode, mais pas infaillible, permettant de masquer la présence d'un serveur derrière un port. <|> port-knocking
13 Mot inconnu : TCP [[118:121]] => La méthode de port-knocking est considérée comme sécurisée étant donné qu'elle est située à un niveau bas des couches TCP/IP et qu'elle ne requière pas de port ouvert (le service knockd est lui aussi invisible). C'est donc une méthode, mais pas infaillible, permettant de masquer la présence d'un serveur derrière un port. <|> tcp
13 Mot inconnu : knockd [[179:185]] => La méthode de port-knocking est considérée comme sécurisée étant donné qu'elle est située à un niveau bas des couches TCP/IP et qu'elle ne requière pas de port ouvert (le service knockd est lui aussi invisible). C'est donc une méthode, mais pas infaillible, permettant de masquer la présence d'un serveur derrière un port. <|> knockd
17 Espace(s) en fin de ligne à supprimer. [[63:64]] => Pour la suite des opérations, des pré-requis sont nécessaires :  <|>   => suggestions : ['']

27 Mot inconnu : knockd [[64:70]] => Le serveur doit donc avoir un pare-feu et exécuter le service //knockd//. Le service est donc en écoute d'une séquence spécifique (suite de ports associés a un protocole TCP ou UDP). Si la séquence est correcte, alors une commande est exécutée. Généralement, l'adresse ip source est autorisée à accéder au port d'une application à travers le pare-feu. <|> knockd
27 Mot inconnu : TCP [[170:173]] => Le serveur doit donc avoir un pare-feu et exécuter le service //knockd//. Le service est donc en écoute d'une séquence spécifique (suite de ports associés a un protocole TCP ou UDP). Si la séquence est correcte, alors une commande est exécutée. Généralement, l'adresse ip source est autorisée à accéder au port d'une application à travers le pare-feu. <|> tcp
27 Mot inconnu : UDP [[177:180]] => Le serveur doit donc avoir un pare-feu et exécuter le service //knockd//. Le service est donc en écoute d'une séquence spécifique (suite de ports associés a un protocole TCP ou UDP). Si la séquence est correcte, alors une commande est exécutée. Généralement, l'adresse ip source est autorisée à accéder au port d'une application à travers le pare-feu. <|> udp
35 Mot inconnu : SSH [[58:61]] =>   * la seconde méthode à celles qui doivent l'être (comme SSH et IRC). <|> ssh
35 Mot inconnu : IRC [[65:68]] =>   * la seconde méthode à celles qui doivent l'être (comme SSH et IRC). <|> irc

41 Mot inconnu : keep-alive [[35:45]] => ==== Connexions non maintenues (no keep-alive) ==== <|> keep-alive
60 Espace(s) en fin de ligne à supprimer. [[14:15]] => Explications :  <|>   => suggestions : ['']
67 Mot inconnu : openHTTP [[6:14]] =>   * **openHTTP** ouvre le port HTTP 80 si la séquence de ports 7000, 8000 et 9000 a été exécutée <|> openhttp
68 Mot inconnu : closeHTTP [[6:15]] =>   * **closeHTTP** ferme le port HTTP 80 si la séquence de ports 9000, 8000 et 7000 a été exécutée <|> closehttp

70 Guillemets typographiques ouvrants. [[41:42]] => Il est possible de préciser le protocole "frappé" en adaptant la ligne comme suit par exemple :  <|> " => suggestions : ['«\xa0', '“']
70 Guillemets typographiques fermants. [[48:49]] => Il est possible de préciser le protocole "frappé" en adaptant la ligne comme suit par exemple :  <|> " => suggestions : ['\xa0»', '”']
70 Espace(s) en fin de ligne à supprimer. [[95:96]] => Il est possible de préciser le protocole "frappé" en adaptant la ligne comme suit par exemple :  <|>   => suggestions : ['']

75 Mot inconnu : keep-alive [[28:38]] => ==== Connexions maintenues (keep-alive) ==== <|> keep-alive

96 Accord de nombre erroné : « utilisateurs » devrait être au singulier. [[6:18]] => Si un utilisateurs « frappe » dans l'ordre les ports 7000, 8000 puis 9000, la comande sera exécutée (ouvrir le port 22). 10 secondes plus tard, la commande //stop_command// sera exécutée, fermant ainsi le port pour les nouvelles connexions (mais pas celle en cours !) <|> utilisateurs => suggestions : ['utilisateur']
96 Mot inconnu : comande [[78:85]] => Si un utilisateurs « frappe » dans l'ordre les ports 7000, 8000 puis 9000, la comande sera exécutée (ouvrir le port 22). 10 secondes plus tard, la commande //stop_command// sera exécutée, fermant ainsi le port pour les nouvelles connexions (mais pas celle en cours !) <|> comande
96 Mot inconnu : stop_command [[158:170]] => Si un utilisateurs « frappe » dans l'ordre les ports 7000, 8000 puis 9000, la comande sera exécutée (ouvrir le port 22). 10 secondes plus tard, la commande //stop_command// sera exécutée, fermant ainsi le port pour les nouvelles connexions (mais pas celle en cours !) <|> stop_command

101 Mot inconnu : knockd [[27:33]] => Le site officiel du projet knockd (et le fichier de configuration installé par défaut) fait référence à la règle iptables **-A**. Comme vous pouvez le voir, nous utiliserons à la place **-I** pour insérer la règle au début du pare-feu (sinon la règle avec -A ne produit aucun effet puisqu'elle est ajoutée après la règle DROP) <|> knockd
101 Mot inconnu : iptables [[113:121]] => Le site officiel du projet knockd (et le fichier de configuration installé par défaut) fait référence à la règle iptables **-A**. Comme vous pouvez le voir, nous utiliserons à la place **-I** pour insérer la règle au début du pare-feu (sinon la règle avec -A ne produit aucun effet puisqu'elle est ajoutée après la règle DROP) <|> iptables
101 Il manque un espace à côté du tiret. [[255:257]] => Le site officiel du projet knockd (et le fichier de configuration installé par défaut) fait référence à la règle iptables **-A**. Comme vous pouvez le voir, nous utiliserons à la place **-I** pour insérer la règle au début du pare-feu (sinon la règle avec -A ne produit aucun effet puisqu'elle est ajoutée après la règle DROP) <|>  - => suggestions : [' – ', ' — ']
103 Mot inconnu : defaut [[36:42]] => FIXME : Tout dépend de la règle par defaut, si la décision est drop le -A fonctionnera, mais -I fonctionne dans tous les cas. <|> defaut
103 Il manque un espace à côté du tiret. [[70:72]] => FIXME : Tout dépend de la règle par defaut, si la décision est drop le -A fonctionnera, mais -I fonctionne dans tous les cas. <|>  - => suggestions : [' – ', ' — ']
103 Il manque un espace à côté du tiret. [[92:94]] => FIXME : Tout dépend de la règle par defaut, si la décision est drop le -A fonctionnera, mais -I fonctionne dans tous les cas. <|>  - => suggestions : [' – ', ' — ']
106 Espace(s) surnuméraire(s) à supprimer. [[31:33]] =>   * d'utiliser au moins 3 ports  (si vous êtes paranoïaque, vous pouvez en ajoutant autant que nécessaire pour vous rassurer) <|>    => suggestions : [' ']
107 Mot inconnu : TCP [[48:51]] =>   * de mélanger pour chaque port les protocoles TCP et UDP <|> tcp
107 Mot inconnu : UDP [[55:58]] =>   * de mélanger pour chaque port les protocoles TCP et UDP <|> udp
111 Mot inconnu : START_KNOCKD [[73:85]] =>   * pour que le service démarre automatiquement, la valeur de la ligne //START_KNOCKD=// doit être à 1 <|> start_knockd
112 Mot inconnu : décommenter [[62:73]] =>   * pour que le service écoute sur des interfaces, adapter et décommenter la ligne //KNOCKD_OPTS="-i eth0"// (en enlevant le '#') <|> décommenter
112 Mot inconnu : KNOCKD_OPTS [[85:96]] =>   * pour que le service écoute sur des interfaces, adapter et décommenter la ligne //KNOCKD_OPTS="-i eth0"// (en enlevant le '#') <|> knockd_opts
112 Mot inconnu : eth0 [[101:105]] =>   * pour que le service écoute sur des interfaces, adapter et décommenter la ligne //KNOCKD_OPTS="-i eth0"// (en enlevant le '#') <|> eth0
112 Guillemets typographiques fermants. [[105:106]] =>   * pour que le service écoute sur des interfaces, adapter et décommenter la ligne //KNOCKD_OPTS="-i eth0"// (en enlevant le '#') <|> " => suggestions : ['\xa0»', '”']

123 Mot inconnu : telnet [[107:113]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> telnet
123 Guillemets typographiques ouvrants. [[122:123]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> ' => suggestions : ['“', '‘', '‹']
123 Mot inconnu : swiss [[123:128]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> swiss
123 Mot inconnu : army [[129:133]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> army
123 Mot inconnu : knife [[134:139]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> knife
123 Guillemets typographiques fermants. [[139:140]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> ' => suggestions : ['”', '’', '›']
123 Mot inconnu : nc [[143:145]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> nc
123 Typographie : points de suspension. Utilisez le caractère dédié. [[147:150]] => Pour initier une séquence sur les différents ports, vous pouvez utiliser le client de votre choix, comme **telnet** ou le 'swiss army knife' **nc**... <|> ... => suggestions : ['…']

127 Mot inconnu : TCP [[75:78]] => Pour l'utiliser, lancer simplement la commande (l'utilisation du protocole TCP est faite par défaut) : <|> tcp

130 Il faut élider “si” et l’accoler au pronom. [[4:7]] => Ou, si il est nécessaire de préciser dans la combinaison plusieurs protocoles : <|> si  => suggestions : ['s’']

133 Accord de nombre erroné : « combinaisons » devrait être au singulier. [[10:22]] => Ou, si la combinaisons n'utilise que des ports udp : <|> combinaisons => suggestions : ['combinaison']
133 Mot inconnu : udp [[47:50]] => Ou, si la combinaisons n'utilise que des ports udp : <|> udp

136 Mot inconnu : knock [[65:70]] => Pour en savoir plus, exécutez dans un terminal la commande //man knock// <|> knock
