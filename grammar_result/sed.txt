
3 Mot inconnu : Sed [[7:10]] => ====== Sed - Cut ====== <|> sed
3 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[10:13]] => ====== Sed - Cut ====== <|>  -  => suggestions : [' – ', ' — ', ' − ']
3 Mot inconnu : Cut [[13:16]] => ====== Sed - Cut ====== <|> cut

5 Mot inconnu : sed [[2:5]] => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un  <|> sed
5 Mot inconnu : cut [[13:16]] => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un  <|> cut
5 Espace(s) en fin de ligne à supprimer. [[143:144]] => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un  <|>   => suggestions : ['']

6 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:5]] => autre dans un fichier, ou encore supprimer des chaînes de caractères inutiles. Ce sont des outils très puissants. <|> autre => suggestions : ['Autre']

8 Dans la locution “en termes de”, mettez “terme” au pluriel. [[40:51]] => <note>Les possibilités de ces commandes en terme de syntaxe étant tellement vastes que nous n'aborderons que la partie émergée de l'iceberg (cette page étant bien évidemment perfectible dans le temps)</note> <|> en terme de => suggestions : ['en termes de']

12 Mot inconnu : sed [[16:19]] => Pour utiliser **sed** ou **cut**, vous devez lui fournir une chaîne à traiter. Cette chaîne peut provenir : <|> sed
12 Mot inconnu : cut [[27:30]] => Pour utiliser **sed** ou **cut**, vous devez lui fournir une chaîne à traiter. Cette chaîne peut provenir : <|> cut

18 Guillemets typographiques ouvrants. [[0:1]] => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]" <|> " => suggestions : ['«\xa0', '“']
18 Mot inconnu : occurrence_cherchée [[6:25]] => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]" <|> occurrence_cherchée
18 Mot inconnu : occurrence_de_substitution [[32:58]] => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]" <|> occurrence_de_substitution

20 Mot inconnu : sed [[5:8]] => ==== sed - cut et les fichiers ==== <|> sed
20 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[8:11]] => ==== sed - cut et les fichiers ==== <|>  -  => suggestions : [' – ', ' — ', ' − ']
20 Mot inconnu : cut [[11:14]] => ==== sed - cut et les fichiers ==== <|> cut

22 Mot inconnu : sed [[74:77]] => Pour pouvoir traiter un fichier, il est nécessaire de lier le fichier à **sed.** Nous utiliserons la commande **grep** sous la forme : \\ <|> sed
22 Mot inconnu : grep [[112:116]] => Pour pouvoir traiter un fichier, il est nécessaire de lier le fichier à **sed.** Nous utiliserons la commande **grep** sous la forme : \\ <|> grep

29 Mot inconnu : sed [[5:8]] => ==== sed - cut et les variables ==== <|> sed
29 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[8:11]] => ==== sed - cut et les variables ==== <|>  -  => suggestions : [' – ', ' — ', ' − ']
29 Mot inconnu : cut [[11:14]] => ==== sed - cut et les variables ==== <|> cut
41 Guillemets typographiques ouvrants. [[60:61]] =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive") <|> " => suggestions : ['«\xa0', '“']
41 Mot inconnu : sed [[87:90]] =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive") <|> sed
41 Guillemets typographiques ouvrants. [[127:128]] =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive") <|> " => suggestions : ['«\xa0', '“']
41 Guillemets typographiques fermants. [[137:138]] =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive") <|> " => suggestions : ['\xa0»', '”']

46 Mot inconnu : uid [[27:30]] => Nous voulons récupérer l'//uid// ainsi que le //gid// d'un utilisateur en cours. <|> uid
46 Mot inconnu : gid [[48:51]] => Nous voulons récupérer l'//uid// ainsi que le //gid// d'un utilisateur en cours. <|> gid

51 Mot inconnu : uid [[4:7]] => l'//uid// et //gid// de l'utilisateur est stocké dans le fichier /etc/passwd.\\ <|> uid
51 Mot inconnu : gid [[15:18]] => l'//uid// et //gid// de l'utilisateur est stocké dans le fichier /etc/passwd.\\ <|> gid

58 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:4]] => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement : <|> vous => suggestions : ['Vous']
58 Confusion probable. [[26:33]] => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement : <|> et bien => suggestions : ['Eh bien', 'Hé bien']
58 Mot inconnu : uid [[53:56]] => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement : <|> uid
58 Mot inconnu : gid [[64:67]] => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement : <|> gid

63 Espace(s) en fin de ligne à supprimer. [[71:72]] => ces différentes remarques vont nous permettre de fixer des délimiteurs,  <|>   => suggestions : ['']

64 Une de ces ponctuations est superflue. [[39:41]] => isolons donc la chaîne précédant les **::** du reste de la chaîne <|> :: => suggestions : [':', ':']

66 Espace(s) surnuméraire(s) à supprimer. [[105:107]] => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\ <|>    => suggestions : [' ']
66 Une de ces ponctuations est superflue. [[137:139]] => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\ <|> :: => suggestions : [':', ':']
66 Mot inconnu : f1 [[287:289]] => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\ <|> f1

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  Le principe est donc maintenant posé. Effectuons une dernière action afin de mettre en forme le résultat : <|>   => suggestions : ['']
80 Mot inconnu : grep [[17:21]] => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash | <|> grep
80 Mot inconnu : florent [[47:54]] => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash | <|> florent
80 Il manque un espace. [[59:63]] => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash | <|> 1000 => suggestions : [' 1000']
80 Une de ces ponctuations est superflue. [[68:70]] => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash | <|> :: => suggestions : [':', ':']
80 Mot inconnu : florent [[78:85]] => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash | <|> florent

81 Mot inconnu : Etape [[2:7]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> etape
81 Mot inconnu : sed [[17:20]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> sed
81 Guillemets typographiques ouvrants. [[21:22]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> " => suggestions : ['«\xa0', '“']
81 Une de ces ponctuations est superflue. [[24:26]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> :: => suggestions : [':', ':']
81 Mot inconnu : florent [[44:51]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> florent
81 Il manque un espace. [[52:53]] => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  | <|> x => suggestions : [' x']

82 Mot inconnu : Etape [[2:7]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|> etape
82 Mot inconnu : cut [[17:20]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|> cut
82 Il manque un espace à côté du tiret. [[20:22]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|>  - => suggestions : [' – ', ' — ']
82 Mot inconnu : f1 [[28:30]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|> f1
82 Mot inconnu : florent [[45:52]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|> florent
82 Il manque un espace. [[53:54]] => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                | <|> x => suggestions : [' x']

83 Mot inconnu : Etape [[2:7]] => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    | <|> etape
83 Mot inconnu : cut [[17:20]] => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    | <|> cut
83 Il manque un espace à côté du tiret. [[20:22]] => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    | <|>  - => suggestions : [' – ', ' — ']
83 Guillemets typographiques fermants. [[25:26]] => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    | <|> ' => suggestions : ['”', '’', '›']
83 Mot inconnu : f2 [[28:30]] => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    | <|> f2

84 Mot inconnu : Etape [[2:7]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> etape
84 Mot inconnu : sed [[17:20]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> sed
84 Il manque un espace à côté du tiret. [[20:22]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|>  - => suggestions : [' – ', ' — ']
84 Guillemets typographiques ouvrants. [[24:25]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> " => suggestions : ['«\xa0', '“']
84 Mot inconnu : UID [[53:56]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> uid
84 Guillemets typographiques ouvrants. [[68:69]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> " => suggestions : ['«\xa0', '“']
84 Mot inconnu : GID [[97:100]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> gid
84 Mot inconnu : UID [[108:111]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> uid
84 Mot inconnu : GID [[120:123]] => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 | <|> gid
92 Espace(s) en fin de ligne à supprimer. [[37:38]] =>   * L'ordre de traitement est crucial  <|>   => suggestions : ['']
93 Mot inconnu : cut [[32:35]] =>   * Le délimiteur utilisé par **cut** ne peut excéder 1 caractère d'où l'étape 1 visant à remplacer deux caractères consécutifs par un caractère unique remarquable utilisé dans l'étape 2 <|> cut

102 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:3]] => une syntaxe intéressante peut s'avérer parfois très utile notamment pour des occurrences de type chemin de dossier **/chemin/de/fichier**. En effet la présence de caractères **/** peut poser certains problèmes. Afin de pallier cela il est possible d'utiliser une syntaxe différente que voici : <|> une => suggestions : ['Une']
107 Guillemets isolés. [[30:33]] => autres caractères à échapper : " [ ] . / ? , mais pas les () qui doivent être échappées au contraire, seulement pour définir un groupe à mémoriser</note> <|>  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
107 Pas d’espace après ce signe. [[33:35]] => autres caractères à échapper : " [ ] . / ? , mais pas les () qui doivent être échappées au contraire, seulement pour définir un groupe à mémoriser</note> <|> [  => suggestions : ['[']
107 Pas d’espace avant ce signe. [[34:36]] => autres caractères à échapper : " [ ] . / ? , mais pas les () qui doivent être échappées au contraire, seulement pour définir un groupe à mémoriser</note> <|>  ] => suggestions : [']']
107 Pas d’espace avant un point. [[36:38]] => autres caractères à échapper : " [ ] . / ? , mais pas les () qui doivent être échappées au contraire, seulement pour définir un groupe à mémoriser</note> <|>  . => suggestions : ['.']
107 Pas d’espace avant une virgule. [[42:44]] => autres caractères à échapper : " [ ] . / ? , mais pas les () qui doivent être échappées au contraire, seulement pour définir un groupe à mémoriser</note> <|>  , => suggestions : [',']

109 Il manque un espace à côté du tiret. [[86:88]] => Si vous désirez modifier des occurrences dans un fichier vous pouvez préférer l'option -i qui permet d'éditer un  fichier. <|>  - => suggestions : [' – ', ' — ']
109 Espace(s) surnuméraire(s) à supprimer. [[112:114]] => Si vous désirez modifier des occurrences dans un fichier vous pouvez préférer l'option -i qui permet d'éditer un  fichier. <|>    => suggestions : [' ']

112 Mot inconnu : txt [[103:106]] => Va remplacer toutes les occurrences **une occurrence** par **une autre** dans le fichier **/un/fichier.txt** <|> txt

116 Mot inconnu : sed [[0:3]] => sed traite les lignes individuellement (l'une aprés l'autre), il semble donc, au premier abord, incapable de joindre deux lignes séparées par un motif comportant le retour chariot (\n). Heureusement cette difficulté n'est qu'apparente : il suffit de lui indiquer de traiter les deux lignes. <|> sed
116 Mot inconnu : aprés [[46:51]] => sed traite les lignes individuellement (l'une aprés l'autre), il semble donc, au premier abord, incapable de joindre deux lignes séparées par un motif comportant le retour chariot (\n). Heureusement cette difficulté n'est qu'apparente : il suffit de lui indiquer de traiter les deux lignes. <|> aprés

119 Guillemets typographiques ouvrants. [[17:18]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['«\xa0', '“']
119 Guillemets typographiques fermants. [[19:20]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['\xa0»', '”']
119 Mot inconnu : sed [[31:34]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> sed
119 Guillemets typographiques ouvrants. [[72:73]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['«\xa0', '“']
119 Guillemets typographiques fermants. [[74:75]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['\xa0»', '”']
119 Guillemets typographiques ouvrants. [[102:103]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['«\xa0', '“']
119 Guillemets typographiques fermants. [[104:105]] => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules. <|> " => suggestions : ['\xa0»', '”']

129 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. [[0:7]] => devient : <|> devient => suggestions : ['deviens']

140 Guillemets typographiques fermants. [[6:7]] => Où "^M" représente \r. <|> " => suggestions : ['\xa0»', '”']

145 Mot inconnu : ancienneChaine [[22:36]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> anciennechaine
145 Mot inconnu : NouvelleChaine [[51:65]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
145 Mot inconnu : txt [[87:90]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> txt
145 Mot inconnu : sed [[93:96]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> sed
145 Il manque un espace à côté du tiret. [[96:98]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|>  - => suggestions : [' – ', ' — ']
145 Guillemets typographiques ouvrants. [[100:101]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> ' => suggestions : ['“', '‘', '‹']
145 Mot inconnu : ancienneChaine [[103:117]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> anciennechaine
145 Mot inconnu : NouvelleChaine [[118:132]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
145 Mot inconnu : txt [[141:144]] => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt|| <|> txt

146 Mot inconnu : ancienneChaine [[57:71]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> anciennechaine
146 Mot inconnu : NouvelleChaine [[86:100]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
146 Mot inconnu : txt [[122:125]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> txt
146 Mot inconnu : sed [[128:131]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> sed
146 Il manque un espace à côté du tiret. [[131:133]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|>  - => suggestions : [' – ', ' — ']
146 Guillemets typographiques ouvrants. [[135:136]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> ' => suggestions : ['“', '‘', '‹']
146 Mot inconnu : ancienneChaine [[138:152]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> anciennechaine
146 Mot inconnu : NouvelleChaine [[155:169]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
146 Mot inconnu : txt [[178:181]] => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> txt

147 Mot inconnu : ancienneChaine [[53:67]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> anciennechaine
147 Mot inconnu : NouvelleChaine [[82:96]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
147 Mot inconnu : txt [[118:121]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> txt
147 Mot inconnu : sed [[124:127]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> sed
147 Il manque un espace à côté du tiret. [[127:129]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|>  - => suggestions : [' – ', ' — ']
147 Guillemets typographiques ouvrants. [[131:132]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> ' => suggestions : ['“', '‘', '‹']
147 Mot inconnu : ancienneChaine [[136:150]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> anciennechaine
147 Mot inconnu : NouvelleChaine [[153:167]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> nouvellechaine
147 Mot inconnu : txt [[176:179]] => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt|| <|> txt

148 Guillemets typographiques ouvrants. [[40:41]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> ' => suggestions : ['“', '‘', '‹']
148 Mot inconnu : foo [[41:44]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> foo
148 Guillemets typographiques fermants. [[44:45]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> ' => suggestions : ['”', '’', '›']
148 Mot inconnu : ancienneChaine [[56:70]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> anciennechaine
148 Mot inconnu : NouvelleChaine [[85:99]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> nouvellechaine
148 Mot inconnu : txt [[121:124]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> txt
148 Mot inconnu : sed [[126:129]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> sed
148 Il manque un espace à côté du tiret. [[129:131]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|>  - => suggestions : [' – ', ' — ']
148 Mot inconnu : foo [[135:138]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> foo
148 Écriture invariable. Utilisez un point médian. [[135:140]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> foo/s => suggestions : ['foo·s']
148 Mot inconnu : ancienneChaine [[143:157]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> anciennechaine
148 Mot inconnu : NouvelleChaine [[158:172]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> nouvellechaine
148 Guillemets typographiques fermants. [[174:175]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> ' => suggestions : ['”', '’', '›']
148 Mot inconnu : txt [[181:184]] => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt|| <|> txt

152 Mot inconnu : sed [[278:281]] => Vous l'aurez bien compris avec ces deux commandes en poche vous pouvez foncièrement faire tout ce que vous souhaitez. Je ne peux que vous encourager à lire la documentation concernant l'usage et la syntaxe de ces deux commandes que vous trouverez en tapant respectivement **man sed** et **man cut** \\ <|> sed
152 Mot inconnu : cut [[293:296]] => Vous l'aurez bien compris avec ces deux commandes en poche vous pouvez foncièrement faire tout ce que vous souhaitez. Je ne peux que vous encourager à lire la documentation concernant l'usage et la syntaxe de ces deux commandes que vous trouverez en tapant respectivement **man sed** et **man cut** \\ <|> cut
