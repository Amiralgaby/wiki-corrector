4 Mot inconnu : Sed => ====== Sed - Cut ======
4 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ====== Sed - Cut ======
4 Mot inconnu : Cut => ====== Sed - Cut ======

6 Mot inconnu : sed => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un 
6 Mot inconnu : cut => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un 
6 Espace(s) en fin de ligne à supprimer. => **sed** et **cut** permettent de modifier ou de supprimer une partie d’une chaîne de caractères, par exemple pour remplacer un caractère par un 

7 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => autre dans un fichier, ou encore supprimer des chaînes de caractères inutiles. Ce sont des outils très puissants.

9 Dans la locution “en termes de”, mettez “terme” au pluriel. => <note>Les possibilités de ces commandes en terme de syntaxe étant tellement vastes que nous n'aborderons que la partie émergée de l'iceberg (cette page étant bien évidemment perfectible dans le temps)</note>

13 Mot inconnu : sed => Pour utiliser **sed** ou **cut**, vous devez lui fournir une chaîne à traiter. Cette chaîne peut provenir :
13 Mot inconnu : cut => Pour utiliser **sed** ou **cut**, vous devez lui fournir une chaîne à traiter. Cette chaîne peut provenir :
13 Il manque un espace insécable. => Pour utiliser **sed** ou **cut**, vous devez lui fournir une chaîne à traiter. Cette chaîne peut provenir :

15 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * d'un fichier

16 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * d'une variable

19 Guillemets typographiques ouvrants. => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]"
19 Mot inconnu : occurrence_cherchée => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]"
19 Mot inconnu : occurrence_de_substitution => "s/[//occurrence_cherchée//]/[//occurrence_de_substitution//]/[//comportement//]"

21 Mot inconnu : sed => ==== sed - cut et les fichiers ====
21 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ==== sed - cut et les fichiers ====
21 Mot inconnu : cut => ==== sed - cut et les fichiers ====

23 Mot inconnu : sed => Pour pouvoir traiter un fichier, il est nécessaire de lier le fichier à **sed.** Nous utiliserons la commande **grep** sous la forme : \\
23 Mot inconnu : grep => Pour pouvoir traiter un fichier, il est nécessaire de lier le fichier à **sed.** Nous utiliserons la commande **grep** sous la forme : \\
23 Il manque un espace insécable. => Pour pouvoir traiter un fichier, il est nécessaire de lier le fichier à **sed.** Nous utiliserons la commande **grep** sous la forme : \\

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   grep occurrence /fichier/a/parcourir | sed ... \\
24 Mot inconnu : grep =>   grep occurrence /fichier/a/parcourir | sed ... \\
24 Mot inconnu : sed =>   grep occurrence /fichier/a/parcourir | sed ... \\
24 Typographie : points de suspension. Utilisez le caractère dédié. =>   grep occurrence /fichier/a/parcourir | sed ... \\

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   grep occurrence /fichier/a/parcourir | cut ... \\
25 Mot inconnu : grep =>   grep occurrence /fichier/a/parcourir | cut ... \\
25 Mot inconnu : cut =>   grep occurrence /fichier/a/parcourir | cut ... \\
25 Typographie : points de suspension. Utilisez le caractère dédié. =>   grep occurrence /fichier/a/parcourir | cut ... \\

27 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...
27 Mot inconnu : grep =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...
27 Mot inconnu : cut =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...
27 Typographie : points de suspension. Utilisez le caractère dédié. =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...
27 Mot inconnu : sed =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...
27 Typographie : points de suspension. Utilisez le caractère dédié. =>   grep occurrence /fichier/a/parcourir | cut ... | sed ...

30 Mot inconnu : sed => ==== sed - cut et les variables ====
30 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ==== sed - cut et les variables ====
30 Mot inconnu : cut => ==== sed - cut et les variables ====

33 Guillemets typographiques ouvrants. => <code>export chaine="ceci est une chaine de caractères"</code>
33 Guillemets typographiques fermants. => <code>export chaine="ceci est une chaine de caractères"</code>
36 Il manque un espace à côté du tiret. => <code>echo $chaine | sed -e "s/ /_/g"</code> 
36 Guillemets typographiques ouvrants. => <code>echo $chaine | sed -e "s/ /_/g"</code> 
36 Guillemets typographiques fermants. => <code>echo $chaine | sed -e "s/ /_/g"</code> 
36 Espace(s) en fin de ligne à supprimer. => <code>echo $chaine | sed -e "s/ /_/g"</code> 

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Guillemets typographiques ouvrants. =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Mot inconnu : mplayer =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Mot inconnu : avi =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Guillemets typographiques fermants. =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Guillemets typographiques ouvrants. =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Mot inconnu : mplayer =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Mot inconnu : avi =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera
41 Guillemets typographiques fermants. =>   * ''mplayer mon fichier.avi'' ne fonctionne pas tandis que ''mplayer mon**_**fichier.avi'' fonctionnera

42 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive")
42 Guillemets typographiques ouvrants. =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive")
42 Mot inconnu : sed =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive")
42 Guillemets typographiques ouvrants. =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive")
42 Guillemets typographiques fermants. =>   * Le **g** positionné après l'occurrence de substitution ("s/ /_/**g**") indique à **sed** de se comporter de façon globale ("récursive")

45 Il manque un espace insécable. => ===== Exemple : =====

47 Mot inconnu : uid => Nous voulons récupérer l'//uid// ainsi que le //gid// d'un utilisateur en cours.
47 Mot inconnu : gid => Nous voulons récupérer l'//uid// ainsi que le //gid// d'un utilisateur en cours.

48 Mot inconnu : linux => Sous linux, l'utilisateur courant est défini dans la variable **$USER** \\

49 Il manque un espace insécable. => La preuve en est :

50 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   echo $USER
50 Mot inconnu : echo =>   echo $USER

52 Mot inconnu : uid => l'//uid// et //gid// de l'utilisateur est stocké dans le fichier /etc/passwd.\\
52 Mot inconnu : gid => l'//uid// et //gid// de l'utilisateur est stocké dans le fichier /etc/passwd.\\
57 Il manque un espace. => <code>florent:x:1000:1000::/home/florent:/bin/bash</code>
57 Une de ces ponctuations est superflue. => <code>florent:x:1000:1000::/home/florent:/bin/bash</code>
57 Il manque un espace insécable. => <code>florent:x:1000:1000::/home/florent:/bin/bash</code>

59 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Il manque un espace insécable. => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Il manque un espace insécable. => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Confusion probable. => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Mot inconnu : uid => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Mot inconnu : gid => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :
59 Il manque un espace insécable. => vous me direz : parfait ! Et bien nous avons notre //uid// et //gid//. Certes mais le résultat est difficilement exploitable vous en conviendrez. Nous allons donc séparer de façon distincte les deux valeurs. Il nous faut pour cela analyser le résultat de la commande précédente pour définir des règles de traitement :

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - //uid// et //gid// sont sous la forme de chiffres
60 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - //uid// et //gid// sont sous la forme de chiffres
60 Mot inconnu : uid =>   - //uid// et //gid// sont sous la forme de chiffres
60 Mot inconnu : gid =>   - //uid// et //gid// sont sous la forme de chiffres

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - les informations sont séparées par **:**
61 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - les informations sont séparées par **:**

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - la liste des paths est introduite par **::**
62 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - la liste des paths est introduite par **::**
62 Mot inconnu : paths =>   - la liste des paths est introduite par **::**
62 Une de ces ponctuations est superflue. =>   - la liste des paths est introduite par **::**

64 Espace(s) en fin de ligne à supprimer. => ces différentes remarques vont nous permettre de fixer des délimiteurs, 

65 Une de ces ponctuations est superflue. => isolons donc la chaîne précédant les **::** du reste de la chaîne
66 Guillemets typographiques ouvrants. => <code>grep $USER /etc/passwd | sed "s/::/%/" |cut -d'%' -f1</code>
66 Une de ces ponctuations est superflue. => <code>grep $USER /etc/passwd | sed "s/::/%/" |cut -d'%' -f1</code>
66 Il manque un espace à côté du tiret. => <code>grep $USER /etc/passwd | sed "s/::/%/" |cut -d'%' -f1</code>

67 Espace(s) surnuméraire(s) à supprimer. => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\
67 Une de ces ponctuations est superflue. => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\
67 Mot inconnu : f1 => // Parcourir le fichier **/etc/passwd** et retourner la ligne concernant le nom de l'utilisateur en cours  **|** remplacer **(s)** les **::** par **%** dans le résultat **|** dans le résultat, supprimer (-d) l'occurrence **'%'** et tout ce qui la suit la première occurrence vérifiant (-f1)// \\
69 Il manque un espace. => <code>florent:x:1000:1000</code>

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Le principe est donc maintenant posé. Effectuons une dernière action afin de mettre en forme le résultat :
71 Il manque un espace insécable. =>  Le principe est donc maintenant posé. Effectuons une dernière action afin de mettre en forme le résultat :

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Guillemets typographiques ouvrants. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Une de ces ponctuations est superflue. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Guillemets typographiques fermants. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Il manque un espace à côté du tiret. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Il manque un espace à côté du tiret. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Guillemets typographiques fermants. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Il manque un espace à côté du tiret. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Guillemets typographiques ouvrants. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>
72 Guillemets typographiques ouvrants. =>  <code>grep $USER /etc/passwd | sed "s/::/%/g" |cut -d'%' -f1 |cut -d'x' -f2 |sed -e "s/:\([0-9][0-9]*\)/UID=\1\n/"  -e "s/:\([0-9][0-9]*\)/GID=\1/"</code>

78 Il manque un espace insécable. => Décortiquons les différentes étapes du traitement :

80 Espace(s) surnuméraire(s) à supprimer. => |              ^ Commande                  ^ Sortie          ^
80 Espace(s) surnuméraire(s) à supprimer. => |              ^ Commande                  ^ Sortie          ^

81 Espace(s) surnuméraire(s) à supprimer. => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Mot inconnu : grep => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Espace(s) surnuméraire(s) à supprimer. => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Mot inconnu : florent => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Il manque un espace. => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Une de ces ponctuations est superflue. => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Mot inconnu : florent => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |
81 Il manque un espace insécable. => ^ origine      | grep $USER /etc/passwd    | **florent**:x:1000:1000::/home/**florent**:/bin/bash |

82 Mot inconnu : Etape => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Mot inconnu : sed => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Guillemets typographiques ouvrants. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Une de ces ponctuations est superflue. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Mot inconnu : florent => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Il manque un espace. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Il manque un espace insécable. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |
82 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 1      | sed "s/::/%/"            | florent:x:1000:1000**%**/home/florent:/bin/bash  |

83 Mot inconnu : Etape => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Mot inconnu : cut => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Il manque un espace à côté du tiret. => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Mot inconnu : f1 => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Mot inconnu : florent => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Il manque un espace. => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |
83 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 2      | cut -d'%' -f1             | florent:x:1000:1000                |

84 Mot inconnu : Etape => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Mot inconnu : cut => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Il manque un espace à côté du tiret. => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Guillemets typographiques fermants. => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Mot inconnu : f2 => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |
84 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 3      | cut -d'x' -f2             | :1000:1000    |

85 Mot inconnu : Etape => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Espace(s) surnuméraire(s) à supprimer. => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Mot inconnu : sed => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Il manque un espace à côté du tiret. => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Guillemets typographiques ouvrants. => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Mot inconnu : UID => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Guillemets typographiques ouvrants. => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Mot inconnu : GID => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Mot inconnu : UID => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |
85 Mot inconnu : GID => ^ Etape 4      | sed -e "s/:\([0-9][0-9][0-9][0-9]\)/UID=\1\n/"  -e "s/:\([0-9][0-9][0-9][0-9]\)/GID=\1/" | UID=1000 \\ GID=1000 |

87 Il manque un espace insécable. => plus simple :

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Mot inconnu : sed =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Il manque un espace à côté du tiret. =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Mot inconnu : echo =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Une de ces ponctuations est superflue. =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Mot inconnu : UID =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Mot inconnu : nGID =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd
88 Guillemets typographiques fermants. =>   sed -n -e "/`echo $USER`/s/[^:]*:[^:]*:\([^:]*\):\([^:]*\):.*/UID=\1\nGID=\2/p" /etc/passwd

93 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * L'ordre de traitement est crucial 
93 Espace(s) en fin de ligne à supprimer. =>   * L'ordre de traitement est crucial 

94 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le délimiteur utilisé par **cut** ne peut excéder 1 caractère d'où l'étape 1 visant à remplacer deux caractères consécutifs par un caractère unique remarquable utilisé dans l'étape 2
94 Mot inconnu : cut =>   * Le délimiteur utilisé par **cut** ne peut excéder 1 caractère d'où l'étape 1 visant à remplacer deux caractères consécutifs par un caractère unique remarquable utilisé dans l'étape 2

95 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * L'étape 4 introduit quelques syntaxes intéressantes :
95 Il manque un espace insécable. =>   * L'étape 4 introduit quelques syntaxes intéressantes :

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      - sed -e "[règle 1]" -e "[règle 2]" 
96 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>      - sed -e "[règle 1]" -e "[règle 2]" 
96 Mot inconnu : sed =>      - sed -e "[règle 1]" -e "[règle 2]" 
96 Il manque un espace à côté du tiret. =>      - sed -e "[règle 1]" -e "[règle 2]" 
96 Espace(s) en fin de ligne à supprimer. =>      - sed -e "[règle 1]" -e "[règle 2]" 

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%
97 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%
97 Mot inconnu : sed =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%
97 Guillemets typographiques ouvrants. =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%
97 Avec une unité de mesure, mettez un espace insécable. =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%
97 Il manque un espace. =>      - sed "s/\(occurrence\)/%\1%/" qui retourne %occurrence%

98 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      - sed "s/\(occurrence\)/\1\n/" qui insère un retour à la ligne à la fin de l'occurrence
98 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>      - sed "s/\(occurrence\)/\1\n/" qui insère un retour à la ligne à la fin de l'occurrence
98 Mot inconnu : sed =>      - sed "s/\(occurrence\)/\1\n/" qui insère un retour à la ligne à la fin de l'occurrence
98 Guillemets typographiques ouvrants. =>      - sed "s/\(occurrence\)/\1\n/" qui insère un retour à la ligne à la fin de l'occurrence

103 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => une syntaxe intéressante peut s'avérer parfois très utile notamment pour des occurrences de type chemin de dossier **/chemin/de/fichier**. En effet la présence de caractères **/** peut poser certains problèmes. Afin de pallier cela il est possible d'utiliser une syntaxe différente que voici :
103 Il manque un espace insécable. => une syntaxe intéressante peut s'avérer parfois très utile notamment pour des occurrences de type chemin de dossier **/chemin/de/fichier**. En effet la présence de caractères **/** peut poser certains problèmes. Afin de pallier cela il est possible d'utiliser une syntaxe différente que voici :

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sed -e "s|/chemin/vers/un/fichier|/chemin/vers/un autre|"
104 Mot inconnu : sed =>   sed -e "s|/chemin/vers/un/fichier|/chemin/vers/un autre|"
104 Il manque un espace à côté du tiret. =>   sed -e "s|/chemin/vers/un/fichier|/chemin/vers/un autre|"
104 Guillemets typographiques ouvrants. =>   sed -e "s|/chemin/vers/un/fichier|/chemin/vers/un autre|"

107 Il manque un espace à côté du tiret. => Si vous désirez modifier des occurrences dans un fichier vous pouvez préférer l'option -i qui permet d'éditer un  fichier.
107 Espace(s) surnuméraire(s) à supprimer. => Si vous désirez modifier des occurrences dans un fichier vous pouvez préférer l'option -i qui permet d'éditer un  fichier.

108 Il manque un espace insécable. => Ainsi :

109 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt
109 Mot inconnu : sed =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt
109 Il manque un espace à côté du tiret. =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt
109 Guillemets typographiques ouvrants. =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt
109 Guillemets typographiques fermants. =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt
109 Mot inconnu : txt =>   sed -i "s/une occurrence/une autre/g" /un/fichier.txt

110 Mot inconnu : txt => Va remplacer toutes les occurrences **une occurrence** par **une autre** dans le fichier **/un/fichier.txt**

114 Mot inconnu : sed => sed traite les lignes individuellement (l'une aprés l'autre), il semble donc, au premier abord, incapable de joindre deux lignes séparées par un motif comportant le retour chariot (\n). Heureusement cette difficulté n'est qu'apparente : il suffit de lui indiquer de traiter les deux lignes.
114 Mot inconnu : aprés => sed traite les lignes individuellement (l'une aprés l'autre), il semble donc, au premier abord, incapable de joindre deux lignes séparées par un motif comportant le retour chariot (\n). Heureusement cette difficulté n'est qu'apparente : il suffit de lui indiquer de traiter les deux lignes.
114 Il manque un espace insécable. => sed traite les lignes individuellement (l'une aprés l'autre), il semble donc, au premier abord, incapable de joindre deux lignes séparées par un motif comportant le retour chariot (\n). Heureusement cette difficulté n'est qu'apparente : il suffit de lui indiquer de traiter les deux lignes.

115 Il manque un espace insécable. => Exemple : joindre à la ligne précédente chaque ligne commençant par un espace (soit substituer un espace simple aux deux caractères saut de ligne puis espace)
116 Guillemets typographiques ouvrants. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace insécable. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace insécable. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace insécable. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>
116 Il manque un espace insécable. => <code>sed 'N;s/\n / /g;P;D;' fichier</code>

117 Guillemets typographiques ouvrants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Guillemets typographiques fermants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Mot inconnu : sed => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Guillemets typographiques ouvrants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Guillemets typographiques fermants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Guillemets typographiques ouvrants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.
117 Guillemets typographiques fermants. => Dans cet exemple "N" indique à sed de lire également la ligne suivante, "P" d'afficher le résultat et "D" d'effacer la ligne suivante (puisqu'elle a déjà été lue). Les différentes commandes sont séparées par des points-virgules.

119 Il manque un espace insécable. => Le texte suivant :

122 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  est incontestablement un beau succès.

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  aux heureux utilisateurs de cette distribution.

127 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => devient :
127 Il manque un espace insécable. => devient :

134 Il manque un espace insécable. => Et pour finir la commande à saisir pour transformer les fins de lignes DOS (\r\n] en fins de ligne UNIX (\n) :

138 Guillemets typographiques fermants. => Où "^M" représente \r.

142 Il manque un espace insécable. => ||**Comment faire ?**|**Commandes**||

143 Mot inconnu : ancienneChaine => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : NouvelleChaine => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : txt => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : sed => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Il manque un espace à côté du tiret. => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Guillemets typographiques ouvrants. => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : ancienneChaine => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : NouvelleChaine => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||
143 Mot inconnu : txt => ||Remplacer la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine/NouvelleChaine/' /toto.txt||

144 Mot inconnu : ancienneChaine => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : NouvelleChaine => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : txt => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : sed => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Il manque un espace à côté du tiret. => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Guillemets typographiques ouvrants. => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : ancienneChaine => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : NouvelleChaine => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||
144 Mot inconnu : txt => ||Remplacer la ligne complète qui commence par la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/ancienneChaine.*/NouvelleChaine/' /toto.txt||

145 Mot inconnu : ancienneChaine => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : NouvelleChaine => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : txt => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : sed => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Il manque un espace à côté du tiret. => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Guillemets typographiques ouvrants. => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : ancienneChaine => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : NouvelleChaine => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||
145 Mot inconnu : txt => ||Remplacer la ligne complète qui contient la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt | sed -i 's/.*ancienneChaine.*/NouvelleChaine/' /toto.txt||

146 Guillemets typographiques ouvrants. => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : foo => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Guillemets typographiques fermants. => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : ancienneChaine => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : NouvelleChaine => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : txt => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : sed => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Il manque un espace à côté du tiret. => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : foo => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Écriture invariable. Utilisez un point médian. => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : ancienneChaine => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : NouvelleChaine => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Guillemets typographiques fermants. => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||
146 Mot inconnu : txt => ||Remplacer dans chaque ligne contenant 'foo' la chaîne ancienneChaine par la chaîne NouvelleChaine dans le fichier toto.txt |sed -i '/foo/s/./ancienneChaine/NouvelleChaine/g' toto.txt||

150 Mot inconnu : sed => Vous l'aurez bien compris avec ces deux commandes en poche vous pouvez foncièrement faire tout ce que vous souhaitez. Je ne peux que vous encourager à lire la documentation concernant l'usage et la syntaxe de ces deux commandes que vous trouverez en tapant respectivement **man sed** et **man cut** \\
150 Mot inconnu : cut => Vous l'aurez bien compris avec ces deux commandes en poche vous pouvez foncièrement faire tout ce que vous souhaitez. Je ne peux que vous encourager à lire la documentation concernant l'usage et la syntaxe de ces deux commandes que vous trouverez en tapant respectivement **man sed** et **man cut** \\

152 Il manque un espace. => Il ne vous reste plus qu'à intégrer ces connaissances à vos [[:tutoriel:script_shell|scripts shell]] 
152 Espace(s) en fin de ligne à supprimer. => Il ne vous reste plus qu'à intégrer ces connaissances à vos [[:tutoriel:script_shell|scripts shell]] 

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : elflord =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : unix =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : sed =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : html =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : Tutorial =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : SED =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Il manque un espace insécable. =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Incohérence. Ceci est un verbe à la 2ᵉ personne du singulier. Sujet (“tu” ou “toi qui”) introuvable. =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne
155 Mot inconnu : multiligne =>   * [[http://www.panix.com/~elflord/unix/sed.html|Tutorial SED]] (en) : tutoriel qui explique entres autres comment faire de la recherche multiligne

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.commentcamarche.net/faq/9536-sed-introduction-a-sed-part-i|Explications completes]] (fr) : très bon tutoriel sur l'utilisation de sed ainsi que de tres bonnes explications du fonctionnement
156 Mot inconnu : completes =>   * [[http://www.commentcamarche.net/faq/9536-sed-introduction-a-sed-part-i|Explications completes]] (fr) : très bon tutoriel sur l'utilisation de sed ainsi que de tres bonnes explications du fonctionnement
156 Il manque un espace insécable. =>   * [[http://www.commentcamarche.net/faq/9536-sed-introduction-a-sed-part-i|Explications completes]] (fr) : très bon tutoriel sur l'utilisation de sed ainsi que de tres bonnes explications du fonctionnement
156 Mot inconnu : sed =>   * [[http://www.commentcamarche.net/faq/9536-sed-introduction-a-sed-part-i|Explications completes]] (fr) : très bon tutoriel sur l'utilisation de sed ainsi que de tres bonnes explications du fonctionnement
156 Mot inconnu : tres =>   * [[http://www.commentcamarche.net/faq/9536-sed-introduction-a-sed-part-i|Explications completes]] (fr) : très bon tutoriel sur l'utilisation de sed ainsi que de tres bonnes explications du fonctionnement

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.shellunix.com/sed.html | Tutorial SED]] (fr) : petit tutoriel simple en français
157 Mot inconnu : Tutorial =>   * [[http://www.shellunix.com/sed.html | Tutorial SED]] (fr) : petit tutoriel simple en français
157 Mot inconnu : SED =>   * [[http://www.shellunix.com/sed.html | Tutorial SED]] (fr) : petit tutoriel simple en français
157 Il manque un espace insécable. =>   * [[http://www.shellunix.com/sed.html | Tutorial SED]] (fr) : petit tutoriel simple en français

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.
158 Mot inconnu : SED =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.
158 Apostrophe incorrecte. =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.
158 Guillemets typographiques fermants. =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.
158 Espace(s) surnuméraire(s) à supprimer. =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.
158 Mot inconnu : sed =>   * [[http://www.scotchlinux.tuxfamily.org/doc/sed.php|Man de SED illustrée]](fr): Ce qu' on apprend  à partir de la page de manuel de sed.

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://man2linux.blogspot.com/2010/11/sed.html|SED explications]] (fr) : Exemples sur l'utilisation de la commande SED
159 Mot inconnu : SED =>   * [[http://man2linux.blogspot.com/2010/11/sed.html|SED explications]] (fr) : Exemples sur l'utilisation de la commande SED
159 Il manque un espace insécable. =>   * [[http://man2linux.blogspot.com/2010/11/sed.html|SED explications]] (fr) : Exemples sur l'utilisation de la commande SED
159 Mot inconnu : SED =>   * [[http://man2linux.blogspot.com/2010/11/sed.html|SED explications]] (fr) : Exemples sur l'utilisation de la commande SED

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.neoflow.fr/tutoriels.item.237/Trier-les-lignes-d-un-fichier-selon-un-mot.html|Trier les lignes d'un fichier selon un mot avec SED]]
160 Mot inconnu : SED =>   * [[http://www.neoflow.fr/tutoriels.item.237/Trier-les-lignes-d-un-fichier-selon-un-mot.html|Trier les lignes d'un fichier selon un mot avec SED]]

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.neoflow.fr/tutoriels.item.236/Enlever-les-commentaires-d%27un-fichier.html|Enlever les commentaires d'un fichier avec SED]]
161 Mot inconnu : SED =>   * [[http://www.neoflow.fr/tutoriels.item.236/Enlever-les-commentaires-d%27un-fichier.html|Enlever les commentaires d'un fichier avec SED]]

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://fr.wikipedia.org/wiki/Stream_Editor|page Wikipedia]]
162 Mot inconnu : Wikipedia =>   * [[https://fr.wikipedia.org/wiki/Stream_Editor|page Wikipedia]]

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://forum.macbidouille.com/index.php?showtopic=128499|supprimer \n]]

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.commentcamarche.net/faq/5978-sed-conversion-retours-chariots-dos-crlf-unix-lf|retour chariot DOS]]

167 Il manque un espace insécable. => Contributeurs : [[utilisateurs/va-nu-pied|flo|va-nu-pied]]
167 Mot inconnu : flo => Contributeurs : [[utilisateurs/va-nu-pied|flo|va-nu-pied]]
