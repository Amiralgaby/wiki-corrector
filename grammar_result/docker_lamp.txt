
5 Mot inconnu : LAMP => ====== Monter un serveur LAMP grâce à Docker ====== <|> lamp
13 Espace(s) en fin de ligne à supprimer. => Nous allons considérer 2 méthodes : une simple, l'autre plus avancée.\\  <|>   => suggestions : ['']

17 Incohérence. Ceci est un verbe à la 2ᵉ personne du singulier. Sujet (“tu” ou “toi qui”) introuvable. => <note tip>De nombreuses images crées par la communauté sont disponibles sur le [[https://hub.docker.com/|Docker Hub]] et d'autres plus officielles sur le [[https://store.docker.com/|Docker Store]].</note> <|> crées => suggestions : ['crée']

26 Mot inconnu : sudo => <note important>Cette méthode pose un problème de sécurité. Il devient, en effet, possible d'élever les privilèges de l'utilisateur sans entrer à nouveau de mot de passe. Si vous êtes sur un serveur en production n'entrez pas cette commande et utilisez la commande **sudo docker** au lieu de **docker** pour la suite des opérations.</note> <|> sudo

34 Conjugaison erronée. Accord avec “les fichiers…”. Le verbe devrait être à la 3ᵉ personne du pluriel. => Par défaut les modifications apportées aux fichiers d'un conteneur ne sont pas persistantes (tout est réinitialisé à chaque lancement du conteneur). L'intérêt de l'option **-v** (volume) de Docker est de créer une sorte de lien symbolique entre le conteneur et le système hôte, ainsi les fichiers modifiés par le conteneur persisterons sur le système. <|> persisterons => suggestions : ['persisteront']

36 Le verbe devrait être à l’infinitif. => Commençons donc par créer des répertoires pour le contenu que l'on souhaite modifier et conserver, en l'occurrence les fichiers du site et les bases de donnés : <|> donnés => suggestions : ['donner']

42 Espace(s) en fin de ligne à supprimer. => Pour la suite, à vous de choisir entre les deux méthodes en fonction de vos besoins.  <|>   => suggestions : ['']

47 Mot inconnu : LAMP => Pour cette méthode, choisissons une image contenant la pile LAMP complète.\\  <|> lamp
47 Espace(s) en fin de ligne à supprimer. => Pour cette méthode, choisissons une image contenant la pile LAMP complète.\\  <|>   => suggestions : ['']

52 Mot inconnu : mysql => L'option **-v** (volume) relie les répertoires locaux **~/www** et **~/mysql** aux répertoires **/var/www/html** et **/var/lib/mysql** de l'image Debian dans le conteneur.\\  <|> mysql
52 Espace(s) en fin de ligne à supprimer. => L'option **-v** (volume) relie les répertoires locaux **~/www** et **~/mysql** aux répertoires **/var/www/html** et **/var/lib/mysql** de l'image Debian dans le conteneur.\\  <|>   => suggestions : ['']

53 Mot inconnu : MySQL => L'option **-p** (port) relie les ports qui nous intéressent du conteneur aux ports de notre machine locale. Ici le port 80 (HTTP) et le port 3306 (MySQL).\\  <|> mysql
53 Espace(s) en fin de ligne à supprimer. => L'option **-p** (port) relie les ports qui nous intéressent du conteneur aux ports de notre machine locale. Ici le port 80 (HTTP) et le port 3306 (MySQL).\\  <|>   => suggestions : ['']

54 Il manque un espace. => L'option **%%--%%restart=always** permet de relancer le conteneur à chaque démarrage de Docker (donc au démarrage de l'ordinateur). <|> restart => suggestions : [' restart']
54 Mot inconnu : restart => L'option **%%--%%restart=always** permet de relancer le conteneur à chaque démarrage de Docker (donc au démarrage de l'ordinateur). <|> restart
54 Mot inconnu : always => L'option **%%--%%restart=always** permet de relancer le conteneur à chaque démarrage de Docker (donc au démarrage de l'ordinateur). <|> always

61 Mot inconnu : mysql => Les bases de données seront sauvegardées dans notre répertoire **~/mysql**.\\  <|> mysql
61 Espace(s) en fin de ligne à supprimer. => Les bases de données seront sauvegardées dans notre répertoire **~/mysql**.\\  <|>   => suggestions : ['']

63 Mot inconnu : localhost => Avec cette image Docker l'utilisateur par défaut pour les bases de données devrait être **admin** avec le mot de passe **admin** (hôte **localhost**). <|> localhost
71 Mot inconnu : gd =>   * Pour **Apache/PHP** nous allons choisir [[https://hub.docker.com/r/lavoweb/php-5.6/|celle-ci]], basée sur l'[[https://hub.docker.com/r/library/php/|image fournie officiellement par PHP]], mais à laquelle on a ajouté quelques librairies bien utiles (**gd**, **zip**, **mcrypt**...). <|> gd
71 Mot inconnu : mcrypt =>   * Pour **Apache/PHP** nous allons choisir [[https://hub.docker.com/r/lavoweb/php-5.6/|celle-ci]], basée sur l'[[https://hub.docker.com/r/library/php/|image fournie officiellement par PHP]], mais à laquelle on a ajouté quelques librairies bien utiles (**gd**, **zip**, **mcrypt**...). <|> mcrypt
71 Typographie : points de suspension. Utilisez le caractère dédié. =>   * Pour **Apache/PHP** nous allons choisir [[https://hub.docker.com/r/lavoweb/php-5.6/|celle-ci]], basée sur l'[[https://hub.docker.com/r/library/php/|image fournie officiellement par PHP]], mais à laquelle on a ajouté quelques librairies bien utiles (**gd**, **zip**, **mcrypt**...). <|> ... => suggestions : ['…']
72 Mot inconnu : MySQL =>   * Pour **MySQL**, nous pouvons prendre l'[[https://hub.docker.com/_/mysql/|image fournie officiellement par MySQL]], en version 5.5 (une version un peu ancienne). <|> mysql
72 Mot inconnu : MySQL =>   * Pour **MySQL**, nous pouvons prendre l'[[https://hub.docker.com/_/mysql/|image fournie officiellement par MySQL]], en version 5.5 (une version un peu ancienne). <|> mysql
73 Mot inconnu : phpMyAdmin =>   * Pour **phpMyAdmin**, nous pouvons aussi choisir l'[[https://hub.docker.com/r/phpmyadmin/phpmyadmin/|image officielle]]. <|> phpmyadmin
75 Espace(s) en fin de ligne à supprimer. => Pour la suite nous allons nous servir d'un outil bien pratique pour lancer plusieurs conteneurs en évitant les lignes de commandes à rallonge : **docker-compose**.\\  <|>   => suggestions : ['']

79 Mot inconnu : yml => Nous allons ensuite créer un fichier **docker-compose.yml** dans lequel nous allons définir notre environnement : <|> yml

107 Espace(s) en fin de ligne à supprimer. => Les **services** sont des conteneurs.\\  <|>   => suggestions : ['']

110 Accord de nombre erroné : après « l’ », « options » devrait être au singulier. => De la même manière que l'options **-v** de la ligne de commande, le paramètre **volumes** relie les répertoires locaux **~/.docker/www** et **~/.docker/mysql** aux répertoires **/var/www/html** de l'image Apache/PHP et **/var/lib/mysql** de l'image MySQL dans nos conteneurs.\\  <|> options => suggestions : ['option']
110 Mot inconnu : mysql => De la même manière que l'options **-v** de la ligne de commande, le paramètre **volumes** relie les répertoires locaux **~/.docker/www** et **~/.docker/mysql** aux répertoires **/var/www/html** de l'image Apache/PHP et **/var/lib/mysql** de l'image MySQL dans nos conteneurs.\\  <|> mysql
110 Mot inconnu : MySQL => De la même manière que l'options **-v** de la ligne de commande, le paramètre **volumes** relie les répertoires locaux **~/.docker/www** et **~/.docker/mysql** aux répertoires **/var/www/html** de l'image Apache/PHP et **/var/lib/mysql** de l'image MySQL dans nos conteneurs.\\  <|> mysql
110 Espace(s) en fin de ligne à supprimer. => De la même manière que l'options **-v** de la ligne de commande, le paramètre **volumes** relie les répertoires locaux **~/.docker/www** et **~/.docker/mysql** aux répertoires **/var/www/html** de l'image Apache/PHP et **/var/lib/mysql** de l'image MySQL dans nos conteneurs.\\  <|>   => suggestions : ['']

111 Accord de nombre erroné : après « l’ », « options » devrait être au singulier. => Et le paramètre **ports** de la même manière que l'options **-p**, relie les ports qui nous intéressent de nos conteneurs aux ports de notre machine locale. Ici le port 80 (HTTP) et le port 3306 (MySQL), ce dernier peut-être et même doit-être supprimé si vous avez déjà un LAMP sur votre machine locale (hôte). <|> options => suggestions : ['option']
111 Mot inconnu : MySQL => Et le paramètre **ports** de la même manière que l'options **-p**, relie les ports qui nous intéressent de nos conteneurs aux ports de notre machine locale. Ici le port 80 (HTTP) et le port 3306 (MySQL), ce dernier peut-être et même doit-être supprimé si vous avez déjà un LAMP sur votre machine locale (hôte). <|> mysql
111 Mot inconnu : LAMP => Et le paramètre **ports** de la même manière que l'options **-p**, relie les ports qui nous intéressent de nos conteneurs aux ports de notre machine locale. Ici le port 80 (HTTP) et le port 3306 (MySQL), ce dernier peut-être et même doit-être supprimé si vous avez déjà un LAMP sur votre machine locale (hôte). <|> lamp

118 Mot inconnu : mysql => De la même manière qu'avec la [[#méthode simple]] les bases de données seront sauvegardées dans notre répertoire **~/.docker/mysql**.\\  <|> mysql
118 Espace(s) en fin de ligne à supprimer. => De la même manière qu'avec la [[#méthode simple]] les bases de données seront sauvegardées dans notre répertoire **~/.docker/mysql**.\\  <|>   => suggestions : ['']

120 Mot inconnu : root => Et cette fois l'utilisateur par défaut pour les bases de données sera **root** avec le mot de passe **root** (hôte **db**). <|> root
120 Mot inconnu : root => Et cette fois l'utilisateur par défaut pour les bases de données sera **root** avec le mot de passe **root** (hôte **db**). <|> root
120 Mot inconnu : db => Et cette fois l'utilisateur par défaut pour les bases de données sera **root** avec le mot de passe **root** (hôte **db**). <|> db

124 Mot inconnu : MySQL => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> mysql
124 Mot inconnu : MySQL => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> mysql
124 Mot inconnu : mysql => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> mysql
124 Il manque un espace. => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> 5 => suggestions : [' 5']
124 Mot inconnu : mysql => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> mysql
124 Il manque un espace. => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> 5 => suggestions : [' 5']
124 Mot inconnu : up => Pour passer de MySQL 5.5 à MySQL 5.7 par ex. il suffit de remplacer **image: mysql:5.5** par **image: mysql:5.7** et de relancer **docker-compose up**. <|> up

128 Mot inconnu : MySQL => ==== Configuration de PHP, d'Apache et de MySQL ==== <|> mysql

130 Mot inconnu : exterieur => Pour ajuster les configurations des différents services, le mieux est aussi d'utiliser la fonctionnalité **volume** (qu'on peut utiliser comme des liens symboliques entre les conteneurs et l'exterieur, aussi bien pour des répertoires que pour des fichiers).\\  <|> exterieur
130 Espace(s) en fin de ligne à supprimer. => Pour ajuster les configurations des différents services, le mieux est aussi d'utiliser la fonctionnalité **volume** (qu'on peut utiliser comme des liens symboliques entre les conteneurs et l'exterieur, aussi bien pour des répertoires que pour des fichiers).\\  <|>   => suggestions : ['']

131 Espace(s) en fin de ligne à supprimer. => Ainsi on peut facilement éditer ou modifier les fichiers de config sur notre système. C'est très facile, à condition de savoir où doivent se trouver ces fichiers de config sur nos images.\\  <|>   => suggestions : ['']

135 Conjugaison erronée. Accord avec “on”. Le verbe devrait être à la 3ᵉ personne du singulier. => Puis on créé notre fichier **~/config/php.ini** qui contient seulement les paramètres que l'on souhaite modifier, par ex. : <|> créé => suggestions : ['créait', 'créa', 'crée']
135 Mot inconnu : php => Puis on créé notre fichier **~/config/php.ini** qui contient seulement les paramètres que l'on souhaite modifier, par ex. : <|> php
135 Mot inconnu : ini => Puis on créé notre fichier **~/config/php.ini** qui contient seulement les paramètres que l'on souhaite modifier, par ex. : <|> ini

153 Mot inconnu : VirtualHosts => Pour Apache on peut si on le souhaite définir une liste de VirtualHosts (chacun dans un fichier **.conf** dans le répertoire **~/config/virtualhosts**) : <|> virtualhosts
153 Mot inconnu : virtualhosts => Pour Apache on peut si on le souhaite définir une liste de VirtualHosts (chacun dans un fichier **.conf** dans le répertoire **~/config/virtualhosts**) : <|> virtualhosts

155 Mot inconnu : Dockerfiles => ==== Création de Dockerfiles personnalisés ==== <|> dockerfiles
159 Mot inconnu : dockerfile => La plupart des images disponibles sur ces hubs fournissent un fichier [[docker#automatisation_avec_un_dockerfile|Dockerfile]]. [[https://hub.docker.com/r/lioshi/lamp/~/dockerfile/|exemple]].\\  <|> dockerfile
159 Espace(s) en fin de ligne à supprimer. => La plupart des images disponibles sur ces hubs fournissent un fichier [[docker#automatisation_avec_un_dockerfile|Dockerfile]]. [[https://hub.docker.com/r/lioshi/lamp/~/dockerfile/|exemple]].\\  <|>   => suggestions : ['']

160 Il manque un espace. => Ce fichier est une liste d'instructions qui permettent de construire une image. Il définit une image de base (par ex. Debian:telle_version) et contient ensuite une série de commandes telles que **apt install ...**.\\  <|> telle_version => suggestions : [' telle_version']
160 Mot inconnu : telle_version => Ce fichier est une liste d'instructions qui permettent de construire une image. Il définit une image de base (par ex. Debian:telle_version) et contient ensuite une série de commandes telles que **apt install ...**.\\  <|> telle_version
160 Mot inconnu : install => Ce fichier est une liste d'instructions qui permettent de construire une image. Il définit une image de base (par ex. Debian:telle_version) et contient ensuite une série de commandes telles que **apt install ...**.\\  <|> install
160 Typographie : points de suspension. Utilisez le caractère dédié. => Ce fichier est une liste d'instructions qui permettent de construire une image. Il définit une image de base (par ex. Debian:telle_version) et contient ensuite une série de commandes telles que **apt install ...**.\\  <|> ... => suggestions : ['…']
160 Espace(s) en fin de ligne à supprimer. => Ce fichier est une liste d'instructions qui permettent de construire une image. Il définit une image de base (par ex. Debian:telle_version) et contient ensuite une série de commandes telles que **apt install ...**.\\  <|>   => suggestions : ['']

161 Accord de nombre erroné : « besoin » devrait être au pluriel. => On peut également créer ce fichier sur notre machine pour créer une image Docker qui corresponde exactement à nos besoin (pour plus de facilité on peut évidemment partir d'un Dockerfile existant). <|> besoin => suggestions : ['besoins']
161 Mot inconnu : Dockerfile => On peut également créer ce fichier sur notre machine pour créer une image Docker qui corresponde exactement à nos besoin (pour plus de facilité on peut évidemment partir d'un Dockerfile existant). <|> dockerfile
165 Mot inconnu : webserver => Une fois notre [[docker#automatisation_avec_un_dockerfile|Dockerfile]] créé, par ex. à l'emplacement **~/webserver/Dockerfile**, on peut construire notre image avec la commande : <|> webserver

167 Mot inconnu : apache-php5 => après quoi on peut lancer notre image nommée **apache-php5.6** dans un conteneur : <|> apache-php5

172 Espace(s) en fin de ligne à supprimer. => \\ \\  <|>   => suggestions : ['']

174 Mot inconnu : fc2ff39a9270 => Lister les conteneurs. Pour chaque conteneur on récupère ainsi un id comme **fc2ff39a9270** <|> fc2ff39a9270

175 Espace(s) en fin de ligne à supprimer. => \\ \\  <|>   => suggestions : ['']

177 Après un point, une majuscule est généralement requise. => Supprimer un conteneur. les 3 premiers caractères de l'id suffisent à l'identifier. <|> les => suggestions : ['Les']

178 Espace(s) en fin de ligne à supprimer. => \\ \\  <|>   => suggestions : ['']

180 Mot inconnu : ids => Lister les images installées. On récupère aussi leurs ids. <|> ids

181 Espace(s) en fin de ligne à supprimer. => \\ \\  <|>   => suggestions : ['']

183 Mot inconnu : e15 => Supprimer une image dont l'id commence par **e15**. <|> e15

184 Espace(s) en fin de ligne à supprimer. => \\ \\  <|>   => suggestions : ['']

186 Mot inconnu : fc2 => Se connecter au terminal d'un conteneur dont l'id commence par fc2 pour en explorer les entrailles. Souvenez-vous que les modifications disparaîtront au prochain démarrage du conteneur. <|> fc2

190 Mot inconnu : SMI => Certains logiciels PHP n'auront pas de mal à fonctionner tel quel, par exemple SMI(Services Maintenance Interventions) mais d'autres s'en plaindront sans cesse avec ce genre de message, dans cet exemple il s'agit de Dolibarr : <|> smi
190 Il manque un espace avant la parenthèse. => Certains logiciels PHP n'auront pas de mal à fonctionner tel quel, par exemple SMI(Services Maintenance Interventions) mais d'autres s'en plaindront sans cesse avec ce genre de message, dans cet exemple il s'agit de Dolibarr : <|> ( => suggestions : [' (']
190 Mot inconnu : Dolibarr => Certains logiciels PHP n'auront pas de mal à fonctionner tel quel, par exemple SMI(Services Maintenance Interventions) mais d'autres s'en plaindront sans cesse avec ce genre de message, dans cet exemple il s'agit de Dolibarr : <|> dolibarr

195 Mot inconnu : timezone => Le principe est de créer un fichier timezone.ini dans le même répertoire que le fichier docker-compose.yml contenant la ligne de commande de la timezone et d'en inclure la déclaration dans le fichier docker-compose.yml. <|> timezone
195 Mot inconnu : ini => Le principe est de créer un fichier timezone.ini dans le même répertoire que le fichier docker-compose.yml contenant la ligne de commande de la timezone et d'en inclure la déclaration dans le fichier docker-compose.yml. <|> ini
195 Mot inconnu : yml => Le principe est de créer un fichier timezone.ini dans le même répertoire que le fichier docker-compose.yml contenant la ligne de commande de la timezone et d'en inclure la déclaration dans le fichier docker-compose.yml. <|> yml
195 Mot inconnu : timezone => Le principe est de créer un fichier timezone.ini dans le même répertoire que le fichier docker-compose.yml contenant la ligne de commande de la timezone et d'en inclure la déclaration dans le fichier docker-compose.yml. <|> timezone
195 Mot inconnu : yml => Le principe est de créer un fichier timezone.ini dans le même répertoire que le fichier docker-compose.yml contenant la ligne de commande de la timezone et d'en inclure la déclaration dans le fichier docker-compose.yml. <|> yml

197 Mot inconnu : timezone => Pour cela créer un fichier timezone.ini et y mettre juste ceci : <|> timezone
197 Mot inconnu : ini => Pour cela créer un fichier timezone.ini et y mettre juste ceci : <|> ini

200 Mot inconnu : yml => Insérer cette ligne dans le fichier docker-compose.yml pour déclarer la présence du fichier .ini  dans la section web: <|> yml
200 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Insérer cette ligne dans le fichier docker-compose.yml pour déclarer la présence du fichier .ini  dans la section web: <|>  . => suggestions : ['. ', '.']
200 Mot inconnu : ini => Insérer cette ligne dans le fichier docker-compose.yml pour déclarer la présence du fichier .ini  dans la section web: <|> ini
200 Espace(s) surnuméraire(s) à supprimer. => Insérer cette ligne dans le fichier docker-compose.yml pour déclarer la présence du fichier .ini  dans la section web: <|>    => suggestions : [' ']
206 Espace(s) en fin de ligne à supprimer. => Ne pas oublier d'arrêter le conteneur simplement par la combinaison de touche **CTRL+C** dans la fenêtre de terminal ayant lancé Docker et le relancer et ça fonctionne !  <|>   => suggestions : ['']

208 Mot inconnu : Emilyshepherd => Merci à Emilyshepherd du forum Docker pour son excellente solution. <|> emilyshepherd
