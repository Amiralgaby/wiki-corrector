1 Mot inconnu : SubRip => ====== SubRip ====== | subrip

2 Mot inconnu : SubRip => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant : | subrip
2 Mot inconnu : srt => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant : | srt
2 Espace(s) surnuméraire(s) à supprimer. => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant : |    => suggestions : [' ']

17 Mot inconnu : Advanced => ====== Advanced Sub Station Alpha ====== | advanced
17 Mot inconnu : Sub => ====== Advanced Sub Station Alpha ====== | sub

18 Mot inconnu : Advanced => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | advanced
18 Mot inconnu : Sub => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | sub
18 Mot inconnu : ass => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | ass
18 Mot inconnu : ssa => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | ssa
18 Confusion probable : moi-même, toi-même, lui-même, elle-même, soi-même, elles-mêmes, eux-mêmes. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | soit même => suggestions : ['soi-même']
18 Il manque probablement un trait d’union. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | avant plan => suggestions : ['avant-plan']
18 Il manque probablement un trait d’union. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations… | arrière plan => suggestions : ['arrière-plan']

20 Mot inconnu : Advanced => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-) | advanced
20 Mot inconnu : Sub => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-) | sub
20 Mot inconnu : SubRip => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-) | subrip
29 Accord de nombre erroné : « balise » devrait être au pluriel. => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note> | balise => suggestions : ['balises']
29 Mot inconnu : i1 => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note> | i1
29 Mot inconnu : i0 => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note> | i0
34 Mot inconnu : srt2ass => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help | srt2ass
34 Mot inconnu : py => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help | py
34 Mot inconnu : srt2ass => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help | srt2ass
34 Mot inconnu : py => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help | py
34 Mot inconnu : help => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help | help

36 Mot inconnu : SRT => Supporte les fichiers SRT encodés en ISO-8859-1, UTF-8, UTF-16 (LE/BE), UTF-32 (LE/BE) | srt

38 Mot inconnu : SRT => Converti les fichiers SRT en ASS et les encodes en UTF-8. | srt
38 Mot inconnu : ASS => Converti les fichiers SRT en ASS et les encodes en UTF-8. | ass
38 Incohérence. Ceci est un verbe à la 2ᵉ personne du singulier. Sujet (“tu” ou “toi qui”) introuvable. => Converti les fichiers SRT en ASS et les encodes en UTF-8. | encodes => suggestions : ['encode']
42 Mot inconnu : srt2ass => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés. | srt2ass
42 Mot inconnu : py => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés. | py
42 Mot inconnu : executé => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés. | executé
42 Mot inconnu : SRT => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés. | srt
42 Mot inconnu : SRT => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés. | srt

46 Mot inconnu : coding => # -*- coding: utf-8 -*- | coding
46 Mot inconnu : utf-8 => # -*- coding: utf-8 -*- | utf-8

49 Mot inconnu : argparse => import argparse | argparse

50 Mot inconnu : sys => import sys, os, glob | sys
50 Mot inconnu : glob => import sys, os, glob | glob

52 Mot inconnu : this => # Use this list to delete automatically subs containing one of the following words. All in lower case. | this
52 Mot inconnu : list => # Use this list to delete automatically subs containing one of the following words. All in lower case. | list
52 Mot inconnu : to => # Use this list to delete automatically subs containing one of the following words. All in lower case. | to
52 Mot inconnu : delete => # Use this list to delete automatically subs containing one of the following words. All in lower case. | delete
52 Mot inconnu : automatically => # Use this list to delete automatically subs containing one of the following words. All in lower case. | automatically
52 Mot inconnu : subs => # Use this list to delete automatically subs containing one of the following words. All in lower case. | subs
52 Mot inconnu : containing => # Use this list to delete automatically subs containing one of the following words. All in lower case. | containing
52 Mot inconnu : one => # Use this list to delete automatically subs containing one of the following words. All in lower case. | one
52 Mot inconnu : of => # Use this list to delete automatically subs containing one of the following words. All in lower case. | of
52 Mot inconnu : the => # Use this list to delete automatically subs containing one of the following words. All in lower case. | the
52 Mot inconnu : following => # Use this list to delete automatically subs containing one of the following words. All in lower case. | following
52 Mot inconnu : words => # Use this list to delete automatically subs containing one of the following words. All in lower case. | words
52 Mot inconnu : All => # Use this list to delete automatically subs containing one of the following words. All in lower case. | all
52 Mot inconnu : lower => # Use this list to delete automatically subs containing one of the following words. All in lower case. | lower

53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : subtitles => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | subtitles
53 Mot inconnu : by => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | by
53 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['\xa0»', '”']
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | sync
53 Mot inconnu : by => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | by
53 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['\xa0»', '”']
53 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['\xa0»', '”']
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | sync
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : transcript => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | transcript
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : subtitles => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | subtitles
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : subtitle => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | subtitle
53 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | sync
53 Mot inconnu : and => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | and
53 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"] | " => suggestions : ['\xa0»', '”']

55 Mot inconnu : class => class Console: | class

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   verbose = False |    => suggestions : ['']
56 Mot inconnu : verbose =>   verbose = False | verbose
56 Mot inconnu : False =>   verbose = False | false

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

58 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod |    => suggestions : ['']

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def l(c, message, linefeed = True): |    => suggestions : ['']
59 Mot inconnu : def =>   def l(c, message, linefeed = True): | def
59 Il manque un espace avant la parenthèse. =>   def l(c, message, linefeed = True): | ( => suggestions : [' (']
59 Mot inconnu : linefeed =>   def l(c, message, linefeed = True): | linefeed
59 Mot inconnu : True =>   def l(c, message, linefeed = True): | true

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     sys.stdout.write(message) |      => suggestions : ['']
60 Il manque un espace avant la parenthèse. =>     sys.stdout.write(message) | ( => suggestions : [' (']

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if linefeed: |      => suggestions : ['']
61 Mot inconnu : linefeed =>     if linefeed: | linefeed

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       sys.stdout.write("\n") |        => suggestions : ['']
62 Il manque un espace avant la parenthèse. =>       sys.stdout.write("\n") | ( => suggestions : [' (']
62 Guillemets typographiques fermants. =>       sys.stdout.write("\n") | " => suggestions : ['\xa0»', '”']

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod |    => suggestions : ['']

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def v(c, message, linefeed = True): |    => suggestions : ['']
65 Mot inconnu : def =>   def v(c, message, linefeed = True): | def
65 Il manque un espace avant la parenthèse. =>   def v(c, message, linefeed = True): | ( => suggestions : [' (']
65 Mot inconnu : linefeed =>   def v(c, message, linefeed = True): | linefeed
65 Mot inconnu : True =>   def v(c, message, linefeed = True): | true

66 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if c.verbose: |      => suggestions : ['']
66 Mot inconnu : verbose =>     if c.verbose: | verbose

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       c.l(message, linefeed) |        => suggestions : ['']
67 Il manque un espace avant la parenthèse. =>       c.l(message, linefeed) | ( => suggestions : [' (']
67 Mot inconnu : linefeed =>       c.l(message, linefeed) | linefeed

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod |    => suggestions : ['']

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def w(c, message, linefeed = True): |    => suggestions : ['']
70 Mot inconnu : def =>   def w(c, message, linefeed = True): | def
70 Il manque un espace avant la parenthèse. =>   def w(c, message, linefeed = True): | ( => suggestions : [' (']
70 Mot inconnu : linefeed =>   def w(c, message, linefeed = True): | linefeed
70 Mot inconnu : True =>   def w(c, message, linefeed = True): | true

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     c.v("## Warning ## " + message, linefeed) |      => suggestions : ['']
71 Il manque un espace avant la parenthèse. =>     c.v("## Warning ## " + message, linefeed) | ( => suggestions : [' (']
71 Guillemets isolés. =>     c.v("## Warning ## " + message, linefeed) |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
71 Mot inconnu : linefeed =>     c.v("## Warning ## " + message, linefeed) | linefeed

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod |    => suggestions : ['']

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def nl(c): |    => suggestions : ['']
74 Mot inconnu : def =>   def nl(c): | def

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if c.verbose: |      => suggestions : ['']
75 Mot inconnu : verbose =>     if c.verbose: | verbose

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       sys.stdout.write("\n") |        => suggestions : ['']
76 Il manque un espace avant la parenthèse. =>       sys.stdout.write("\n") | ( => suggestions : [' (']
76 Guillemets typographiques fermants. =>       sys.stdout.write("\n") | " => suggestions : ['\xa0»', '”']

78 Mot inconnu : class => class SubElement: | class
78 Mot inconnu : SubElement => class SubElement: | subelement

79 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

80 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, start, end, text): |    => suggestions : ['']
80 Mot inconnu : def =>   def __init__(self, start, end, text): | def
80 Mot inconnu : __init__ =>   def __init__(self, start, end, text): | __init__
80 Il manque un espace avant la parenthèse. =>   def __init__(self, start, end, text): | ( => suggestions : [' (']
80 Mot inconnu : start =>   def __init__(self, start, end, text): | start
80 Mot inconnu : end =>   def __init__(self, start, end, text): | end
80 Mot inconnu : text =>   def __init__(self, start, end, text): | text

81 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.timeStart = start |      => suggestions : ['']
81 Mot inconnu : timeStart =>     self.timeStart = start | timestart
81 Mot inconnu : start =>     self.timeStart = start | start

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.timeEnd = end |      => suggestions : ['']
82 Mot inconnu : timeEnd =>     self.timeEnd = end | timeend
82 Mot inconnu : end =>     self.timeEnd = end | end

83 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.text = text |      => suggestions : ['']
83 Mot inconnu : text =>     self.text = text | text
83 Mot inconnu : text =>     self.text = text | text

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

85 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def appendLine(self, text): |    => suggestions : ['']
85 Mot inconnu : def =>   def appendLine(self, text): | def
85 Mot inconnu : appendLine =>   def appendLine(self, text): | appendline
85 Il manque un espace avant la parenthèse. =>   def appendLine(self, text): | ( => suggestions : [' (']
85 Mot inconnu : text =>   def appendLine(self, text): | text

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = text.lstrip().rstrip() |      => suggestions : ['']
86 Mot inconnu : text =>     text = text.lstrip().rstrip() | text
86 Mot inconnu : text =>     text = text.lstrip().rstrip() | text
86 Mot inconnu : lstrip =>     text = text.lstrip().rstrip() | lstrip
86 Mot inconnu : rstrip =>     text = text.lstrip().rstrip() | rstrip

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if text != '': |      => suggestions : ['']
87 Mot inconnu : text =>     if text != '': | text

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if self.text != '': |        => suggestions : ['']
88 Mot inconnu : text =>       if self.text != '': | text

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         self.text += "\n" |          => suggestions : ['']
89 Mot inconnu : text =>         self.text += "\n" | text
89 Guillemets typographiques fermants. =>         self.text += "\n" | " => suggestions : ['\xa0»', '”']

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.text += text |        => suggestions : ['']
90 Mot inconnu : text =>       self.text += text | text
90 Mot inconnu : text =>       self.text += text | text

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

92 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __repr__(self): |    => suggestions : ['']
92 Mot inconnu : def =>   def __repr__(self): | def
92 Mot inconnu : __repr__ =>   def __repr__(self): | __repr__
92 Il manque un espace avant la parenthèse. =>   def __repr__(self): | ( => suggestions : [' (']

93 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return self.text |      => suggestions : ['']
93 Mot inconnu : return =>     return self.text | return
93 Mot inconnu : text =>     return self.text | text

95 Mot inconnu : class => class AdvancedSubStationAlphaWriter: | class
95 Mot inconnu : AdvancedSubStationAlphaWriter => class AdvancedSubStationAlphaWriter: | advancedsubstationalphawriter

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, filename, subElements, regular, size): |    => suggestions : ['']
97 Mot inconnu : def =>   def __init__(self, filename, subElements, regular, size): | def
97 Mot inconnu : __init__ =>   def __init__(self, filename, subElements, regular, size): | __init__
97 Il manque un espace avant la parenthèse. =>   def __init__(self, filename, subElements, regular, size): | ( => suggestions : [' (']
97 Mot inconnu : filename =>   def __init__(self, filename, subElements, regular, size): | filename
97 Mot inconnu : subElements =>   def __init__(self, filename, subElements, regular, size): | subelements
97 Mot inconnu : regular =>   def __init__(self, filename, subElements, regular, size): | regular
97 Mot inconnu : size =>   def __init__(self, filename, subElements, regular, size): | size

98 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Writing "' + filename + '"') |      => suggestions : ['']
98 Il manque un espace avant la parenthèse. =>     Console.v('Writing "' + filename + '"') | ( => suggestions : [' (']
98 Mot inconnu : Writing =>     Console.v('Writing "' + filename + '"') | writing
98 Mot inconnu : filename =>     Console.v('Writing "' + filename + '"') | filename

99 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.fontRegular = regular |      => suggestions : ['']
99 Mot inconnu : fontRegular =>     self.fontRegular = regular | fontregular
99 Mot inconnu : regular =>     self.fontRegular = regular | regular

100 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.fontSize = size |      => suggestions : ['']
100 Mot inconnu : fontSize =>     self.fontSize = size | fontsize
100 Mot inconnu : size =>     self.fontSize = size | size

101 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.filename = filename |      => suggestions : ['']
101 Mot inconnu : filename =>     self.filename = filename | filename
101 Mot inconnu : filename =>     self.filename = filename | filename

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.elements = subElements |      => suggestions : ['']
102 Mot inconnu : elements =>     self.elements = subElements | elements
102 Mot inconnu : subElements =>     self.elements = subElements | subelements

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.write() |      => suggestions : ['']
103 Mot inconnu : write =>     self.write() | write

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

105 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def write(self): |    => suggestions : ['']
105 Mot inconnu : def =>   def write(self): | def
105 Mot inconnu : write =>   def write(self): | write
105 Il manque un espace avant la parenthèse. =>   def write(self): | ( => suggestions : [' (']

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f = open(self.filename, 'w') |      => suggestions : ['']
106 Il manque un espace avant la parenthèse. =>     f = open(self.filename, 'w') | ( => suggestions : [' (']
106 Mot inconnu : filename =>     f = open(self.filename, 'w') | filename
106 Guillemets typographiques ouvrants. =>     f = open(self.filename, 'w') | ' => suggestions : ['“', '‘', '‹']

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.write(codecs.BOM_UTF8) |      => suggestions : ['']
107 Mot inconnu : write =>     f.write(codecs.BOM_UTF8) | write
107 Il manque un espace avant la parenthèse. =>     f.write(codecs.BOM_UTF8) | ( => suggestions : [' (']
107 Mot inconnu : BOM_UTF8 =>     f.write(codecs.BOM_UTF8) | bom_utf8

108 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.write(self.getHeader()) |      => suggestions : ['']
108 Mot inconnu : write =>     f.write(self.getHeader()) | write
108 Il manque un espace avant la parenthèse. =>     f.write(self.getHeader()) | ( => suggestions : [' (']
108 Mot inconnu : getHeader =>     f.write(self.getHeader()) | getheader

109 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for e in self.elements: |      => suggestions : ['']
109 Mot inconnu : elements =>     for e in self.elements: | elements

110 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f.write(self.getLine(e)) |        => suggestions : ['']
110 Mot inconnu : write =>       f.write(self.getLine(e)) | write
110 Il manque un espace avant la parenthèse. =>       f.write(self.getLine(e)) | ( => suggestions : [' (']
110 Mot inconnu : getLine =>       f.write(self.getLine(e)) | getline

111 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.close() |      => suggestions : ['']
111 Il manque un espace. =>     f.close() | close => suggestions : [' close']

112 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

113 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getLine(self, element): |    => suggestions : ['']
113 Mot inconnu : def =>   def getLine(self, element): | def
113 Mot inconnu : getLine =>   def getLine(self, element): | getline
113 Il manque un espace avant la parenthèse. =>   def getLine(self, element): | ( => suggestions : [' (']
113 Mot inconnu : element =>   def getLine(self, element): | element

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     start = self.getTime(element.timeStart) |      => suggestions : ['']
114 Mot inconnu : start =>     start = self.getTime(element.timeStart) | start
114 Mot inconnu : getTime =>     start = self.getTime(element.timeStart) | gettime
114 Il manque un espace avant la parenthèse. =>     start = self.getTime(element.timeStart) | ( => suggestions : [' (']
114 Mot inconnu : element =>     start = self.getTime(element.timeStart) | element
114 Mot inconnu : timeStart =>     start = self.getTime(element.timeStart) | timestart

115 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     end = self.getTime(element.timeEnd) |      => suggestions : ['']
115 Mot inconnu : end =>     end = self.getTime(element.timeEnd) | end
115 Mot inconnu : getTime =>     end = self.getTime(element.timeEnd) | gettime
115 Il manque un espace avant la parenthèse. =>     end = self.getTime(element.timeEnd) | ( => suggestions : [' (']
115 Mot inconnu : element =>     end = self.getTime(element.timeEnd) | element
115 Mot inconnu : timeEnd =>     end = self.getTime(element.timeEnd) | timeend

116 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = element.text.replace("\n", "\\N") |      => suggestions : ['']
116 Mot inconnu : text =>     text = element.text.replace("\n", "\\N") | text
116 Il manque un espace avant la parenthèse. =>     text = element.text.replace("\n", "\\N") | ( => suggestions : [' (']
116 Guillemets typographiques fermants. =>     text = element.text.replace("\n", "\\N") | " => suggestions : ['\xa0»', '”']
116 Guillemets typographiques fermants. =>     text = element.text.replace("\n", "\\N") | " => suggestions : ['\xa0»', '”']

117 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     font = "Regular" |      => suggestions : ['']
117 Guillemets typographiques ouvrants. =>     font = "Regular" | " => suggestions : ['«\xa0', '“']
117 Mot inconnu : Regular =>     font = "Regular" | regular
117 Guillemets typographiques fermants. =>     font = "Regular" | " => suggestions : ['\xa0»', '”']

118 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

119 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") |      => suggestions : ['']
119 Mot inconnu : text =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | text
119 Mot inconnu : text =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | text
119 Il manque un espace. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | replace => suggestions : [' replace']
119 Il manque un espace avant la parenthèse. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | ( => suggestions : [' (']
119 Mot inconnu : i1 =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | i1
119 Il manque un espace avant la parenthèse. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | ( => suggestions : [' (']
119 Mot inconnu : i0 =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}") | i0

120 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     # Fixes the subtitle |      => suggestions : ['']
120 Mot inconnu : the =>     # Fixes the subtitle | the
120 Mot inconnu : subtitle =>     # Fixes the subtitle | subtitle

121 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: |      => suggestions : ['']
121 Mot inconnu : text =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | text
121 Mot inconnu : find =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | find
121 Il manque un espace avant la parenthèse. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | ( => suggestions : [' (']
121 Mot inconnu : i1 =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | i1
121 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | -1 => suggestions : ['−1', '– 1', '— 1']
121 Mot inconnu : and =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | and
121 Mot inconnu : text =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | text
121 Mot inconnu : find =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | find
121 Il manque un espace avant la parenthèse. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | ( => suggestions : [' (']
121 Mot inconnu : i0 =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | i0
121 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1: | -1 => suggestions : ['−1', '– 1', '— 1']

122 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       text += "{\\i0}" |        => suggestions : ['']
122 Mot inconnu : text =>       text += "{\\i0}" | text
122 Mot inconnu : i0 =>       text += "{\\i0}" | i0

123 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) |      => suggestions : ['']
124 Mot inconnu : return =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | return
124 Guillemets typographiques ouvrants. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | " => suggestions : ['«\xa0', '“']
124 Une de ces ponctuations est superflue. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | ,, => suggestions : [',', ',']
124 Une de ces ponctuations est superflue. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | ,, => suggestions : [',', ',']
124 Guillemets typographiques fermants. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | " => suggestions : ['\xa0»', '”']
124 Il manque un espace avant la parenthèse. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | ( => suggestions : [' (']
124 Mot inconnu : start =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | start
124 Mot inconnu : end =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | end
124 Mot inconnu : text =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text) | text

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getTime(self, t): |    => suggestions : ['']
126 Mot inconnu : def =>   def getTime(self, t): | def
126 Mot inconnu : getTime =>   def getTime(self, t): | gettime
126 Il manque un espace avant la parenthèse. =>   def getTime(self, t): | ( => suggestions : [' (']

127 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms = t % 1000 |      => suggestions : ['']

128 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     t = (t - ms) / 1000 |      => suggestions : ['']
128 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     t = (t - ms) / 1000 |  -  => suggestions : [' – ', ' — ', ' − ']

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     s = t % 60 |      => suggestions : ['']

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     t = (t - s) / 60 |      => suggestions : ['']
130 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     t = (t - s) / 60 |  -  => suggestions : [' – ', ' — ', ' − ']

131 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     m = t % 60 |      => suggestions : ['']

132 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     h = (t - m) / 60 |      => suggestions : ['']
132 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     h = (t - m) / 60 |  -  => suggestions : [' – ', ' — ', ' − ']

133 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

134 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms /= 10 |      => suggestions : ['']

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms) |      => suggestions : ['']
135 Mot inconnu : return =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms) | return
135 Il manque un espace avant la parenthèse. =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms) | ( => suggestions : [' (']

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getHeader(self): |    => suggestions : ['']
137 Mot inconnu : def =>   def getHeader(self): | def
137 Mot inconnu : getHeader =>   def getHeader(self): | getheader
137 Il manque un espace avant la parenthèse. =>   def getHeader(self): | ( => suggestions : [' (']

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return "[Script Info]\n" \ |      => suggestions : ['']
138 Mot inconnu : return =>     return "[Script Info]\n" \ | return
138 Guillemets typographiques fermants. =>     return "[Script Info]\n" \ | " => suggestions : ['\xa0»', '”']

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "ScriptType: V4.00+\n" \ |          => suggestions : ['']
139 Guillemets typographiques ouvrants. =>         + "ScriptType: V4.00+\n" \ | " => suggestions : ['«\xa0', '“']
139 Mot inconnu : ScriptType =>         + "ScriptType: V4.00+\n" \ | scripttype
139 Mot inconnu : V4 =>         + "ScriptType: V4.00+\n" \ | v4
139 Guillemets typographiques fermants. =>         + "ScriptType: V4.00+\n" \ | " => suggestions : ['\xa0»', '”']

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "\n"                   \ |          => suggestions : ['']
140 Guillemets typographiques fermants. =>         + "\n"                   \ | " => suggestions : ['\xa0»', '”']

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "[V4+ Styles]\n"       \ |          => suggestions : ['']
141 Mot inconnu : V4 =>         + "[V4+ Styles]\n"       \ | v4
141 Guillemets typographiques fermants. =>         + "[V4+ Styles]\n"       \ | " => suggestions : ['\xa0»', '”']

142 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ |          => suggestions : ['']
142 Guillemets typographiques ouvrants. =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | " => suggestions : ['«\xa0', '“']
142 Mot inconnu : Name =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | name
142 Mot inconnu : Fontname =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | fontname
142 Mot inconnu : Fontsize =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | fontsize
142 Mot inconnu : PrimaryColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | primarycolour
142 Mot inconnu : SecondaryColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | secondarycolour
142 Mot inconnu : OutlineColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | outlinecolour
142 Mot inconnu : BackColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | backcolour
142 Mot inconnu : Bold =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | bold
142 Mot inconnu : Italic =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | italic
142 Mot inconnu : Underline =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | underline
142 Mot inconnu : StrikeOut =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | strikeout
142 Mot inconnu : ScaleX =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | scalex
142 Mot inconnu : ScaleY =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | scaley
142 Mot inconnu : Spacing =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | spacing
142 Mot inconnu : BorderStyle =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | borderstyle
142 Mot inconnu : Outline =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | outline
142 Mot inconnu : Shadow =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | shadow
142 Mot inconnu : Alignment =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | alignment
142 Mot inconnu : MarginL =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | marginl
142 Mot inconnu : MarginR =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | marginr
142 Mot inconnu : MarginV =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | marginv
142 Mot inconnu : Encoding =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | encoding
142 Guillemets typographiques fermants. =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \ | " => suggestions : ['\xa0»', '”']

143 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ |          => suggestions : ['']
143 Guillemets typographiques ouvrants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['«\xa0', '“']
143 Mot inconnu : Regular =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | regular
143 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']
143 Mot inconnu : fontRegular =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | fontregular
143 Guillemets fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ |  " => suggestions : ['\xa0»', '”']
143 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']
143 Mot inconnu : fontSize =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | fontsize
143 Guillemets fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ |  " => suggestions : ['\xa0»', '”']
143 Mot inconnu : H00FFFFFF =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00ffffff
143 Mot inconnu : H0000FFFF =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h0000ffff
143 Mot inconnu : H00000000 =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00000000
143 Mot inconnu : H00000000 =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00000000
143 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | -1 => suggestions : ['−1', '– 1', '— 1']
143 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "\n" \ |          => suggestions : ['']
144 Guillemets typographiques fermants. =>         + "\n" \ | " => suggestions : ['\xa0»', '”']

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "[Events]\n" \ |          => suggestions : ['']
145 Mot inconnu : Events =>         + "[Events]\n" \ | events
145 Guillemets typographiques fermants. =>         + "[Events]\n" \ | " => suggestions : ['\xa0»', '”']

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" |          => suggestions : ['']
146 Guillemets typographiques ouvrants. =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | " => suggestions : ['«\xa0', '“']
146 Mot inconnu : Start =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | start
146 Mot inconnu : End =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | end
146 Mot inconnu : Actor =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | actor
146 Mot inconnu : MarginL =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | marginl
146 Mot inconnu : MarginR =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | marginr
146 Mot inconnu : MarginV =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | marginv
146 Mot inconnu : Effect =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | effect
146 Mot inconnu : Text =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | text
146 Guillemets typographiques fermants. =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n" | " => suggestions : ['\xa0»', '”']

148 Guillemets typographiques ouvrants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['«\xa0', '“']
148 Mot inconnu : Italic => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | italic
148 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']
148 Mot inconnu : fontItalic => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | fontitalic
148 Guillemets fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ |  " => suggestions : ['\xa0»', '”']
148 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']
148 Mot inconnu : fontSize => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | fontsize
148 Guillemets fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ |  " => suggestions : ['\xa0»', '”']
148 Mot inconnu : H00FFFFFF => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00ffffff
148 Mot inconnu : H0000FFFF => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h0000ffff
148 Mot inconnu : H00000000 => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00000000
148 Mot inconnu : H00000000 => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | h00000000
148 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | -1 => suggestions : ['−1', '– 1', '— 1']
148 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | -1 => suggestions : ['−1', '– 1', '— 1']
148 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \ | " => suggestions : ['\xa0»', '”']

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          |          => suggestions : ['']

151 Mot inconnu : class => class SubRipReader: | class
151 Mot inconnu : SubRipReader => class SubRipReader: | subripreader

152 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, filename): |    => suggestions : ['']
153 Mot inconnu : def =>   def __init__(self, filename): | def
153 Mot inconnu : __init__ =>   def __init__(self, filename): | __init__
153 Il manque un espace avant la parenthèse. =>   def __init__(self, filename): | ( => suggestions : [' (']
153 Mot inconnu : filename =>   def __init__(self, filename): | filename

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Reading "' + filename + '"') |      => suggestions : ['']
154 Il manque un espace avant la parenthèse. =>     Console.v('Reading "' + filename + '"') | ( => suggestions : [' (']
154 Mot inconnu : Reading =>     Console.v('Reading "' + filename + '"') | reading
154 Mot inconnu : filename =>     Console.v('Reading "' + filename + '"') | filename

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.filename = filename |      => suggestions : ['']
155 Mot inconnu : filename =>     self.filename = filename | filename
155 Mot inconnu : filename =>     self.filename = filename | filename

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.bomLength = 0 |      => suggestions : ['']
156 Mot inconnu : bomLength =>     self.bomLength = 0 | bomlength

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.encoding = 'utf-8' |      => suggestions : ['']
157 Mot inconnu : encoding =>     self.encoding = 'utf-8' | encoding
157 Guillemets typographiques ouvrants. =>     self.encoding = 'utf-8' | ' => suggestions : ['“', '‘', '‹']
157 Mot inconnu : utf-8 =>     self.encoding = 'utf-8' | utf-8
157 Guillemets typographiques fermants. =>     self.encoding = 'utf-8' | ' => suggestions : ['”', '’', '›']

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.lines = [] |      => suggestions : ['']
158 Mot inconnu : lines =>     self.lines = [] | lines

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.elements = [] |      => suggestions : ['']
159 Mot inconnu : elements =>     self.elements = [] | elements

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.detectBomAndEncoding() |      => suggestions : ['']
160 Mot inconnu : detectBomAndEncoding =>     self.detectBomAndEncoding() | detectbomandencoding

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.read() |      => suggestions : ['']
161 Mot inconnu : read =>     self.read() | read

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.parse() |      => suggestions : ['']
162 Il manque un espace. =>     self.parse() | parse => suggestions : [' parse']

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def detectBomAndEncoding(self): |    => suggestions : ['']
164 Mot inconnu : def =>   def detectBomAndEncoding(self): | def
164 Mot inconnu : detectBomAndEncoding =>   def detectBomAndEncoding(self): | detectbomandencoding
164 Il manque un espace avant la parenthèse. =>   def detectBomAndEncoding(self): | ( => suggestions : [' (']

165 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f = open(self.filename, 'r') |      => suggestions : ['']
165 Il manque un espace avant la parenthèse. =>     f = open(self.filename, 'r') | ( => suggestions : [' (']
165 Mot inconnu : filename =>     f = open(self.filename, 'r') | filename
165 Guillemets typographiques ouvrants. =>     f = open(self.filename, 'r') | ' => suggestions : ['“', '‘', '‹']

166 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     begin = f.read(4) |      => suggestions : ['']
166 Mot inconnu : begin =>     begin = f.read(4) | begin
166 Mot inconnu : read =>     begin = f.read(4) | read

167 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.close() |      => suggestions : ['']
167 Il manque un espace. =>     f.close() | close => suggestions : [' close']

168 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if begin.startswith(codecs.BOM_UTF8): |      => suggestions : ['']
168 Mot inconnu : begin =>     if begin.startswith(codecs.BOM_UTF8): | begin
168 Mot inconnu : startswith =>     if begin.startswith(codecs.BOM_UTF8): | startswith
168 Il manque un espace avant la parenthèse. =>     if begin.startswith(codecs.BOM_UTF8): | ( => suggestions : [' (']
168 Mot inconnu : BOM_UTF8 =>     if begin.startswith(codecs.BOM_UTF8): | bom_utf8

169 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-8' |        => suggestions : ['']
169 Mot inconnu : encoding =>       self.encoding = 'utf-8' | encoding
169 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-8' | ' => suggestions : ['“', '‘', '‹']
169 Mot inconnu : utf-8 =>       self.encoding = 'utf-8' | utf-8
169 Guillemets typographiques fermants. =>       self.encoding = 'utf-8' | ' => suggestions : ['”', '’', '›']

170 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 3 |        => suggestions : ['']
170 Mot inconnu : bomLength =>       self.bomLength = 3 | bomlength

171 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF16_LE): |      => suggestions : ['']
171 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF16_LE): | elif
171 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF16_LE): | begin
171 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF16_LE): | startswith
171 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF16_LE): | ( => suggestions : [' (']
171 Mot inconnu : BOM_UTF16_LE =>     elif begin.startswith(codecs.BOM_UTF16_LE): | bom_utf16_le

172 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-16-le' |        => suggestions : ['']
172 Mot inconnu : encoding =>       self.encoding = 'utf-16-le' | encoding
172 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-16-le' | ' => suggestions : ['“', '‘', '‹']
172 Mot inconnu : utf-16-le =>       self.encoding = 'utf-16-le' | utf-16-le
172 Guillemets typographiques fermants. =>       self.encoding = 'utf-16-le' | ' => suggestions : ['”', '’', '›']

173 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 2 |        => suggestions : ['']
173 Mot inconnu : bomLength =>       self.bomLength = 2 | bomlength

174 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF16_BE): |      => suggestions : ['']
174 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF16_BE): | elif
174 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF16_BE): | begin
174 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF16_BE): | startswith
174 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF16_BE): | ( => suggestions : [' (']
174 Mot inconnu : BOM_UTF16_BE =>     elif begin.startswith(codecs.BOM_UTF16_BE): | bom_utf16_be

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-16-be' |        => suggestions : ['']
175 Mot inconnu : encoding =>       self.encoding = 'utf-16-be' | encoding
175 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-16-be' | ' => suggestions : ['“', '‘', '‹']
175 Mot inconnu : utf-16-be =>       self.encoding = 'utf-16-be' | utf-16-be
175 Guillemets typographiques fermants. =>       self.encoding = 'utf-16-be' | ' => suggestions : ['”', '’', '›']

176 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 2 |        => suggestions : ['']
176 Mot inconnu : bomLength =>       self.bomLength = 2 | bomlength

177 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF32_LE): |      => suggestions : ['']
177 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF32_LE): | elif
177 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF32_LE): | begin
177 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF32_LE): | startswith
177 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF32_LE): | ( => suggestions : [' (']
177 Mot inconnu : BOM_UTF32_LE =>     elif begin.startswith(codecs.BOM_UTF32_LE): | bom_utf32_le

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-32-le' |        => suggestions : ['']
178 Mot inconnu : encoding =>       self.encoding = 'utf-32-le' | encoding
178 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-32-le' | ' => suggestions : ['“', '‘', '‹']
178 Mot inconnu : utf-32-le =>       self.encoding = 'utf-32-le' | utf-32-le
178 Guillemets typographiques fermants. =>       self.encoding = 'utf-32-le' | ' => suggestions : ['”', '’', '›']

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 4 |        => suggestions : ['']
179 Mot inconnu : bomLength =>       self.bomLength = 4 | bomlength

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF32_BE): |      => suggestions : ['']
180 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF32_BE): | elif
180 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF32_BE): | begin
180 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF32_BE): | startswith
180 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF32_BE): | ( => suggestions : [' (']
180 Mot inconnu : BOM_UTF32_BE =>     elif begin.startswith(codecs.BOM_UTF32_BE): | bom_utf32_be

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-32-be' |        => suggestions : ['']
181 Mot inconnu : encoding =>       self.encoding = 'utf-32-be' | encoding
181 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-32-be' | ' => suggestions : ['“', '‘', '‹']
181 Mot inconnu : utf-32-be =>       self.encoding = 'utf-32-be' | utf-32-be
181 Guillemets typographiques fermants. =>       self.encoding = 'utf-32-be' | ' => suggestions : ['”', '’', '›']

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 4 |        => suggestions : ['']
182 Mot inconnu : bomLength =>       self.bomLength = 4 | bomlength

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

184 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if self.bomLength > 0: |      => suggestions : ['']
184 Mot inconnu : bomLength =>     if self.bomLength > 0: | bomlength

185 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('BOM detected! Encoding: ' + self.encoding) |        => suggestions : ['']
185 Il manque un espace avant la parenthèse. =>       Console.v('BOM detected! Encoding: ' + self.encoding) | ( => suggestions : [' (']
185 Mot inconnu : BOM =>       Console.v('BOM detected! Encoding: ' + self.encoding) | bom
185 Mot inconnu : detected =>       Console.v('BOM detected! Encoding: ' + self.encoding) | detected
185 Mot inconnu : Encoding =>       Console.v('BOM detected! Encoding: ' + self.encoding) | encoding
185 Mot inconnu : encoding =>       Console.v('BOM detected! Encoding: ' + self.encoding) | encoding

186 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     else: |      => suggestions : ['']
186 Mot inconnu : else =>     else: | else

187 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('No BOM found. Using utf-8 as default encoding.') |        => suggestions : ['']
187 Il manque un espace avant la parenthèse. =>       Console.v('No BOM found. Using utf-8 as default encoding.') | ( => suggestions : [' (']
187 Mot inconnu : BOM =>       Console.v('No BOM found. Using utf-8 as default encoding.') | bom
187 Mot inconnu : found =>       Console.v('No BOM found. Using utf-8 as default encoding.') | found
187 Mot inconnu : Using =>       Console.v('No BOM found. Using utf-8 as default encoding.') | using
187 Mot inconnu : utf-8 =>       Console.v('No BOM found. Using utf-8 as default encoding.') | utf-8
187 Mot inconnu : default =>       Console.v('No BOM found. Using utf-8 as default encoding.') | default
187 Mot inconnu : encoding =>       Console.v('No BOM found. Using utf-8 as default encoding.') | encoding

188 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

189 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def read(self): |    => suggestions : ['']
189 Mot inconnu : def =>   def read(self): | def
189 Mot inconnu : read =>   def read(self): | read
189 Il manque un espace avant la parenthèse. =>   def read(self): | ( => suggestions : [' (']

190 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if not self.read2(): |      => suggestions : ['']
190 Mot inconnu : not =>     if not self.read2(): | not
190 Mot inconnu : read2 =>     if not self.read2(): | read2

191 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') |        => suggestions : ['']
191 Il manque un espace avant la parenthèse. =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | ( => suggestions : [' (']
191 Mot inconnu : Fail =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | fail
191 Mot inconnu : to =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | to
191 Mot inconnu : read =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | read
191 Mot inconnu : the =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | the
191 Mot inconnu : with =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | with
191 Mot inconnu : encoding =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | encoding
191 Mot inconnu : Trying =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | trying
191 Mot inconnu : iso-8859-1 =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.') | iso-8859-1

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'iso-8859-1' |        => suggestions : ['']
192 Mot inconnu : encoding =>       self.encoding = 'iso-8859-1' | encoding
192 Guillemets typographiques ouvrants. =>       self.encoding = 'iso-8859-1' | ' => suggestions : ['“', '‘', '‹']
192 Mot inconnu : iso-8859-1 =>       self.encoding = 'iso-8859-1' | iso-8859-1
192 Guillemets typographiques fermants. =>       self.encoding = 'iso-8859-1' | ' => suggestions : ['”', '’', '›']

193 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.read2() |        => suggestions : ['']
193 Mot inconnu : read2 =>       self.read2() | read2

194 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

195 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def read2(self): |    => suggestions : ['']
195 Mot inconnu : def =>   def read2(self): | def
195 Mot inconnu : read2 =>   def read2(self): | read2
195 Il manque un espace avant la parenthèse. =>   def read2(self): | ( => suggestions : [' (']

196 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     try: |      => suggestions : ['']
196 Mot inconnu : try =>     try: | try

197 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f = codecs.open(self.filename, 'r', self.encoding) |        => suggestions : ['']
197 Il manque un espace. =>       f = codecs.open(self.filename, 'r', self.encoding) | open => suggestions : [' open']
197 Il manque un espace avant la parenthèse. =>       f = codecs.open(self.filename, 'r', self.encoding) | ( => suggestions : [' (']
197 Mot inconnu : filename =>       f = codecs.open(self.filename, 'r', self.encoding) | filename
197 Guillemets typographiques ouvrants. =>       f = codecs.open(self.filename, 'r', self.encoding) | ' => suggestions : ['“', '‘', '‹']
197 Mot inconnu : encoding =>       f = codecs.open(self.filename, 'r', self.encoding) | encoding

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.lines = f.readlines() |        => suggestions : ['']
198 Mot inconnu : lines =>       self.lines = f.readlines() | lines
198 Mot inconnu : readlines =>       self.lines = f.readlines() | readlines

199 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f.close() |        => suggestions : ['']
199 Il manque un espace. =>       f.close() | close => suggestions : [' close']

200 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if len(self.lines) > 0 and self.bomLength > 0: |        => suggestions : ['']
200 Mot inconnu : len =>       if len(self.lines) > 0 and self.bomLength > 0: | len
200 Il manque un espace avant la parenthèse. =>       if len(self.lines) > 0 and self.bomLength > 0: | ( => suggestions : [' (']
200 Mot inconnu : lines =>       if len(self.lines) > 0 and self.bomLength > 0: | lines
200 Mot inconnu : and =>       if len(self.lines) > 0 and self.bomLength > 0: | and
200 Mot inconnu : bomLength =>       if len(self.lines) > 0 and self.bomLength > 0: | bomlength

201 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') |          => suggestions : ['']
201 Mot inconnu : lines =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | lines
201 Mot inconnu : lines =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | lines
201 Il manque un espace avant la parenthèse. =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | ( => suggestions : [' (']
201 Mot inconnu : utf-8 =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | utf-8
201 Mot inconnu : decode =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | decode
201 Il manque un espace avant la parenthèse. =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | ( => suggestions : [' (']
201 Mot inconnu : utf-8-sig =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig') | utf-8-sig

202 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     except: |      => suggestions : ['']
202 Mot inconnu : except =>     except: | except

203 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       return False |        => suggestions : ['']
203 Mot inconnu : return =>       return False | return
203 Mot inconnu : False =>       return False | false

204 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return True |      => suggestions : ['']
204 Mot inconnu : return =>     return True | return
204 Mot inconnu : True =>     return True | true

205 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

206 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def parse(self): |    => suggestions : ['']
206 Mot inconnu : def =>   def parse(self): | def
206 Il manque un espace avant la parenthèse. =>   def parse(self): | ( => suggestions : [' (']

207 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     el = None |      => suggestions : ['']
207 Mot inconnu : el =>     el = None | el

208 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     isJustNew = False |      => suggestions : ['']
208 Mot inconnu : isJustNew =>     isJustNew = False | isjustnew
208 Mot inconnu : False =>     isJustNew = False | false

209 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     nextCountReady = True |      => suggestions : ['']
209 Mot inconnu : nextCountReady =>     nextCountReady = True | nextcountready
209 Mot inconnu : True =>     nextCountReady = True | true

210 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     count = 0 |      => suggestions : ['']
210 Mot inconnu : count =>     count = 0 | count

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     emptySub = [] |      => suggestions : ['']
211 Mot inconnu : emptySub =>     emptySub = [] | emptysub

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     skip = False |      => suggestions : ['']
212 Mot inconnu : skip =>     skip = False | skip
212 Mot inconnu : False =>     skip = False | false

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for line in self.lines: |      => suggestions : ['']
213 Mot inconnu : line =>     for line in self.lines: | line
213 Mot inconnu : lines =>     for line in self.lines: | lines

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       l = line.encode('utf-8')    \ |        => suggestions : ['']
214 Mot inconnu : line =>       l = line.encode('utf-8')    \ | line
214 Il manque un espace. =>       l = line.encode('utf-8')    \ | encode => suggestions : [' encode']
214 Il manque un espace avant la parenthèse. =>       l = line.encode('utf-8')    \ | ( => suggestions : [' (']
214 Mot inconnu : utf-8 =>       l = line.encode('utf-8')    \ | utf-8

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         .replace("\n", "")        \ |          => suggestions : ['']
215 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>         .replace("\n", "")        \ |  . => suggestions : ['. ', '.']
215 Il manque un espace avant la parenthèse. =>         .replace("\n", "")        \ | ( => suggestions : [' (']
215 Guillemets typographiques fermants. =>         .replace("\n", "")        \ | " => suggestions : ['\xa0»', '”']

216 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         .replace("\r", "") |          => suggestions : ['']
216 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>         .replace("\r", "") |  . => suggestions : ['. ', '.']
216 Il manque un espace avant la parenthèse. =>         .replace("\r", "") | ( => suggestions : [' (']
216 Guillemets typographiques fermants. =>         .replace("\r", "") | " => suggestions : ['\xa0»', '”']

217 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if isJustNew: |        => suggestions : ['']
217 Mot inconnu : isJustNew =>       if isJustNew: | isjustnew

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         skip = False |          => suggestions : ['']
218 Mot inconnu : skip =>         skip = False | skip
218 Mot inconnu : False =>         skip = False | false

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         isJustNew = False |          => suggestions : ['']
219 Mot inconnu : isJustNew =>         isJustNew = False | isjustnew
219 Mot inconnu : False =>         isJustNew = False | false

220 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         nextCountReady = False |          => suggestions : ['']
220 Mot inconnu : nextCountReady =>         nextCountReady = False | nextcountready
220 Mot inconnu : False =>         nextCountReady = False | false

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         times = l.split(' --> ') |          => suggestions : ['']
221 Mot inconnu : times =>         times = l.split(' --> ') | times
221 Mot inconnu : split =>         times = l.split(' --> ') | split
221 Il manque un espace avant la parenthèse. =>         times = l.split(' --> ') | ( => suggestions : [' (']

222 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el.timeStart = self.parseTime(times[0]) |          => suggestions : ['']
222 Mot inconnu : el =>         el.timeStart = self.parseTime(times[0]) | el
222 Mot inconnu : timeStart =>         el.timeStart = self.parseTime(times[0]) | timestart
222 Mot inconnu : parseTime =>         el.timeStart = self.parseTime(times[0]) | parsetime
222 Il manque un espace avant la parenthèse. =>         el.timeStart = self.parseTime(times[0]) | ( => suggestions : [' (']
222 Mot inconnu : times =>         el.timeStart = self.parseTime(times[0]) | times

223 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el.timeEnd = self.parseTime(times[1]) |          => suggestions : ['']
223 Mot inconnu : el =>         el.timeEnd = self.parseTime(times[1]) | el
223 Mot inconnu : timeEnd =>         el.timeEnd = self.parseTime(times[1]) | timeend
223 Mot inconnu : parseTime =>         el.timeEnd = self.parseTime(times[1]) | parsetime
223 Il manque un espace avant la parenthèse. =>         el.timeEnd = self.parseTime(times[1]) | ( => suggestions : [' (']
223 Mot inconnu : times =>         el.timeEnd = self.parseTime(times[1]) | times

224 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       elif nextCountReady and l.isdigit(): |        => suggestions : ['']
224 Mot inconnu : elif =>       elif nextCountReady and l.isdigit(): | elif
224 Mot inconnu : nextCountReady =>       elif nextCountReady and l.isdigit(): | nextcountready
224 Mot inconnu : and =>       elif nextCountReady and l.isdigit(): | and
224 Mot inconnu : isdigit =>       elif nextCountReady and l.isdigit(): | isdigit

225 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         count += 1 |          => suggestions : ['']
225 Mot inconnu : count =>         count += 1 | count

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         Console.v("Reading SRT #" + str(l) + "\r", False) |          => suggestions : ['']
226 Il manque un espace avant la parenthèse. =>         Console.v("Reading SRT #" + str(l) + "\r", False) | ( => suggestions : [' (']
226 Guillemets typographiques ouvrants. =>         Console.v("Reading SRT #" + str(l) + "\r", False) | " => suggestions : ['«\xa0', '“']
226 Mot inconnu : Reading =>         Console.v("Reading SRT #" + str(l) + "\r", False) | reading
226 Mot inconnu : SRT =>         Console.v("Reading SRT #" + str(l) + "\r", False) | srt
226 Mot inconnu : str =>         Console.v("Reading SRT #" + str(l) + "\r", False) | str
226 Guillemets typographiques fermants. =>         Console.v("Reading SRT #" + str(l) + "\r", False) | " => suggestions : ['\xa0»', '”']
226 Mot inconnu : False =>         Console.v("Reading SRT #" + str(l) + "\r", False) | false

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if int(l) != count: |          => suggestions : ['']
227 Mot inconnu : int =>         if int(l) != count: | int
227 Mot inconnu : count =>         if int(l) != count: | count

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.nl() |            => suggestions : ['']

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) |            => suggestions : ['']
229 Il manque un espace avant la parenthèse. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | ( => suggestions : [' (']
229 Guillemets typographiques ouvrants. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | " => suggestions : ['«\xa0', '“']
229 Mot inconnu : SRT =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | srt
229 Mot inconnu : number =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | number
229 Mot inconnu : Found =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | found
229 Mot inconnu : str =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | str
229 Guillemets fermants. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) |  " => suggestions : ['\xa0»', '”']
229 Mot inconnu : should =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | should
229 Mot inconnu : str =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | str
229 Il manque un espace avant la parenthèse. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | ( => suggestions : [' (']
229 Mot inconnu : count =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count)) | count

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if el != None: |          => suggestions : ['']
230 Mot inconnu : el =>         if el != None: | el

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           if el.text == '': |            => suggestions : ['']
231 Mot inconnu : el =>           if el.text == '': | el
231 Mot inconnu : text =>           if el.text == '': | text

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             emptySub.append(count - 1) |              => suggestions : ['']
232 Mot inconnu : emptySub =>             emptySub.append(count - 1) | emptysub
232 Il manque un espace. =>             emptySub.append(count - 1) | append => suggestions : [' append']
232 Il manque un espace avant la parenthèse. =>             emptySub.append(count - 1) | ( => suggestions : [' (']
232 Mot inconnu : count =>             emptySub.append(count - 1) | count
232 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) =>             emptySub.append(count - 1) |  -  => suggestions : [' – ', ' — ', ' − ', ' −']

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           else: |            => suggestions : ['']
233 Mot inconnu : else =>           else: | else

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             self.elements.append(el) |              => suggestions : ['']
234 Mot inconnu : el =>             self.elements.append(el) | el

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el = SubElement(0, 0, '') |          => suggestions : ['']
235 Mot inconnu : el =>         el = SubElement(0, 0, '') | el
235 Mot inconnu : SubElement =>         el = SubElement(0, 0, '') | subelement
235 Il manque un espace avant la parenthèse. =>         el = SubElement(0, 0, '') | ( => suggestions : [' (']

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         isJustNew = True |          => suggestions : ['']
236 Mot inconnu : isJustNew =>         isJustNew = True | isjustnew
236 Mot inconnu : True =>         isJustNew = True | true

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else: |        => suggestions : ['']
237 Mot inconnu : else =>       else: | else

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if not skip: |          => suggestions : ['']
238 Mot inconnu : not =>         if not skip: | not
238 Mot inconnu : skip =>         if not skip: | skip

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           skip = self.exclude(l) |            => suggestions : ['']
239 Mot inconnu : skip =>           skip = self.exclude(l) | skip
239 Mot inconnu : exclude =>           skip = self.exclude(l) | exclude

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if skip: |          => suggestions : ['']
240 Mot inconnu : skip =>         if skip: | skip

241 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.nl() |            => suggestions : ['']

242 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.w("Skipping SRT '" + l + "'") |            => suggestions : ['']
242 Il manque un espace avant la parenthèse. =>           Console.w("Skipping SRT '" + l + "'") | ( => suggestions : [' (']
242 Guillemets typographiques ouvrants. =>           Console.w("Skipping SRT '" + l + "'") | " => suggestions : ['«\xa0', '“']
242 Mot inconnu : Skipping =>           Console.w("Skipping SRT '" + l + "'") | skipping
242 Mot inconnu : SRT =>           Console.w("Skipping SRT '" + l + "'") | srt

243 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         elif len(l) > 0: |          => suggestions : ['']
243 Mot inconnu : elif =>         elif len(l) > 0: | elif
243 Mot inconnu : len =>         elif len(l) > 0: | len

244 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           l = l.replace("", "œ")   \ |            => suggestions : ['']
244 Il manque un espace. =>           l = l.replace("", "œ")   \ | replace => suggestions : [' replace']
244 Il manque un espace avant la parenthèse. =>           l = l.replace("", "œ")   \ | ( => suggestions : [' (']
244 Guillemets typographiques ouvrants. =>           l = l.replace("", "œ")   \ | " => suggestions : ['«\xa0', '“']
244 Guillemets typographiques fermants. =>           l = l.replace("", "œ")   \ | " => suggestions : ['\xa0»', '”']

245 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "’")      \ |              => suggestions : ['']
245 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "’")      \ |  . => suggestions : ['. ', '.']
245 Il manque un espace avant la parenthèse. =>             .replace("", "’")      \ | ( => suggestions : [' (']

246 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "“")      \ |              => suggestions : ['']
246 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "“")      \ |  . => suggestions : ['. ', '.']
246 Il manque un espace avant la parenthèse. =>             .replace("", "“")      \ | ( => suggestions : [' (']

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "”")      \ |              => suggestions : ['']
247 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "”")      \ |  . => suggestions : ['. ', '.']
247 Il manque un espace avant la parenthèse. =>             .replace("", "”")      \ | ( => suggestions : [' (']

248 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "€")      \ |              => suggestions : ['']
248 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "€")      \ |  . => suggestions : ['. ', '.']
248 Il manque un espace avant la parenthèse. =>             .replace("", "€")      \ | ( => suggestions : [' (']

249 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("´´", '"')      \ |              => suggestions : ['']
249 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("´´", '"')      \ |  . => suggestions : ['. ', '.']
249 Il manque un espace avant la parenthèse. =>             .replace("´´", '"')      \ | ( => suggestions : [' (']

250 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("´", "'")       \ |              => suggestions : ['']
250 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("´", "'")       \ |  . => suggestions : ['. ', '.']
250 Il manque un espace avant la parenthèse. =>             .replace("´", "'")       \ | ( => suggestions : [' (']

251 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("....", "…")    \ |              => suggestions : ['']
251 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("....", "…")    \ |  . => suggestions : ['. ', '.']
251 Il manque un espace avant la parenthèse. =>             .replace("....", "…")    \ | ( => suggestions : [' (']
251 Typographie : points de suspension. Utilisez le caractère dédié. =>             .replace("....", "…")    \ | .... => suggestions : ['…']
251 Guillemets typographiques fermants. =>             .replace("....", "…")    \ | " => suggestions : ['\xa0»', '”']
251 Guillemets typographiques fermants. =>             .replace("....", "…")    \ | " => suggestions : ['\xa0»', '”']

252 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("...", "…")     \ |              => suggestions : ['']
252 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("...", "…")     \ |  . => suggestions : ['. ', '.']
252 Il manque un espace avant la parenthèse. =>             .replace("...", "…")     \ | ( => suggestions : [' (']
252 Typographie : points de suspension. Utilisez le caractère dédié. =>             .replace("...", "…")     \ | ... => suggestions : ['…']
252 Guillemets typographiques fermants. =>             .replace("...", "…")     \ | " => suggestions : ['\xa0»', '”']
252 Guillemets typographiques fermants. =>             .replace("...", "…")     \ | " => suggestions : ['\xa0»', '”']

253 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace(". . .", "…") |              => suggestions : ['']
253 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace(". . .", "…") |  . => suggestions : ['. ', '.']
253 Il manque un espace avant la parenthèse. =>             .replace(". . .", "…") | ( => suggestions : [' (']
253 Pas d’espace avant un point. =>             .replace(". . .", "…") |  . => suggestions : ['.']
253 Guillemets typographiques fermants. =>             .replace(". . .", "…") | " => suggestions : ['\xa0»', '”']
253 Guillemets typographiques fermants. =>             .replace(". . .", "…") | " => suggestions : ['\xa0»', '”']

254 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           l = self.applyLanguageOnLine(l) |            => suggestions : ['']
254 Mot inconnu : applyLanguageOnLine =>           l = self.applyLanguageOnLine(l) | applylanguageonline

255 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           el.appendLine(l) |            => suggestions : ['']
255 Mot inconnu : el =>           el.appendLine(l) | el
255 Mot inconnu : appendLine =>           el.appendLine(l) | appendline

256 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         nextCountReady = True |          => suggestions : ['']
256 Mot inconnu : nextCountReady =>         nextCountReady = True | nextcountready
256 Mot inconnu : True =>         nextCountReady = True | true

257 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

258 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if el != None and len(str(el)) > 0: |      => suggestions : ['']
258 Mot inconnu : el =>     if el != None and len(str(el)) > 0: | el
258 Mot inconnu : and =>     if el != None and len(str(el)) > 0: | and
258 Mot inconnu : len =>     if el != None and len(str(el)) > 0: | len
258 Il manque un espace avant la parenthèse. =>     if el != None and len(str(el)) > 0: | ( => suggestions : [' (']
258 Mot inconnu : str =>     if el != None and len(str(el)) > 0: | str
258 Mot inconnu : el =>     if el != None and len(str(el)) > 0: | el

259 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.elements.append(el) |        => suggestions : ['']
259 Mot inconnu : el =>       self.elements.append(el) | el

260 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

261 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') |      => suggestions : ['']
261 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | ( => suggestions : [' (']
261 Mot inconnu : Parsing =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | parsing
261 Mot inconnu : complete =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | complete
261 Mot inconnu : str =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | str
261 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | ( => suggestions : [' (']
261 Mot inconnu : len =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | len
261 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | ( => suggestions : [' (']
261 Mot inconnu : elements =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | elements
261 Mot inconnu : subtitles =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | subtitles
261 Mot inconnu : found =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!') | found

262 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) |      => suggestions : ['']
262 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | ( => suggestions : [' (']
262 Mot inconnu : str =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | str
262 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | ( => suggestions : [' (']
262 Mot inconnu : len =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | len
262 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | ( => suggestions : [' (']
262 Mot inconnu : emptySub =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | emptysub
262 Mot inconnu : subtitles =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | subtitles
262 Mot inconnu : were =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | were
262 Mot inconnu : empty =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | empty
262 Mot inconnu : str =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | str
262 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | ( => suggestions : [' (']
262 Mot inconnu : emptySub =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub)) | emptysub

263 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

264 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def parseTime(self, time): |    => suggestions : ['']
264 Mot inconnu : def =>   def parseTime(self, time): | def
264 Mot inconnu : parseTime =>   def parseTime(self, time): | parsetime
264 Il manque un espace avant la parenthèse. =>   def parseTime(self, time): | ( => suggestions : [' (']
264 Mot inconnu : time =>   def parseTime(self, time): | time

265 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     r1  = time.split(":") |      => suggestions : ['']
265 Mot inconnu : r1 =>     r1  = time.split(":") | r1
265 Espace(s) surnuméraire(s) à supprimer. =>     r1  = time.split(":") |    => suggestions : [' ']
265 Mot inconnu : time =>     r1  = time.split(":") | time
265 Mot inconnu : split =>     r1  = time.split(":") | split
265 Il manque un espace avant la parenthèse. =>     r1  = time.split(":") | ( => suggestions : [' (']

266 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     h   = int(r1[0]) |      => suggestions : ['']
266 Espace(s) surnuméraire(s) à supprimer. =>     h   = int(r1[0]) |     => suggestions : [' ']
266 Mot inconnu : int =>     h   = int(r1[0]) | int
266 Il manque un espace avant la parenthèse. =>     h   = int(r1[0]) | ( => suggestions : [' (']
266 Mot inconnu : r1 =>     h   = int(r1[0]) | r1

267 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     m   = int(r1[1]) |      => suggestions : ['']
267 Espace(s) surnuméraire(s) à supprimer. =>     m   = int(r1[1]) |     => suggestions : [' ']
267 Mot inconnu : int =>     m   = int(r1[1]) | int
267 Il manque un espace avant la parenthèse. =>     m   = int(r1[1]) | ( => suggestions : [' (']
267 Mot inconnu : r1 =>     m   = int(r1[1]) | r1

268 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     r2  = r1[2].split(',') |      => suggestions : ['']
268 Mot inconnu : r2 =>     r2  = r1[2].split(',') | r2
268 Espace(s) surnuméraire(s) à supprimer. =>     r2  = r1[2].split(',') |    => suggestions : [' ']
268 Mot inconnu : r1 =>     r2  = r1[2].split(',') | r1
268 Mot inconnu : split =>     r2  = r1[2].split(',') | split
268 Il manque un espace avant la parenthèse. =>     r2  = r1[2].split(',') | ( => suggestions : [' (']

269 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     s   = int(r2[0]) |      => suggestions : ['']
269 Espace(s) surnuméraire(s) à supprimer. =>     s   = int(r2[0]) |     => suggestions : [' ']
269 Mot inconnu : int =>     s   = int(r2[0]) | int
269 Il manque un espace avant la parenthèse. =>     s   = int(r2[0]) | ( => suggestions : [' (']
269 Mot inconnu : r2 =>     s   = int(r2[0]) | r2

270 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms  = int(r2[1]) |      => suggestions : ['']
270 Espace(s) surnuméraire(s) à supprimer. =>     ms  = int(r2[1]) |    => suggestions : [' ']
270 Mot inconnu : int =>     ms  = int(r2[1]) | int
270 Il manque un espace avant la parenthèse. =>     ms  = int(r2[1]) | ( => suggestions : [' (']
270 Mot inconnu : r2 =>     ms  = int(r2[1]) | r2

271 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return ((h * 60 + m) * 60 + s) * 1000 + ms |      => suggestions : ['']
271 Mot inconnu : return =>     return ((h * 60 + m) * 60 + s) * 1000 + ms | return

272 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

273 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def applyLanguageOnLine(self, line): |    => suggestions : ['']
273 Mot inconnu : def =>   def applyLanguageOnLine(self, line): | def
273 Mot inconnu : applyLanguageOnLine =>   def applyLanguageOnLine(self, line): | applylanguageonline
273 Il manque un espace avant la parenthèse. =>   def applyLanguageOnLine(self, line): | ( => suggestions : [' (']
273 Mot inconnu : line =>   def applyLanguageOnLine(self, line): | line

274 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return line |      => suggestions : ['']
274 Mot inconnu : return =>     return line | return
274 Mot inconnu : line =>     return line | line

275 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

276 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def exclude(self, line): |    => suggestions : ['']
276 Mot inconnu : def =>   def exclude(self, line): | def
276 Mot inconnu : exclude =>   def exclude(self, line): | exclude
276 Il manque un espace avant la parenthèse. =>   def exclude(self, line): | ( => suggestions : [' (']
276 Mot inconnu : line =>   def exclude(self, line): | line

277 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     l = line.lower() |      => suggestions : ['']
277 Mot inconnu : line =>     l = line.lower() | line
277 Mot inconnu : lower =>     l = line.lower() | lower

278 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for x in exclusion: |      => suggestions : ['']

279 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if l.find(x) != -1: |        => suggestions : ['']
279 Mot inconnu : find =>       if l.find(x) != -1: | find
279 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>       if l.find(x) != -1: | -1 => suggestions : ['−1', '– 1', '— 1']

280 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         return True |          => suggestions : ['']
280 Mot inconnu : return =>         return True | return
280 Mot inconnu : True =>         return True | true

281 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return False |      => suggestions : ['']
281 Mot inconnu : return =>     return False | return
281 Mot inconnu : False =>     return False | false

283 Mot inconnu : class => class Srt2Ass: | class
283 Mot inconnu : Srt2Ass => class Srt2Ass: | srt2ass

284 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

285 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, srt, fregular, fsize, delete): |    => suggestions : ['']
285 Mot inconnu : def =>   def __init__(self, srt, fregular, fsize, delete): | def
285 Mot inconnu : __init__ =>   def __init__(self, srt, fregular, fsize, delete): | __init__
285 Il manque un espace avant la parenthèse. =>   def __init__(self, srt, fregular, fsize, delete): | ( => suggestions : [' (']
285 Mot inconnu : srt =>   def __init__(self, srt, fregular, fsize, delete): | srt
285 Mot inconnu : fregular =>   def __init__(self, srt, fregular, fsize, delete): | fregular
285 Mot inconnu : fsize =>   def __init__(self, srt, fregular, fsize, delete): | fsize
285 Mot inconnu : delete =>   def __init__(self, srt, fregular, fsize, delete): | delete

286 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ass = srt.replace('.srt', '.ass') |      => suggestions : ['']
286 Mot inconnu : ass =>     ass = srt.replace('.srt', '.ass') | ass
286 Mot inconnu : srt =>     ass = srt.replace('.srt', '.ass') | srt
286 Il manque un espace. =>     ass = srt.replace('.srt', '.ass') | replace => suggestions : [' replace']
286 Il manque un espace avant la parenthèse. =>     ass = srt.replace('.srt', '.ass') | ( => suggestions : [' (']
286 Mot inconnu : srt =>     ass = srt.replace('.srt', '.ass') | srt
286 Mot inconnu : ass =>     ass = srt.replace('.srt', '.ass') | ass

287 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     subs = SubRipReader(srt) |      => suggestions : ['']
287 Mot inconnu : subs =>     subs = SubRipReader(srt) | subs
287 Mot inconnu : SubRipReader =>     subs = SubRipReader(srt) | subripreader
287 Il manque un espace avant la parenthèse. =>     subs = SubRipReader(srt) | ( => suggestions : [' (']
287 Mot inconnu : srt =>     subs = SubRipReader(srt) | srt

288 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) |      => suggestions : ['']
288 Mot inconnu : AdvancedSubStationAlphaWriter =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | advancedsubstationalphawriter
288 Il manque un espace avant la parenthèse. =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | ( => suggestions : [' (']
288 Mot inconnu : ass =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | ass
288 Mot inconnu : subs =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | subs
288 Mot inconnu : elements =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | elements
288 Mot inconnu : fregular =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | fregular
288 Mot inconnu : fsize =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize) | fsize

289 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if delete: |      => suggestions : ['']
289 Mot inconnu : delete =>     if delete: | delete

290 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.l("Removing " + srt + "…") |        => suggestions : ['']
290 Il manque un espace avant la parenthèse. =>       Console.l("Removing " + srt + "…") | ( => suggestions : [' (']
290 Guillemets typographiques ouvrants. =>       Console.l("Removing " + srt + "…") | " => suggestions : ['«\xa0', '“']
290 Mot inconnu : Removing =>       Console.l("Removing " + srt + "…") | removing
290 Guillemets isolés. =>       Console.l("Removing " + srt + "…") |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
290 Mot inconnu : srt =>       Console.l("Removing " + srt + "…") | srt
290 Guillemets typographiques fermants. =>       Console.l("Removing " + srt + "…") | " => suggestions : ['\xa0»', '”']

291 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       os.remove(srt) |        => suggestions : ['']
291 Mot inconnu : remove =>       os.remove(srt) | remove
291 Il manque un espace avant la parenthèse. =>       os.remove(srt) | ( => suggestions : [' (']
291 Mot inconnu : srt =>       os.remove(srt) | srt

293 Mot inconnu : __name__ => if __name__ == "__main__": | __name__
293 Guillemets typographiques ouvrants. => if __name__ == "__main__": | " => suggestions : ['«\xa0', '“']
293 Mot inconnu : __main__ => if __name__ == "__main__": | __main__
293 Guillemets typographiques fermants. => if __name__ == "__main__": | " => suggestions : ['\xa0»', '”']

295 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') |    => suggestions : ['']
295 Mot inconnu : argparse =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | argparse
295 Mot inconnu : ArgumentParser =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | argumentparser
295 Il manque un espace avant la parenthèse. =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | ( => suggestions : [' (']
295 Mot inconnu : Convert =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | convert
295 Mot inconnu : SubRip =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | subrip
295 Mot inconnu : srt =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | srt
295 Mot inconnu : to =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | to
295 Mot inconnu : Advanced =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | advanced
295 Mot inconnu : Sub =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | sub
295 Mot inconnu : ass =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.') | ass

296 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') |    => suggestions : ['']
296 Mot inconnu : add_argument =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | add_argument
296 Il manque un espace avant la parenthèse. =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | ( => suggestions : [' (']
296 Mot inconnu : metavar =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | metavar
296 Mot inconnu : nargs =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | nargs
296 Mot inconnu : help =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | help
296 Mot inconnu : the =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | the
296 Mot inconnu : SubRip =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | subrip
296 Mot inconnu : srt =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file') | srt

297 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") |    => suggestions : ['']
297 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | parser => suggestions : ['Parser']
297 Mot inconnu : add_argument =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | add_argument
297 Il manque un espace avant la parenthèse. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | ( => suggestions : [' (']
297 Mot inconnu : font-regular =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | font-regular
297 Mot inconnu : metavar =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | metavar
297 Mot inconnu : fontr =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | fontr
297 Mot inconnu : nargs =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | nargs
297 Mot inconnu : help =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | help
297 Mot inconnu : Name =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | name
297 Mot inconnu : of =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | of
297 Mot inconnu : the =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | the
297 Mot inconnu : to =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | to
297 Mot inconnu : regular =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | regular
297 Mot inconnu : text =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | text
297 Mot inconnu : Default =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | default
297 Mot inconnu : is =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | is
297 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | " => suggestions : ['«\xa0', '“']
297 Mot inconnu : Cronos =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | cronos
297 Guillemets typographiques fermants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | " => suggestions : ['\xa0»', '”']
297 Mot inconnu : default =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | default
297 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | " => suggestions : ['«\xa0', '“']
297 Mot inconnu : Cronos =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | cronos
297 Guillemets typographiques fermants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro") | " => suggestions : ['\xa0»', '”']

298 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") |    => suggestions : ['']
298 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | parser => suggestions : ['Parser']
298 Mot inconnu : add_argument =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | add_argument
298 Il manque un espace avant la parenthèse. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | ( => suggestions : [' (']
298 Mot inconnu : font-size =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | font-size
298 Mot inconnu : metavar =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | metavar
298 Mot inconnu : nargs =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | nargs
298 Mot inconnu : help =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | help
298 Mot inconnu : size =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | size
298 Mot inconnu : both =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | both
298 Mot inconnu : regular =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | regular
298 Mot inconnu : and =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | and
298 Mot inconnu : italic =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | italic
298 Mot inconnu : Default =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | default
298 Mot inconnu : is =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | is
298 Mot inconnu : default =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | default
298 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | " => suggestions : ['«\xa0', '“']
298 Guillemets typographiques fermants. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24") | " => suggestions : ['\xa0»', '”']

299 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') |    => suggestions : ['']
299 Mot inconnu : add_argument =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | add_argument
299 Il manque un espace avant la parenthèse. =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | ( => suggestions : [' (']
299 Mot inconnu : delete =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | delete
299 Mot inconnu : store_true =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | store_true
299 Mot inconnu : help =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | help
299 Mot inconnu : delete =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | delete
299 Mot inconnu : the =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | the
299 Mot inconnu : SubRip =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | subrip
299 Mot inconnu : srt =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file') | srt

300 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') |    => suggestions : ['']
300 Mot inconnu : add_argument =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | add_argument
300 Il manque un espace avant la parenthèse. =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | ( => suggestions : [' (']
300 Mot inconnu : verbose =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | verbose
300 Mot inconnu : store_true =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | store_true
300 Mot inconnu : help =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | help
300 Mot inconnu : print =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | print
300 Mot inconnu : the =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process') | the

301 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   args = parser.parse_args() |    => suggestions : ['']
301 Mot inconnu : args =>   args = parser.parse_args() | args
301 Mot inconnu : parse_args =>   args = parser.parse_args() | parse_args

302 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

303 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   Console.verbose = args.verbose |    => suggestions : ['']
303 Mot inconnu : verbose =>   Console.verbose = args.verbose | verbose
303 Mot inconnu : args =>   Console.verbose = args.verbose | args
303 Mot inconnu : verbose =>   Console.verbose = args.verbose | verbose

304 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

305 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   srtfiles = [] |    => suggestions : ['']
305 Mot inconnu : srtfiles =>   srtfiles = [] | srtfiles

306 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   if len(args.file) == 0: |    => suggestions : ['']
306 Mot inconnu : len =>   if len(args.file) == 0: | len
306 Il manque un espace avant la parenthèse. =>   if len(args.file) == 0: | ( => suggestions : [' (']
306 Mot inconnu : args =>   if len(args.file) == 0: | args
306 Il manque un espace. =>   if len(args.file) == 0: | file => suggestions : [' file']

307 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     os.chdir(".") |      => suggestions : ['']
307 Mot inconnu : chdir =>     os.chdir(".") | chdir
307 Il manque un espace avant la parenthèse. =>     os.chdir(".") | ( => suggestions : [' (']
307 Guillemets typographiques fermants. =>     os.chdir(".") | " => suggestions : ['\xa0»', '”']

308 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = glob.glob("*.srt") |      => suggestions : ['']
308 Mot inconnu : srtfiles =>     srtfiles = glob.glob("*.srt") | srtfiles
308 Mot inconnu : glob =>     srtfiles = glob.glob("*.srt") | glob
308 Mot inconnu : glob =>     srtfiles = glob.glob("*.srt") | glob
308 Il manque un espace avant la parenthèse. =>     srtfiles = glob.glob("*.srt") | ( => suggestions : [' (']
308 Mot inconnu : srt =>     srtfiles = glob.glob("*.srt") | srt
308 Guillemets typographiques fermants. =>     srtfiles = glob.glob("*.srt") | " => suggestions : ['\xa0»', '”']

309 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   elif len(args.file) == 1: |    => suggestions : ['']
309 Mot inconnu : elif =>   elif len(args.file) == 1: | elif
309 Mot inconnu : len =>   elif len(args.file) == 1: | len
309 Il manque un espace avant la parenthèse. =>   elif len(args.file) == 1: | ( => suggestions : [' (']
309 Mot inconnu : args =>   elif len(args.file) == 1: | args
309 Il manque un espace. =>   elif len(args.file) == 1: | file => suggestions : [' file']

310 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     os.chdir(".") |      => suggestions : ['']
310 Mot inconnu : chdir =>     os.chdir(".") | chdir
310 Il manque un espace avant la parenthèse. =>     os.chdir(".") | ( => suggestions : [' (']
310 Guillemets typographiques fermants. =>     os.chdir(".") | " => suggestions : ['\xa0»', '”']

311 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = glob.glob(args.file[0]) |      => suggestions : ['']
311 Mot inconnu : srtfiles =>     srtfiles = glob.glob(args.file[0]) | srtfiles
311 Mot inconnu : glob =>     srtfiles = glob.glob(args.file[0]) | glob
311 Mot inconnu : glob =>     srtfiles = glob.glob(args.file[0]) | glob
311 Il manque un espace avant la parenthèse. =>     srtfiles = glob.glob(args.file[0]) | ( => suggestions : [' (']
311 Mot inconnu : args =>     srtfiles = glob.glob(args.file[0]) | args
311 Il manque un espace. =>     srtfiles = glob.glob(args.file[0]) | file => suggestions : [' file']

312 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   else: |    => suggestions : ['']
312 Mot inconnu : else =>   else: | else

313 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = args.file |      => suggestions : ['']
313 Mot inconnu : srtfiles =>     srtfiles = args.file | srtfiles
313 Mot inconnu : args =>     srtfiles = args.file | args
313 Il manque un espace. =>     srtfiles = args.file | file => suggestions : [' file']

314 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

315 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for srt in srtfiles: |    => suggestions : ['']
315 Mot inconnu : srt =>   for srt in srtfiles: | srt
315 Mot inconnu : srtfiles =>   for srt in srtfiles: | srtfiles

316 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) |      => suggestions : ['']
316 Mot inconnu : Srt2Ass =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | srt2ass
316 Il manque un espace avant la parenthèse. =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | ( => suggestions : [' (']
316 Mot inconnu : srt =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | srt
316 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | args
316 Mot inconnu : font_regular =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | font_regular
316 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | args
316 Mot inconnu : font_size =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | font_size
316 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | args
316 Mot inconnu : delete =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete) | delete

320 Mot inconnu : SRT => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note> | srt
320 Mot inconnu : SRT => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note> | srt
320 Mot inconnu : Subtitle => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note> | subtitle
320 Mot inconnu : Editor => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note> | editor
