
6 Mot inconnu : gapz => Ceci est un compte-rendu du cours donné par gapz et FiFouille sur le canal IRC #ubuntu-fr-classroom le 27 janvier 2007. Ce cours est orienté débutant et a pour but de donner de solides bases. Pour le suivre il suffit de savoir ouvrir un terminal. | gapz
6 Mot inconnu : FiFouille => Ceci est un compte-rendu du cours donné par gapz et FiFouille sur le canal IRC #ubuntu-fr-classroom le 27 janvier 2007. Ce cours est orienté débutant et a pour but de donner de solides bases. Pour le suivre il suffit de savoir ouvrir un terminal. | fifouille
6 Mot inconnu : IRC => Ceci est un compte-rendu du cours donné par gapz et FiFouille sur le canal IRC #ubuntu-fr-classroom le 27 janvier 2007. Ce cours est orienté débutant et a pour but de donner de solides bases. Pour le suivre il suffit de savoir ouvrir un terminal. | irc

17 Mot inconnu : sh => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | sh
17 Mot inconnu : bash => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | bash
17 Mot inconnu : csh => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | csh
17 Mot inconnu : zsh => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | zsh
17 Mot inconnu : ksh => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | ksh
17 Typographie : points de suspension. Utilisez le caractère dédié. => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | ... => suggestions : ['…']
17 Mot inconnu : xterm => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | xterm
17 Mot inconnu : eterm => >Quand on parle du Shell, on fait souvent référence à l'interpréteur de commande, autrefois nommé sh (contraction de shell), et qui a ensuite donné naissance à tout un éventail d'interpréteurs tels que bash, csh, zsh, ksh... qu'il ne faut pas confondre avec un émulateur de terminal comme xterm, eterm, gnome-terminal qui est un outil graphique qui permet d'avoir accès au shell. | eterm

19 Mot inconnu : Fx => En réalité, les vrais terminaux sont accessibles via la combinaison de touche CTRL + ALT + Fx (où x est un chiffre entre 1 et 6) lorsque vous êtes dans un environnement graphique, le 7 correspondant à cette session. Si vous êtes dans un vrai Terminal, il faut théoriquement utiliser ALT + Fx. À noter également qu'un émulateur permet d'afficher une sorte de TTY (TéléTYpe) dans la session graphique. | fx
19 Mot inconnu : Fx => En réalité, les vrais terminaux sont accessibles via la combinaison de touche CTRL + ALT + Fx (où x est un chiffre entre 1 et 6) lorsque vous êtes dans un environnement graphique, le 7 correspondant à cette session. Si vous êtes dans un vrai Terminal, il faut théoriquement utiliser ALT + Fx. À noter également qu'un émulateur permet d'afficher une sorte de TTY (TéléTYpe) dans la session graphique. | fx
19 Mot inconnu : TTY => En réalité, les vrais terminaux sont accessibles via la combinaison de touche CTRL + ALT + Fx (où x est un chiffre entre 1 et 6) lorsque vous êtes dans un environnement graphique, le 7 correspondant à cette session. Si vous êtes dans un vrai Terminal, il faut théoriquement utiliser ALT + Fx. À noter également qu'un émulateur permet d'afficher une sorte de TTY (TéléTYpe) dans la session graphique. | tty
19 Mot inconnu : TéléTYpe => En réalité, les vrais terminaux sont accessibles via la combinaison de touche CTRL + ALT + Fx (où x est un chiffre entre 1 et 6) lorsque vous êtes dans un environnement graphique, le 7 correspondant à cette session. Si vous êtes dans un vrai Terminal, il faut théoriquement utiliser ALT + Fx. À noter également qu'un émulateur permet d'afficher une sorte de TTY (TéléTYpe) dans la session graphique. | télétype

21 Il manque un trait d’union. => Le Shell vous donne accès à toute une gamme d'outils très performants qui permettent d'effectuer des tâches impossibles jusque là mais aussi de les automatiser, et cela d'une manière assez simple. De nombreuses interfaces graphiques sont certes disponibles, mais le shell reste très léger, rapide, accessible, efficace... | jusque là => suggestions : ['jusque-là']
21 Typographie : points de suspension. Utilisez le caractère dédié. => Le Shell vous donne accès à toute une gamme d'outils très performants qui permettent d'effectuer des tâches impossibles jusque là mais aussi de les automatiser, et cela d'une manière assez simple. De nombreuses interfaces graphiques sont certes disponibles, mais le shell reste très léger, rapide, accessible, efficace... | ... => suggestions : ['…']

27 Mot inconnu : stdin => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stdin
27 Mot inconnu : stdout => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stdout
27 Mot inconnu : stderr => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stderr
27 Mot inconnu : stdin => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stdin
27 Mot inconnu : stdout => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stdout
27 Mot inconnu : stderr => En général, un programme dispose d'une **entrée standard**, d'une **sortie standard**, et d'une **sortie d'erreur standard**, aussi connues sous le nom de **stdin**, **stdout**, **stderr**. Globalement stdin représente le clavier, stdout l'écran et stderr la sortie des messages d'erreur vers l'écran : ceci peut bien entendu varier suivant les programmes, il ne s'agit que d'un exemple. | stderr

31 Espace(s) surnuméraire(s) à supprimer. => ^ Entrées/Sorties             ^ Nom      ^ Numéro   ^   |               => suggestions : [' ']
31 Espace(s) surnuméraire(s) à supprimer. => ^ Entrées/Sorties             ^ Nom      ^ Numéro   ^   |        => suggestions : [' ']
31 Espace(s) surnuméraire(s) à supprimer. => ^ Entrées/Sorties             ^ Nom      ^ Numéro   ^   |     => suggestions : [' ']
31 Espace(s) en fin de ligne à supprimer. => ^ Entrées/Sorties             ^ Nom      ^ Numéro   ^   |    => suggestions : ['']

32 Espace(s) surnuméraire(s) à supprimer. => | Entrée standard             |  stdin   |   0      | |               => suggestions : [' ']
32 Mot inconnu : stdin => | Entrée standard             |  stdin   |   0      | | stdin
32 Espace(s) surnuméraire(s) à supprimer. => | Entrée standard             |  stdin   |   0      | |     => suggestions : [' ']
32 Espace(s) surnuméraire(s) à supprimer. => | Entrée standard             |  stdin   |   0      | |        => suggestions : [' ']

33 Espace(s) surnuméraire(s) à supprimer. => | Sortie standard             |  stdout  |   1      | |               => suggestions : [' ']
33 Mot inconnu : stdout => | Sortie standard             |  stdout  |   1      | | stdout
33 Espace(s) surnuméraire(s) à supprimer. => | Sortie standard             |  stdout  |   1      | |    => suggestions : [' ']
33 Espace(s) surnuméraire(s) à supprimer. => | Sortie standard             |  stdout  |   1      | |        => suggestions : [' ']

34 Espace(s) surnuméraire(s) à supprimer. => | Sortie d'erreur standard    |  stderr  |   2      | |      => suggestions : [' ']
34 Mot inconnu : stderr => | Sortie d'erreur standard    |  stderr  |   2      | | stderr
34 Espace(s) surnuméraire(s) à supprimer. => | Sortie d'erreur standard    |  stderr  |   2      | |    => suggestions : [' ']
34 Espace(s) surnuméraire(s) à supprimer. => | Sortie d'erreur standard    |  stderr  |   2      | |        => suggestions : [' ']

38 Guillemets typographiques ouvrants. => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | " => suggestions : ['«\xa0', '“']
38 Mot inconnu : lfdfdfj => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | lfdfdfj
38 Guillemets typographiques fermants. => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | " => suggestions : ['\xa0»', '”']
38 Guillemets typographiques ouvrants. => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | " => suggestions : ['«\xa0', '“']
38 Mot inconnu : bash => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | bash
38 Mot inconnu : lfdfdfj => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | lfdfdfj
38 Mot inconnu : command => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | command
38 Mot inconnu : not => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | not
38 Mot inconnu : found => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | found
38 Guillemets typographiques fermants. => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | " => suggestions : ['\xa0»', '”']
38 Mot inconnu : stderr => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | stderr
38 Mot inconnu : ls => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | ls
38 Mot inconnu : stdout => Concrètement si vous exécutez "lfdfdfj" dans un terminal, "bash: lfdfdfj: command not found" sera retourné sur stderr. Par contre, si vous tapez ls, le résultat sera retourné sur stdout. | stdout

47 Mot inconnu : Dokuwiki => >Dokuwiki remplace automatiquement > >  et < <(sans l'espace entre les deux) par un guillemet comme ça >> et comme ça <<, donc jusqu'à ce qu'une solution soit trouvée (par vous peut être...) pensez à faire le changement mentalement. | dokuwiki
47 Typographie : points de suspension. Utilisez le caractère dédié. => >Dokuwiki remplace automatiquement > >  et < <(sans l'espace entre les deux) par un guillemet comme ça >> et comme ça <<, donc jusqu'à ce qu'une solution soit trouvée (par vous peut être...) pensez à faire le changement mentalement. | ... => suggestions : ['…']

53 Guillemets typographiques ouvrants. => Prenons un exemple, on connaît la commande "ls" qui donne la liste des fichiers d'un répertoire et on veut enregistrer le résultat dans un fichier. Pour cela on    va rediriger le résultat de la sortie standard dans le fichier test à l'aide de la commande suivante : | " => suggestions : ['«\xa0', '“']
53 Mot inconnu : ls => Prenons un exemple, on connaît la commande "ls" qui donne la liste des fichiers d'un répertoire et on veut enregistrer le résultat dans un fichier. Pour cela on    va rediriger le résultat de la sortie standard dans le fichier test à l'aide de la commande suivante : | ls
53 Guillemets typographiques fermants. => Prenons un exemple, on connaît la commande "ls" qui donne la liste des fichiers d'un répertoire et on veut enregistrer le résultat dans un fichier. Pour cela on    va rediriger le résultat de la sortie standard dans le fichier test à l'aide de la commande suivante : | " => suggestions : ['\xa0»', '”']
53 Espace(s) surnuméraire(s) à supprimer. => Prenons un exemple, on connaît la commande "ls" qui donne la liste des fichiers d'un répertoire et on veut enregistrer le résultat dans un fichier. Pour cela on    va rediriger le résultat de la sortie standard dans le fichier test à l'aide de la commande suivante : |      => suggestions : [' ']

57 Mot inconnu : stderr => De même si on veut enregistrer stderr de la commande "lfdfdfj", on utilise : | stderr
57 Guillemets typographiques ouvrants. => De même si on veut enregistrer stderr de la commande "lfdfdfj", on utilise : | " => suggestions : ['«\xa0', '“']
57 Mot inconnu : lfdfdfj => De même si on veut enregistrer stderr de la commande "lfdfdfj", on utilise : | lfdfdfj
57 Guillemets typographiques fermants. => De même si on veut enregistrer stderr de la commande "lfdfdfj", on utilise : | " => suggestions : ['\xa0»', '”']

61 Mot inconnu : stdout => Dans le premier exemple, on peut constater que l'on ne précise pas le descripteur de fichier redirigé (1), en effet le descripteur de fichier redirigé par défaut est stdout. | stdout

69 Il faut élider “si” et l’accoler au pronom. => Si test n'existe pas il sera créé, si il existe le résultat sera ajouté à son contenu (à la fin du fichier). De la même manière, vous pouvez rediriger stderr :  | si  => suggestions : ['s’']
69 Mot inconnu : stderr => Si test n'existe pas il sera créé, si il existe le résultat sera ajouté à son contenu (à la fin du fichier). De la même manière, vous pouvez rediriger stderr :  | stderr
69 Espace(s) en fin de ligne à supprimer. => Si test n'existe pas il sera créé, si il existe le résultat sera ajouté à son contenu (à la fin du fichier). De la même manière, vous pouvez rediriger stderr :  |   => suggestions : ['']

73 Guillemets typographiques ouvrants. => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | " => suggestions : ['«\xa0', '“']
73 Guillemets typographiques fermants. => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | " => suggestions : ['\xa0»', '”']
73 Guillemets typographiques ouvrants. => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | " => suggestions : ['«\xa0', '“']
73 Mot inconnu : stderr => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | stderr
73 Mot inconnu : stdout => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | stdout
73 Guillemets typographiques fermants. => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  | " => suggestions : ['\xa0»', '”']
73 Espace(s) en fin de ligne à supprimer. => Mais il est également possible de rediriger une sortie vers une autre sortie, par exemple "2>&1" signifie "rediriger stderr vers ce que représente stdout". Ainsi  |   => suggestions : ['']

77 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | redirigera => suggestions : ['Redirigera']
77 Mot inconnu : stdout => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | stdout
77 Mot inconnu : stderr => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | stderr
77 Mot inconnu : stderr => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | stderr
77 Mot inconnu : stdout => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | stdout
77 Mot inconnu : ls => redirigera stdout et stderr dans le fichier test. Vous remarquerez que les redirections s'effectuent de droite à gauche : la sortie stderr 2 est tout d'abord redirigée vers la sortie stdout 1, puis la sortie standard de ls s'inscrit dans le fichier test. | ls

81 Mot inconnu : stdin => Pour rediriger vers l'entrée standard stdin, nous allons utiliser "<" et "<<".  | stdin
81 Espace(s) en fin de ligne à supprimer. => Pour rediriger vers l'entrée standard stdin, nous allons utiliser "<" et "<<".  |   => suggestions : ['']

83 Guillemets typographiques ouvrants. => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : | " => suggestions : ['«\xa0', '“']
83 Mot inconnu : wc => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : | wc
83 Guillemets typographiques fermants. => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : | " => suggestions : ['\xa0»', '”']
83 Il manque un espace à côté du tiret. => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : |  - => suggestions : [' – ', ' — ']
83 Il manque un espace à côté du tiret. => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : |  - => suggestions : [' – ', ' — ']
83 Mot inconnu : wc => "wc" permet de compter le nombre de lignes (option -l) ou de mots (option -w), plus d'informations dans la page man de wc, en entrée. Pour compter le nombre de lignes d'un fichier on peut donc utiliser : | wc

87 Mot inconnu : wc => Cette commande donnera le même résultat car wc peut prendre un fichier comme paramètre : | wc

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   |   => suggestions : ['']

91 Mot inconnu : stdin => "<<" permet lui aussi de rediriger stdin mais jusqu'à une chaîne de caractère que l'on précisera : littéralement on pourrait dire que << transmet notre entrée standard (clavier) au programme à sa gauche, et cela jusqu'à ce qu'il rencontre une ligne EOF ((End of File : Fin de fichier)). | stdin
91 Mot inconnu : EOF => "<<" permet lui aussi de rediriger stdin mais jusqu'à une chaîne de caractère que l'on précisera : littéralement on pourrait dire que << transmet notre entrée standard (clavier) au programme à sa gauche, et cela jusqu'à ce qu'il rencontre une ligne EOF ((End of File : Fin de fichier)). | eof
91 Mot inconnu : End => "<<" permet lui aussi de rediriger stdin mais jusqu'à une chaîne de caractère que l'on précisera : littéralement on pourrait dire que << transmet notre entrée standard (clavier) au programme à sa gauche, et cela jusqu'à ce qu'il rencontre une ligne EOF ((End of File : Fin de fichier)). | end
91 Mot inconnu : of => "<<" permet lui aussi de rediriger stdin mais jusqu'à une chaîne de caractère que l'on précisera : littéralement on pourrait dire que << transmet notre entrée standard (clavier) au programme à sa gauche, et cela jusqu'à ce qu'il rencontre une ligne EOF ((End of File : Fin de fichier)). | of

93 Mot inconnu : EOF => Par exemple la commande suivante vous permettra de taper un texte, d'aller à la ligne autant de fois que vous voulez en appuyant sur Entrée, puis lorsque vous taperez EOF (pour End of File, fin du fichier) et entrée, elle comptera le nombre de lignes (celle de EOF non comprise) que vous avez entrées. | eof
93 Mot inconnu : End => Par exemple la commande suivante vous permettra de taper un texte, d'aller à la ligne autant de fois que vous voulez en appuyant sur Entrée, puis lorsque vous taperez EOF (pour End of File, fin du fichier) et entrée, elle comptera le nombre de lignes (celle de EOF non comprise) que vous avez entrées. | end
93 Mot inconnu : of => Par exemple la commande suivante vous permettra de taper un texte, d'aller à la ligne autant de fois que vous voulez en appuyant sur Entrée, puis lorsque vous taperez EOF (pour End of File, fin du fichier) et entrée, elle comptera le nombre de lignes (celle de EOF non comprise) que vous avez entrées. | of
93 Mot inconnu : EOF => Par exemple la commande suivante vous permettra de taper un texte, d'aller à la ligne autant de fois que vous voulez en appuyant sur Entrée, puis lorsque vous taperez EOF (pour End of File, fin du fichier) et entrée, elle comptera le nombre de lignes (celle de EOF non comprise) que vous avez entrées. | eof

97 Accord de genre erroné : « chaîne » est féminin. => Vous pouvez bien sur spécifier un chaîne différente de EOF comme FIN, END... | un => suggestions : ['une']
97 Accord de genre erroné : « un » est un déterminant masculin. => Vous pouvez bien sur spécifier un chaîne différente de EOF comme FIN, END... | chaîne => suggestions : ['chêne', 'chaîné']
97 Mot inconnu : EOF => Vous pouvez bien sur spécifier un chaîne différente de EOF comme FIN, END... | eof
97 Mot inconnu : END => Vous pouvez bien sur spécifier un chaîne différente de EOF comme FIN, END... | end
97 Typographie : points de suspension. Utilisez le caractère dédié. => Vous pouvez bien sur spécifier un chaîne différente de EOF comme FIN, END... | ... => suggestions : ['…']
99 Espace(s) en fin de ligne à supprimer. => En utilisant ">>" et "<<" nous pouvons facilement ajouter du texte dans un fichier de notre choix de la même manière qu'un éditeur de texte :  |   => suggestions : ['']

103 Mot inconnu : EOF => Le texte tapé sera ajouté au fichier jusqu'à ce que vous vous écriviez EOF et validiez par entrée. | eof

109 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - commande (dont les stdout et stderr sont redirigées) | -  => suggestions : ['—\xa0', '–\xa0']
109 Mot inconnu : stdout => - commande (dont les stdout et stderr sont redirigées) | stdout
109 Mot inconnu : stderr => - commande (dont les stdout et stderr sont redirigées) | stderr

111 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - stdout vers /dev/null (le trou noir) | -  => suggestions : ['—\xa0', '–\xa0']
111 Mot inconnu : stdout => - stdout vers /dev/null (le trou noir) | stdout

113 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - stderr vers stdout ... donc vers /dev/null | -  => suggestions : ['—\xa0', '–\xa0']
113 Mot inconnu : stderr => - stderr vers stdout ... donc vers /dev/null | stderr
113 Mot inconnu : stdout => - stderr vers stdout ... donc vers /dev/null | stdout
113 Typographie : points de suspension. Utilisez le caractère dédié. => - stderr vers stdout ... donc vers /dev/null | ... => suggestions : ['…']

121 Mot inconnu : null => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | null
121 Mot inconnu : stdout => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | stdout
121 Guillemets typographiques ouvrants. => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | " => suggestions : ['«\xa0', '“']
121 Mot inconnu : ls => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | ls
121 Mot inconnu : null => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | null
121 Mot inconnu : null => >Même si cela ne traite pas directement des redirections, il est important de connaitre un fichier spécial nommé **null**. Il permet de rediriger un descripteur de fichier vers un fichier qui supprimera toutes les données qui lui seront ajoutées. Il porte le nom d'**absorbeur de données**. Si par exemple vous ne voulez pas voir le résultat d'une commande, il vous suffit de rediriger stdout vers /dev/null : "ls >/dev/null". Pour plus d'information sur le fichier null voir la page man de null. | null

131 Mot inconnu : fondadamentales => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | fondadamentales
131 Mot inconnu : cp => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | cp
131 Mot inconnu : mv => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | mv
131 Mot inconnu : ls => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | ls
131 Mot inconnu : rm => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | rm
131 Mot inconnu : chmod => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | chmod
131 Mot inconnu : chown => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | chown
131 Mot inconnu : find => Pour cette partie, consulter http://doc.ubuntu-fr.org/console/commandes_de_base pour les commandes fondadamentales : cp, mv, ls, cd, rm, chmod, chown et find. | find

133 Mot inconnu : Cut => ==== Cut ==== | cut

135 Mot inconnu : cut => Pour présenter l'outil **cut** nous allons par exemple considérer que nous voulons obtenir le premier mot (correspondant au nom de l'utilisateur) du fichier /etc/passwd. | cut

137 Mot inconnu : cut => Avec cut, vous pouvez supprimer une partie de chaque ligne d'un fichier, soit en indiquant un séparateur (avec l'option -d), soit en indiquant la position (via -c).  | cut
137 Il manque un espace à côté du tiret. => Avec cut, vous pouvez supprimer une partie de chaque ligne d'un fichier, soit en indiquant un séparateur (avec l'option -d), soit en indiquant la position (via -c).  |  - => suggestions : [' – ', ' — ']
137 Il manque un espace à côté du tiret. => Avec cut, vous pouvez supprimer une partie de chaque ligne d'un fichier, soit en indiquant un séparateur (avec l'option -d), soit en indiquant la position (via -c).  |  - => suggestions : [' – ', ' — ']
137 Espace(s) en fin de ligne à supprimer. => Avec cut, vous pouvez supprimer une partie de chaque ligne d'un fichier, soit en indiquant un séparateur (avec l'option -d), soit en indiquant la position (via -c).  |   => suggestions : ['']
139 Espace(s) en fin de ligne à supprimer. => Voyons tout de suite un exemple :  |   => suggestions : ['']

143 Mot inconnu : f1 => L'option "-d:" indique que le **séparateur** sera ":", et "-f1" indique que l'on veut récupérer seulement la **première partie**.  | f1
143 Guillemets typographiques fermants. => L'option "-d:" indique que le **séparateur** sera ":", et "-f1" indique que l'on veut récupérer seulement la **première partie**.  | " => suggestions : ['\xa0»', '”']
143 Espace(s) en fin de ligne à supprimer. => L'option "-d:" indique que le **séparateur** sera ":", et "-f1" indique que l'on veut récupérer seulement la **première partie**.  |   => suggestions : ['']

146 Il manque un espace à côté du tiret. => >Pour utiliser l'espace comme caractère de séparation, utilisez l'option -d" ". |  - => suggestions : [' – ', ' — ']
146 Guillemets typographiques fermants. => >Pour utiliser l'espace comme caractère de séparation, utilisez l'option -d" ". | " => suggestions : ['\xa0»', '”']
146 Guillemets fermants. => >Pour utiliser l'espace comme caractère de séparation, utilisez l'option -d" ". |  " => suggestions : ['\xa0»', '”']
152 Espace(s) en fin de ligne à supprimer. => Maintenant si l'on travaille en fonction de la position :  |   => suggestions : ['']

156 Mot inconnu : passwd => Vous l'aurez compris cette commande récupère les caractères de 1 à 10 du fichier passwd. | passwd

158 Mot inconnu : Head => ==== Head et Tail ==== | head
158 Mot inconnu : Tail => ==== Head et Tail ==== | tail

160 Erreur de numérisation ? Virgules au lieu de points ? => Il est souvent utile de ne voir que le début ou que la fin d'un texte, du résultat d'une commande,... Il existe pour cela deux outils : **head** (tête en français) et **tail** (queue en français). | ,... => suggestions : ['….']
160 Typographie : points de suspension. Utilisez le caractère dédié. => Il est souvent utile de ne voir que le début ou que la fin d'un texte, du résultat d'une commande,... Il existe pour cela deux outils : **head** (tête en français) et **tail** (queue en français). | ... => suggestions : ['…']
160 Mot inconnu : head => Il est souvent utile de ne voir que le début ou que la fin d'un texte, du résultat d'une commande,... Il existe pour cela deux outils : **head** (tête en français) et **tail** (queue en français). | head
160 Mot inconnu : tail => Il est souvent utile de ne voir que le début ou que la fin d'un texte, du résultat d'une commande,... Il existe pour cela deux outils : **head** (tête en français) et **tail** (queue en français). | tail

170 Typographie : points de suspension. Utilisez le caractère dédié. => Pour récupérer le résultat d'une commande, nous allons utiliser l'opérateur | appelé **pipe** (qui signifie tuyau...), son fonctionnement sera expliqué plus bas. Pour récupérer les 5 dernières du résultat de dmesg : | ... => suggestions : ['…']
170 Mot inconnu : dmesg => Pour récupérer le résultat d'une commande, nous allons utiliser l'opérateur | appelé **pipe** (qui signifie tuyau...), son fonctionnement sera expliqué plus bas. Pour récupérer les 5 dernières du résultat de dmesg : | dmesg

174 Il manque un espace à côté du tiret. => L'option -f permet d'afficher, à chaque fois qu'ils ont lieu, les ajouts au fichier, par exemple :  |  - => suggestions : [' – ', ' — ']
174 Espace(s) en fin de ligne à supprimer. => L'option -f permet d'afficher, à chaque fois qu'ils ont lieu, les ajouts au fichier, par exemple :  |   => suggestions : ['']
184 Espace(s) en fin de ligne à supprimer. => Cet opérateur permet d'envoyer la **sortie standard** d'un programme **vers** **l'entrée standard** d'un second programme, cela permet ainsi l'enchaînement des commandes. Par exemple :  |   => suggestions : ['']

188 Guillemets typographiques ouvrants. => La sortie standard de "ls" devient l'entrée standard de "wc -l". | " => suggestions : ['«\xa0', '“']
188 Mot inconnu : ls => La sortie standard de "ls" devient l'entrée standard de "wc -l". | ls
188 Guillemets typographiques fermants. => La sortie standard de "ls" devient l'entrée standard de "wc -l". | " => suggestions : ['\xa0»', '”']
188 Guillemets typographiques ouvrants. => La sortie standard de "ls" devient l'entrée standard de "wc -l". | " => suggestions : ['«\xa0', '“']
188 Mot inconnu : wc => La sortie standard de "ls" devient l'entrée standard de "wc -l". | wc
188 Il manque un espace à côté du tiret. => La sortie standard de "ls" devient l'entrée standard de "wc -l". |  - => suggestions : [' – ', ' — ']
188 Guillemets typographiques fermants. => La sortie standard de "ls" devient l'entrée standard de "wc -l". | " => suggestions : ['\xa0»', '”']
190 Espace(s) en fin de ligne à supprimer. => Autres exemples :  |   => suggestions : ['']

197 Guillemets typographiques ouvrants. => >sort permet de trier les lignes d'un fichier texte, pour plus d'information "man sort".  | " => suggestions : ['«\xa0', '“']
197 Guillemets typographiques fermants. => >sort permet de trier les lignes d'un fichier texte, pour plus d'information "man sort".  | " => suggestions : ['\xa0»', '”']
197 Espace(s) en fin de ligne à supprimer. => >sort permet de trier les lignes d'un fichier texte, pour plus d'information "man sort".  |   => suggestions : ['']
199 Espace(s) en fin de ligne à supprimer. => Vous pouvez bien sûr étendre cela à plus de deux programmes :  |   => suggestions : ['']
203 Espace(s) en fin de ligne à supprimer. => Vous pouvez aussi utiliser les redirections vues précédemment :  |   => suggestions : ['']

207 Guillemets typographiques ouvrants. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | " => suggestions : ['«\xa0', '“']
207 Mot inconnu : ls => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | ls
207 Il manque un espace à côté du tiret. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  |  - => suggestions : [' – ', ' — ']
207 Guillemets typographiques fermants. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | " => suggestions : ['\xa0»', '”']
207 Mot inconnu : stdout => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | stdout
207 Mot inconnu : stderr => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | stderr
207 Guillemets typographiques ouvrants. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | " => suggestions : ['«\xa0', '“']
207 Mot inconnu : ls => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | ls
207 Il manque un espace à côté du tiret. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  |  - => suggestions : [' – ', ' — ']
207 Guillemets typographiques fermants. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  | " => suggestions : ['\xa0»', '”']
207 Espace(s) en fin de ligne à supprimer. => Dans le cas de "ls -la > fichier" nous pouvons remarquer qu'il n'y a rien sur stdout ou stderr. Pour pallier à cela le programme tee permet de copier l'entrée standard sur la sortie standard et dans un fichier : "ls -la | tee fichier".  |   => suggestions : ['']
220 Guillemets typographiques ouvrants. => Vous pouvez aussi l'utiliser pour mettre un programme en arrière plan : "ed &". Pour reprendre la main sur ce programme il faut utiliser la commande fg. | " => suggestions : ['«\xa0', '“']
220 Mot inconnu : ed => Vous pouvez aussi l'utiliser pour mettre un programme en arrière plan : "ed &". Pour reprendre la main sur ce programme il faut utiliser la commande fg. | ed
225 Guillemets typographiques ouvrants. => Pour pouvoir bien comprendre ce que fait cet opérateur il faut d'abord parler rapidement des **codes de retour** : quand vous lancez une commande, si elle se termine correctement alors le code de retour est "0", ce qui correspond à un succès, dans le cas contraire le code de retour est différent de 0 (bien entendu les codes de retour différents de 0 ont une signification qui ne sera pas expliquée ici).  | " => suggestions : ['«\xa0', '“']
225 Guillemets typographiques fermants. => Pour pouvoir bien comprendre ce que fait cet opérateur il faut d'abord parler rapidement des **codes de retour** : quand vous lancez une commande, si elle se termine correctement alors le code de retour est "0", ce qui correspond à un succès, dans le cas contraire le code de retour est différent de 0 (bien entendu les codes de retour différents de 0 ont une signification qui ne sera pas expliquée ici).  | " => suggestions : ['\xa0»', '”']
225 Espace(s) en fin de ligne à supprimer. => Pour pouvoir bien comprendre ce que fait cet opérateur il faut d'abord parler rapidement des **codes de retour** : quand vous lancez une commande, si elle se termine correctement alors le code de retour est "0", ce qui correspond à un succès, dans le cas contraire le code de retour est différent de 0 (bien entendu les codes de retour différents de 0 ont une signification qui ne sera pas expliquée ici).  |   => suggestions : ['']
227 Guillemets typographiques ouvrants. => Si par exemple vous rentrez une commande erronée, le code de retour sera différent de 0 : "fgsfdg".  | " => suggestions : ['«\xa0', '“']
227 Mot inconnu : fgsfdg => Si par exemple vous rentrez une commande erronée, le code de retour sera différent de 0 : "fgsfdg".  | fgsfdg
227 Guillemets typographiques fermants. => Si par exemple vous rentrez une commande erronée, le code de retour sera différent de 0 : "fgsfdg".  | " => suggestions : ['\xa0»', '”']
227 Espace(s) en fin de ligne à supprimer. => Si par exemple vous rentrez une commande erronée, le code de retour sera différent de 0 : "fgsfdg".  |   => suggestions : ['']
229 Espace(s) en fin de ligne à supprimer. => Pour voir le code de retour de la dernière commande lancée :  |   => suggestions : ['']
233 Espace(s) en fin de ligne à supprimer. => L'opérateur "&&" permet de lancer une commande si et seulement si la première (celle à gauche de l'opérateur) s'est correctement terminée :  |   => suggestions : ['']

237 Guillemets typographiques ouvrants. => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  | " => suggestions : ['«\xa0', '“']
237 Mot inconnu : ls => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  | ls
237 Guillemets typographiques fermants. => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  | " => suggestions : ['\xa0»', '”']
237 Guillemets typographiques ouvrants. => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  | " => suggestions : ['«\xa0', '“']
237 Mot inconnu : ls => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  | ls
237 Espace(s) en fin de ligne à supprimer. => Si la commande "ls" se termine correctement alors "ls /" sera exécutée. Un second exemple :  |   => suggestions : ['']

247 Guillemets typographiques ouvrants. => Dans ce cas "ls" sera exécuté. | " => suggestions : ['«\xa0', '“']
247 Mot inconnu : ls => Dans ce cas "ls" sera exécuté. | ls
247 Guillemets typographiques fermants. => Dans ce cas "ls" sera exécuté. | " => suggestions : ['\xa0»', '”']

249 Guillemets fermants. => ==== Présentation de ";" ==== |  " => suggestions : ['\xa0»', '”']

251 Il manque les traits d’union. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | c'est à dire => suggestions : ['c’est-à-dire']
251 Guillemets typographiques ouvrants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['«\xa0', '“']
251 Mot inconnu : ls => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | ls
251 Mot inconnu : ls => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | ls
251 Il manque un espace à côté du tiret. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. |  - => suggestions : [' – ', ' — ']
251 Guillemets typographiques fermants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['\xa0»', '”']
251 Guillemets typographiques ouvrants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['«\xa0', '“']
251 Mot inconnu : ls => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | ls
251 Guillemets typographiques fermants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['\xa0»', '”']
251 Guillemets typographiques ouvrants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['«\xa0', '“']
251 Mot inconnu : ls => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | ls
251 Il manque un espace à côté du tiret. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. |  - => suggestions : [' – ', ' — ']
251 Guillemets typographiques fermants. => Cet opérateur est équivalent à un retour à la ligne, c'est à dire que "ls; ls -l" exécutera "ls" dans un premier temps puis, une fois la première commande finie et quel que soit son code de retour, "ls -l" sera exécuté. | " => suggestions : ['\xa0»', '”']

258 Mot inconnu : regex => Les **expressions rationnelles**, souvent appelées **expressions régulières**, **regex** ou **regular expressions** sont des notations qui permettent de décrire des chaînes de caractères, d'en reconnaître, d'en manipuler. | regex
258 Mot inconnu : regular => Les **expressions rationnelles**, souvent appelées **expressions régulières**, **regex** ou **regular expressions** sont des notations qui permettent de décrire des chaînes de caractères, d'en reconnaître, d'en manipuler. | regular

264 Mot inconnu : iconv => Pour plus d'informations sur iconv, voir la page du manuel. Maintenant notre dictionnaire est /tmp/french.utf8 . | iconv

266 Il manque un espace à côté du tiret. => Nous allons chercher les mots qui finissent par -er, pour cela on parcourt le fichier avec grep et on ne sort que les lignes finissant par -er : |  - => suggestions : [' – ', ' — ']
266 Mot inconnu : er => Nous allons chercher les mots qui finissent par -er, pour cela on parcourt le fichier avec grep et on ne sort que les lignes finissant par -er : | er
266 Mot inconnu : grep => Nous allons chercher les mots qui finissent par -er, pour cela on parcourt le fichier avec grep et on ne sort que les lignes finissant par -er : | grep
266 Il manque un espace à côté du tiret. => Nous allons chercher les mots qui finissent par -er, pour cela on parcourt le fichier avec grep et on ne sort que les lignes finissant par -er : |  - => suggestions : [' – ', ' — ']
266 Mot inconnu : er => Nous allons chercher les mots qui finissent par -er, pour cela on parcourt le fichier avec grep et on ne sort que les lignes finissant par -er : | er

272 Mot inconnu : absol => Maintenant on désire chercher les mots commençant par absol- : | absol

278 Mot inconnu : wildcard => On cherche maintenant les mots de 4 caractères commençant et finissant par un t, pour cela on utilise l'opérateur "**.**" qui remplace n'importe quel caractère, il est parfois appelé **wildcard** :  | wildcard
278 Espace(s) en fin de ligne à supprimer. => On cherche maintenant les mots de 4 caractères commençant et finissant par un t, pour cela on utilise l'opérateur "**.**" qui remplace n'importe quel caractère, il est parfois appelé **wildcard** :  |   => suggestions : ['']

282 Guillemets typographiques ouvrants. => Pour avoir exactement la ligne contenant "coucou", qui doit donc commencer et finir par coucou :  | " => suggestions : ['«\xa0', '“']
282 Guillemets typographiques fermants. => Pour avoir exactement la ligne contenant "coucou", qui doit donc commencer et finir par coucou :  | " => suggestions : ['\xa0»', '”']
282 Espace(s) en fin de ligne à supprimer. => Pour avoir exactement la ligne contenant "coucou", qui doit donc commencer et finir par coucou :  |   => suggestions : ['']

288 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * * représente **0 ou plus** caractères. Exemple : d* = 0 ou plus fois "d". |    => suggestions : ['']
288 Guillemets typographiques ouvrants. =>   * * représente **0 ou plus** caractères. Exemple : d* = 0 ou plus fois "d". | " => suggestions : ['«\xa0', '“']
288 Guillemets typographiques fermants. =>   * * représente **0 ou plus** caractères. Exemple : d* = 0 ou plus fois "d". | " => suggestions : ['\xa0»', '”']

289 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * + représente **1 ou plus** caractères.   |    => suggestions : ['']
289 Espace(s) en fin de ligne à supprimer. =>   * + représente **1 ou plus** caractères.   |    => suggestions : ['']

290 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ? représente **0 ou 1** caractère. |    => suggestions : ['']

292 Guillemets typographiques ouvrants. => Par exemple si l'on cherche les mots commençant par "t" et finissant par "tant" :  | " => suggestions : ['«\xa0', '“']
292 Guillemets typographiques fermants. => Par exemple si l'on cherche les mots commençant par "t" et finissant par "tant" :  | " => suggestions : ['\xa0»', '”']
292 Guillemets typographiques ouvrants. => Par exemple si l'on cherche les mots commençant par "t" et finissant par "tant" :  | " => suggestions : ['«\xa0', '“']
292 Guillemets typographiques fermants. => Par exemple si l'on cherche les mots commençant par "t" et finissant par "tant" :  | " => suggestions : ['\xa0»', '”']
292 Espace(s) en fin de ligne à supprimer. => Par exemple si l'on cherche les mots commençant par "t" et finissant par "tant" :  |   => suggestions : ['']

296 Guillemets typographiques fermants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['\xa0»', '”']
296 Guillemets typographiques ouvrants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['«\xa0', '“']
296 Guillemets typographiques fermants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['\xa0»', '”']
296 Guillemets typographiques ouvrants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['«\xa0', '“']
296 Guillemets typographiques ouvrants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['«\xa0', '“']
296 Guillemets typographiques fermants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['\xa0»', '”']
296 Guillemets fermants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". |  " => suggestions : ['\xa0»', '”']
296 Guillemets typographiques fermants. => "^t" nous donne les mots commençant par "t", "tant$" prends ceux finissant par "tant" et au milieu on veut 0 ou plus fois n'importe quel caractère, donc le ".". | " => suggestions : ['\xa0»', '”']

298 Guillemets typographiques ouvrants. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | " => suggestions : ['«\xa0', '“']
298 Guillemets typographiques fermants. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | " => suggestions : ['\xa0»', '”']
298 Guillemets typographiques ouvrants. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | " => suggestions : ['«\xa0', '“']
298 Guillemets typographiques fermants. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | " => suggestions : ['\xa0»', '”']
298 Guillemets typographiques fermants. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | " => suggestions : ['\xa0»', '”']
298 Mot inconnu : grep => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  | grep
298 Espace(s) en fin de ligne à supprimer. => On veut maintenant chercher les mots contenant "m" ou "mm", pour cela on va utiliser une expression régulière étendue, il faudra donc utiliser l'option "-E" de grep :  |   => suggestions : ['']

305 Il manque un espace à côté du tiret. => >Les expressions régulières étendues se calculent moins rapidement que celles de bases, pour alléger les programmes elles sont regroupées et accessibles via -E. |  - => suggestions : [' – ', ' — ']

307 Guillemets typographiques ouvrants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['«\xa0', '“']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']
307 Guillemets typographiques ouvrants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['«\xa0', '“']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']
307 Guillemets fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : |  " => suggestions : ['\xa0»', '”']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']
307 Guillemets typographiques ouvrants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['«\xa0', '“']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']
307 Guillemets typographiques ouvrants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['«\xa0', '“']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']
307 Mot inconnu : xt => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | xt
307 Guillemets typographiques ouvrants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['«\xa0', '“']
307 Guillemets typographiques fermants. => Pour être toujours plus fou, on veut maintenant trouver tous les noms finissant par "eux" ou "eut" pour créer des noms de domaines en ".eu". Pour cela on prend les mots qui commencent par n'importe quoi grâce à "^.*", puis qui terminent par "x" ou "t" grâce à "[xt]", tout ça avec "eu" au milieu bien sûr : | " => suggestions : ['\xa0»', '”']

311 Mot inconnu : KDE => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | kde
311 Mot inconnu : KDE => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | kde
311 Guillemets typographiques ouvrants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['«\xa0', '“']
311 Guillemets typographiques fermants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['\xa0»', '”']
311 Guillemets typographiques ouvrants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['«\xa0', '“']
311 Guillemets typographiques fermants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['\xa0»', '”']
311 Guillemets typographiques ouvrants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['«\xa0', '“']
311 Guillemets typographiques fermants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['\xa0»', '”']
311 Guillemets typographiques ouvrants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['«\xa0', '“']
311 Guillemets typographiques fermants. => On peut ainsi chercher les jeux pour KDE et pour GNOME, en supposant que tout jeu pour KDE qui se respecte commence par un "k" et par "g" pour GNOME. Pour cela on cherche tous les jeux, et on ne garde que ceux qui commencent par "k" ou "g" : | " => suggestions : ['\xa0»', '”']

315 Guillemets typographiques ouvrants. => Maintenant on veut chercher les jeux qui ne commencent ni par "g" ni par "k" : | " => suggestions : ['«\xa0', '“']
315 Guillemets typographiques fermants. => Maintenant on veut chercher les jeux qui ne commencent ni par "g" ni par "k" : | " => suggestions : ['\xa0»', '”']
315 Guillemets typographiques ouvrants. => Maintenant on veut chercher les jeux qui ne commencent ni par "g" ni par "k" : | " => suggestions : ['«\xa0', '“']
315 Guillemets typographiques fermants. => Maintenant on veut chercher les jeux qui ne commencent ni par "g" ni par "k" : | " => suggestions : ['\xa0»', '”']

319 Mot inconnu : gk => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | gk
319 Guillemets typographiques ouvrants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['«\xa0', '“']
319 Guillemets typographiques fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['\xa0»', '”']
319 Guillemets typographiques ouvrants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['«\xa0', '“']
319 Guillemets typographiques fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['\xa0»', '”']
319 Conjugaison erronée. Accord avec “on”. Le verbe devrait être à la 3ᵉ personne du singulier. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | prends => suggestions : ['prend']
319 Guillemets typographiques ouvrants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['«\xa0', '“']
319 Guillemets typographiques fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['\xa0»', '”']
319 Guillemets typographiques ouvrants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['«\xa0', '“']
319 Guillemets typographiques fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['\xa0»', '”']
319 Guillemets fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. |  " => suggestions : ['\xa0»', '”']
319 Guillemets typographiques ouvrants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['«\xa0', '“']
319 Mot inconnu : lib => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | lib
319 Guillemets typographiques fermants. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | " => suggestions : ['\xa0»', '”']
319 Il manque un espace à côté du tiret. => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. |  - => suggestions : [' – ', ' — ']
319 Mot inconnu : grep => Comme on l'a déjà vu [^gk] retourne ce qui commence par un "g" ou un "k", le "^" devant l'expression **[]** joue le rôle de **négation** : on prends ceux qui ne commencent ni par "g" ni par "k". Puis grâce à ".*" on accepte n'importe quelle fin. Mais cette requête renvoie beaucoup trop de résultats, on effectue donc un deuxième filtrage en éliminant ceux qui commencent par "lib" grâce à l'option -v de grep qui enlève les lignes correspondant à la condition. | grep

325 Guillemets typographiques ouvrants. => Les parenthèses permettent d'isoler un regroupement, et le | correspond à "où". Ceci renvoie donc les fichiers/dossiers à la racine commençant par media ou mroot. | " => suggestions : ['«\xa0', '“']
325 Guillemets typographiques fermants. => Les parenthèses permettent d'isoler un regroupement, et le | correspond à "où". Ceci renvoie donc les fichiers/dossiers à la racine commençant par media ou mroot. | " => suggestions : ['\xa0»', '”']
325 Mot inconnu : mroot => Les parenthèses permettent d'isoler un regroupement, et le | correspond à "où". Ceci renvoie donc les fichiers/dossiers à la racine commençant par media ou mroot. | mroot
327 Espace(s) en fin de ligne à supprimer. => Alors que :  |   => suggestions : ['']

331 Mot inconnu : root => renvoie les fichiers/dossiers commençant par media ou par root. | root

333 Mot inconnu : Sed => ==== Sed ==== | sed
338 Mot inconnu : premiere => Ex : Pour remplacer la premiere occurence : | premiere
338 Mot inconnu : occurence => Ex : Pour remplacer la premiere occurence : | occurence

346 Guillemets fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  " => suggestions : ['\xa0»', '”']
346 Guillemets typographiques fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | " => suggestions : ['\xa0»', '”']
346 Guillemets isolés. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
346 Mot inconnu : pOiNt => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | point
346 Guillemets isolés. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
346 Guillemets isolés. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
346 Mot inconnu : at => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | at
346 Guillemets fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  " => suggestions : ['\xa0»', '”']
346 Guillemets fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  " => suggestions : ['\xa0»', '”']
346 Guillemets typographiques fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | " => suggestions : ['\xa0»', '”']
346 Guillemets fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  " => suggestions : ['\xa0»', '”']
346 Guillemets typographiques fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | " => suggestions : ['\xa0»', '”']
346 Guillemets fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |  " => suggestions : ['\xa0»', '”']
346 Guillemets typographiques fermants. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  | " => suggestions : ['\xa0»', '”']
346 Espace(s) en fin de ligne à supprimer. => On remplace le "." par " pOiNt " et le "@" par " at ", on voit ici que l'on a mis "\" devant le ".", le "\" est le caractère d'échappement : le "." est alors considéré comme le caractère ".".  |   => suggestions : ['']

348 Guillemets typographiques ouvrants. => De même si on veut remplacer "/" par "slash", on utiliserait | " => suggestions : ['«\xa0', '“']
348 Guillemets typographiques fermants. => De même si on veut remplacer "/" par "slash", on utiliserait | " => suggestions : ['\xa0»', '”']

352 Mot inconnu : sed => On peut faire la même chose en moins long en utilisant l'autre version de sed: | sed

356 Erreur d’accord probable avec “les”. => Pour toute les occurrences ,on peut aussi utiliser : | toute => suggestions : ['toutes']
356 Pas d’espace avant une virgule. Un espace après. => Pour toute les occurrences ,on peut aussi utiliser : |  , => suggestions : [', ']

358 Mot inconnu : oû => oû : | oû

367 Guillemets typographiques ouvrants. => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. | " => suggestions : ['«\xa0', '“']
367 Mot inconnu : kikoo => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. | kikoo
367 Guillemets typographiques fermants. => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. | " => suggestions : ['\xa0»', '”']
367 Guillemets typographiques fermants. => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. | " => suggestions : ['\xa0»', '”']
367 Il manque un espace à côté du tiret. => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. |  - => suggestions : [' – ', ' — ']
367 Mot inconnu : sed => Ceci remplace toute occurrence de "kikoo" par "#kikoolol" dans le fichier /etc/config.txt mais ne le modifie pas, le résultat est donné sur la sortie standard. Pour modifier le fichier il faut ajouter l'option -i à sed. | sed
373 Espace(s) en fin de ligne à supprimer. => Donne :  |   => suggestions : ['']

377 Typographie : points de suspension. Utilisez le caractère dédié. => <note warning>l'action de l'option /n (n=1,2,3...) et /g sur un fichier n'est pas identique | ... => suggestions : ['…']
381 Espace(s) en fin de ligne à supprimer. => c'est pas clair : un exemple   |    => suggestions : ['']

383 Mot inconnu : fichier1 => le fichier1 contient 3 lignes identiques kikoo | fichier1
383 Mot inconnu : kikoo => le fichier1 contient 3 lignes identiques kikoo | kikoo

385 Mot inconnu : fichier2 => le fichier2 contient kikookikookikoo et 2 lignes kikoo | fichier2
385 Mot inconnu : kikookikookikoo => le fichier2 contient kikookikookikoo et 2 lignes kikoo | kikookikookikoo
385 Mot inconnu : kikoo => le fichier2 contient kikookikookikoo et 2 lignes kikoo | kikoo

388 Mot inconnu : sed => sed -i 's/kikoo/#kikoo/2 : | sed
388 Il manque un espace à côté du tiret. => sed -i 's/kikoo/#kikoo/2 : |  - => suggestions : [' – ', ' — ']
388 Guillemets typographiques ouvrants. => sed -i 's/kikoo/#kikoo/2 : | ' => suggestions : ['“', '‘', '‹']
388 Mot inconnu : kikoo => sed -i 's/kikoo/#kikoo/2 : | kikoo

390 Mot inconnu : fichier1 => le fichier1 n'est pas modifié ! | fichier1

391 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   |   => suggestions : ['']

392 Mot inconnu : kikoo => le fichier 2 devient kikoo#kikookikoo les 2 autres lignes ne sont pas modifiées              | kikoo
392 Espace(s) en fin de ligne à supprimer. => le fichier 2 devient kikoo#kikookikoo les 2 autres lignes ne sont pas modifiées              |               => suggestions : ['']

395 Espace(s) en fin de ligne à supprimer. => résultat de  |   => suggestions : ['']

396 Mot inconnu : sed => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   | sed
396 Il manque un espace à côté du tiret. => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   |  - => suggestions : [' – ', ' — ']
396 Guillemets typographiques ouvrants. => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   | ' => suggestions : ['“', '‘', '‹']
396 Mot inconnu : kikoo => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   | kikoo
396 Espace(s) surnuméraire(s) à supprimer. => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   |    => suggestions : [' ']
396 Espace(s) en fin de ligne à supprimer. => sed -i 's/kikoo/#kikoo/g  : les deux fichiers sont modifiés   |    => suggestions : ['']

398 Mot inconnu : kikoo => tous les kikoo deviennent #kikoo  | kikoo
398 Espace(s) en fin de ligne à supprimer. => tous les kikoo deviennent #kikoo  |   => suggestions : ['']

403 Mot inconnu : sed => Nous allons maintenant voir l'utilisation de variables avec sed ce qui permet d'échanger, de déplacer des parties d'une chaîne de caractères. Exemple :  | sed
403 Espace(s) en fin de ligne à supprimer. => Nous allons maintenant voir l'utilisation de variables avec sed ce qui permet d'échanger, de déplacer des parties d'une chaîne de caractères. Exemple :  |   => suggestions : ['']

407 Guillemets typographiques fermants. => (.*) représente l'affectation des variables et \n la n-ième variable, ici on met donc ce qu'il y a avant le point ("\.") dans \1 et ce qu'il y a après dans \2 puis on met \2 devant \1, on obtient : | " => suggestions : ['\xa0»', '”']
411 Mot inconnu : Knoklezout_au_taquet-Jamendo-David_TMX => Pour terminer nous allons voir un exemple pratique : nous avons de nombreux dossiers contenant de nombreux mp3 nommés selon le schéma Knoklezout_au_taquet-Jamendo-David_TMX.mp3 et on désire avoir le nom d'artiste avant le titre de la chanson tout en enlevant la publicité pour Jamendo.  | knoklezout_au_taquet-jamendo-david_tmx
411 Mot inconnu : Jamendo => Pour terminer nous allons voir un exemple pratique : nous avons de nombreux dossiers contenant de nombreux mp3 nommés selon le schéma Knoklezout_au_taquet-Jamendo-David_TMX.mp3 et on désire avoir le nom d'artiste avant le titre de la chanson tout en enlevant la publicité pour Jamendo.  | jamendo
411 Espace(s) en fin de ligne à supprimer. => Pour terminer nous allons voir un exemple pratique : nous avons de nombreux dossiers contenant de nombreux mp3 nommés selon le schéma Knoklezout_au_taquet-Jamendo-David_TMX.mp3 et on désire avoir le nom d'artiste avant le titre de la chanson tout en enlevant la publicité pour Jamendo.  |   => suggestions : ['']

413 Mot inconnu : rename => Pour cela nous allons utiliser **rename** (qui vient avec perl) et nos chères expressions régulières : | rename
413 Mot inconnu : perl => Pour cela nous allons utiliser **rename** (qui vient avec perl) et nos chères expressions régulières : | perl

417 Mot inconnu : sed => Le principe est le même qu'avec sed sauf que les variables sont notées $n et non plus \n : on met ce qu'il y a avant "-Jamendo-" dans $1 et ce qu'il y a après (".mp3" non compris) dans $2 puis on formate comme on le veut. | sed
417 Mot inconnu : Jamendo => Le principe est le même qu'avec sed sauf que les variables sont notées $n et non plus \n : on met ce qu'il y a avant "-Jamendo-" dans $1 et ce qu'il y a après (".mp3" non compris) dans $2 puis on formate comme on le veut. | jamendo
417 Guillemets typographiques fermants. => Le principe est le même qu'avec sed sauf que les variables sont notées $n et non plus \n : on met ce qu'il y a avant "-Jamendo-" dans $1 et ce qu'il y a après (".mp3" non compris) dans $2 puis on formate comme on le veut. | " => suggestions : ['\xa0»', '”']

419 Mot inconnu : rename => **rename** renomme les fichiers dans le dossier courant, pour plus de sécurité on peut utiliser ** rename -n 's/'** qui nous affiche les changements sans les effectuer, puis les effectuer une fois que l'on est sûr. | rename
419 Mot inconnu : rename => **rename** renomme les fichiers dans le dossier courant, pour plus de sécurité on peut utiliser ** rename -n 's/'** qui nous affiche les changements sans les effectuer, puis les effectuer une fois que l'on est sûr. | rename
419 Il manque un espace à côté du tiret. => **rename** renomme les fichiers dans le dossier courant, pour plus de sécurité on peut utiliser ** rename -n 's/'** qui nous affiche les changements sans les effectuer, puis les effectuer une fois que l'on est sûr. |  - => suggestions : [' – ', ' — ']
419 Guillemets typographiques ouvrants. => **rename** renomme les fichiers dans le dossier courant, pour plus de sécurité on peut utiliser ** rename -n 's/'** qui nous affiche les changements sans les effectuer, puis les effectuer une fois que l'on est sûr. | ' => suggestions : ['“', '‘', '‹']

423 Mot inconnu : regexp => Une introduction à Perl et une introduction au regexp : | regexp

426 Mot inconnu : regexp => Le livre de référence (édition 1) de Ruby avec une petite partie sur les regexp | regexp

429 Mot inconnu : FSUG => Une introduction rapide réalisée dans notre FSUG (merci à Krunch) : | fsug
429 Mot inconnu : Krunch => Une introduction rapide réalisée dans notre FSUG (merci à Krunch) : | krunch

436 Pas d’espace avant une virgule. => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     |  , => suggestions : [',']
436 Mot inconnu : sed => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | sed
436 Mot inconnu : awk => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | awk
436 Mot inconnu : grep => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | grep
436 Mot inconnu : vim => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | vim
436 Mot inconnu : rename => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | rename
436 Mot inconnu : lighttpd => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | lighttpd
436 Pas d’espace après ce signe. => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | (  => suggestions : ['(']
436 Mot inconnu : mod_rewrite => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | mod_rewrite
436 Mot inconnu : vhosts => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | vhosts
436 Typographie : points de suspension. Utilisez le caractère dédié. => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | ... => suggestions : ['…']
436 Mot inconnu : adblock => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | adblock
436 Mot inconnu : firefox => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | firefox
436 Typographie : points de suspension. Utilisez le caractère dédié. => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     | ... => suggestions : ['…']
436 Espace(s) en fin de ligne à supprimer. => >Les expressions régulières sont utilisés en Python, Perl , Ruby, PHP, Java, C, C++, par des programmes comme sed, awk, grep, vim, rename, ou encore des filtres dans apache et lighttpd ( mod_rewrite, vhosts ...), adblock dans firefox... Cette liste est bien sûr non exhaustive.     |      => suggestions : ['']
