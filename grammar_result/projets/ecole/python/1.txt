
12 Mot inconnu : Guido => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. | guido
12 Mot inconnu : Rossum => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. | rossum
12 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. |    => suggestions : [' ']
12 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. |    => suggestions : [' ']

14 Mot inconnu : Red => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. | red
14 Mot inconnu : Hat => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. | hat
14 Mot inconnu : Rossum => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. | rossum
14 Mot inconnu : Launchpad => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. | launchpad
16 Mot inconnu : pythonismes => Ce cours est une introduction au langage, en abordant certaines notions de base de la programmation. Le but est d'être clair pour les gens qui n'ont jamais programmé, donc certains « pythonismes » seront volontairement mis de côté. On approfondira dans d'autres sessions. | pythonismes

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   python |    => suggestions : ['']

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   3*6 |    => suggestions : ['']
24 Signe de multiplication typographique. =>   3*6 | 3*6 => suggestions : ['3\xa0×\xa06']

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   4-9 |    => suggestions : ['']

31 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) : | a => suggestions : ['À']

32 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 4 |    => suggestions : ['']

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = 5 |    => suggestions : ['']

34 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a + b |    => suggestions : ['']

38 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c |    => suggestions : ['']

39 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c = 1 |    => suggestions : ['']

40 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c |    => suggestions : ['']
44 Il manque un trait d’union si “même” se rapporte à “elle”. => Une variable peut « dépendre » d'elle même : | elle même => suggestions : ['elle-même']

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 4 |    => suggestions : ['']

46 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = a + 1 |    => suggestions : ['']

47 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a |    => suggestions : ['']

53 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 5 |    => suggestions : ['']

54 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a / 2 |    => suggestions : ['']

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = -5 |    => suggestions : ['']
55 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>   b = -5 | -5 => suggestions : ['−5', '– 5', '— 5']

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b / 2 |    => suggestions : ['']

57 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. | -3 => suggestions : ['−3', '– 3', '— 3']
57 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. | -2 => suggestions : ['−2', '– 2', '— 2']
57 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. |  car => suggestions : [', car']

58 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » : | -2 => suggestions : ['−2', '– 2', '— 2']

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 5.0 |    => suggestions : ['']

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a / 2 |    => suggestions : ['']
62 Guillemets isolés. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » : |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   une_chaine = "Je suis une chaine." |    => suggestions : ['']
63 Mot inconnu : une_chaine =>   une_chaine = "Je suis une chaine." | une_chaine
63 Guillemets typographiques ouvrants. =>   une_chaine = "Je suis une chaine." | " => suggestions : ['«\xa0', '“']
63 Guillemets typographiques fermants. =>   une_chaine = "Je suis une chaine." | " => suggestions : ['\xa0»', '”']

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   une_chaine |    => suggestions : ['']
64 Mot inconnu : une_chaine =>   une_chaine | une_chaine

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = "Bonjour " |    => suggestions : ['']
67 Guillemets typographiques ouvrants. =>   a = "Bonjour " | " => suggestions : ['«\xa0', '“']
67 Guillemets fermants. =>   a = "Bonjour " |  " => suggestions : ['\xa0»', '”']

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "Monde !" |    => suggestions : ['']
68 Guillemets typographiques ouvrants. =>   b = "Monde !" | " => suggestions : ['«\xa0', '“']
68 Guillemets typographiques fermants. =>   b = "Monde !" | " => suggestions : ['\xa0»', '”']

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a + b |    => suggestions : ['']

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 1 |    => suggestions : ['']

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a |    => suggestions : ['']

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "1" |    => suggestions : ['']
74 Guillemets typographiques ouvrants. =>   b = "1" | " => suggestions : ['«\xa0', '“']
74 Guillemets typographiques fermants. =>   b = "1" | " => suggestions : ['\xa0»', '”']

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b |    => suggestions : ['']

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    a+b |     => suggestions : ['']

80 Accord de nombre erroné avec « différents ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents. | type => suggestions : ['types']
80 Accord de nombre erroné avec « type ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents. | différents => suggestions : ['différent']

94 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   resultat = raw_input("Veuillez saisir quelque chose : ") |    => suggestions : ['']
94 Mot inconnu : resultat =>   resultat = raw_input("Veuillez saisir quelque chose : ") | resultat
94 Mot inconnu : raw_input =>   resultat = raw_input("Veuillez saisir quelque chose : ") | raw_input
94 Il manque un espace avant la parenthèse. =>   resultat = raw_input("Veuillez saisir quelque chose : ") | ( => suggestions : [' (']
94 Guillemets typographiques ouvrants. =>   resultat = raw_input("Veuillez saisir quelque chose : ") | " => suggestions : ['«\xa0', '“']

100 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   print "Du texte qui ne change pas et autre chose :", resultat |    => suggestions : ['']
100 Mot inconnu : print =>   print "Du texte qui ne change pas et autre chose :", resultat | print
100 Guillemets typographiques ouvrants. =>   print "Du texte qui ne change pas et autre chose :", resultat | " => suggestions : ['«\xa0', '“']
100 Mot inconnu : resultat =>   print "Du texte qui ne change pas et autre chose :", resultat | resultat

123 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; |    => suggestions : ['']
123 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; | les => suggestions : ['Les']
123 Accord avec “sont”. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; | elle => suggestions : ['Elles']
123 Conjugaison erronée. Accord avec “Elle”. Le verbe devrait être à la 3ᵉ personne du singulier. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; | sont => suggestions : ['est']

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; |    => suggestions : ['']
124 Mot inconnu : shebang =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; | shebang
124 Mot inconnu : exemple1 =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; | exemple1
124 Mot inconnu : py =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; | py

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * la seconde définit l'encodage, c'est essentiel pour nous francophones qui utilisont des accents (Python n'aime pas vraiment les accents sans encodage précisé). |    => suggestions : ['']
125 Mot inconnu : utilisont =>   * la seconde définit l'encodage, c'est essentiel pour nous francophones qui utilisont des accents (Python n'aime pas vraiment les accents sans encodage précisé). | utilisont
127 Mot inconnu : py => Copiez ce script dans un fichier « exemple.py » et exécutez : | py

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   python exemple.py |    => suggestions : ['']
129 Mot inconnu : py =>   python exemple.py | py

131 Forme interrogative ? Mettez un trait d’union. => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. | rappelez vous => suggestions : ['Rappelez-vous']
131 Mot inconnu : raw_input => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. | raw_input
131 Mot inconnu : int => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. | int

152 Guillemets typographiques ouvrants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) :  | " => suggestions : ['«\xa0', '“']
152 Guillemets typographiques fermants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) :  | " => suggestions : ['\xa0»', '”']
152 Espace(s) en fin de ligne à supprimer. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) :  |   => suggestions : ['']

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # on execute |          => suggestions : ['']
153 Mot inconnu : execute =>         # on execute | execute

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # une série |          => suggestions : ['']

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # d'instructions |          => suggestions : ['']

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 1 |    => suggestions : ['']

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = 2 |    => suggestions : ['']

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   if (a > b): |    => suggestions : ['']

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print ("a est supérieur à b") |          => suggestions : ['']
162 Mot inconnu : print =>         print ("a est supérieur à b") | print
162 Guillemets typographiques ouvrants. =>         print ("a est supérieur à b") | " => suggestions : ['«\xa0', '“']
162 Guillemets typographiques fermants. =>         print ("a est supérieur à b") | " => suggestions : ['\xa0»', '”']

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   else: |    => suggestions : ['']
163 Mot inconnu : else =>   else: | else

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print ("b est supérieur ou égal à a") |          => suggestions : ['']
164 Mot inconnu : print =>         print ("b est supérieur ou égal à a") | print
164 Guillemets typographiques ouvrants. =>         print ("b est supérieur ou égal à a") | " => suggestions : ['«\xa0', '“']
164 Guillemets typographiques fermants. =>         print ("b est supérieur ou égal à a") | " => suggestions : ['\xa0»', '”']

183 Formatage des grands nombres. => Utiliser une variable par élément à saisir, ça devient très vite ingérable (imaginez ce que ça donnerait pour gérer une liste de 10000 clients). Python possède un autre type de données, les listes. | 10000 => suggestions : ['10\xa0000', '1\xa00000']

184 Guillemets typographiques ouvrants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir : | " => suggestions : ['«\xa0', '“']
184 Guillemets typographiques fermants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir : | " => suggestions : ['\xa0»', '”']

185 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = "coup de fil à maman" |    => suggestions : ['']
185 Guillemets typographiques ouvrants. =>   a = "coup de fil à maman" | " => suggestions : ['«\xa0', '“']
185 Guillemets typographiques fermants. =>   a = "coup de fil à maman" | " => suggestions : ['\xa0»', '”']

186 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "acheter du café" |    => suggestions : ['']
186 Guillemets typographiques ouvrants. =>   b = "acheter du café" | " => suggestions : ['«\xa0', '“']
186 Guillemets typographiques fermants. =>   b = "acheter du café" | " => suggestions : ['\xa0»', '”']

187 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c = "upgrader vers gutsy" |    => suggestions : ['']
187 Guillemets typographiques ouvrants. =>   c = "upgrader vers gutsy" | " => suggestions : ['«\xa0', '“']
187 Mot inconnu : gutsy =>   c = "upgrader vers gutsy" | gutsy
187 Guillemets typographiques fermants. =>   c = "upgrader vers gutsy" | " => suggestions : ['\xa0»', '”']

188 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A chaque nouvel élément il faudrait ajouter une variable, c'est ingérable. On peut alors utiliser : | a => suggestions : ['À']

189 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] |    => suggestions : ['']
189 Mot inconnu : todo =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | todo
189 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['«\xa0', '“']
189 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['\xa0»', '”']
189 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['«\xa0', '“']
189 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['\xa0»', '”']
189 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['«\xa0', '“']
189 Mot inconnu : gutsy =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | gutsy
189 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"] | " => suggestions : ['\xa0»', '”']

191 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = [a, b, c] |    => suggestions : ['']
191 Mot inconnu : todo =>   todo = [a, b, c] | todo

195 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : | ' => suggestions : ['“', '‘', '‹']
195 Guillemets typographiques fermants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : | ' => suggestions : ['”', '’', '›']
195 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : | ' => suggestions : ['“', '‘', '‹']

196 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo.append("préparer le cours python sur l'orienté objet") |    => suggestions : ['']
196 Mot inconnu : todo =>   todo.append("préparer le cours python sur l'orienté objet") | todo
196 Il manque un espace. =>   todo.append("préparer le cours python sur l'orienté objet") | append => suggestions : [' append']
196 Il manque un espace avant la parenthèse. =>   todo.append("préparer le cours python sur l'orienté objet") | ( => suggestions : [' (']
196 Guillemets typographiques ouvrants. =>   todo.append("préparer le cours python sur l'orienté objet") | " => suggestions : ['«\xa0', '“']
196 Guillemets typographiques fermants. =>   todo.append("préparer le cours python sur l'orienté objet") | " => suggestions : ['\xa0»', '”']

197 Mot inconnu : todo => Dans l'interpréteur, affichez maintenant todo: | todo

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo |    => suggestions : ['']
198 Mot inconnu : todo =>   todo | todo

202 Guillemets typographiques ouvrants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : | ' => suggestions : ['“', '‘', '‹']
202 Mot inconnu : todo => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : | todo
202 Guillemets typographiques fermants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : | ' => suggestions : ['”', '’', '›']

203 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = todo.methode() |    => suggestions : ['']
203 Mot inconnu : todo =>   todo = todo.methode() | todo
203 Mot inconnu : todo =>   todo = todo.methode() | todo
203 Mot inconnu : methode =>   todo = todo.methode() | methode

206 Mot inconnu : nombre_d_elements => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par : | nombre_d_elements
206 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par : |  -  => suggestions : [' – ', ' — ', ' − ', ' −']

207 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo[0] |    => suggestions : ['']
207 Mot inconnu : todo =>   todo[0] | todo

208 Mot inconnu : len => Le nombre d'éléments contenus dans une liste est donné par len(liste) : | len
208 Il manque un espace avant la parenthèse. => Le nombre d'éléments contenus dans une liste est donné par len(liste) : | ( => suggestions : [' (']

209 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   nb = len(todo) |    => suggestions : ['']
209 Mot inconnu : nb =>   nb = len(todo) | nb
209 Mot inconnu : len =>   nb = len(todo) | len
209 Il manque un espace avant la parenthèse. =>   nb = len(todo) | ( => suggestions : [' (']
209 Mot inconnu : todo =>   nb = len(todo) | todo

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo[nb - 1] |    => suggestions : ['']
211 Mot inconnu : todo =>   todo[nb - 1] | todo
211 Mot inconnu : nb =>   todo[nb - 1] | nb
211 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) =>   todo[nb - 1] |  -  => suggestions : [' – ', ' — ', ' − ', ' −']

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for item in todo: |    => suggestions : ['']
214 Mot inconnu : todo =>   for item in todo: | todo

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # on commence un bloc d'instructions |          => suggestions : ['']

216 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # avec une nouvelle indentation |          => suggestions : ['']

217 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # 'item' est une variable à laquelle on assigne |          => suggestions : ['']
217 Guillemets typographiques ouvrants. =>         # 'item' est une variable à laquelle on assigne | ' => suggestions : ['“', '‘', '‹']
217 Guillemets typographiques fermants. =>         # 'item' est une variable à laquelle on assigne | ' => suggestions : ['”', '’', '›']

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # la valeur de l'élément courant du tableau |          => suggestions : ['']

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for untodo in todo: |    => suggestions : ['']
221 Mot inconnu : untodo =>   for untodo in todo: | untodo
221 Mot inconnu : todo =>   for untodo in todo: | todo

222 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print " - %s" % untodo |          => suggestions : ['']
222 Mot inconnu : print =>         print " - %s" % untodo | print
222 Guillemets isolés. =>         print " - %s" % untodo |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
222 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>         print " - %s" % untodo |  -  => suggestions : [' – ', ' — ', ' − ']
222 Il manque un espace. =>         print " - %s" % untodo | s => suggestions : [' s']
222 Guillemets typographiques fermants. =>         print " - %s" % untodo | " => suggestions : ['\xa0»', '”']
222 Mot inconnu : untodo =>         print " - %s" % untodo | untodo

227 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ==== Fonctions - introduction ==== |  -  => suggestions : [' – ', ' — ', ' − ']

228 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. | ' => suggestions : ['“', '‘', '‹']
228 Guillemets typographiques fermants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. | ' => suggestions : ['”', '’', '›']
228 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. | ' => suggestions : ['“', '‘', '‹']

243 Mot inconnu : ecrire => Une fonction ne doit pas forcément retourner quelque chose, elle peut par exemple juste ecrire du texte. | ecrire

246 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   txt1 = "hello" |    => suggestions : ['']
246 Mot inconnu : txt1 =>   txt1 = "hello" | txt1
246 Guillemets typographiques ouvrants. =>   txt1 = "hello" | " => suggestions : ['«\xa0', '“']
246 Guillemets typographiques fermants. =>   txt1 = "hello" | " => suggestions : ['\xa0»', '”']

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   txt2 = "bye" |    => suggestions : ['']
247 Mot inconnu : txt2 =>   txt2 = "bye" | txt2
247 Guillemets typographiques ouvrants. =>   txt2 = "bye" | " => suggestions : ['«\xa0', '“']
247 Guillemets typographiques fermants. =>   txt2 = "bye" | " => suggestions : ['\xa0»', '”']

248 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ntxt = (list_print(txt1), list_print(txt2)) |    => suggestions : ['']
248 Mot inconnu : ntxt =>   ntxt = (list_print(txt1), list_print(txt2)) | ntxt
248 Mot inconnu : list_print =>   ntxt = (list_print(txt1), list_print(txt2)) | list_print
248 Il manque un espace avant la parenthèse. =>   ntxt = (list_print(txt1), list_print(txt2)) | ( => suggestions : [' (']
248 Mot inconnu : txt1 =>   ntxt = (list_print(txt1), list_print(txt2)) | txt1
248 Mot inconnu : list_print =>   ntxt = (list_print(txt1), list_print(txt2)) | list_print
248 Il manque un espace avant la parenthèse. =>   ntxt = (list_print(txt1), list_print(txt2)) | ( => suggestions : [' (']
248 Mot inconnu : txt2 =>   ntxt = (list_print(txt1), list_print(txt2)) | txt2

249 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   print """%s |    => suggestions : ['']
249 Mot inconnu : print =>   print """%s | print
249 Il manque un espace. =>   print """%s | s => suggestions : [' s']

250 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   %s |    => suggestions : ['']
250 Il manque un espace. =>   %s | s => suggestions : [' s']

251 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   """ % (ntxt[0], ntxt[1]) |    => suggestions : ['']
251 Mot inconnu : ntxt =>   """ % (ntxt[0], ntxt[1]) | ntxt
251 Mot inconnu : ntxt =>   """ % (ntxt[0], ntxt[1]) | ntxt

253 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A noter : | a => suggestions : ['À']

254 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ; |    => suggestions : ['']
254 Guillemets isolés. =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ; |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']

255 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. |    => suggestions : ['']
255 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. | s => suggestions : [' s']
255 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. | s => suggestions : [' s']
255 Guillemets typographiques fermants. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. | " => suggestions : ['\xa0»', '”']
