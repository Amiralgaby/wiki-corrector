2 Mot inconnu : éduction => {{tag>programmation éduction python}}

13 Mot inconnu : Guido => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2.
13 Mot inconnu : Rossum => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2.
13 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2.
13 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2.

15 Mot inconnu : Red => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad.
15 Mot inconnu : Hat => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad.
15 Mot inconnu : Rossum => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad.
15 Mot inconnu : Launchpad => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad.

17 Il manque un espace insécable. => Ce cours est une introduction au langage, en abordant certaines notions de base de la programmation. Le but est d'être clair pour les gens qui n'ont jamais programmé, donc certains « pythonismes » seront volontairement mis de côté. On approfondira dans d'autres sessions.
17 Mot inconnu : pythonismes => Ce cours est une introduction au langage, en abordant certaines notions de base de la programmation. Le but est d'être clair pour les gens qui n'ont jamais programmé, donc certains « pythonismes » seront volontairement mis de côté. On approfondira dans d'autres sessions.
17 Il manque un espace insécable. => Ce cours est une introduction au langage, en abordant certaines notions de base de la programmation. Le but est d'être clair pour les gens qui n'ont jamais programmé, donc certains « pythonismes » seront volontairement mis de côté. On approfondira dans d'autres sessions.

22 Il manque un espace insécable. => Python est un langage « interprété », c'est-à-dire qu'un script ne nécessite pas de compilation pour être exécuté. Il existe un interpréteur qui permet d'interagir avec l'utilisateur. Pour le lancer, démarrez un terminal et lancez :
22 Il manque un espace insécable. => Python est un langage « interprété », c'est-à-dire qu'un script ne nécessite pas de compilation pour être exécuté. Il existe un interpréteur qui permet d'interagir avec l'utilisateur. Pour le lancer, démarrez un terminal et lancez :
22 Il manque un espace insécable. => Python est un langage « interprété », c'est-à-dire qu'un script ne nécessite pas de compilation pour être exécuté. Il existe un interpréteur qui permet d'interagir avec l'utilisateur. Pour le lancer, démarrez un terminal et lancez :

23 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   python

24 Il manque un espace insécable. => Commençons par une utilisation très simple, en faisant faire du calcul à python :

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   3*6
25 Signe de multiplication typographique. =>   3*6

26 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   4-9

30 Il manque un espace insécable. => Les variables correspondent à des zones de stockage de valeurs. Elles sont désignées par des mots contenant les lettres minuscules, majuscules, les chiffres et le tiret bas « _ »((En anglais : //underscore//.)). Une variable ne peut avoir un nom commençant par un chiffre.
30 Il manque un espace insécable. => Les variables correspondent à des zones de stockage de valeurs. Elles sont désignées par des mots contenant les lettres minuscules, majuscules, les chiffres et le tiret bas « _ »((En anglais : //underscore//.)). Une variable ne peut avoir un nom commençant par un chiffre.
30 Il manque un espace. => Les variables correspondent à des zones de stockage de valeurs. Elles sont désignées par des mots contenant les lettres minuscules, majuscules, les chiffres et le tiret bas « _ »((En anglais : //underscore//.)). Une variable ne peut avoir un nom commençant par un chiffre.
30 Il manque un espace insécable. => Les variables correspondent à des zones de stockage de valeurs. Elles sont désignées par des mots contenant les lettres minuscules, majuscules, les chiffres et le tiret bas « _ »((En anglais : //underscore//.)). Une variable ne peut avoir un nom commençant par un chiffre.

32 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) :
32 Il manque un espace insécable. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) :
32 Il manque un espace insécable. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) :
32 Il manque un espace insécable. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) :

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 4

34 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = 5

35 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a + b

38 Il manque un espace insécable. => Une variable doit avoir été initialisée pour être utilisée :

39 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c

40 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c = 1

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c

45 Il manque un espace insécable. => Une variable peut « dépendre » d'elle même :
45 Il manque un espace insécable. => Une variable peut « dépendre » d'elle même :
45 Il manque un trait d’union si “même” se rapporte à “elle”. => Une variable peut « dépendre » d'elle même :
45 Il manque un espace insécable. => Une variable peut « dépendre » d'elle même :

46 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 4

47 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = a + 1

48 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a

49 Il manque un espace insécable. => Attention à la casse ! « A » est différent de « a ».
49 Il manque un espace insécable. => Attention à la casse ! « A » est différent de « a ».
49 Il manque un espace insécable. => Attention à la casse ! « A » est différent de « a ».
49 Il manque un espace insécable. => Attention à la casse ! « A » est différent de « a ».
49 Il manque un espace insécable. => Attention à la casse ! « A » est différent de « a ».

53 Il manque un espace insécable. => On n'a utilisé que des entiers pour l'instant. Python l'a remarqué :

54 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 5

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a / 2

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = -5
56 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>   b = -5

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b / 2

58 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier.
58 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier.
58 Il manque un espace insécable. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier.
58 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier.

59 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » :
59 Il manque un espace insécable. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » :
59 Il manque un espace insécable. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » :
59 Il manque un espace insécable. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » :
59 Il manque un espace insécable. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » :

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 5.0

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a / 2

63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Guillemets isolés. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :
63 Il manque un espace insécable. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » :

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   une_chaine = "Je suis une chaine."
64 Mot inconnu : une_chaine =>   une_chaine = "Je suis une chaine."
64 Guillemets typographiques ouvrants. =>   une_chaine = "Je suis une chaine."
64 Guillemets typographiques fermants. =>   une_chaine = "Je suis une chaine."

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   une_chaine
65 Mot inconnu : une_chaine =>   une_chaine

67 Il manque un espace insécable. => On peut « ajouter » des chaines, on appelle ça la concaténation :
67 Il manque un espace insécable. => On peut « ajouter » des chaines, on appelle ça la concaténation :
67 Il manque un espace insécable. => On peut « ajouter » des chaines, on appelle ça la concaténation :

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = "Bonjour "
68 Guillemets typographiques ouvrants. =>   a = "Bonjour "
68 Guillemets fermants. =>   a = "Bonjour "

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "Monde !"
69 Guillemets typographiques ouvrants. =>   b = "Monde !"
69 Il manque un espace insécable. =>   b = "Monde !"
69 Guillemets typographiques fermants. =>   b = "Monde !"

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a + b

72 Il manque un espace insécable. => Pour mettre le doigt sur une possible confusion, essayons ceci :

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 1

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "1"
75 Guillemets typographiques ouvrants. =>   b = "1"
75 Guillemets typographiques fermants. =>   b = "1"

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b

77 Il manque un espace insécable. => Notez la différence entre les 2 résultats. La première fois python affiche un entier, la seconde une chaine de caractères (entre « ' »).
77 Il manque un espace insécable. => Notez la différence entre les 2 résultats. La première fois python affiche un entier, la seconde une chaine de caractères (entre « ' »).

79 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    a+b

81 Accord de nombre erroné avec « différents ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents.
81 Accord de nombre erroné avec « type ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents.

87 Il manque un espace insécable. => Un des intérêts d'un programme est de pouvoir interagir avec l'utilisateur. On va voir pour ça deux instructions et comment les utiliser :

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''raw_input()'' permet de demander à l'utilisateur de saisir un texte (texte au sens large, on commencera avec des nombres) ;
88 Guillemets typographiques ouvrants. =>   * ''raw_input()'' permet de demander à l'utilisateur de saisir un texte (texte au sens large, on commencera avec des nombres) ;
88 Mot inconnu : raw_input =>   * ''raw_input()'' permet de demander à l'utilisateur de saisir un texte (texte au sens large, on commencera avec des nombres) ;
88 Il manque un espace insécable. =>   * ''raw_input()'' permet de demander à l'utilisateur de saisir un texte (texte au sens large, on commencera avec des nombres) ;

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''print("texte")'' permet d'afficher du texte.
89 Guillemets typographiques ouvrants. =>   * ''print("texte")'' permet d'afficher du texte.
89 Mot inconnu : print =>   * ''print("texte")'' permet d'afficher du texte.
89 Il manque un espace avant la parenthèse. =>   * ''print("texte")'' permet d'afficher du texte.
89 Guillemets typographiques ouvrants. =>   * ''print("texte")'' permet d'afficher du texte.
89 Guillemets typographiques fermants. =>   * ''print("texte")'' permet d'afficher du texte.

93 Guillemets typographiques ouvrants. => ''raw_input()'' s'utilise de cette manière :
93 Mot inconnu : raw_input => ''raw_input()'' s'utilise de cette manière :
93 Il manque un espace insécable. => ''raw_input()'' s'utilise de cette manière :

95 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   resultat = raw_input("Veuillez saisir quelque chose : ")
95 Mot inconnu : resultat =>   resultat = raw_input("Veuillez saisir quelque chose : ")
95 Mot inconnu : raw_input =>   resultat = raw_input("Veuillez saisir quelque chose : ")
95 Il manque un espace avant la parenthèse. =>   resultat = raw_input("Veuillez saisir quelque chose : ")
95 Guillemets typographiques ouvrants. =>   resultat = raw_input("Veuillez saisir quelque chose : ")
95 Il manque un espace insécable. =>   resultat = raw_input("Veuillez saisir quelque chose : ")

97 Il manque un espace insécable. => La chaine de caractère sera affichée à l'écran, et le curseur attendra que l'utilisateur saisisse du texte puis « Entrée ». Ce qui a été saisi sera alors assigné à la variable ''résultat'' (en tant que chaine de caractère).
97 Il manque un espace insécable. => La chaine de caractère sera affichée à l'écran, et le curseur attendra que l'utilisateur saisisse du texte puis « Entrée ». Ce qui a été saisi sera alors assigné à la variable ''résultat'' (en tant que chaine de caractère).
97 Guillemets typographiques ouvrants. => La chaine de caractère sera affichée à l'écran, et le curseur attendra que l'utilisateur saisisse du texte puis « Entrée ». Ce qui a été saisi sera alors assigné à la variable ''résultat'' (en tant que chaine de caractère).
97 Guillemets typographiques fermants. => La chaine de caractère sera affichée à l'écran, et le curseur attendra que l'utilisateur saisisse du texte puis « Entrée ». Ce qui a été saisi sera alors assigné à la variable ''résultat'' (en tant que chaine de caractère).

99 Il manque un espace insécable. => Pour ensuite afficher ce texte on peut utiliser :

101 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   print "Du texte qui ne change pas et autre chose :", resultat
101 Mot inconnu : print =>   print "Du texte qui ne change pas et autre chose :", resultat
101 Guillemets typographiques ouvrants. =>   print "Du texte qui ne change pas et autre chose :", resultat
101 Mot inconnu : resultat =>   print "Du texte qui ne change pas et autre chose :", resultat

105 Guillemets typographiques ouvrants. => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Guillemets typographiques ouvrants. => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Mot inconnu : resultat => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Guillemets typographiques fermants. => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Guillemets typographiques ouvrants. => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Mot inconnu : print => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.
105 Guillemets typographiques fermants. => ''"Du texte qui ne change pas et autre chose :"'' et ''resultat'' sont deux arguments de la fonction ''print''.

107 Il manque un espace insécable. => Regardons maintenant cet exemple :

123 Il manque un espace insécable. => Quelques petites remarques :

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Il manque un espace insécable. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Il manque un espace insécable. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Accord avec “sont”. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Conjugaison erronée. Accord avec “Elle”. Le verbe devrait être à la 3ᵉ personne du singulier. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;
124 Il manque un espace insécable. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ;

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Il manque un espace insécable. =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Mot inconnu : shebang =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Il manque un espace insécable. =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Mot inconnu : exemple1 =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Mot inconnu : py =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;
125 Il manque un espace insécable. =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ;

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * la seconde définit l'encodage, c'est essentiel pour nous francophones qui utilisont des accents (Python n'aime pas vraiment les accents sans encodage précisé).
126 Mot inconnu : utilisont =>   * la seconde définit l'encodage, c'est essentiel pour nous francophones qui utilisont des accents (Python n'aime pas vraiment les accents sans encodage précisé).

128 Il manque un espace insécable. => Copiez ce script dans un fichier « exemple.py » et exécutez :
128 Mot inconnu : py => Copiez ce script dans un fichier « exemple.py » et exécutez :
128 Il manque un espace insécable. => Copiez ce script dans un fichier « exemple.py » et exécutez :
128 Il manque un espace insécable. => Copiez ce script dans un fichier « exemple.py » et exécutez :

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   python exemple.py
130 Mot inconnu : py =>   python exemple.py

132 Forme interrogative ? Mettez un trait d’union. => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier.
132 Mot inconnu : raw_input => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier.
132 Mot inconnu : int => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier.

135 Confusion probable : “à” est une préposition. Pour le verbe “avoir”, écrivez “a”. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Guillemets typographiques ouvrants. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Guillemets typographiques fermants. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Guillemets typographiques ouvrants. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Mot inconnu : else => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Guillemets typographiques fermants. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Accord avec “utilisent”. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Conjugaison erronée. Accord avec “Elle”. Le verbe devrait être à la 3ᵉ personne du singulier. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :
135 Il manque un espace insécable. => Pour que le script réagisse suivant ce que l'utilisateur à saisi, on utilise des instructions de contrôle, ''if'' et ''else''. Elle s'utilisent comme ceci :

149 Accord de nombre erroné avec « Une variable » : « booléennes » devrait être au singulier. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Il manque un espace insécable. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Mot inconnu : True => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Guillemets typographiques fermants. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Guillemets typographiques ouvrants. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Mot inconnu : False => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Guillemets typographiques fermants. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.
149 Il manque un espace insécable. => Une variable booléennes est une variable qui n'accepte que 2 valeurs : vrai ou faux (''True'' ou ''False'' en Python). On peut étendre ceci aux nombres et dire : si c'est 0 c'est faux, sinon (dans tous les autres cas), c'est vrai.

150 Guillemets typographiques ouvrants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Mot inconnu : une_condition_est_vraie => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Guillemets typographiques fermants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Guillemets typographiques ouvrants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Guillemets typographiques fermants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Guillemets typographiques ouvrants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Mot inconnu : else => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').
150 Guillemets typographiques fermants. => "une_condition_est_vraie" va donc être une expression qui sera soit vraie (ou non nulle), soit fausse (nulle). Si elle est vraie, on exécute la première partie de la condition (juste après ''if'', sinon la deuxième (ce qui suit ''else'').

153 Guillemets typographiques ouvrants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) : 
153 Guillemets typographiques fermants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) : 
153 Il manque un espace insécable. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) : 
153 Espace(s) en fin de ligne à supprimer. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) : 

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # on execute
154 Mot inconnu : execute =>         # on execute

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # une série

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # d'instructions

159 Il manque un espace insécable. => Prenons un exemple de comparaison d'entiers :

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = 1

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = 2

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   if (a > b):

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print ("a est supérieur à b")
163 Mot inconnu : print =>         print ("a est supérieur à b")
163 Guillemets typographiques ouvrants. =>         print ("a est supérieur à b")
163 Guillemets typographiques fermants. =>         print ("a est supérieur à b")

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   else:
164 Mot inconnu : else =>   else:
164 Il manque un espace insécable. =>   else:

165 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print ("b est supérieur ou égal à a")
165 Mot inconnu : print =>         print ("b est supérieur ou égal à a")
165 Guillemets typographiques ouvrants. =>         print ("b est supérieur ou égal à a")
165 Guillemets typographiques fermants. =>         print ("b est supérieur ou égal à a")

167 Il manque un espace insécable. => Quel sera le résultat du script ?

169 Il manque un espace insécable. => L'expression qui définit la condition est souvent une comparaison, qui utilise les symboles suivants :

170 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''>'' et ''<'' pour 'strictement supérieur/inférieur à'
170 Guillemets typographiques ouvrants. =>   * ''>'' et ''<'' pour 'strictement supérieur/inférieur à'
170 Guillemets typographiques fermants. =>   * ''>'' et ''<'' pour 'strictement supérieur/inférieur à'

171 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''>='' et ''<='' pour 'supérieur/inférieur ou égal à'
171 Guillemets typographiques ouvrants. =>   * ''>='' et ''<='' pour 'supérieur/inférieur ou égal à'
171 Guillemets typographiques fermants. =>   * ''>='' et ''<='' pour 'supérieur/inférieur ou égal à'

172 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''=='' et ''!='' pour 'égal à ou différent de'
172 Guillemets fermants. =>   * ''=='' et ''!='' pour 'égal à ou différent de'
172 Guillemets typographiques ouvrants. =>   * ''=='' et ''!='' pour 'égal à ou différent de'
172 Guillemets typographiques fermants. =>   * ''=='' et ''!='' pour 'égal à ou différent de'

173 Guillemets typographiques ouvrants. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Guillemets typographiques fermants. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Guillemets typographiques ouvrants. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Mot inconnu : and => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Guillemets typographiques fermants. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Il manque un espace insécable. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 
173 Espace(s) en fin de ligne à supprimer. => Les conditions peuvent être multiples et inclure des ''or'' et ''and'' : 

174 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''a or b'' sera vraie si soit a, soit b est vraie
174 Guillemets typographiques ouvrants. =>   * ''a or b'' sera vraie si soit a, soit b est vraie
174 Guillemets typographiques fermants. =>   * ''a or b'' sera vraie si soit a, soit b est vraie

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''a and b'' sera vraie si a et b sont vraie
175 Guillemets typographiques ouvrants. =>   * ''a and b'' sera vraie si a et b sont vraie
175 Mot inconnu : and =>   * ''a and b'' sera vraie si a et b sont vraie
175 Guillemets typographiques fermants. =>   * ''a and b'' sera vraie si a et b sont vraie
175 Accord avec la forme verbale “sont” : “vraie” devrait être au pluriel. =>   * ''a and b'' sera vraie si a et b sont vraie

184 Formatage des grands nombres. => Utiliser une variable par élément à saisir, ça devient très vite ingérable (imaginez ce que ça donnerait pour gérer une liste de 10000 clients). Python possède un autre type de données, les listes.

185 Guillemets typographiques ouvrants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir :
185 Guillemets typographiques fermants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir :
185 Il manque un espace insécable. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir :

186 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   a = "coup de fil à maman"
186 Guillemets typographiques ouvrants. =>   a = "coup de fil à maman"
186 Guillemets typographiques fermants. =>   a = "coup de fil à maman"

187 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   b = "acheter du café"
187 Guillemets typographiques ouvrants. =>   b = "acheter du café"
187 Guillemets typographiques fermants. =>   b = "acheter du café"

188 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   c = "upgrader vers gutsy"
188 Guillemets typographiques ouvrants. =>   c = "upgrader vers gutsy"
188 Mot inconnu : gutsy =>   c = "upgrader vers gutsy"
188 Guillemets typographiques fermants. =>   c = "upgrader vers gutsy"

189 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A chaque nouvel élément il faudrait ajouter une variable, c'est ingérable. On peut alors utiliser :
189 Il manque un espace insécable. => A chaque nouvel élément il faudrait ajouter une variable, c'est ingérable. On peut alors utiliser :

190 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Mot inconnu : todo =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques ouvrants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Mot inconnu : gutsy =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]
190 Guillemets typographiques fermants. =>   todo = ["coup de fil à maman", "acheter du café", "upgrader vers gutsy"]

191 Il manque un espace insécable. => Notez que si l'on a déjà initialisé a, b et c on peut aussi utiliser :

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = [a, b, c]
192 Mot inconnu : todo =>   todo = [a, b, c]

196 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste :
196 Guillemets typographiques fermants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste :
196 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste :
196 Il manque un espace insécable. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste :

197 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo.append("préparer le cours python sur l'orienté objet")
197 Mot inconnu : todo =>   todo.append("préparer le cours python sur l'orienté objet")
197 Il manque un espace. =>   todo.append("préparer le cours python sur l'orienté objet")
197 Il manque un espace avant la parenthèse. =>   todo.append("préparer le cours python sur l'orienté objet")
197 Guillemets typographiques ouvrants. =>   todo.append("préparer le cours python sur l'orienté objet")
197 Guillemets typographiques fermants. =>   todo.append("préparer le cours python sur l'orienté objet")

198 Mot inconnu : todo => Dans l'interpréteur, affichez maintenant todo:
198 Il manque un espace insécable. => Dans l'interpréteur, affichez maintenant todo:

199 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo
199 Mot inconnu : todo =>   todo

202 Guillemets typographiques ouvrants. => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : todo => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Guillemets typographiques fermants. => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : todo => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : method => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Il manque un espace insécable. => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : todo => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : method => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : todo => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : method => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : todo => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.
202 Mot inconnu : method => ''todo'' est l'objet auquel on s'intéresse, append() la méthode. ATTENTION, todo.method != todo.method(). todo.method correspond à la suite d'instruction qui définissent les actions de la méthode, alors que todo.method() correspond au fait d'appliquer ces instructions.

203 Guillemets typographiques ouvrants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire :
203 Mot inconnu : todo => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire :
203 Guillemets typographiques fermants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire :
203 Il manque un espace insécable. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire :
203 Il manque un espace insécable. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire :

204 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo = todo.methode()
204 Mot inconnu : todo =>   todo = todo.methode()
204 Mot inconnu : todo =>   todo = todo.methode()
204 Mot inconnu : methode =>   todo = todo.methode()

207 Mot inconnu : nombre_d_elements => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par :
207 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par :
207 Il manque un espace insécable. => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par :

208 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo[0]
208 Mot inconnu : todo =>   todo[0]

209 Mot inconnu : len => Le nombre d'éléments contenus dans une liste est donné par len(liste) :
209 Il manque un espace avant la parenthèse. => Le nombre d'éléments contenus dans une liste est donné par len(liste) :
209 Il manque un espace insécable. => Le nombre d'éléments contenus dans une liste est donné par len(liste) :

210 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   nb = len(todo)
210 Mot inconnu : nb =>   nb = len(todo)
210 Mot inconnu : len =>   nb = len(todo)
210 Il manque un espace avant la parenthèse. =>   nb = len(todo)
210 Mot inconnu : todo =>   nb = len(todo)

211 Il manque un espace insécable. => Donc le dernier élément de la liste est :

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   todo[nb - 1]
212 Mot inconnu : todo =>   todo[nb - 1]
212 Mot inconnu : nb =>   todo[nb - 1]
212 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) =>   todo[nb - 1]

214 Guillemets typographiques ouvrants. => Si l'on veut agir sur tous les éléments d'une liste, on utilise l'instruction ''for'' :
214 Guillemets typographiques fermants. => Si l'on veut agir sur tous les éléments d'une liste, on utilise l'instruction ''for'' :
214 Il manque un espace insécable. => Si l'on veut agir sur tous les éléments d'une liste, on utilise l'instruction ''for'' :

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for item in todo:
215 Mot inconnu : todo =>   for item in todo:
215 Il manque un espace insécable. =>   for item in todo:

216 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # on commence un bloc d'instructions

217 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # avec une nouvelle indentation

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # 'item' est une variable à laquelle on assigne
218 Guillemets typographiques ouvrants. =>         # 'item' est une variable à laquelle on assigne
218 Guillemets typographiques fermants. =>         # 'item' est une variable à laquelle on assigne

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         # la valeur de l'élément courant du tableau

221 Il manque un espace insécable. => Pour afficher un élément du tableau par ligne on peut donc utiliser :

222 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for untodo in todo:
222 Mot inconnu : untodo =>   for untodo in todo:
222 Mot inconnu : todo =>   for untodo in todo:
222 Il manque un espace insécable. =>   for untodo in todo:

223 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         print " - %s" % untodo
223 Mot inconnu : print =>         print " - %s" % untodo
223 Guillemets isolés. =>         print " - %s" % untodo
223 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>         print " - %s" % untodo
223 Il manque un espace. =>         print " - %s" % untodo
223 Guillemets typographiques fermants. =>         print " - %s" % untodo
223 Mot inconnu : untodo =>         print " - %s" % untodo

225 Guillemets typographiques ouvrants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Mot inconnu : print => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques fermants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Il manque un espace. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques fermants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques ouvrants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Mot inconnu : untodo => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques fermants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques ouvrants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Mot inconnu : untodo => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques fermants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques ouvrants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).
225 Guillemets typographiques fermants. => Notez au passage l'utilisation particulière de ''print''. ''%s'' sera remplacé par la valeur de ''untodo'' lors de l'affichage. Notez aussi que la variable ''untodo'' aurait pu prendre n'importe quel nom (elle s'appelait ''item'' un peu plus haut).

228 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ==== Fonctions - introduction ====

229 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'.
229 Guillemets typographiques fermants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'.
229 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'.

232 Il manque un espace insécable. => Cette fonction pourrait être définie comme suit :

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''def'' précise à python que l'on débute la description d'une fonction ;
238 Guillemets typographiques ouvrants. =>   * ''def'' précise à python que l'on débute la description d'une fonction ;
238 Mot inconnu : def =>   * ''def'' précise à python que l'on débute la description d'une fonction ;
238 Guillemets typographiques fermants. =>   * ''def'' précise à python que l'on débute la description d'une fonction ;
238 Il manque un espace insécable. =>   * ''def'' précise à python que l'on débute la description d'une fonction ;

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''texte'' est un paramètre ;
239 Guillemets typographiques ouvrants. =>   * ''texte'' est un paramètre ;
239 Guillemets typographiques fermants. =>   * ''texte'' est un paramètre ;
239 Il manque un espace insécable. =>   * ''texte'' est un paramètre ;

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''return'' permet de mettre fin à la fonction, et de renvoyer le contenu d'une variable.
240 Guillemets typographiques ouvrants. =>   * ''return'' permet de mettre fin à la fonction, et de renvoyer le contenu d'une variable.
240 Mot inconnu : return =>   * ''return'' permet de mettre fin à la fonction, et de renvoyer le contenu d'une variable.
240 Guillemets typographiques fermants. =>   * ''return'' permet de mettre fin à la fonction, et de renvoyer le contenu d'une variable.

244 Mot inconnu : ecrire => Une fonction ne doit pas forcément retourner quelque chose, elle peut par exemple juste ecrire du texte.

246 Il manque un espace insécable. => Dans un script, cette fonction pourra être appelée comme ceci :

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   txt1 = "hello"
247 Mot inconnu : txt1 =>   txt1 = "hello"
247 Guillemets typographiques ouvrants. =>   txt1 = "hello"
247 Guillemets typographiques fermants. =>   txt1 = "hello"

248 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   txt2 = "bye"
248 Mot inconnu : txt2 =>   txt2 = "bye"
248 Guillemets typographiques ouvrants. =>   txt2 = "bye"
248 Guillemets typographiques fermants. =>   txt2 = "bye"

249 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ntxt = (list_print(txt1), list_print(txt2))
249 Mot inconnu : ntxt =>   ntxt = (list_print(txt1), list_print(txt2))
249 Mot inconnu : list_print =>   ntxt = (list_print(txt1), list_print(txt2))
249 Il manque un espace avant la parenthèse. =>   ntxt = (list_print(txt1), list_print(txt2))
249 Mot inconnu : txt1 =>   ntxt = (list_print(txt1), list_print(txt2))
249 Mot inconnu : list_print =>   ntxt = (list_print(txt1), list_print(txt2))
249 Il manque un espace avant la parenthèse. =>   ntxt = (list_print(txt1), list_print(txt2))
249 Mot inconnu : txt2 =>   ntxt = (list_print(txt1), list_print(txt2))

250 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   print """%s
250 Mot inconnu : print =>   print """%s
250 Il manque un espace. =>   print """%s

251 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   %s
251 Il manque un espace. =>   %s

252 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   """ % (ntxt[0], ntxt[1])
252 Mot inconnu : ntxt =>   """ % (ntxt[0], ntxt[1])
252 Mot inconnu : ntxt =>   """ % (ntxt[0], ntxt[1])

254 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A noter :
254 Il manque un espace insécable. => A noter :

255 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ;
255 Guillemets isolés. =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ;
255 Il manque un espace insécable. =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ;

256 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses.
256 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses.
256 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses.
256 Guillemets typographiques fermants. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses.
256 Il manque un espace insécable. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses.
