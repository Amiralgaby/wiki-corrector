
12 Mot inconnu : Guido => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. <|> guido
12 Mot inconnu : Rossum => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. <|> rossum
12 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. <|>    => suggestions : [' ']
12 Espace(s) surnuméraire(s) à supprimer. => Python est né au début des années 1990, son père est Guido van Rossum. Les deux versions  actuelles sont  la 2.7.2 et la 3.2.2. <|>    => suggestions : [' ']

14 Mot inconnu : Red => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. <|> red
14 Mot inconnu : Hat => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. <|> hat
14 Mot inconnu : Rossum => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. <|> rossum
14 Mot inconnu : Launchpad => Python est présent partout, vous l'utilisez tous les jours avec Ubuntu, Red Hat en use et abuse, de même que Google (van Rossum est employé par Google). Vous avez aussi très certainement vu Python en action avec Launchpad. <|> launchpad
16 Mot inconnu : pythonismes => Ce cours est une introduction au langage, en abordant certaines notions de base de la programmation. Le but est d'être clair pour les gens qui n'ont jamais programmé, donc certains « pythonismes » seront volontairement mis de côté. On approfondira dans d'autres sessions. <|> pythonismes

31 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A une variable on assigne une valeur grâce à l'instruction « = », par exemple (dans l'interpréteur) : <|> a => suggestions : ['À']
44 Il manque un trait d’union si “même” se rapporte à “elle”. => Une variable peut « dépendre » d'elle même : <|> elle même => suggestions : ['elle-même']

57 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. <|> -3 => suggestions : ['−3', '– 3', '— 3']
57 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. <|> -2 => suggestions : ['−2', '– 2', '— 2']
57 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => On obtient 2, et pas 2.5 pour a, et -3 et pas -2.5 pour b. Pourquoi ? python arrondi tout simplement à l'entier inférieur car on lui a suggéré que a est un entier. <|>  car => suggestions : [', car']

58 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => <note important>En Python 3, le résultat est bien 2.5 pour a et -2.5 pour b</note> Comment faire alors ? Préciser à python que a est un « flottant » : <|> -2 => suggestions : ['−2', '– 2', '— 2']
62 Guillemets isolés. => Un autre type très courant est la « chaine de caractère » (//string// en anglais). Elle est définie en plaçant du texte entre « " » ou entre « ' » : <|>  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']

80 Accord de nombre erroné avec « différents ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents. <|> type => suggestions : ['types']
80 Accord de nombre erroné avec « type ». => Une erreur résulte de ce calcul, puisque //a// et //b// sont de type différents. <|> différents => suggestions : ['différent']
123 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; <|> les => suggestions : ['Les']
123 Accord avec “sont”. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; <|> elle => suggestions : ['Elles']
123 Conjugaison erronée. Accord avec “Elle”. Le verbe devrait être à la 3ᵉ personne du singulier. =>   * les lignes qui commencent par « # » ne sont pas lues par Python, ce sont des lignes de commentaires. Elle sont utiles pour détailler certains éléments de votre script ; <|> sont => suggestions : ['est']
124 Mot inconnu : shebang =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; <|> shebang
124 Mot inconnu : exemple1 =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; <|> exemple1
124 Mot inconnu : py =>   * la première ligne est un « shebang », qui permet à votre shell que savoir avec quel programme lancer votre script lorsqu'il est exécutable (**./exemple1.py**) ; <|> py
125 Mot inconnu : utilisont =>   * la seconde définit l'encodage, c'est essentiel pour nous francophones qui utilisont des accents (Python n'aime pas vraiment les accents sans encodage précisé). <|> utilisont
127 Mot inconnu : py => Copiez ce script dans un fichier « exemple.py » et exécutez : <|> py

131 Forme interrogative ? Mettez un trait d’union. => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. <|> rappelez vous => suggestions : ['Rappelez-vous']
131 Mot inconnu : raw_input => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. <|> raw_input
131 Mot inconnu : int => En guise d'exercice, écrivez un script qui demande l'âge de 2 personnes, et qui affiche la différence d'âge. Rappelez vous que //raw_input()// récupère une chaine de caractère, qu'il faudrait transformer en entier pour faire le calcul. La fonction //int// qui prend en argument une chaine de caractère, et retourne sa conversion en entier. <|> int

152 Guillemets typographiques ouvrants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) :  <|> " => suggestions : ['«\xa0', '“']
152 Guillemets typographiques fermants. => Pour connaître toutes les instructions à exécuter si la condition est vraie, on définit un "bloc". Ce bloc est défini par une indentation (<tab> en général) :  <|> " => suggestions : ['\xa0»', '”']

183 Formatage des grands nombres. => Utiliser une variable par élément à saisir, ça devient très vite ingérable (imaginez ce que ça donnerait pour gérer une liste de 10000 clients). Python possède un autre type de données, les listes. <|> 10000 => suggestions : ['10\xa0000', '1\xa00000']

184 Guillemets typographiques ouvrants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir : <|> " => suggestions : ['«\xa0', '“']
184 Guillemets typographiques fermants. => Il s'agit en fait d'un "tas" de variables groupées en une seule. Par exemple (pour notre liste de choses à faire) on pourrait avoir : <|> " => suggestions : ['\xa0»', '”']

188 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A chaque nouvel élément il faudrait ajouter une variable, c'est ingérable. On peut alors utiliser : <|> a => suggestions : ['À']

195 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : <|> ' => suggestions : ['“', '‘', '‹']
195 Guillemets typographiques fermants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : <|> ' => suggestions : ['”', '’', '›']
195 Guillemets typographiques ouvrants. => Une liste est ce qu'on appelle un 'objet' (comme n'importe quel élément en python, mais peu importe pour le moment). Et à un objet correspondent des 'méthodes'. Ces méthodes sont des actions que l'on peut appliquer à l'objet. Par exemple, on peut ajouter un élément à notre liste : <|> ' => suggestions : ['“', '‘', '‹']

197 Mot inconnu : todo => Dans l'interpréteur, affichez maintenant todo: <|> todo

202 Guillemets typographiques ouvrants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : <|> ' => suggestions : ['“', '‘', '‹']
202 Mot inconnu : todo => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : <|> todo
202 Guillemets typographiques fermants. => Vous noterez que 'todo' a été modifié sans que l'on ait besoin de lui réassigner une nouvelle valeur ; on n'a pas eu besoin de faire : <|> ' => suggestions : ['”', '’', '›']

206 Mot inconnu : nombre_d_elements => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par : <|> nombre_d_elements
206 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => On accède aux éléments d'une liste par leur indice (de 0 à (nombre_d_elements - 1)). Le premier élément est donc accessible par : <|>  -  => suggestions : [' – ', ' — ', ' − ', ' −']

208 Mot inconnu : len => Le nombre d'éléments contenus dans une liste est donné par len(liste) : <|> len
208 Il manque un espace avant la parenthèse. => Le nombre d'éléments contenus dans une liste est donné par len(liste) : <|> ( => suggestions : [' (']

227 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => ==== Fonctions - introduction ==== <|>  -  => suggestions : [' – ', ' — ', ' − ']

228 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. <|> ' => suggestions : ['“', '‘', '‹']
228 Guillemets typographiques fermants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. <|> ' => suggestions : ['”', '’', '›']
228 Guillemets typographiques ouvrants. => On a parlé tout à l'heure des méthodes pour un objet. Le terme 'méthode' est lié à la programmation orientée objet, un terme plus générique étant 'fonction'. <|> ' => suggestions : ['“', '‘', '‹']

243 Mot inconnu : ecrire => Une fonction ne doit pas forcément retourner quelque chose, elle peut par exemple juste ecrire du texte. <|> ecrire

253 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A noter : <|> a => suggestions : ['À']
254 Guillemets isolés. =>   * l'utilisation des triples " pour une chaîne de caractères qui s'affichera sur plusieurs lignes ; <|>  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
255 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. <|> s => suggestions : [' s']
255 Il manque un espace. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. <|> s => suggestions : [' s']
255 Guillemets typographiques fermants. =>   * l'utilisation de "%s %s" % (a, b) : si l'on a plus de 2 chaînes à remplacer, on les met entre parenthèses. <|> " => suggestions : ['\xa0»', '”']
