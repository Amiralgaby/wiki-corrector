1 Guillemets typographiques ouvrants. => Professeur de la "leçon" FiFouille | " => suggestions : ['«\xa0', '“']
1 Guillemets typographiques fermants. => Professeur de la "leçon" FiFouille | " => suggestions : ['\xa0»', '”']
1 Mot inconnu : FiFouille => Professeur de la "leçon" FiFouille | fifouille

8 Mot inconnu : Ca => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre. | ca
8 Mot inconnu : Ca => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre. | ca
8 Mot inconnu : binding => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre. | binding

9 Mot inconnu : ruby => Aujourd'hui ruby est à la mode. | ruby

10 Incohérence avec “on” : “Rails” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => C'est aussi à la base de Ruby on Rails, le fameux framework web quifaittoutmemelecafé. | rails => suggestions : ['Raille', 'Raye']
10 Mot inconnu : quifaittoutmemelecafé => C'est aussi à la base de Ruby on Rails, le fameux framework web quifaittoutmemelecafé. | quifaittoutmemelecafé

12 Mot inconnu : ERB => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc | erb
12 Mot inconnu : métalanguage => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc | métalanguage
12 Mot inconnu : html => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc | html
12 Mot inconnu : docbook => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc | docbook
12 Doublon. => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc | etc etc => suggestions : ['etc']

13 Incohérence avec “On” : “Rails” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues' | rails => suggestions : ['Raille', 'Raye']
13 Guillemets typographiques ouvrants. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues' | ' => suggestions : ['“', '‘', '‹']
13 Guillemets typographiques fermants. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues' | ' => suggestions : ['”', '’', '›']

19 Conjugaison erronée. Accord avec “les langages…”. Le verbe devrait être à la 3ᵉ personne du pluriel. => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise. | java => suggestions : ['javèrent']
19 Espace(s) surnuméraire(s) à supprimer. => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise. |    => suggestions : [' ']
19 Mot inconnu : garbage => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise. | garbage

21 Accord de genre erroné : « java » est féminin. => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer. | du => suggestions : ['de la']
21 Accord de genre erroné : « du » est un déterminant masculin. => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer. | java => suggestions : ['javé']
21 Mot inconnu : lisp => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer. | lisp
21 Mot inconnu : scheme => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer. | scheme
21 Mot inconnu : ruby => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer. | ruby
22 Guillemets typographiques ouvrants. => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise. | " => suggestions : ['«\xa0', '“']
22 Guillemets typographiques fermants. => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise. | " => suggestions : ['\xa0»', '”']
22 Mot inconnu : least => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise. | least

24 Le verbe devrait être à l’infinitif. => Un exemple avec Ruby, si vous connaissez le fonctionnement général du langage, en général pour de nouveau type de donnés il y a moyen de s'en sortir sans même lire la doc, ça marche comme le reste ;) | donnés => suggestions : ['donner']

26 Guillemets typographiques ouvrants. => Le grand troll actuel "Ruby c'est lent" alors oui, c'est moins rapide que d'autres langages de scripts comme du python par exemple. | " => suggestions : ['«\xa0', '“']
26 Guillemets typographiques fermants. => Le grand troll actuel "Ruby c'est lent" alors oui, c'est moins rapide que d'autres langages de scripts comme du python par exemple. | " => suggestions : ['\xa0»', '”']

27 Guillemets typographiques ouvrants. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus. | " => suggestions : ['«\xa0', '“']
27 Guillemets typographiques fermants. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus. | " => suggestions : ['\xa0»', '”']
27 Grands nombres : utilisez des espaces insécables. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus. | 500 000 => suggestions : ['500\xa0000']
27 Mot inconnu : ruby => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus. | ruby
27 Il manque un trait d’union. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus. | là dessus => suggestions : ['là-dessus']

33 Mot inconnu : drole => On va donc commencer à essayer un peu la bête, sinon c'est pas drole. | drole

35 Mot inconnu : irb => Ce dont on va avoir besoin, Ruby, l'interpréteur et pour nos essais, on va aussi installer irb, interactive ruby c'est comme le mode interactif de python pour ceux qui connaissent, et c'est pratique pour les expérimentations rapides. | irb
35 Mot inconnu : ruby => Ce dont on va avoir besoin, Ruby, l'interpréteur et pour nos essais, on va aussi installer irb, interactive ruby c'est comme le mode interactif de python pour ceux qui connaissent, et c'est pratique pour les expérimentations rapides. | ruby

36 Mot inconnu : prennez => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement. | prennez
36 Mot inconnu : synaptic => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement. | synaptic
36 Mot inconnu : ruby1 => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement. | ruby1

37 Mot inconnu : debian => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce. | debian
37 Mot inconnu : slide => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce. | slide
37 Ni apostrophe ni trait d’union après “y”. => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce. | y'a => suggestions : ['y a']
37 Mot inconnu : y'a => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce. | y'a

38 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | irb
38 Il manque un espace. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | très => suggestions : [' Très']
38 Mot inconnu : require => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | require
38 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | ' => suggestions : ['“', '‘', '‹']
38 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | irb
38 Mot inconnu : completion => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | completion
38 Guillemets typographiques fermants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | ' => suggestions : ['”', '’', '›']
38 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) |  . => suggestions : ['. ', '.']
38 Mot inconnu : irbirc => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | irbirc
38 Pas d’espace après ce signe. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | (  => suggestions : ['(']
38 Mot inconnu : echo => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | echo
38 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | " => suggestions : ['«\xa0', '“']
38 Mot inconnu : require => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | require
38 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | ' => suggestions : ['“', '‘', '‹']
38 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | irb
38 Mot inconnu : completion => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | completion
38 Mot inconnu : irbrc => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) | irbrc
38 Pas d’espace avant ce signe. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc ) |  ) => suggestions : [')']

41 Mot inconnu : ya => Il ya aussi deux autres programmes utiles : | ya

42 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib |    => suggestions : ['']
42 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | rubygems => suggestions : ['Rubygems']
42 Mot inconnu : rubygems =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | rubygems
42 Mot inconnu : ruby =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | ruby
42 Mot inconnu : gems =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | gems
42 Mot inconnu : packagés =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | packagés
42 Mot inconnu : distrib =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib | distrib

43 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Liste à puce |    => suggestions : ['']
