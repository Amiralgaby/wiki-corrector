1 Mot inconnu : DvP [[25:28]] => Article mis en forme par DvP suite à la séance de formation organisée par Gloubiboulga sur le canal IRC #ubuntu-fr-classroom. Encore merci à lui pour ses excellents cours. <|> dvp
1 Mot inconnu : Gloubiboulga [[74:86]] => Article mis en forme par DvP suite à la séance de formation organisée par Gloubiboulga sur le canal IRC #ubuntu-fr-classroom. Encore merci à lui pour ses excellents cours. <|> gloubiboulga

3 Mot inconnu : Gloubiboulga [[8:20]] => Merci à Gloubiboulga pour la relecture et corrections. <|> gloubiboulga

5 Mot inconnu : CDBS [[7:11]] => ====== CDBS, un outil de création de paquets debian ======  <|> cdbs
5 Espace(s) en fin de ligne à supprimer. [[58:59]] => ====== CDBS, un outil de création de paquets debian ======  <|>   => suggestions : ['']

8 Mot inconnu : CDBS [[0:4]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> cdbs
8 Mot inconnu : Common [[11:17]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> common
8 Mot inconnu : System [[31:37]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> system
8 Mot inconnu : rules [[90:95]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> rules
8 Mot inconnu : debhelper [[164:173]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> debhelper
8 Mot inconnu : CDBS [[208:212]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> cdbs
8 Mot inconnu : rules [[224:229]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> rules
8 Mot inconnu : CDBS [[252:256]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> cdbs
8 Mot inconnu : packagés [[347:355]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> packagés
8 Mot inconnu : CDBS [[364:368]] => CDBS, pour Common Debian Build System, est un outil qui permet de simplifier votre debian/rules. Il permet de faire la même chose que ce que vous pouvez faire avec debhelper. Pour certains paquets faits avec CDBS, le debian/rules se résume à 2 lignes. CDBS est de plus utilisé par les mainteneurs. Sous Ubuntu, GNOME, KDE et Xfce sont entièrement packagés grâce à CDBS. <|> cdbs
12 Espace(s) en fin de ligne à supprimer. [[90:91]] => Pour pouvoir suivre cette documentation un certain nombre de pré-requis sont nécessaires :  <|>   => suggestions : ['']

28 Mot inconnu : CDBS [[19:23]] => ===== Initiation à CDBS ===== <|> cdbs

29 Mot inconnu : CDBS [[63:67]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> cdbs
29 Ceci est un verbe à la 1ʳᵉ personne du pluriel. Sujet (“nous” ou équivalent) introuvable. [[125:130]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> avons => suggestions : ['ont']
29 Mot inconnu : rules [[148:153]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> rules
29 Mot inconnu : class [[157:162]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> class
29 Mot inconnu : rules [[203:208]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> rules
29 Confusion : « notre possession », « la nôtre ». [[245:250]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> notre => suggestions : ['nôtre']
29 Guillemets typographiques ouvrants. [[256:257]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> " => suggestions : ['«\xa0', '“']
29 Mot inconnu : rules [[257:262]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> rules
29 Guillemets typographiques fermants. [[262:263]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> " => suggestions : ['\xa0»', '”']
29 Guillemets typographiques ouvrants. [[376:377]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> " => suggestions : ['«\xa0', '“']
29 Mot inconnu : class [[377:382]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> class
29 Guillemets typographiques fermants. [[382:383]] => Une fois les paquets nécessaires à la création de paquets avec CDBS installés, regardez ensuite dans /usr/share/cdbs/1. Nous avons donc 2 dossiers (rules et class) qui contiennent des morceaux de debian/rules que l'on va pouvoir inclure dans le notre. Les "rules" sont des actions à exécuter suivant la méthode de compilation/installation du logiciel que vous empaquetez, les "class" permettent d'automatiser différentes taches que l'on retrouve dans tous les paquets concernant un certain type de paquets. <|> " => suggestions : ['\xa0»', '”']

31 Guillemets typographiques ouvrants. [[249:250]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> " => suggestions : ['«\xa0', '“']
31 Mot inconnu : automagiquement [[250:265]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> automagiquement
31 Guillemets typographiques fermants. [[265:266]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> " => suggestions : ['\xa0»', '”']
31 Mot inconnu : changelog [[334:343]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> changelog
31 Mot inconnu : control [[354:361]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> control
31 Mot inconnu : Makefile [[394:402]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> makefile
31 Mot inconnu : Makefile [[503:511]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> makefile
31 Mot inconnu : dh_ [[641:644]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> dh_
31 Mot inconnu : debhelper [[655:664]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> debhelper
31 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[688:690]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|>  . => suggestions : ['. ', '.']
31 Mot inconnu : mk [[690:692]] => Regardons le fichier /usr/share/cdbs/1/rules/debhelper.mk (Vous pouvez vous servir de Firefox pour regarder ce genre de fichiers texte). Le début de ce script décrit les variables qu'il utilise. Puis un certain nombre de ces variables sont définies "automagiquement", en tenant compte par exemple d'informations contenues dans debian/changelog ou debian/control. Ensuite une série de règles de Makefile sont décrites, avec les actions à exécuter. N'ayez pas peur, la syntaxe des fonctions avancées d'un Makefile est assez repoussante, mais il est vraiment rare d'avoir à s'en servir. Vous verrez enfin à la fin du fichier toute une série de dh_* (scripts debhelper) appelés par ce fichier .mk. <|> mk

33 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[17:19]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|>  . => suggestions : ['. ', '.']
33 Mot inconnu : mk [[19:21]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|> mk
33 Mot inconnu : CDBS [[34:38]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|> cdbs
33 Mot inconnu : debhelper [[54:63]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|> debhelper
33 Mot inconnu : mk [[64:66]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|> mk
33 Mot inconnu : mk [[104:106]] => Tous les fichiers .mk livrés avec CDBS ont ce profil (debhelper.mk est un exemple assez complexe, gnome.mk est beaucoup plus simple). <|> mk

35 Guillemets typographiques ouvrants. [[3:4]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> " => suggestions : ['«\xa0', '“']
35 Guillemets typographiques fermants. [[14:15]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> " => suggestions : ['\xa0»', '”']
35 Mot inconnu : autotools [[147:156]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> autotools
35 Mot inconnu : setup [[158:163]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> setup
35 Mot inconnu : py [[164:166]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> py
35 Mot inconnu : qmake [[168:173]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> qmake
35 Typographie : points de suspension. Utilisez le caractère dédié. [[173:176]] => La "difficulté" pour le packageur va être de choisir les bonnes règles ou classes pour son paquet (suivant le système de compilation du logiciel : autotools, setup.py, qmake...). <|> ... => suggestions : ['…']

37 Mot inconnu : CDBS [[15:19]] => == Comparaison CDBS / Debhelper == <|> cdbs
37 Mot inconnu : Debhelper [[22:31]] => == Comparaison CDBS / Debhelper == <|> debhelper

39 Confusion. Ou vous confondez “à” (préposition) avec “a” (avoir), ou vous devez employer “au”. Exemple : _à_ midi, il _a_ pris son déjeuner _au_ restaurant. [[66:70]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> à le => suggestions : ['a le', 'au']
39 Mot inconnu : make [[127:131]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> make
39 Mot inconnu : make [[135:139]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> make
39 Mot inconnu : install [[140:147]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> install
39 Il manque un trait d’union si “même” se rapporte à “vous”. [[178:187]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> vous même => suggestions : ['vous-même']
39 Mot inconnu : gcc [[228:231]] => Quand vous téléchargez un logiciel, 3 commandes suffisent souvent à le compiler/installer (les fameuses commandes ./configure, make et make install) mais vous pouvez aussi faire vous même la compilation en utilisant directement gcc ou g++. <|> gcc

41 Mot inconnu : debhelper [[28:37]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|> debhelper
41 Mot inconnu : cdbs [[41:45]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|> cdbs
41 Mot inconnu : debhelper [[88:97]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|> debhelper
41 Si « mais » est la conjonction de coordination, une virgule est souhaitable si elle introduit une nouvelle proposition. [[97:102]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|>  mais => suggestions : [', mais']
41 Mot inconnu : cdbs [[130:134]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|> cdbs
41 Mot inconnu : debhelper [[195:204]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|> debhelper
41 Espace(s) en fin de ligne à supprimer. [[222:223]] => C'est le même principe avec debhelper et cdbs, vous pouvez tout faire manuellement avec debhelper mais vous pouvez aussi utiliser cdbs qui fera le même boulot avec 2 lignes de code (en utilisant debhelper 99 fois sur 100).  <|>   => suggestions : ['']
43 Mot inconnu : rules [[41:46]] => **Attention** : Notez que seul le debian/rules est concerné par CDBS, le reste des fichiers de debian/ reste identique suivant que vous utilisiez debhelper ou CDBS. <|> rules
43 Mot inconnu : CDBS [[64:68]] => **Attention** : Notez que seul le debian/rules est concerné par CDBS, le reste des fichiers de debian/ reste identique suivant que vous utilisiez debhelper ou CDBS. <|> cdbs
43 Mot inconnu : debhelper [[146:155]] => **Attention** : Notez que seul le debian/rules est concerné par CDBS, le reste des fichiers de debian/ reste identique suivant que vous utilisiez debhelper ou CDBS. <|> debhelper
43 Mot inconnu : CDBS [[159:163]] => **Attention** : Notez que seul le debian/rules est concerné par CDBS, le reste des fichiers de debian/ reste identique suivant que vous utilisiez debhelper ou CDBS. <|> cdbs

45 Mot inconnu : CDBS [[32:36]] => ===== Création d'un paquet avec CDBS =====  <|> cdbs
45 Espace(s) en fin de ligne à supprimer. [[42:43]] => ===== Création d'un paquet avec CDBS =====  <|>   => suggestions : ['']

47 Mot inconnu : libtextcat [[29:39]] => On va aujourd'hui empaqueter libtextcat (http://software.wise-guys.nl/libtextcat/). On va procéder en 2 étapes. D'abord en créant un paquet très laid, mais qui nous permettra de nous faire la main, puis en créant un vrai paquet, tout beau, et qui nous donnera plusieurs .debs. <|> libtextcat
47 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[269:271]] => On va aujourd'hui empaqueter libtextcat (http://software.wise-guys.nl/libtextcat/). On va procéder en 2 étapes. D'abord en créant un paquet très laid, mais qui nous permettra de nous faire la main, puis en créant un vrai paquet, tout beau, et qui nous donnera plusieurs .debs. <|>  . => suggestions : ['. ', '.']
47 Mot inconnu : debs [[271:275]] => On va aujourd'hui empaqueter libtextcat (http://software.wise-guys.nl/libtextcat/). On va procéder en 2 étapes. D'abord en créant un paquet très laid, mais qui nous permettra de nous faire la main, puis en créant un vrai paquet, tout beau, et qui nous donnera plusieurs .debs. <|> debs

54 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[6:9]] => ==== 1 - Création du paquet « pas beau » ==== <|>  -  => suggestions : [' – ', ' — ', ' − ']

55 Mot inconnu : Gloubiboulga [[17:29]] => Pour aller vite, Gloubiboulga a préparé un petit script qui va vous permettre de récupérer tous les fichiers nécessaires sur son site. Placez vous dans un dossier (le dossier ~/packaging de la première session fera très bien l'affaire si vous l'avez toujours) et utilisez : <|> gloubiboulga
55 Forme interrogative ? Mettez un trait d’union. [[135:146]] => Pour aller vite, Gloubiboulga a préparé un petit script qui va vous permettre de récupérer tous les fichiers nécessaires sur son site. Placez vous dans un dossier (le dossier ~/packaging de la première session fera très bien l'affaire si vous l'avez toujours) et utilisez : <|> placez vous => suggestions : ['Placez-vous']

61 Mot inconnu : get_files [[43:52]] => <note important>Il faut modifier le script get_files.sh, et remplacer à la ligne 6 la valeur de BASE_URL par : <|> get_files
61 Mot inconnu : sh [[53:55]] => <note important>Il faut modifier le script get_files.sh, et remplacer à la ligne 6 la valeur de BASE_URL par : <|> sh
61 Mot inconnu : BASE_URL [[96:104]] => <note important>Il faut modifier le script get_files.sh, et remplacer à la ligne 6 la valeur de BASE_URL par : <|> base_url

64 Mot inconnu : libtextcat [[68:78]] => Ceci va vous permettre de récupérer le paquet source orig.tar.gz de libtextcat et un dossier debian/ contenant les fichiers nécessaires à la création d'un paquet tout moche ;) <|> libtextcat
70 Mot inconnu : cdbs [[61:65]] => Puis choisir « b » pour la création d'un paquet en utilisant cdbs. Ceci générera le dossier debian/ ainsi que les fichiers au « format » cdbs. <|> cdbs
70 Mot inconnu : cdbs [[137:141]] => Puis choisir « b » pour la création d'un paquet en utilisant cdbs. Ceci générera le dossier debian/ ainsi que les fichiers au « format » cdbs. <|> cdbs
75 Mot inconnu : rules [[106:111]] => Allons voir ce qu'il y a dans ce dossier debian. Le fichier qui nous intéresse est bien entendu le debian/rules, mais jetons un oeil au debian/control : <|> rules
75 Mot inconnu : oeil [[128:132]] => Allons voir ce qu'il y a dans ce dossier debian. Le fichier qui nous intéresse est bien entendu le debian/rules, mais jetons un oeil au debian/control : <|> oeil
75 Mot inconnu : control [[143:150]] => Allons voir ce qu'il y a dans ce dossier debian. Le fichier qui nous intéresse est bien entendu le debian/rules, mais jetons un oeil au debian/control : <|> control

79 Mot inconnu : Build-Depends [[19:32]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> build-depends
79 Mot inconnu : cdbs [[45:49]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> cdbs
79 Mot inconnu : debhelper [[53:62]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> debhelper
79 Mot inconnu : CDBS [[87:91]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> cdbs
79 Mot inconnu : debhelper [[97:106]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> debhelper
79 Mot inconnu : Gloubiboulga [[108:120]] => Vous voyez que les Build-Depends contiennent cdbs ET debhelper. Il est rare d'utiliser CDBS sans debhelper (Gloubiboulga lui-même n'a jamais vu un tel paquet). <|> gloubiboulga
81 Mot inconnu : rules [[38:43]] => Maintenant, éditons le fichier debian/rules : <|> rules

85 Typographie : points de suspension. Utilisez le caractère dédié. [[18:21]] => 6 lignes suffisent... <|> ... => suggestions : ['…']
87 Mot inconnu : rules [[29:34]] => === Détail du fichier debian/rules === <|> rules

88 Mot inconnu : cdbs [[82:86]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> cdbs
88 Mot inconnu : autotools [[104:113]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> autotools
88 Mot inconnu : mk [[114:116]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> mk
88 Mot inconnu : make [[180:184]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> make
88 Mot inconnu : make [[188:192]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> make
88 Mot inconnu : install [[193:200]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> install
88 Mot inconnu : debhelper [[206:215]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> debhelper
88 Mot inconnu : mk [[216:218]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> mk
88 Mot inconnu : dh_ [[294:297]] => Les deux premières lignes permettent d'inclure des règles et classes fournies par cdbs, en l'occurrence autotools.mk, qui s'occupera d'utiliser les fameuses commandes ./configure, make et make install ; et debhelper.mk que nous avons vu tout à l'heure, qui intègre un certain nombre de scripts dh_* pour la construction du paquet. <|> dh_
92 Mot inconnu : debhelper [[111:120]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> debhelper
92 Mot inconnu : mk [[121:123]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> mk
92 Mot inconnu : CDBS [[142:146]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> cdbs
92 Mot inconnu : DEB_INSTALL_MANPAGES_ [[277:298]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> deb_install_manpages_
92 Guillemets typographiques ouvrants. [[354:355]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> " => suggestions : ['«\xa0', '“']
92 Mot inconnu : textcat [[355:362]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> textcat
92 Guillemets typographiques fermants. [[362:363]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> " => suggestions : ['\xa0»', '”']
92 Mot inconnu : createfp [[387:395]] => Première chose : installer une page man. On a vu tout à l'heure que de nombreuses variables sont définies dans debhelper.mk. L'utilisateur de CDBS peut utiliser ces variables, les modifier ou les compléter pour adapter son paquet. Dans le cas d'une page man, c'est la variable DEB_INSTALL_MANPAGES_<paquet> qui entre en jeu. Le paquet dans notre cas est "textcat", et la page man debian/createfp.8 (déjà écrite, et disponible dans le dossier debian/ que vous avez téléchargé). <|> createfp
94 Mot inconnu : DEB_INSTALL_MANPAGES_textcat [[84:112]] => Pour assigner une valeur à la variable, on utilise le symbole ":=". Par exemple : //DEB_INSTALL_MANPAGES_textcat := debian/createfp.8 // <|> deb_install_manpages_textcat
94 Mot inconnu : createfp [[123:131]] => Pour assigner une valeur à la variable, on utilise le symbole ":=". Par exemple : //DEB_INSTALL_MANPAGES_textcat := debian/createfp.8 // <|> createfp

96 Mot inconnu : CDBS [[0:4]] => CDBS saura qu'une page man existe, et dans quel paquet l'installer lors de la construction du paquet binaire (en utilisant en fait dh_installman). <|> cdbs
96 Mot inconnu : dh_installman [[131:144]] => CDBS saura qu'une page man existe, et dans quel paquet l'installer lors de la construction du paquet binaire (en utilisant en fait dh_installman). <|> dh_installman

98 Mot inconnu : CDBS [[73:77]] => Il n'y a pas d'intérêt à détailler toutes les variables utilisables avec CDBS (il y en a des tonnes). Regarder ce qui se passe dans les fichiers .mk est certainement une meilleure idée. Vous pouvez pour cela utiliser grep pour rechercher quelque chose :  <|> cdbs
98 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[144:146]] => Il n'y a pas d'intérêt à détailler toutes les variables utilisables avec CDBS (il y en a des tonnes). Regarder ce qui se passe dans les fichiers .mk est certainement une meilleure idée. Vous pouvez pour cela utiliser grep pour rechercher quelque chose :  <|>  . => suggestions : ['. ', '.']
98 Mot inconnu : mk [[146:148]] => Il n'y a pas d'intérêt à détailler toutes les variables utilisables avec CDBS (il y en a des tonnes). Regarder ce qui se passe dans les fichiers .mk est certainement une meilleure idée. Vous pouvez pour cela utiliser grep pour rechercher quelque chose :  <|> mk
98 Mot inconnu : grep [[217:221]] => Il n'y a pas d'intérêt à détailler toutes les variables utilisables avec CDBS (il y en a des tonnes). Regarder ce qui se passe dans les fichiers .mk est certainement une meilleure idée. Vous pouvez pour cela utiliser grep pour rechercher quelque chose :  <|> grep
98 Espace(s) en fin de ligne à supprimer. [[253:254]] => Il n'y a pas d'intérêt à détailler toutes les variables utilisables avec CDBS (il y en a des tonnes). Regarder ce qui se passe dans les fichiers .mk est certainement une meilleure idée. Vous pouvez pour cela utiliser grep pour rechercher quelque chose :  <|>   => suggestions : ['']
102 Espace(s) en fin de ligne à supprimer. [[31:33]] => Ce qui vous donnera en retour :   <|>    => suggestions : ['']

106 Mot inconnu : grep [[11:15]] => **Note sur grep** : -R permet de chercher dans tous les fichiers, -i de ne pas tenir compte de la casse. Cela donne une indication sur les variables à utiliser. Les noms des variables sont généralement suffisamment explicites pour permettre une recherche avec grep. <|> grep
106 Mot inconnu : grep [[260:264]] => **Note sur grep** : -R permet de chercher dans tous les fichiers, -i de ne pas tenir compte de la casse. Cela donne une indication sur les variables à utiliser. Les noms des variables sont généralement suffisamment explicites pour permettre une recherche avec grep. <|> grep

111 Mot inconnu : createfp [[176:184]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> createfp
111 Mot inconnu : usr [[190:193]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> usr
111 Élision de l’article devant un mot commençant par une voyelle. [[207:210]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> de  => suggestions : ['d’']
111 Mot inconnu : usr [[210:213]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> usr
111 Mot inconnu : bin [[265:268]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> bin
111 Mot inconnu : sbin [[272:276]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> sbin
111 Mot inconnu : make [[327:331]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> make
111 Mot inconnu : install [[332:339]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> install
111 Mot inconnu : textcat [[399:406]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> textcat
111 Mot inconnu : install [[448:455]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> install
111 Mot inconnu : textcat [[456:463]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> textcat
111 Une de ces ponctuations est superflue. [[463:465]] => Il se peut également que vous ayez des actions particulières à exécuter à certains moments de la construction du paquet. Dans notre exemple, nous allons installer l'exécutable createfp dans usr/sbin au lieu de usr/bin. Pour ce faire nous allons renommer le dossier bin en sbin. Cela ne peut se faire qu'après avoir utilisé le `make install`. Nous allons donc créer une nouvelle règle pour le paquet textcat, qui s'appliquera après l'installation : install/textcat:: <|> :: => suggestions : [':', ':']

117 Mot inconnu : __Petit [[0:7]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> __petit
117 Mot inconnu : rappel__ [[8:16]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> rappel__
117 Mot inconnu : make [[37:41]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> make
117 Mot inconnu : install [[42:49]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> install
117 Confusion probable : “avoir” à la 3ᵉ personne du pluriel du présent s’écrit “ont”. [[156:158]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> on => suggestions : ['ont']
117 Incohérence avec “on” : “une” devrait être un verbe, un pronom objet, un adverbe de négation, etc. [[159:162]] => __Petit rappel__ : Quand on lance le make install en construisant un paquet, l'installation se fait dans debian/paquet et pas sur le système local. Donc si on une action est à faire, elle doit être faite dans debian/paquet. <|> une => suggestions : []

129 Mot inconnu : textcat [[118:125]] => Ce script utilise les fichiers téléchargés tout à l'heure pour créer un vrai paquet (simplement en copiant le dossier textcat/debian dans le dossier source décompressé).  <|> textcat
129 Espace(s) en fin de ligne à supprimer. [[169:170]] => Ce script utilise les fichiers téléchargés tout à l'heure pour créer un vrai paquet (simplement en copiant le dossier textcat/debian dans le dossier source décompressé).  <|>   => suggestions : ['']

132 Guillemets typographiques ouvrants. [[9:10]] => Après le 'moulinage' (compilation du paquet) effectuer un : <|> ' => suggestions : ['“', '‘', '‹']
132 Guillemets typographiques fermants. [[19:20]] => Après le 'moulinage' (compilation du paquet) effectuer un : <|> ' => suggestions : ['”', '’', '›']

136 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[27:29]] => Vous avez bien votre paquet .deb mais vous avez vu que Lintian n'est pas spécialement content après la compilation : <|>  . => suggestions : ['. ', '.']
136 Mot inconnu : Lintian [[55:62]] => Vous avez bien votre paquet .deb mais vous avez vu que Lintian n'est pas spécialement content après la compilation : <|> lintian

141 Guillemets typographiques ouvrants. [[10:11]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> ' => suggestions : ['“', '‘', '‹']
141 Mot inconnu : dpkg [[11:15]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> dpkg
141 Il manque un espace à côté du tiret. [[15:17]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|>  - => suggestions : [' – ', ' — ']
141 Guillemets typographiques fermants. [[18:19]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> ' => suggestions : ['”', '’', '›']
141 Incohérence avec « c’ » : « sur » devrait être un verbe. [[20:23]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> sur => suggestions : []
141 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[26:28]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|>  . => suggestions : ['. ', '.']
141 Mot inconnu : sbin [[107:111]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> sbin
141 Mot inconnu : bin [[123:126]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> bin
141 Mot inconnu : manpage [[140:147]] => Faites un 'dpkg -c' sur le .deb, ceci va lister le contenu du paquet. Vous verrez que vous avez un dossier sbin, et pas de bin ainsi qu'une manpage. <|> manpage
143 Mot inconnu : policy [[74:80]] => On va maintenant construire un paquet multiple, pour satisfaire la debian policy en changeant le debian/rules. <|> policy
143 Mot inconnu : rules [[104:109]] => On va maintenant construire un paquet multiple, pour satisfaire la debian policy en changeant le debian/rules. <|> rules

146 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[6:9]] => ==== 2 - Création du paquet en respectant la « debian policy » ==== <|>  -  => suggestions : [' – ', ' — ', ' − ']
146 Mot inconnu : policy [[54:60]] => ==== 2 - Création du paquet en respectant la « debian policy » ==== <|> policy

152 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[17:19]] => Quelques fichiers .install sont ajoutés. Jetons un oeil au debian/control : <|>  . => suggestions : ['. ', '.']
152 Mot inconnu : install [[19:26]] => Quelques fichiers .install sont ajoutés. Jetons un oeil au debian/control : <|> install
152 Mot inconnu : oeil [[51:55]] => Quelques fichiers .install sont ajoutés. Jetons un oeil au debian/control : <|> oeil
152 Mot inconnu : control [[66:73]] => Quelques fichiers .install sont ajoutés. Jetons un oeil au debian/control : <|> control

156 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[59:61]] => Cette fois-ci trois paquets sont décrits, qui vont donner 3 .debs lors de la compilation. <|>  . => suggestions : ['. ', '.']
156 Mot inconnu : debs [[61:65]] => Cette fois-ci trois paquets sont décrits, qui vont donner 3 .debs lors de la compilation. <|> debs
157 Mot inconnu : textcat0 [[80:88]] => Il reste maintenant à installer les fichiers voulus dans les dossiers debian/libtextcat0, debian/libtextcat-dev et debian/createfp. <|> textcat0
157 Mot inconnu : textcat-dev [[100:111]] => Il reste maintenant à installer les fichiers voulus dans les dossiers debian/libtextcat0, debian/libtextcat-dev et debian/createfp. <|> textcat-dev
157 Mot inconnu : createfp [[122:130]] => Il reste maintenant à installer les fichiers voulus dans les dossiers debian/libtextcat0, debian/libtextcat-dev et debian/createfp. <|> createfp

159 Accord de nombre erroné : « scripts » est au pluriel. [[0:2]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> le => suggestions : ['Les']
159 Accord de nombre erroné : « scripts » devrait être au singulier. [[3:10]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> scripts => suggestions : ['script']
159 Mot inconnu : CDBS [[188:192]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> cdbs
159 Guillemets typographiques ouvrants. [[304:305]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> " => suggestions : ['«\xa0', '“']
159 Mot inconnu : mv [[305:307]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> mv
159 Guillemets typographiques fermants. [[307:308]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> " => suggestions : ['\xa0»', '”']
159 Guillemets typographiques ouvrants. [[312:313]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> " => suggestions : ['«\xa0', '“']
159 Mot inconnu : cp [[313:315]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> cp
159 Guillemets typographiques fermants. [[315:316]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> " => suggestions : ['\xa0»', '”']
159 Mot inconnu : rules [[332:337]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> rules
159 Mot inconnu : rules [[413:418]] => Le scripts d'installation de la bibliothèque ne peut pas faire ça (choisir où installer les fichiers), on va donc pour commencer devoir installer tous les fichiers dans debian/tmp (ce que CDBS fera tout seul comme un grand). Puis on copiera les fichiers depuis debian/tmp vers les dossiers corrects. Des "mv" ou "cp" dans le debian/rules pourraient faire l'affaire, mais ça risque d'alourdir énormément le debian/rules. <|> rules

161 Mot inconnu : debhelper [[13:22]] => C'est là que debhelper revient sur le devant de la scène avec son merveilleux dh_install. ce script permet de déplacer les fichiers listés dans debian/<paquet>.install dans le dossier debian/<paquet> lors de son utilisation. <|> debhelper
161 Mot inconnu : dh_install [[78:88]] => C'est là que debhelper revient sur le devant de la scène avec son merveilleux dh_install. ce script permet de déplacer les fichiers listés dans debian/<paquet>.install dans le dossier debian/<paquet> lors de son utilisation. <|> dh_install
161 Mot inconnu : install [[160:167]] => C'est là que debhelper revient sur le devant de la scène avec son merveilleux dh_install. ce script permet de déplacer les fichiers listés dans debian/<paquet>.install dans le dossier debian/<paquet> lors de son utilisation. <|> install

163 Mot inconnu : createfp [[21:29]] => Regardez par exemple createfp.install : <|> createfp
163 Mot inconnu : install [[30:37]] => Regardez par exemple createfp.install : <|> install
167 Mot inconnu : createfp [[82:90]] => Tous les fichiers installés dans debian/tmp/usr/bin/* se retrouveront dans debian/createfp/usr/bin/ <|> createfp

169 Mot inconnu : libtextcat-dev [[20:34]] => Regardez maintenant libtextcat-dev.install : <|> libtextcat-dev
169 Mot inconnu : install [[35:42]] => Regardez maintenant libtextcat-dev.install : <|> install

173 Mot inconnu : src [[9:12]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> src
173 Mot inconnu : textcat [[13:20]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> textcat
173 Mot inconnu : usr [[23:26]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> usr
173 Mot inconnu : include [[27:34]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> include
173 Mot inconnu : src [[118:121]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> src
173 Mot inconnu : textcat [[122:129]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> textcat
173 Mot inconnu : textcat-dev [[182:193]] => La ligne src/textcat.h usr/include/ utilise une syntaxe un peu différente. Elle permet en fait d'installer le fichier src/textcat.h (fichier contenu dans les sources) dans debian/libtextcat-dev/usr/include. <|> textcat-dev
175 Mot inconnu : rules [[10:15]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> rules
175 Mot inconnu : bin [[153:156]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> bin
175 Mot inconnu : sbin [[160:164]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> sbin
175 Mot inconnu : dh_install [[198:208]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> dh_install
175 Mot inconnu : debhelper [[224:233]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> debhelper
175 Mot inconnu : mk [[234:236]] => Le debian/rules est quasiment identique à celui de notre premier paquet, seul le paquet cible pour l'installation de la page man et pour le renommage de bin en sbin est changé. Pas besoin d'appeler dh_install explicitement, debhelper.mk s'en charge. <|> mk

177 Espace(s) en fin de ligne à supprimer. [[29:30]] => === Compilation du paquet ===  <|>   => suggestions : ['']

188 Guillemets typographiques ouvrants. [[9:10]] => Et après 'moulinage' : <|> ' => suggestions : ['“', '‘', '‹']
188 Guillemets typographiques fermants. [[19:20]] => Et après 'moulinage' : <|> ' => suggestions : ['”', '’', '›']
193 Mot inconnu : createfp_2 [[4:14]] =>   * createfp_2.2-0ubuntu2_i386.deb <|> createfp_2
193 Mot inconnu : ubuntu2_i386 [[18:30]] =>   * createfp_2.2-0ubuntu2_i386.deb <|> ubuntu2_i386
194 Mot inconnu : libtextcat0_2 [[4:17]] =>   * libtextcat0_2.2-0ubuntu2_i386.deb <|> libtextcat0_2
194 Mot inconnu : ubuntu2_i386 [[21:33]] =>   * libtextcat0_2.2-0ubuntu2_i386.deb <|> ubuntu2_i386
195 Mot inconnu : libtextcat-dev_2 [[4:20]] =>   * libtextcat-dev_2.2-0ubuntu2_i386.deb <|> libtextcat-dev_2
195 Mot inconnu : ubuntu2_i386 [[24:36]] =>   * libtextcat-dev_2.2-0ubuntu2_i386.deb <|> ubuntu2_i386
