
4 Mot inconnu : Glade2script => ======Glade2script====== | glade2script

6 Mot inconnu : pygtk-glade => Surcouche **pygtk-glade** pour gestion interface graphique depuis un script **bash**, **python** ou autre. | pygtk-glade
6 Mot inconnu : bash => Surcouche **pygtk-glade** pour gestion interface graphique depuis un script **bash**, **python** ou autre. | bash

9 Il manque un trait d’union. => Merci de se référer à celle ci: [[http://code.google.com/p/glade2script/wiki/Principe]]. | celle ci => suggestions : ['celle-ci']

12 Mot inconnu : glade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé. | glade
12 Mot inconnu : libglade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé. | libglade
12 Mot inconnu : bash => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé. | bash
12 Mot inconnu : glade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé. | glade

15 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK. | glade2script => suggestions : ['Glade2script']
15 Mot inconnu : glade2script => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK. | glade2script
15 Mot inconnu : stdout => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK. | stdout
15 Mot inconnu : echo => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK. | echo
17 Mot inconnu : FIFO => Pour envoyer des informations depuis GTK au script, il écrit dans un fichier (FIFO), sur lequel le script est connecté et en récupère les données pour les interpréter sous forme d'appel à des fonctions ou de variables chargées dans l'environnement. | fifo

19 Mot inconnu : callbacks => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script. | callbacks
19 Mot inconnu : glade => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script. | glade
19 Mot inconnu : glade2script => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script. | glade2script

21 Mot inconnu : __Les => __Les commandes seront du type :__ | __les
21 Mot inconnu : __ => __Les commandes seront du type :__ | __

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Commande glade2script et pygtk |        => suggestions : ['']
22 Mot inconnu : glade2script =>       # Commande glade2script et pygtk | glade2script
22 Mot inconnu : pygtk =>       # Commande glade2script et pygtk | pygtk

23 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'SET@_label1.set_text(“mon texte”)' |        => suggestions : ['']
23 Mot inconnu : echo =>       echo 'SET@_label1.set_text(“mon texte”)' | echo
23 Guillemets typographiques ouvrants. =>       echo 'SET@_label1.set_text(“mon texte”)' | ' => suggestions : ['“', '‘', '‹']
23 Il manque un espace avant la parenthèse. =>       echo 'SET@_label1.set_text(“mon texte”)' | ( => suggestions : [' (']

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'GET@_entry1.get_text()' |        => suggestions : ['']
24 Mot inconnu : echo =>       echo 'GET@_entry1.get_text()' | echo
24 Guillemets typographiques ouvrants. =>       echo 'GET@_entry1.get_text()' | ' => suggestions : ['“', '‘', '‹']

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Commande glade2script |        => suggestions : ['']
25 Mot inconnu : glade2script =>       # Commande glade2script | glade2script

26 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree" |        => suggestions : ['']
26 Mot inconnu : echo =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree" | echo
26 Guillemets typographiques ouvrants. =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree" | " => suggestions : ['«\xa0', '“']
26 Mot inconnu : TREE =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree" | tree

27 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo "IMG@@_img_tux@@tux.png@@150@@150" |        => suggestions : ['']
27 Mot inconnu : echo =>       echo "IMG@@_img_tux@@tux.png@@150@@150" | echo
27 Guillemets typographiques ouvrants. =>       echo "IMG@@_img_tux@@tux.png@@150@@150" | " => suggestions : ['«\xa0', '“']
27 Mot inconnu : IMG =>       echo "IMG@@_img_tux@@tux.png@@150@@150" | img
27 Guillemets typographiques fermants. =>       echo "IMG@@_img_tux@@tux.png@@150@@150" | " => suggestions : ['\xa0»', '”']

33 Mot inconnu : glade2script => Il y a 2 façons d'utiliser glade2script: | glade2script

37 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Dans le script principal, on appelle l'interface graphique et en sortie, on récupère les variables des différents |   => suggestions : ['']

38 Mot inconnu : zenity => widgets référencés en argument (comme le fait **zenity** par exemple ) | zenity
38 Pas d’espace avant ce signe. => widgets référencés en argument (comme le fait **zenity** par exemple ) |  ) => suggestions : [')']

39 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #/bin/bash |        => suggestions : ['']

40 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') |        => suggestions : ['']
40 Mot inconnu : SORTIE_GUI =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | sortie_gui
40 Mot inconnu : glade2script =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | glade2script
40 Il manque un espace à côté du tiret. =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') |  - => suggestions : [' – ', ' — ']
40 Mot inconnu : MonFichier =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | monfichier
40 Mot inconnu : glade =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | glade
40 Guillemets typographiques ouvrants. =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | ' => suggestions : ['“', '‘', '‹']
40 Mot inconnu : _entry1 =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | _entry1
40 Mot inconnu : get_text =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text') | get_text

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo “$SORTIE_GUI” |        => suggestions : ['']
41 Mot inconnu : echo =>       echo “$SORTIE_GUI” | echo
41 Mot inconnu : SORTIE_GUI =>       echo “$SORTIE_GUI” | sortie_gui

42 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #Résultat: |        => suggestions : ['']

43 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       _entry1_get_text=”texte saisie dans l'entrée” |        => suggestions : ['']
43 Mot inconnu : _entry1_get_text =>       _entry1_get_text=”texte saisie dans l'entrée” | _entry1_get_text
43 Guillemets ouvrants introuvables dans ce paragraphe. =>       _entry1_get_text=”texte saisie dans l'entrée” | ” => suggestions : []

44 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       EXIT=”ok” |        => suggestions : ['']
44 Mot inconnu : ok =>       EXIT=”ok” | ok
44 Guillemets ouvrants introuvables dans ce paragraphe. =>       EXIT=”ok” | ” => suggestions : []

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>        |        => suggestions : ['']

48 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies. |   => suggestions : ['']
48 Mot inconnu : glade =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies. | glade
48 Après “être”, le verbe ne devrait pas être à l’infinitif. =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies. | fermer => suggestions : ['fermées', 'fermés', 'fermée', 'fermé']

49 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Pour lancer la machine, il suffit de créer un petit script où se trouve la commande glade2script. |   => suggestions : ['']
49 Mot inconnu : glade2script =>  Pour lancer la machine, il suffit de créer un petit script où se trouve la commande glade2script. | glade2script

50 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  On peut mixer les deux, utilisation dynamique et récupération des variables en sortie quand même, selon les besoins. |   => suggestions : ['']

52 Mot inconnu : ca => Cela peut paraître compliqué, mais ca ne l'est pas du tout à l'usage, le petit exemple ci-dessous vous le prouvera. | ca

56 Mot inconnu : glade => Il faut d'abord créer la boite de dialogue dans glade. | glade

57 Mot inconnu : clicked => Dans les signaux des boutons, renseigner pour le signal clicked => on_clicked | clicked
57 Mot inconnu : on_clicked => Dans les signaux des boutons, renseigner pour le signal clicked => on_clicked | on_clicked

58 Mot inconnu : btn_ok => Donner un nom explicite aux boutons, ici, btn_ok, btn_no | btn_ok
58 Mot inconnu : btn_no => Donner un nom explicite aux boutons, ici, btn_ok, btn_no | btn_no

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   |   => suggestions : ['']

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Le script associé au glade et portant le même nom. |   => suggestions : ['']
61 Mot inconnu : glade =>  Le script associé au glade et portant le même nom. | glade

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #! /bin/bash |        => suggestions : ['']

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       PID=$$ |        => suggestions : ['']
63 Mot inconnu : PID =>       PID=$$ | pid

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       FIFO=/tmp/FIFO${PID} |        => suggestions : ['']
64 Mot inconnu : FIFO =>       FIFO=/tmp/FIFO${PID} | fifo
64 Mot inconnu : PID =>       FIFO=/tmp/FIFO${PID} | pid

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       mkfifo $FIFO |        => suggestions : ['']
65 Mot inconnu : mkfifo =>       mkfifo $FIFO | mkfifo
65 Mot inconnu : FIFO =>       mkfifo $FIFO | fifo

66 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       function btn_ok() |        => suggestions : ['']
66 Mot inconnu : function =>       function btn_ok() | function
66 Mot inconnu : btn_ok =>       function btn_ok() | btn_ok

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       { |        => suggestions : ['']

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'EXIT@@SAVE' |        => suggestions : ['']
68 Mot inconnu : echo =>       echo 'EXIT@@SAVE' | echo
68 Guillemets typographiques ouvrants. =>       echo 'EXIT@@SAVE' | ' => suggestions : ['“', '‘', '‹']
68 Guillemets typographiques fermants. =>       echo 'EXIT@@SAVE' | ' => suggestions : ['”', '’', '›']

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       } |        => suggestions : ['']

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       function btn_no() |        => suggestions : ['']
70 Mot inconnu : function =>       function btn_no() | function
70 Mot inconnu : btn_no =>       function btn_no() | btn_no

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       { |        => suggestions : ['']

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'EXIT@@' |        => suggestions : ['']
72 Mot inconnu : echo =>       echo 'EXIT@@' | echo
72 Guillemets typographiques ouvrants. =>       echo 'EXIT@@' | ' => suggestions : ['“', '‘', '‹']

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       } |        => suggestions : ['']

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # La boucle imbriquée qui suit est le coeur du système de |        => suggestions : ['']
74 Mot inconnu : coeur =>       # La boucle imbriquée qui suit est le coeur du système de | coeur

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # communication entre GTK et bash. |        => suggestions : ['']
75 Mot inconnu : bash =>       # communication entre GTK et bash. | bash

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Elle devra toujours se trouver en bas du script associé au |        => suggestions : ['']

77 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # glade. Vous n'avez pas à vous en soucier, mais il y est possible |        => suggestions : ['']
77 Mot inconnu : glade =>       # glade. Vous n'avez pas à vous en soucier, mais il y est possible | glade

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # d'intercepter les signaux pour en faire autre chose que |        => suggestions : ['']

79 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # d'appeler une fonction ou charger une variable... |        => suggestions : ['']
79 Typographie : points de suspension. Utilisez le caractère dédié. =>       # d'appeler une fonction ou charger une variable... | ... => suggestions : ['…']

80 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       while read ligne; do |        => suggestions : ['']
80 Mot inconnu : while =>       while read ligne; do | while
80 Mot inconnu : read =>       while read ligne; do | read

81 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             if [[ "$ligne" =~ GET@ ]]; then |              => suggestions : ['']
81 Pas d’espace après ce signe. =>             if [[ "$ligne" =~ GET@ ]]; then | [  => suggestions : ['[']
81 Guillemets typographiques fermants. =>             if [[ "$ligne" =~ GET@ ]]; then | " => suggestions : ['\xa0»', '”']
81 Mot inconnu : GET =>             if [[ "$ligne" =~ GET@ ]]; then | get
81 Pas d’espace avant ce signe. =>             if [[ "$ligne" =~ GET@ ]]; then |  ] => suggestions : [']']
81 Mot inconnu : then =>             if [[ "$ligne" =~ GET@ ]]; then | then

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  eval ${ligne#*@} |                   => suggestions : ['']
82 Mot inconnu : eval =>                  eval ${ligne#*@} | eval

83 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  echo "DEBUG => in boucle bash :" ${ligne#*@} |                   => suggestions : ['']
83 Mot inconnu : echo =>                  echo "DEBUG => in boucle bash :" ${ligne#*@} | echo
83 Guillemets typographiques ouvrants. =>                  echo "DEBUG => in boucle bash :" ${ligne#*@} | " => suggestions : ['«\xa0', '“']
83 Mot inconnu : DEBUG =>                  echo "DEBUG => in boucle bash :" ${ligne#*@} | debug
83 Mot inconnu : bash =>                  echo "DEBUG => in boucle bash :" ${ligne#*@} | bash

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             else |              => suggestions : ['']
84 Mot inconnu : else =>             else | else

85 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  echo "DEBUG=> in bash NOT GET" $ligne |                   => suggestions : ['']
85 Mot inconnu : echo =>                  echo "DEBUG=> in bash NOT GET" $ligne | echo
85 Guillemets typographiques ouvrants. =>                  echo "DEBUG=> in bash NOT GET" $ligne | " => suggestions : ['«\xa0', '“']
85 Mot inconnu : DEBUG =>                  echo "DEBUG=> in bash NOT GET" $ligne | debug
85 Mot inconnu : bash =>                  echo "DEBUG=> in bash NOT GET" $ligne | bash
85 Mot inconnu : NOT =>                  echo "DEBUG=> in bash NOT GET" $ligne | not
85 Mot inconnu : GET =>                  echo "DEBUG=> in bash NOT GET" $ligne | get
85 Guillemets typographiques fermants. =>                  echo "DEBUG=> in bash NOT GET" $ligne | " => suggestions : ['\xa0»', '”']

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  $ligne |                   => suggestions : ['']

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>            fi |             => suggestions : ['']

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       done < <(while true; do |        => suggestions : ['']
88 Mot inconnu : done =>       done < <(while true; do | done
88 Mot inconnu : while =>       done < <(while true; do | while
88 Mot inconnu : true =>       done < <(while true; do | true

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             read entree < $FIFO |              => suggestions : ['']
89 Mot inconnu : read =>             read entree < $FIFO | read
89 Mot inconnu : entree =>             read entree < $FIFO | entree
89 Mot inconnu : FIFO =>             read entree < $FIFO | fifo

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             [[ "$entree" == "QuitNow" ]] && break |              => suggestions : ['']
90 Pas d’espace après ce signe. =>             [[ "$entree" == "QuitNow" ]] && break | [  => suggestions : ['[']
90 Mot inconnu : entree =>             [[ "$entree" == "QuitNow" ]] && break | entree
90 Guillemets typographiques fermants. =>             [[ "$entree" == "QuitNow" ]] && break | " => suggestions : ['\xa0»', '”']
90 Guillemets typographiques ouvrants. =>             [[ "$entree" == "QuitNow" ]] && break | " => suggestions : ['«\xa0', '“']
90 Mot inconnu : QuitNow =>             [[ "$entree" == "QuitNow" ]] && break | quitnow
90 Guillemets typographiques fermants. =>             [[ "$entree" == "QuitNow" ]] && break | " => suggestions : ['\xa0»', '”']
90 Pas d’espace avant ce signe. =>             [[ "$entree" == "QuitNow" ]] && break |  ] => suggestions : [']']

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>               echo $entree |                => suggestions : ['']
91 Mot inconnu : echo =>               echo $entree | echo
91 Mot inconnu : entree =>               echo $entree | entree

92 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       done) |        => suggestions : ['']
92 Mot inconnu : done =>       done) | done

94 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #! /bin/bash |        => suggestions : ['']

95 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Déroulement de votre script |        => suggestions : ['']

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # 2 façons de récupérer le résultat, soit par le code de sortie |        => suggestions : ['']

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # ou en chargeant la variable EXIT dans l'environement et traiter |        => suggestions : ['']
97 Accord de genre erroné : « la variable » est féminin, « EXIT » est masculin. =>       # ou en chargeant la variable EXIT dans l'environement et traiter | exit => suggestions : []
97 Mot inconnu : environement =>       # ou en chargeant la variable EXIT dans l'environement et traiter | environement

98 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # le résultat. |        => suggestions : ['']

99 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if glade2script -g ./mon_gui.glade; then |        => suggestions : ['']
99 Mot inconnu : glade2script =>       if glade2script -g ./mon_gui.glade; then | glade2script
99 Il manque un espace à côté du tiret. =>       if glade2script -g ./mon_gui.glade; then |  - => suggestions : [' – ', ' — ']
99 Mot inconnu : mon_gui =>       if glade2script -g ./mon_gui.glade; then | mon_gui
99 Mot inconnu : glade =>       if glade2script -g ./mon_gui.glade; then | glade
99 Mot inconnu : then =>       if glade2script -g ./mon_gui.glade; then | then

100 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          echo “le bouton ok a été clické” |           => suggestions : ['']
100 Mot inconnu : echo =>          echo “le bouton ok a été clické” | echo
100 Mot inconnu : ok =>          echo “le bouton ok a été clické” | ok
100 Mot inconnu : clické =>          echo “le bouton ok a été clické” | clické

101 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else |        => suggestions : ['']
101 Mot inconnu : else =>       else | else

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          echo “le bouton no a été clické” |           => suggestions : ['']
102 Mot inconnu : echo =>          echo “le bouton no a été clické” | echo
102 Mot inconnu : clické =>          echo “le bouton no a été clické” | clické

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       fi |        => suggestions : ['']

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # |        => suggestions : ['']

105 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # |        => suggestions : ['']

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # deuxième méthode, charger la variable EXIT |        => suggestions : ['']
106 Accord de genre erroné : « la variable » est féminin, « EXIT » est masculin. =>       # deuxième méthode, charger la variable EXIT | exit => suggestions : []

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       GUI=$(glade2script -g ./mon_gui.glade) |        => suggestions : ['']
107 Mot inconnu : glade2script =>       GUI=$(glade2script -g ./mon_gui.glade) | glade2script
107 Il manque un espace à côté du tiret. =>       GUI=$(glade2script -g ./mon_gui.glade) |  - => suggestions : [' – ', ' — ']
107 Mot inconnu : mon_gui =>       GUI=$(glade2script -g ./mon_gui.glade) | mon_gui
107 Mot inconnu : glade =>       GUI=$(glade2script -g ./mon_gui.glade) | glade

108 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       eval “${GUI}” |        => suggestions : ['']
108 Mot inconnu : eval =>       eval “${GUI}” | eval

109 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       If [[ “${EXIT}” == “yes” ]]; then |        => suggestions : ['']
109 Pas d’espace après ce signe. =>       If [[ “${EXIT}” == “yes” ]]; then | [  => suggestions : ['[']
109 Mot inconnu : yes =>       If [[ “${EXIT}” == “yes” ]]; then | yes
109 Pas d’espace avant ce signe. =>       If [[ “${EXIT}” == “yes” ]]; then |  ] => suggestions : [']']
109 Mot inconnu : then =>       If [[ “${EXIT}” == “yes” ]]; then | then

110 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         echo “le bouton ok a été clické” |          => suggestions : ['']
110 Mot inconnu : echo =>         echo “le bouton ok a été clické” | echo
110 Mot inconnu : ok =>         echo “le bouton ok a été clické” | ok
110 Mot inconnu : clické =>         echo “le bouton ok a été clické” | clické

111 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else |        => suggestions : ['']
111 Mot inconnu : else =>       else | else

112 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         echo “le bouton no a été clické” |          => suggestions : ['']
112 Mot inconnu : echo =>         echo “le bouton no a été clické” | echo
112 Mot inconnu : clické =>         echo “le bouton no a été clické” | clické

113 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       fi |        => suggestions : ['']

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Il est possible de faire différent, à savoir qu'en sortie, |        => suggestions : ['']

115 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1 |        => suggestions : ['']
115 Mot inconnu : yes =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1 | yes
115 Guillemets ouvrants introuvables dans ce paragraphe. =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1 | ” => suggestions : []

116 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # selon le choix de l'utilisateur. |        => suggestions : ['']

120 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash. |   => suggestions : ['']
120 Mot inconnu : HIZO =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash. | hizo
120 Mot inconnu : bash =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash. | bash

121 Il manque un espace à côté du tiret. => Indiquer la commande set -f avant la boucle de fin pour y remedier, set +f pour inverser le comportement. |  - => suggestions : [' – ', ' — ']
121 Mot inconnu : remedier => Indiquer la commande set -f avant la boucle de fin pour y remedier, set +f pour inverser le comportement. | remedier

123 Mot inconnu : Glade => ====Glade:==== | glade

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les widgets qui doivent être modifiés, ou dont les valeurs seront récupérées via le script associé, devront commencer par _ pour être référencés. |   => suggestions : ['']

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés. |   => suggestions : ['']
125 Mot inconnu : statusbars =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés. | statusbars
125 Mot inconnu : eventbox =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés. | eventbox
125 Mot inconnu : treeviews =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés. | treeviews
125 Mot inconnu : GtkAboutDialog =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés. | gtkaboutdialog

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Par défaut, la visibilité d'une fenêtre est sur non, basculer cette option pour la voir au lancement de votre soft. |   => suggestions : ['']

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - AboutDialog: Il faut que le nom du logiciel soit le même que le nom de la fenêtre. |   => suggestions : ['']
129 Mot inconnu : AboutDialog =>  - AboutDialog: Il faut que le nom du logiciel soit le même que le nom de la fenêtre. | aboutdialog

131 Mot inconnu : glade2script => Commandes glade2script: | glade2script

132 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @ |   => suggestions : ['']
132 Mot inconnu : GET =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @ | get
132 Mot inconnu : pygtk =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @ | pygtk

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Il faut utiliser l'unicode pour représenter le & |   => suggestions : ['']
135 Mot inconnu : unicode =>  - Il faut utiliser l'unicode pour représenter le & | unicode

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les sauts de ligne s'écrivent \\n s'ils sont encadrés par des " et \n s'ils sont encadrés par des ' |   => suggestions : ['']
136 Guillemets isolés. =>  - Les sauts de ligne s'écrivent \\n s'ils sont encadrés par des " et \n s'ils sont encadrés par des ' |  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft. |   => suggestions : ['']
137 Mot inconnu : echo =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft. | echo
137 Il manque un espace avant la parenthèse. =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft. | ( => suggestions : [' (']
137 Mot inconnu : glade2script =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft. | glade2script
137 Mot inconnu : echo =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft. | echo

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :) |   => suggestions : ['']
138 Mot inconnu : echo =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :) | echo
138 Mot inconnu : eval =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :) | eval

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application. |   => suggestions : ['']
139 Mot inconnu : callbacks =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application. | callbacks
139 Mot inconnu : gtk_widget_destroy =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application. | gtk_widget_destroy
139 Mot inconnu : echo =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application. | echo

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Pour un affichage en console sans passer par le script python, il suffit de rediriger vers un autre fd. |   => suggestions : ['']
140 Mot inconnu : fd =>  - Pour un affichage en console sans passer par le script python, il suffit de rediriger vers un autre fd. | fd

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       exec 4>$(tty) |        => suggestions : ['']
141 Mot inconnu : exec =>       exec 4>$(tty) | exec
141 Mot inconnu : tty =>       exec 4>$(tty) | tty

142 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'un truc qui ne passera pas par python' >&4 |        => suggestions : ['']
142 Mot inconnu : echo =>       echo 'un truc qui ne passera pas par python' >&4 | echo
142 Guillemets typographiques ouvrants. =>       echo 'un truc qui ne passera pas par python' >&4 | ' => suggestions : ['“', '‘', '‹']
142 Guillemets typographiques fermants. =>       echo 'un truc qui ne passera pas par python' >&4 | ' => suggestions : ['”', '’', '›']

143 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #Penser à refermer le fd en fin de script: |        => suggestions : ['']
143 Mot inconnu : fd =>       #Penser à refermer le fd en fin de script: | fd

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       exec 4<&- |        => suggestions : ['']
144 Mot inconnu : exec =>       exec 4<&- | exec

146 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => <note>**A savoir :** | a => suggestions : ['À']

147 Mot inconnu : PID => Le PID de glade2script et du terminal sont accessibles via une commande GET@ | pid
147 Mot inconnu : glade2script => Le PID de glade2script et du terminal sont accessibles via une commande GET@ | glade2script
147 Mot inconnu : GET => Le PID de glade2script et du terminal sont accessibles via une commande GET@ | get

148 Mot inconnu : GET => GET@glade2script_PID et GET@terminal_PID</note> | get
148 Mot inconnu : GET => GET@glade2script_PID et GET@terminal_PID</note> | get
150 Mot inconnu : callback => ====Signaux Gtk et callback==== | callback

152 Mot inconnu : glade => **Dans le glade**, pour chaque widget auquel vous voulez associer une action, il faut renseigner un signal. Ce signal, auquel on aura assigné un callback, lancera une fonction du script associé correspondant au nom du widget, avec un argument. | glade
152 Mot inconnu : callback => **Dans le glade**, pour chaque widget auquel vous voulez associer une action, il faut renseigner un signal. Ce signal, auquel on aura assigné un callback, lancera une fonction du script associé correspondant au nom du widget, avec un argument. | callback

154 Mot inconnu : callbacks => Quelques callbacks n'ont pas de retour, ils agissent directement sur l'interface. | callbacks

156 Accord de genre erroné avec « utilisateurs ». => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback. | données => suggestions : ['donnés']
156 Accord de genre erroné entre « données » et « utilisateurs ». => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback. | utilisateurs => suggestions : ['utilisatrices']
156 Mot inconnu : callback => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback. | callback

157 Accord de genre erroné avec « utilisateur ». => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | données => suggestions : ['donnés']
157 Accord de genre erroné avec « données ». => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | utilisateur => suggestions : ['utilisatrice']
157 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | entry
157 Il manque un espace. => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | signal => suggestions : [' signal']
157 Mot inconnu : clicked => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | clicked
157 Mot inconnu : callback => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | callback
157 Mot inconnu : on_entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | on_entry
157 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | entry
157 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry. | entry

158 Accord de genre erroné avec « utilisateurs ». => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface. | données => suggestions : ['donnés']
158 Accord de genre erroné entre « données » et « utilisateurs ». => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface. | utilisateurs => suggestions : ['utilisatrices']
158 Accord erroné : “données” et “nécessaire” ne sont pas accordés. Mettez au pluriel. => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface. | nécessaire => suggestions : ['nécessaires']
158 Mot inconnu : callbacks => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface. | callbacks

160 Mot inconnu : Callbacks => ===Callbacks qui lancent une fonction avec argument:=== | callbacks

161 Mot inconnu : FIXME => FIXME | fixme

162 Mot inconnu : Callbacks => ===Callbacks sans retour:(pour modifier interface directement)=== | callbacks

163 Mot inconnu : FIXME => FIXME | fixme

164 Mot inconnu : callback => ===Détails callback=== | callback

165 Accord avec “sont”. => Les signaux, lorsqu'il sont renseignés, ne sont là que pour l'exemple, d'autres peuvent être utilisés. | il => suggestions : ['ils']
165 Conjugaison erronée. Accord avec “il”. Le verbe devrait être à la 3ᵉ personne du singulier. => Les signaux, lorsqu'il sont renseignés, ne sont là que pour l'exemple, d'autres peuvent être utilisés. | sont => suggestions : ['est']

166 Mot inconnu : FIXME => FIXME | fixme

168 Mot inconnu : pyGtk => ====Commandes pyGtk==== | pygtk

169 Mot inconnu : pyGtk => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ... | pygtk
169 Il manque un espace. => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ... | etc => suggestions : [' etc']
169 Typographie : points de suspension. Utilisez le caractère dédié. => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ... | ... => suggestions : ['…']

170 Mot inconnu : pyGTK => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | pygtk
170 Mot inconnu : devhelp => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | devhelp
170 Mot inconnu : glade => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | glade
170 Mot inconnu : Lucid => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | lucid
170 Mot inconnu : The => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | the
170 Mot inconnu : Class => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | class
170 Mot inconnu : Reference => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference). | reference

171 Mot inconnu : glade => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés. | glade
171 Accord avec la forme verbale “serait” : “compliquées” devrait être au singulier. => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés. | compliquées => suggestions : ['compliquée']
171 Mot inconnu : Reference => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés. | reference
171 Accord de nombre erroné avec « les principaux » : « widget » devrait être au pluriel. => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés. | widget => suggestions : ['widgets']
171 Mot inconnu : callback => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés. | callback

173 Mot inconnu : pyGtk => Pour lancer les commandes pyGtk depuis le script associé, il faut passer par des commandes glade2script. | pygtk
173 Mot inconnu : glade2script => Pour lancer les commandes pyGtk depuis le script associé, il faut passer par des commandes glade2script. | glade2script

175 Mot inconnu : glade2script => ====Commandes glade2script==== | glade2script

176 Mot inconnu : FIXME => FIXME | fixme

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://code.google.com/p/glade2script/|Site officiel de glade2script]] |    => suggestions : ['']
179 Mot inconnu : glade2script =>   * [[http://code.google.com/p/glade2script/|Site officiel de glade2script]] | glade2script
