
5 Mot inconnu : coarrays => Fortran est un langage de programmation normalisé destiné au calcul scientifique. Il intègre la programmation orientée objet et l'interfaçage avec le langage C depuis Fortran 2003 et la programmation parallèle //(coarrays)// depuis Fortran 2008. La norme actuelle est Fortran 2018 : elle améliore en particulier l'interfaçage entre C et Fortran et ajoute de nouveaux concepts pour la programmation parallèle //(teams, events, collective subroutines).// La prochaine norme est prévue pour 2023 (nommée Fortran 202X pour l'instant). | coarrays
5 Mot inconnu : teams => Fortran est un langage de programmation normalisé destiné au calcul scientifique. Il intègre la programmation orientée objet et l'interfaçage avec le langage C depuis Fortran 2003 et la programmation parallèle //(coarrays)// depuis Fortran 2008. La norme actuelle est Fortran 2018 : elle améliore en particulier l'interfaçage entre C et Fortran et ajoute de nouveaux concepts pour la programmation parallèle //(teams, events, collective subroutines).// La prochaine norme est prévue pour 2023 (nommée Fortran 202X pour l'instant). | teams
5 Mot inconnu : events => Fortran est un langage de programmation normalisé destiné au calcul scientifique. Il intègre la programmation orientée objet et l'interfaçage avec le langage C depuis Fortran 2003 et la programmation parallèle //(coarrays)// depuis Fortran 2008. La norme actuelle est Fortran 2018 : elle améliore en particulier l'interfaçage entre C et Fortran et ajoute de nouveaux concepts pour la programmation parallèle //(teams, events, collective subroutines).// La prochaine norme est prévue pour 2023 (nommée Fortran 202X pour l'instant). | events
5 Mot inconnu : subroutines => Fortran est un langage de programmation normalisé destiné au calcul scientifique. Il intègre la programmation orientée objet et l'interfaçage avec le langage C depuis Fortran 2003 et la programmation parallèle //(coarrays)// depuis Fortran 2008. La norme actuelle est Fortran 2018 : elle améliore en particulier l'interfaçage entre C et Fortran et ajoute de nouveaux concepts pour la programmation parallèle //(teams, events, collective subroutines).// La prochaine norme est prévue pour 2023 (nommée Fortran 202X pour l'instant). | subroutines

10 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le compilateur libre GNU Fortran (GFortran). |    => suggestions : ['']
10 Mot inconnu : GFortran =>   * Le compilateur libre GNU Fortran (GFortran). | gfortran

11 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le propriétaire Intel Fortran Compiler (ifort), et son successeur ifx basé sur LLVM (actuellement en version beta), téléchargeables gratuitement pour tous les développeurs depuis début 2021. |    => suggestions : ['']
11 Mot inconnu : ifort =>   * Le propriétaire Intel Fortran Compiler (ifort), et son successeur ifx basé sur LLVM (actuellement en version beta), téléchargeables gratuitement pour tous les développeurs depuis début 2021. | ifort
11 Mot inconnu : ifx =>   * Le propriétaire Intel Fortran Compiler (ifort), et son successeur ifx basé sur LLVM (actuellement en version beta), téléchargeables gratuitement pour tous les développeurs depuis début 2021. | ifx
11 Mot inconnu : LLVM =>   * Le propriétaire Intel Fortran Compiler (ifort), et son successeur ifx basé sur LLVM (actuellement en version beta), téléchargeables gratuitement pour tous les développeurs depuis début 2021. | llvm
11 Mot inconnu : beta =>   * Le propriétaire Intel Fortran Compiler (ifort), et son successeur ifx basé sur LLVM (actuellement en version beta), téléchargeables gratuitement pour tous les développeurs depuis début 2021. | beta

12 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le compilateur commercial [[http://www.pgroup.com/resources/docs.htm| PGI]] édité par [[wp>The_Portland_Group]], qui devrait être remplacé prochainement par le compilateur [[https://github.com/flang-compiler/flang|Flang]] intégré à LLVM. |    => suggestions : ['']
12 Mot inconnu : PGI =>   * Le compilateur commercial [[http://www.pgroup.com/resources/docs.htm| PGI]] édité par [[wp>The_Portland_Group]], qui devrait être remplacé prochainement par le compilateur [[https://github.com/flang-compiler/flang|Flang]] intégré à LLVM. | pgi
12 Mot inconnu : The_Portland_Group =>   * Le compilateur commercial [[http://www.pgroup.com/resources/docs.htm| PGI]] édité par [[wp>The_Portland_Group]], qui devrait être remplacé prochainement par le compilateur [[https://github.com/flang-compiler/flang|Flang]] intégré à LLVM. | the_portland_group
12 Mot inconnu : LLVM =>   * Le compilateur commercial [[http://www.pgroup.com/resources/docs.htm| PGI]] édité par [[wp>The_Portland_Group]], qui devrait être remplacé prochainement par le compilateur [[https://github.com/flang-compiler/flang|Flang]] intégré à LLVM. | llvm

14 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => gfortran est très utilisé par les scientifiques, bien que le compilateur Intel ifort puisse être plus performant sur certains problèmes ([[https://polyhedron.com/?page_id=175|voir une comparaison des différents compilateurs ici)]]. Mais plutôt que de se fier aux benchmarks, qui se concentrent sur des problèmes spécifiques, il vaut mieux faire le test sur vos programmes. Il est de toute façon toujours conseillé de compiler ses programmes avec plusieurs compilateurs afin d'obtenir un code plus robuste : un compilateur peut afficher des messages de diagnostique différents, et à l'exécution certains bogues subtiles peuvent se révéler avec un compilateur mais pas un autre. | gfortran => suggestions : ['Gfortran']
14 Mot inconnu : gfortran => gfortran est très utilisé par les scientifiques, bien que le compilateur Intel ifort puisse être plus performant sur certains problèmes ([[https://polyhedron.com/?page_id=175|voir une comparaison des différents compilateurs ici)]]. Mais plutôt que de se fier aux benchmarks, qui se concentrent sur des problèmes spécifiques, il vaut mieux faire le test sur vos programmes. Il est de toute façon toujours conseillé de compiler ses programmes avec plusieurs compilateurs afin d'obtenir un code plus robuste : un compilateur peut afficher des messages de diagnostique différents, et à l'exécution certains bogues subtiles peuvent se révéler avec un compilateur mais pas un autre. | gfortran
14 Mot inconnu : ifort => gfortran est très utilisé par les scientifiques, bien que le compilateur Intel ifort puisse être plus performant sur certains problèmes ([[https://polyhedron.com/?page_id=175|voir une comparaison des différents compilateurs ici)]]. Mais plutôt que de se fier aux benchmarks, qui se concentrent sur des problèmes spécifiques, il vaut mieux faire le test sur vos programmes. Il est de toute façon toujours conseillé de compiler ses programmes avec plusieurs compilateurs afin d'obtenir un code plus robuste : un compilateur peut afficher des messages de diagnostique différents, et à l'exécution certains bogues subtiles peuvent se révéler avec un compilateur mais pas un autre. | ifort
14 Accord de genre erroné : « bogues » est masculin, « subtiles » est féminin. => gfortran est très utilisé par les scientifiques, bien que le compilateur Intel ifort puisse être plus performant sur certains problèmes ([[https://polyhedron.com/?page_id=175|voir une comparaison des différents compilateurs ici)]]. Mais plutôt que de se fier aux benchmarks, qui se concentrent sur des problèmes spécifiques, il vaut mieux faire le test sur vos programmes. Il est de toute façon toujours conseillé de compiler ses programmes avec plusieurs compilateurs afin d'obtenir un code plus robuste : un compilateur peut afficher des messages de diagnostique différents, et à l'exécution certains bogues subtiles peuvent se révéler avec un compilateur mais pas un autre. | subtiles => suggestions : ['subtils']
16 Mot inconnu : Jupyter => Un autre compilateur prometteur est actuellement en développement : [[https://lfortran.org/|LFortran]], qui permettra de travailler en Fortran de façon interactive, à l'aide par exemple de Jupyter. | jupyter

18 Mot inconnu : GFortran => ==== GFortran ==== | gfortran

22 Guillemets typographiques ouvrants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['«\xa0', '“']
22 Mot inconnu : universe => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | universe
22 Guillemets typographiques fermants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['\xa0»', '”']
22 Guillemets typographiques ouvrants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['«\xa0', '“']
22 Guillemets typographiques fermants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['\xa0»', '”']
22 Mot inconnu : gfortran => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | gfortran
22 Guillemets typographiques ouvrants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['«\xa0', '“']
22 Mot inconnu : universe => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | universe
22 Guillemets typographiques fermants. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  | '' => suggestions : ['\xa0»', '”']
22 Espace(s) en fin de ligne à supprimer. => Mais le dépôt ''universe'' propose plusieurs autres versions : par exemple, dans Ubuntu 20.10 le dépôt ''main'' propose gfortran 10.2 et le dépôt ''universe'' les versions 9.3, 8.4 et 7.5. Or les versions avec un numéro de version mineure plus élevé sont déboguées depuis plus longtemps. En particulier, pour des calculs très longs, la dernière version n'est pas toujours la plus rapide. Il est donc intéressant d'installer plusieurs versions et de les tester sur votre problème.  |   => suggestions : ['']

26 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. |    => suggestions : ['']
26 Mot inconnu : std =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | std
26 Guillemets typographiques fermants. =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | '' => suggestions : ['\xa0»', '”']
26 Mot inconnu : std =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | std
26 Mot inconnu : f2008 =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | f2008
26 Guillemets typographiques fermants. =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | '' => suggestions : ['\xa0»', '”']
26 Mot inconnu : pedantic =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | pedantic
26 Guillemets typographiques fermants. =>   * ''-std'' permet de spécifier la norme à respecter, par exemple ''-std=f2008'' pour Fortran 2008. On peut lui associer l'option ''-pedantic'' pour être encore plus strict. | '' => suggestions : ['\xa0»', '”']

27 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''-Wall -Wextra'' permettront d'obtenir un maximum d'avertissements lors de la compilation. |    => suggestions : ['']
27 Mot inconnu : Wextra =>   * ''-Wall -Wextra'' permettront d'obtenir un maximum d'avertissements lors de la compilation. | wextra
27 Guillemets typographiques fermants. =>   * ''-Wall -Wextra'' permettront d'obtenir un maximum d'avertissements lors de la compilation. | '' => suggestions : ['\xa0»', '”']

31 Typographie des composés chimiques. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | o3 => suggestions : ['O₃']
31 Mot inconnu : O3 => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | o3
31 Guillemets typographiques fermants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['\xa0»', '”']
31 Guillemets typographiques ouvrants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['«\xa0', '“']
31 Il manque un espace. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | out => suggestions : [' out']
31 Guillemets typographiques fermants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['\xa0»', '”']

38 Mot inconnu : gfortran => Parmi les [[https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html|options d'optimisation]] de gfortran, citons : | gfortran

40 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. |    => suggestions : ['']
40 Mot inconnu : Ofast =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. | ofast
40 Guillemets typographiques fermants. =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. | '' => suggestions : ['\xa0»', '”']
40 Typographie des composés chimiques. =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. | o3 => suggestions : ['O₃']
40 Mot inconnu : O3 =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. | o3
40 Guillemets typographiques fermants. =>   * ''-Ofast'' : permet d'aller au-delà de ''-O3'', mais ne respecte pas la norme Fortran de façon stricte. | '' => suggestions : ['\xa0»', '”']

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''-Os'' : permet de minimiser la taille de l'exécutable. Cela peut en particulier être intéressant si l'exécutable occupe en mémoire une place similaire à celle des caches du processeur, afin de réduire les allers-retours coûteux entre cache et mémoire vive. |    => suggestions : ['']
41 Guillemets typographiques fermants. =>   * ''-Os'' : permet de minimiser la taille de l'exécutable. Cela peut en particulier être intéressant si l'exécutable occupe en mémoire une place similaire à celle des caches du processeur, afin de réduire les allers-retours coûteux entre cache et mémoire vive. | '' => suggestions : ['\xa0»', '”']

43 Mot inconnu : static-libgfortran => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | static-libgfortran
43 Guillemets typographiques fermants. => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | '' => suggestions : ['\xa0»', '”']
43 Mot inconnu : gfortran => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | gfortran
43 Mot inconnu : OpenMP => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | openmp
43 Mot inconnu : coarrays => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | coarrays
43 Mot inconnu : static => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | static
43 Guillemets typographiques fermants. => L'option ''-static-libgfortran'' permet d'utiliser [[https://gcc.gnu.org/onlinedocs/gfortran/Link-Options.html|la version statique de la librairie gfortran]], plutôt que la version partagée : cela peut permettre dans certains cas (à tester) de gagner un peu en vitesse (quelques pourcents) au détriment de la taille de l'exécutable, qui va embarquer les fonctions de la librairie que vous utilisez. Cette option est compatible avec OpenMP et les coarrays, contrairement à l'option ''-static''. | '' => suggestions : ['\xa0»', '”']

45 Mot inconnu : OpenMP => Pour faire du calcul parallèle avec OpenMP, l'option de compilation est ''-fopenmp''. Parmi les méthodes utilisables pour régler le nombre de //threads,// on peut alors utiliser la variable d'environnement (exemple avec ici 4 threads) : | openmp
45 Mot inconnu : fopenmp => Pour faire du calcul parallèle avec OpenMP, l'option de compilation est ''-fopenmp''. Parmi les méthodes utilisables pour régler le nombre de //threads,// on peut alors utiliser la variable d'environnement (exemple avec ici 4 threads) : | fopenmp
45 Guillemets typographiques fermants. => Pour faire du calcul parallèle avec OpenMP, l'option de compilation est ''-fopenmp''. Parmi les méthodes utilisables pour régler le nombre de //threads,// on peut alors utiliser la variable d'environnement (exemple avec ici 4 threads) : | '' => suggestions : ['\xa0»', '”']

50 Mot inconnu : OpenCoarrays => === OpenCoarrays === | opencoarrays

52 Mot inconnu : ifort => Contrairement à ifort, gfortran ne gère pas encore les cotableaux de façon native. Si vous voulez les utiliser vous aurez besoin d'installer [[http://www.opencoarrays.org/|OpenCoarrays]] : | ifort
52 Mot inconnu : gfortran => Contrairement à ifort, gfortran ne gère pas encore les cotableaux de façon native. Si vous voulez les utiliser vous aurez besoin d'installer [[http://www.opencoarrays.org/|OpenCoarrays]] : | gfortran
52 Mot inconnu : cotableaux => Contrairement à ifort, gfortran ne gère pas encore les cotableaux de façon native. Si vous voulez les utiliser vous aurez besoin d'installer [[http://www.opencoarrays.org/|OpenCoarrays]] : | cotableaux

57 Accord de nombre erroné avec « répertoire » : « Logiciels » devrait être au singulier. => Vous pouvez également l'installer depuis les sources, par exemple dans un répertoire Logiciels de votre compte : | logiciels => suggestions : ['Logiciel']
64 Mot inconnu : OpenCoarrays => S'il vous propose d'installer la librairie [[https://www.mpich.org/|MPICH]], acceptez. Sinon, OpenCoarrays peut également fonctionner avec [[https://www.open-mpi.org/|OpenMPI]]. | opencoarrays

73 Mot inconnu : gfortran => Au lieu d'utiliser directement gfortran, vous compilerez et exécuterez ainsi votre programme : | gfortran

77 Espace(s) en fin de ligne à supprimer. => </code>  |   => suggestions : ['']

78 Guillemets typographiques fermants. => où l'option ''-n'' permet de choisir le nombre d'images à exécuter en parallèle (ici 4 pour tourner sur un processeur à 2 coeurs / 4 threads).  | '' => suggestions : ['\xa0»', '”']
78 Mot inconnu : coeurs => où l'option ''-n'' permet de choisir le nombre d'images à exécuter en parallèle (ici 4 pour tourner sur un processeur à 2 coeurs / 4 threads).  | coeurs
78 Espace(s) en fin de ligne à supprimer. => où l'option ''-n'' permet de choisir le nombre d'images à exécuter en parallèle (ici 4 pour tourner sur un processeur à 2 coeurs / 4 threads).  |   => suggestions : ['']

84 Mot inconnu : oneAPI => Intel® oneAPI Toolkits est désormais disponible gratuitement pour tous les développeurs. | oneapi
84 Mot inconnu : Toolkits => Intel® oneAPI Toolkits est désormais disponible gratuitement pour tous les développeurs. | toolkits

88 Mot inconnu : Installing => //Basé sur [[https://software.intel.com/content/www/us/en/develop/articles/installing-intel-oneapi-toolkits-via-apt.html|Installing Intel® oneAPI Toolkits via APT]].// | installing
88 Mot inconnu : oneAPI => //Basé sur [[https://software.intel.com/content/www/us/en/develop/articles/installing-intel-oneapi-toolkits-via-apt.html|Installing Intel® oneAPI Toolkits via APT]].// | oneapi
88 Mot inconnu : Toolkits => //Basé sur [[https://software.intel.com/content/www/us/en/develop/articles/installing-intel-oneapi-toolkits-via-apt.html|Installing Intel® oneAPI Toolkits via APT]].// | toolkits

90 Guillemets typographiques ouvrants. => Vous pouvez installer le paquet ''intel-basekit'' mais il utilise 16 Go sur votre disque dur ! Nous détaillons donc ci-dessous les instructions nécessaires pour installer juste les compilateurs Fortran (téléchargement : 560 Mo, sur disque : ~1.5 Go) : | '' => suggestions : ['«\xa0', '“']
90 Mot inconnu : intel-basekit => Vous pouvez installer le paquet ''intel-basekit'' mais il utilise 16 Go sur votre disque dur ! Nous détaillons donc ci-dessous les instructions nécessaires pour installer juste les compilateurs Fortran (téléchargement : 560 Mo, sur disque : ~1.5 Go) : | intel-basekit
90 Guillemets typographiques fermants. => Vous pouvez installer le paquet ''intel-basekit'' mais il utilise 16 Go sur votre disque dur ! Nous détaillons donc ci-dessous les instructions nécessaires pour installer juste les compilateurs Fortran (téléchargement : 560 Mo, sur disque : ~1.5 Go) : | '' => suggestions : ['\xa0»', '”']
90 Si “Go” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => Vous pouvez installer le paquet ''intel-basekit'' mais il utilise 16 Go sur votre disque dur ! Nous détaillons donc ci-dessous les instructions nécessaires pour installer juste les compilateurs Fortran (téléchargement : 560 Mo, sur disque : ~1.5 Go) : | 16 go => suggestions : ['16\xa0Go']
90 Si “Mo” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => Vous pouvez installer le paquet ''intel-basekit'' mais il utilise 16 Go sur votre disque dur ! Nous détaillons donc ci-dessous les instructions nécessaires pour installer juste les compilateurs Fortran (téléchargement : 560 Mo, sur disque : ~1.5 Go) : | 560 mo => suggestions : ['560\xa0Mo']

114 Mot inconnu : ifx => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  | ifx
114 Mot inconnu : Beta => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  | beta
114 Mot inconnu : LLVM => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  | llvm
114 Mot inconnu : cotableaux => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  | cotableaux
114 Mot inconnu : coarrays => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  | coarrays
114 Espace(s) en fin de ligne à supprimer. => Le nouveau compilateur ifx, encore en version Beta, est basé sur LLVM mais ne permet pas encore d'utiliser les cotableaux (coarrays) pour le calcul parallèle, même si l'option apparaît dans son aide.  |   => suggestions : ['']

122 Guillemets typographiques fermants. => L'ajout d'informations de débogage se fait avec l'option ''-g''. | '' => suggestions : ['\xa0»', '”']

124 Typographie des composés chimiques. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | o3 => suggestions : ['O₃']
124 Mot inconnu : O3 => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | o3
124 Guillemets typographiques fermants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['\xa0»', '”']
124 Guillemets typographiques ouvrants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['«\xa0', '“']
124 Il manque un espace. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | out => suggestions : [' out']
124 Guillemets typographiques fermants. => Exemple de commande avec optimisation poussée ''-O3'' (l'exécutable est nommé par défaut ''a.out'') : | '' => suggestions : ['\xa0»', '”']

136 Mot inconnu : Ofast => Parmi les options d'optimisation, on citera également ''-Ofast'', ainsi que ''-xHost'' pour choisir le jeu d'instructions le plus élevé disponible sur le processeur de la machine. | ofast
136 Guillemets typographiques fermants. => Parmi les options d'optimisation, on citera également ''-Ofast'', ainsi que ''-xHost'' pour choisir le jeu d'instructions le plus élevé disponible sur le processeur de la machine. | '' => suggestions : ['\xa0»', '”']
136 Mot inconnu : xHost => Parmi les options d'optimisation, on citera également ''-Ofast'', ainsi que ''-xHost'' pour choisir le jeu d'instructions le plus élevé disponible sur le processeur de la machine. | xhost
136 Guillemets typographiques fermants. => Parmi les options d'optimisation, on citera également ''-Ofast'', ainsi que ''-xHost'' pour choisir le jeu d'instructions le plus élevé disponible sur le processeur de la machine. | '' => suggestions : ['\xa0»', '”']

138 Mot inconnu : OpenMP => Pour utiliser OpenMP, l'option de compilation est ''-qopenmp''. | openmp
138 Mot inconnu : qopenmp => Pour utiliser OpenMP, l'option de compilation est ''-qopenmp''. | qopenmp
138 Guillemets typographiques fermants. => Pour utiliser OpenMP, l'option de compilation est ''-qopenmp''. | '' => suggestions : ['\xa0»', '”']

140 Mot inconnu : ifort => ifort supporte nativement la programmation parallèle à l'aide des cotableaux : il suffit d'utiliser l'option de compilation ''-coarray''. | ifort
140 Mot inconnu : cotableaux => ifort supporte nativement la programmation parallèle à l'aide des cotableaux : il suffit d'utiliser l'option de compilation ''-coarray''. | cotableaux
140 Mot inconnu : coarray => ifort supporte nativement la programmation parallèle à l'aide des cotableaux : il suffit d'utiliser l'option de compilation ''-coarray''. | coarray
140 Guillemets typographiques fermants. => ifort supporte nativement la programmation parallèle à l'aide des cotableaux : il suffit d'utiliser l'option de compilation ''-coarray''. | '' => suggestions : ['\xa0»', '”']

147 Mot inconnu : coarray-num-images => ou utiliser l'option de compilation ''-coarray-num-images=4'' pour les cotableaux. | coarray-num-images
147 Guillemets typographiques fermants. => ou utiliser l'option de compilation ''-coarray-num-images=4'' pour les cotableaux. | '' => suggestions : ['\xa0»', '”']
147 Mot inconnu : cotableaux => ou utiliser l'option de compilation ''-coarray-num-images=4'' pour les cotableaux. | cotableaux

148 Mot inconnu : Editeurs => ===== Editeurs et Environnement de Développement Intégré ===== | editeurs

166 Mot inconnu : gfortran => Avec gfortran, lors de la compilation on utilisera l'option ''-g'' (mode debug) : | gfortran
166 Guillemets typographiques fermants. => Avec gfortran, lors de la compilation on utilisera l'option ''-g'' (mode debug) : | '' => suggestions : ['\xa0»', '”']
166 Mot inconnu : debug => Avec gfortran, lors de la compilation on utilisera l'option ''-g'' (mode debug) : | debug

171 Mot inconnu : gdb => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | gdb
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : start => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | start
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : next => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | next
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : until => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | until
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : display => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | display
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : watch => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | watch
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : print => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | print
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']
171 Guillemets typographiques ouvrants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['«\xa0', '“']
171 Mot inconnu : help => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | help
171 Guillemets typographiques fermants. => Une fois dans gdb, on pourra exécuter le programme pas à pas avec les instructions suivantes : ''start'', ''next'' (ne rentre pas dans les fonctions), ''step'' (rentre dans les fonctions), ''finish'' (pour continuer jusqu'à la fin d'une fonction), ''until n'' (continue jusqu'à la ligne n). Et afficher le contenu des variables avec : ''display i'', ''watch i'', ''print i''. L'instruction ''help'' permettra d'afficher l'aide de ces instructions. | '' => suggestions : ['\xa0»', '”']

173 Typographie : points de suspension. Utilisez le caractère dédié. => On peut activer toutes les vérifications (limites de tableau, dépassement de capacité...) pendant l'exécution avec l'option ''-fcheck=all'' de gfortran. | ... => suggestions : ['…']
173 Mot inconnu : fcheck => On peut activer toutes les vérifications (limites de tableau, dépassement de capacité...) pendant l'exécution avec l'option ''-fcheck=all'' de gfortran. | fcheck
173 Mot inconnu : all => On peut activer toutes les vérifications (limites de tableau, dépassement de capacité...) pendant l'exécution avec l'option ''-fcheck=all'' de gfortran. | all
173 Guillemets typographiques fermants. => On peut activer toutes les vérifications (limites de tableau, dépassement de capacité...) pendant l'exécution avec l'option ''-fcheck=all'' de gfortran. | '' => suggestions : ['\xa0»', '”']
173 Mot inconnu : gfortran => On peut activer toutes les vérifications (limites de tableau, dépassement de capacité...) pendant l'exécution avec l'option ''-fcheck=all'' de gfortran. | gfortran
175 Mot inconnu : strace => Pour visualiser les appels système lors de l'exécution, on peut utiliser [[apt>strace]] :  | strace
175 Espace(s) en fin de ligne à supprimer. => Pour visualiser les appels système lors de l'exécution, on peut utiliser [[apt>strace]] :  |   => suggestions : ['']

180 Mot inconnu : gprof => Pour repérer les portions de code consommant le plus de temps processeur, on peut utiliser le profileur gprof du paquet [[apt>binutils]]. Il faut compiler le programme avec l'option ''-pg'' et ne pas activer d'optimisation : | gprof
180 Mot inconnu : binutils => Pour repérer les portions de code consommant le plus de temps processeur, on peut utiliser le profileur gprof du paquet [[apt>binutils]]. Il faut compiler le programme avec l'option ''-pg'' et ne pas activer d'optimisation : | binutils
180 Guillemets typographiques fermants. => Pour repérer les portions de code consommant le plus de temps processeur, on peut utiliser le profileur gprof du paquet [[apt>binutils]]. Il faut compiler le programme avec l'option ''-pg'' et ne pas activer d'optimisation : | '' => suggestions : ['\xa0»', '”']

186 Mot inconnu : fpm => ===== Gestionnaire de paquets Fortran fpm ===== | fpm

188 Mot inconnu : fpm => Depuis 2020, Fortran dispose du gestionnaire de paquets et système de construction [[https://github.com/fortran-lang/fpm|fpm (Fortran Package Manager)]]. Vous pouvez l'installer en ligne de commandes à l'aide de git : | fpm
188 Incohérence avec “de” : “git” est une forme verbale conjuguée. => Depuis 2020, Fortran dispose du gestionnaire de paquets et système de construction [[https://github.com/fortran-lang/fpm|fpm (Fortran Package Manager)]]. Vous pouvez l'installer en ligne de commandes à l'aide de git : | git => suggestions : ['gisant']

195 Guillemets typographiques ouvrants. => en remplaçant ''mon_login'' par votre identifiant de session. | '' => suggestions : ['«\xa0', '“']
195 Mot inconnu : mon_login => en remplaçant ''mon_login'' par votre identifiant de session. | mon_login
195 Guillemets typographiques fermants. => en remplaçant ''mon_login'' par votre identifiant de session. | '' => suggestions : ['\xa0»', '”']

199 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => fpm est inspiré de Cargo, le couteau suisse du langage Rust. Créer, compiler et tester un nouveau projet de type Hello World devient aussi simple que de taper les commandes : | fpm => suggestions : ['Fpm']
199 Mot inconnu : fpm => fpm est inspiré de Cargo, le couteau suisse du langage Rust. Créer, compiler et tester un nouveau projet de type Hello World devient aussi simple que de taper les commandes : | fpm
199 Mot inconnu : World => fpm est inspiré de Cargo, le couteau suisse du langage Rust. Créer, compiler et tester un nouveau projet de type Hello World devient aussi simple que de taper les commandes : | world

206 Mot inconnu : fpm => fpm gère les dépendances, qu'il peut télécharger automatiquement depuis GitHub. | fpm
206 Mot inconnu : GitHub => fpm gère les dépendances, qu'il peut télécharger automatiquement depuis GitHub. | github

208 Mot inconnu : fpm => La [[https://fpm.fortran-lang.org/fr/index.html|documentation de fpm]] propose des tutoriels, des guides pratiques //(how-to),// des documents, un manuel de référence et des actualités. Cette documentation est disponible en français, ainsi que dans plusieurs autres langues (allemand, espagnol, néerlandais...) | fpm
208 Mot inconnu : how-to => La [[https://fpm.fortran-lang.org/fr/index.html|documentation de fpm]] propose des tutoriels, des guides pratiques //(how-to),// des documents, un manuel de référence et des actualités. Cette documentation est disponible en français, ainsi que dans plusieurs autres langues (allemand, espagnol, néerlandais...) | how-to
208 Typographie : points de suspension. Utilisez le caractère dédié. => La [[https://fpm.fortran-lang.org/fr/index.html|documentation de fpm]] propose des tutoriels, des guides pratiques //(how-to),// des documents, un manuel de référence et des actualités. Cette documentation est disponible en français, ainsi que dans plusieurs autres langues (allemand, espagnol, néerlandais...) | ... => suggestions : ['…']

212 Mot inconnu : gnuplot => Fortran ne dispose pas d'instructions graphiques. La visualisation des résultats peut se faire avec des programmes externes comme [[gnuplot]] ou [[apt>paraview|ParaView]], ou des bibliothèques graphiques, comme par exemple : | gnuplot
212 Pléonasme. => Fortran ne dispose pas d'instructions graphiques. La visualisation des résultats peut se faire avec des programmes externes comme [[gnuplot]] ou [[apt>paraview|ParaView]], ou des bibliothèques graphiques, comme par exemple : | comme par exemple => suggestions : ['comme', 'par exemple']

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[apt>libplot-dev libplplotfortran0|PLplot]], |    => suggestions : ['']
213 Mot inconnu : libplot-dev =>   * [[apt>libplot-dev libplplotfortran0|PLplot]], | libplot-dev
213 Mot inconnu : libplplotfortran0 =>   * [[apt>libplot-dev libplplotfortran0|PLplot]], | libplplotfortran0

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://github.com/vmagnin/gtk-fortran/wiki|gtk-fortran]] qui permet de créer des interfaces GTK en Fortran et peut être utilisé comme dépendance fpm, |    => suggestions : ['']
214 Mot inconnu : fpm =>   * [[https://github.com/vmagnin/gtk-fortran/wiki|gtk-fortran]] qui permet de créer des interfaces GTK en Fortran et peut être utilisé comme dépendance fpm, | fpm

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://github.com/kookma/ogpf|ogpf]] qui permet d'appeler simplement gnuplot depuis un programme en Fortran, grâce à son interface orientée objet. Il peut être installé en tant que paquet fpm. |    => suggestions : ['']
215 Mot inconnu : gnuplot =>   * [[https://github.com/kookma/ogpf|ogpf]] qui permet d'appeler simplement gnuplot depuis un programme en Fortran, grâce à son interface orientée objet. Il peut être installé en tant que paquet fpm. | gnuplot
215 Mot inconnu : fpm =>   * [[https://github.com/kookma/ogpf|ogpf]] qui permet d'appeler simplement gnuplot depuis un programme en Fortran, grâce à son interface orientée objet. Il peut être installé en tant que paquet fpm. | fpm

217 Mot inconnu : pixmap => Un programme Fortran peut également générer facilement des fichiers graphiques au format [[https://fr.wikipedia.org/wiki/Portable_pixmap|Portable pixmap (PPM)]] (voir cet [[https://github.com/certik/fortran-utils/blob/master/src/ppm.f90|exemple]]). | pixmap

220 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. |    => suggestions : ['']
220 Mot inconnu : Fortran-lang =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | fortran-lang
220 Mot inconnu : fpm =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | fpm
220 Mot inconnu : stdlib =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | stdlib
220 Mot inconnu : LFortran =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | lfortran
220 Conjugaison erronée. Accord avec “Les utilisateurs…”. Le verbe devrait être à la 3ᵉ personne du pluriel. =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | retrouve => suggestions : ['retrouvent']
220 Mot inconnu : Discourse =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | discourse
220 Guillemets typographiques ouvrants. =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | " => suggestions : ['«\xa0', '“']
220 Mot inconnu : The =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | the
220 Mot inconnu : of =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | of
220 Guillemets typographiques fermants. =>   * [[https://fortran-lang.org/|Fortran-lang.org]] se veut depuis 2020 la page d'accueil du langage Fortran. La communauté développe en particulier le gestionnaire de paquets Fortran fpm, une bibliothèque standard stdlib et le compilateur interactif LFortran. Les utilisateurs de Fortran se retrouve dans le [[https://fortran-lang.discourse.group/|Discourse Fortran]]. Un article académique [[https://arxiv.org/abs/2203.15110|"The State of Fortran"]] a été publié en 2022. | " => suggestions : ['\xa0»', '”']

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://groups.google.com/g/comp.lang.fortran|comp.lang.fortran]] est un groupe de discussion Usenet actif depuis 1983.  |    => suggestions : ['']
221 Mot inconnu : Usenet =>   * [[https://groups.google.com/g/comp.lang.fortran|comp.lang.fortran]] est un groupe de discussion Usenet actif depuis 1983.  | usenet
221 Espace(s) en fin de ligne à supprimer. =>   * [[https://groups.google.com/g/comp.lang.fortran|comp.lang.fortran]] est un groupe de discussion Usenet actif depuis 1983.  |   => suggestions : ['']

222 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://fortranwiki.org/fortran/show/HomePage|Fortran Wiki]] offre en anglais de nombreuses ressources proposées par les développeurs Fortran. |    => suggestions : ['']
