67 Guillemets typographiques ouvrants. [[470:471]] =>   *  Un service de type **simple** (type par défaut) lance un processus principal. Dans le cas où ce processus offre une fonctionnalité à d'autres processus sur le système, ses canaux de communication doivent être installés avant que le processus principal soit démarré. Ce qui est rendu possible par l'activation des sockets, et autres canaux de communication. Ainsi, systemd peut traiter les autres unités sans se préoccuper de la fin du lancement d'une unité de type "simple". <|> " => suggestions : None
67 Guillemets typographiques fermants. [[477:478]] =>   *  Un service de type **simple** (type par défaut) lance un processus principal. Dans le cas où ce processus offre une fonctionnalité à d'autres processus sur le système, ses canaux de communication doivent être installés avant que le processus principal soit démarré. Ce qui est rendu possible par l'activation des sockets, et autres canaux de communication. Ainsi, systemd peut traiter les autres unités sans se préoccuper de la fin du lancement d'une unité de type "simple". <|> " => suggestions : None
68 Mot inconnu : forking [[25:32]] =>   * Un service de type **forking**, lance un processus père qui créera un processus fils dans le cadre de son démarrage. Le processus parent est prévu pour s’arrêter une fois le démarrage complet et que tous les canaux de communication sont mis en place. Le processus fils continue à fonctionner en tant que le processus principal du service. systemd poursuit le traitement des autres unités une fois que le processus père se termine. **Ce type de service correspond aux services UNIX traditionnels.** <|> forking
69 Mot inconnu : oneshot [[25:32]] =>   * Un service de type **oneshot** est similaire à un service de type **simple**. Cependant, systemd attend que le processus se termine avant de continuer ses traitements. **Ce type de service est typiquement utilisé comme équivalent aux commandes lancées au démarrage via les scripts d'init system V**. Cela permet à systemd de remplacer ce mécanisme. De ce fait, avec systemd des nouveaux services apparaissent, alors qu'ils auraient été simplement des scripts d'init avec SysVinit. <|> oneshot
69 Mot inconnu : init [[287:291]] =>   * Un service de type **oneshot** est similaire à un service de type **simple**. Cependant, systemd attend que le processus se termine avant de continuer ses traitements. **Ce type de service est typiquement utilisé comme équivalent aux commandes lancées au démarrage via les scripts d'init system V**. Cela permet à systemd de remplacer ce mécanisme. De ce fait, avec systemd des nouveaux services apparaissent, alors qu'ils auraient été simplement des scripts d'init avec SysVinit. <|> init
69 Mot inconnu : system [[292:298]] =>   * Un service de type **oneshot** est similaire à un service de type **simple**. Cependant, systemd attend que le processus se termine avant de continuer ses traitements. **Ce type de service est typiquement utilisé comme équivalent aux commandes lancées au démarrage via les scripts d'init system V**. Cela permet à systemd de remplacer ce mécanisme. De ce fait, avec systemd des nouveaux services apparaissent, alors qu'ils auraient été simplement des scripts d'init avec SysVinit. <|> system
69 Mot inconnu : init [[465:469]] =>   * Un service de type **oneshot** est similaire à un service de type **simple**. Cependant, systemd attend que le processus se termine avant de continuer ses traitements. **Ce type de service est typiquement utilisé comme équivalent aux commandes lancées au démarrage via les scripts d'init system V**. Cela permet à systemd de remplacer ce mécanisme. De ce fait, avec systemd des nouveaux services apparaissent, alors qu'ils auraient été simplement des scripts d'init avec SysVinit. <|> init
69 Mot inconnu : SysVinit [[475:483]] =>   * Un service de type **oneshot** est similaire à un service de type **simple**. Cependant, systemd attend que le processus se termine avant de continuer ses traitements. **Ce type de service est typiquement utilisé comme équivalent aux commandes lancées au démarrage via les scripts d'init system V**. Cela permet à systemd de remplacer ce mécanisme. De ce fait, avec systemd des nouveaux services apparaissent, alors qu'ils auraient été simplement des scripts d'init avec SysVinit. <|> sysvinit
70 Mot inconnu : dbus [[25:29]] =>   * Un service de type **dbus** est similaire à un service de type **simple**. Cependant, le processus du service doit obtenir un nom via D-Bus. systemd pourra alors traiter les autres unités. <|> dbus
71 Mot inconnu : notify [[25:31]] =>   * Un service de type **notify** est similaire à un service de type **simple**. Cependant, c'est le processus du service qui avertira systemd (via la fonction sd_notfy(3)) qu'il peut traiter les autres unités. <|> notify
71 Mot inconnu : sd_notfy [[160:168]] =>   * Un service de type **notify** est similaire à un service de type **simple**. Cependant, c'est le processus du service qui avertira systemd (via la fonction sd_notfy(3)) qu'il peut traiter les autres unités. <|> sd_notfy

75 Guillemets typographiques ouvrants. [[33:34]] => ==== Exemples de service de type "oneshot"==== <|> " => suggestions : None
75 Mot inconnu : oneshot [[34:41]] => ==== Exemples de service de type "oneshot"==== <|> oneshot
75 Guillemets typographiques fermants. [[41:42]] => ==== Exemples de service de type "oneshot"==== <|> " => suggestions : None
91 Mot inconnu : start [[60:65]] =>   * À son lancement, la commande /usr/libexec/iptables.init start est exécutée. Cette commande va permettre de charger des modules iptables et les règles iptables que le modules netfilter du noyau linux va prendre en compte. <|> start
91 Accord de nombre erroné : « modules » est au pluriel. [[167:169]] =>   * À son lancement, la commande /usr/libexec/iptables.init start est exécutée. Cette commande va permettre de charger des modules iptables et les règles iptables que le modules netfilter du noyau linux va prendre en compte. <|> le => suggestions : None
91 Accord de nombre erroné : « modules » devrait être au singulier. [[170:177]] =>   * À son lancement, la commande /usr/libexec/iptables.init start est exécutée. Cette commande va permettre de charger des modules iptables et les règles iptables que le modules netfilter du noyau linux va prendre en compte. <|> modules => suggestions : None
91 Mot inconnu : netfilter [[178:187]] =>   * À son lancement, la commande /usr/libexec/iptables.init start est exécutée. Cette commande va permettre de charger des modules iptables et les règles iptables que le modules netfilter du noyau linux va prendre en compte. <|> netfilter
93 Mot inconnu : start [[115:120]] =>   * Le service iptables continuera d'apparaitre comme actif après la fin de la commande /usr/libexec/iptables.init start et jusqu’à ce qu'il soit explicitement arrêté. <|> start

95 Guillemets typographiques ouvrants. [[31:32]] => ====Exemple de service de type "simple"==== <|> " => suggestions : None
95 Guillemets typographiques fermants. [[38:39]] => ====Exemple de service de type "simple"==== <|> " => suggestions : None

157 S’il s’agit d’une interrogation, il manque un trait d’union. [[5:11]] => **Qu'est ce qu'un timer-- <|> est ce => suggestions : None
157 Mot inconnu : timer [[18:23]] => **Qu'est ce qu'un timer-- <|> timer

159 Mot inconnu : timers [[4:10]] => Les timers sont des fichiers de programmation qui vont se charger de lancer des services à intervalles réguliers. <|> timers

161 Mot inconnu : timer [[20:25]] => Quand vous créez un timer, il doit avoir l'extension .timer. Un service .service du même nom doit exister. (le service est souvent un service minimaliste, de type oneshot, permettant de lancer une commande) <|> timer
161 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[52:54]] => Quand vous créez un timer, il doit avoir l'extension .timer. Un service .service du même nom doit exister. (le service est souvent un service minimaliste, de type oneshot, permettant de lancer une commande) <|>  . => suggestions : None
161 Mot inconnu : timer [[54:59]] => Quand vous créez un timer, il doit avoir l'extension .timer. Un service .service du même nom doit exister. (le service est souvent un service minimaliste, de type oneshot, permettant de lancer une commande) <|> timer
161 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[71:73]] => Quand vous créez un timer, il doit avoir l'extension .timer. Un service .service du même nom doit exister. (le service est souvent un service minimaliste, de type oneshot, permettant de lancer une commande) <|>  . => suggestions : None
161 Mot inconnu : oneshot [[163:170]] => Quand vous créez un timer, il doit avoir l'extension .timer. Un service .service du même nom doit exister. (le service est souvent un service minimaliste, de type oneshot, permettant de lancer une commande) <|> oneshot

163 Mot inconnu : timers [[4:10]] => Les timers «pourraient presque» remplacer le planificateur de tâches cron. <|> timers

166 Mot inconnu : timer [[23:28]] => Création du fichier de timer         <|> timer
166 Espace(s) en fin de ligne à supprimer. [[28:36]] => Création du fichier de timer         <|>          => suggestions : None

196 Mot inconnu : neo4j [[50:55]] => ====Exemple de service avancé avec la base graphe neo4j==== <|> neo4j
