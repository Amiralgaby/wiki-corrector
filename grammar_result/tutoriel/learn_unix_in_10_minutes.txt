
4 Mot inconnu : Learn => ====== Learn UNIX in 10 minutes. Version 1.2 FR 1.0 ======  <|> learn
6 Pas de majuscule sur les mois. => Les commandes de base de la ligne de commande UNIX (le shell) : dernière révision 17 Mai 2001\\ <|> mai => suggestions : ['mai']
7 Mot inconnu : Learn => Site Original : [[http://freeengineer.org/learnUNIXin10minutes.html|Learn UNIX in 10 minutes]] <|> learn

15 Mot inconnu : DAO => Ce document a été rédigé il y a quelques années pour des étudiants en Dessin Assisté par Ordinateur (DAO) . <|> dao

18 Mot inconnu : copyrighté => Ce document est copyrighté mais peut être reproduit selon les termes de la [[http://www.gnu.org/copyleft/fdl.html|GFDL]]. <|> copyrighté

19 Mot inconnu : This => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> this
19 Mot inconnu : is => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> is
19 Mot inconnu : something => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> something
19 Mot inconnu : that => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> that
19 Mot inconnu : had => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> had
19 Mot inconnu : given => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> given
19 Mot inconnu : to => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> to
19 Mot inconnu : students => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> students
19 Mot inconnu : years => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> years
19 Mot inconnu : past => Envoyez-moi vos commentaires, corrections ou tout autre ajout qui vous semble absolument nécessaire dans ce document.((This is something that I had given out to students (CAD user training) in years past.  <|> past

20 Mot inconnu : The => The purpose was to have on one page the basics commands for getting started using  <|> the
20 Mot inconnu : purpose => The purpose was to have on one page the basics commands for getting started using  <|> purpose
20 Mot inconnu : was => The purpose was to have on one page the basics commands for getting started using  <|> was
20 Mot inconnu : to => The purpose was to have on one page the basics commands for getting started using  <|> to
20 Mot inconnu : one => The purpose was to have on one page the basics commands for getting started using  <|> one
20 Mot inconnu : the => The purpose was to have on one page the basics commands for getting started using  <|> the
20 Mot inconnu : basics => The purpose was to have on one page the basics commands for getting started using  <|> basics
20 Mot inconnu : commands => The purpose was to have on one page the basics commands for getting started using  <|> commands
20 Mot inconnu : getting => The purpose was to have on one page the basics commands for getting started using  <|> getting
20 Mot inconnu : started => The purpose was to have on one page the basics commands for getting started using  <|> started
20 Mot inconnu : using => The purpose was to have on one page the basics commands for getting started using  <|> using

21 Mot inconnu : the => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> the
21 Mot inconnu : so => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> so
21 Mot inconnu : that => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> that
21 Mot inconnu : they => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> they
21 Mot inconnu : didn't => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> didn't
21 Mot inconnu : call => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> call
21 Mot inconnu : asking => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> asking
21 Mot inconnu : what => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> what
21 Mot inconnu : to => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> to
21 Mot inconnu : the => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> the
21 Mot inconnu : first => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> first
21 Mot inconnu : time => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> time
21 Mot inconnu : someone => the UNIX shell (so that they didn't call me asking what to do the first time someone  <|> someone

22 Mot inconnu : them => gave them a tape). \\ <|> them

23 Mot inconnu : This => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> this
23 Mot inconnu : is => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> is
23 Mot inconnu : copyrighted => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> copyrighted
23 Mot inconnu : freely => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> freely
23 Mot inconnu : redistributable => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> redistributable
23 Mot inconnu : under => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> under
23 Mot inconnu : the => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> the
23 Mot inconnu : terms => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> terms
23 Mot inconnu : of => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> of
23 Mot inconnu : the => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> the
23 Mot inconnu : GFDL => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|> gfdl
23 Pas d’espace avant un point. => This document is copyrighted but freely redistributable under the terms of the GFDL .  <|>  . => suggestions : ['.']

24 Mot inconnu : Send => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> send
24 Mot inconnu : comments => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> comments
24 Mot inconnu : and => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> and
24 Mot inconnu : stuff => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> stuff
24 Mot inconnu : that => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> that
24 Mot inconnu : you => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> you
24 Mot inconnu : think => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> think
24 Mot inconnu : should => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> should
24 Mot inconnu : absolutly => Send me comments, corrections, and extra stuff that you think should absolutly must be  <|> absolutly

25 Mot inconnu : included => included. I'll gladly listen.\\ <|> included
25 Mot inconnu : I'll => included. I'll gladly listen.\\ <|> i'll
25 Mot inconnu : gladly => included. I'll gladly listen.\\ <|> gladly
25 Mot inconnu : listen => included. I'll gladly listen.\\ <|> listen

44 Guillemets typographiques ouvrants. => | / |   Dossier "racine"| <|> " => suggestions : ['«\xa0', '“']
44 Guillemets typographiques fermants. => | / |   Dossier "racine"| <|> " => suggestions : ['\xa0»', '”']

45 Mot inconnu : usr => |/usr |  Dossier usr (sous-dossier du dossier "racine") | <|> usr
45 Guillemets typographiques ouvrants. => |/usr |  Dossier usr (sous-dossier du dossier "racine") | <|> " => suggestions : ['«\xa0', '“']
45 Guillemets typographiques fermants. => |/usr |  Dossier usr (sous-dossier du dossier "racine") | <|> " => suggestions : ['\xa0»', '”']

46 Mot inconnu : STRIM100 => |/usr/STRIM100 |           STRIM100 est un sous-dossier de /usr | <|> strim100

50 Mot inconnu : pwd => | pwd  | montre le nom du dossier de travail courant (//Print Working Directory//)     | <|> pwd
50 Espace(s) surnuméraire(s) à supprimer. => | pwd  | montre le nom du dossier de travail courant (//Print Working Directory//)     | <|>    => suggestions : [' ']
50 Mot inconnu : Print => | pwd  | montre le nom du dossier de travail courant (//Print Working Directory//)     | <|> print
50 Mot inconnu : Working => | pwd  | montre le nom du dossier de travail courant (//Print Working Directory//)     | <|> working
50 Mot inconnu : Directory => | pwd  | montre le nom du dossier de travail courant (//Print Working Directory//)     | <|> directory

51 Espace(s) surnuméraire(s) à supprimer. => | cd   | change le dossier de travail pour un autre dossier | <|>     => suggestions : [' ']

53 Mot inconnu : INIT => | cd INIT  | change le dossier de travail pour INIT, qui est un sous-dossier du dossier courant  | <|> init
53 Espace(s) surnuméraire(s) à supprimer. => | cd INIT  | change le dossier de travail pour INIT, qui est un sous-dossier du dossier courant  | <|>    => suggestions : [' ']
53 Mot inconnu : INIT => | cd INIT  | change le dossier de travail pour INIT, qui est un sous-dossier du dossier courant  | <|> init
53 Espace(s) surnuméraire(s) à supprimer. => | cd INIT  | change le dossier de travail pour INIT, qui est un sous-dossier du dossier courant  | <|>    => suggestions : [' ']

54 Typographie : un ou trois points ? => | cd ..  | change le dossier de travail pour le dossier parent | <|> .. => suggestions : ['…', '.']
54 Espace(s) surnuméraire(s) à supprimer. => | cd ..  | change le dossier de travail pour le dossier parent | <|>    => suggestions : [' ']

55 Mot inconnu : STRMWORK => | cd $STRMWORK | change le dossier de travail pour le dossier défini par la variable d'environnement 'STRMWORK'| <|> strmwork
55 Guillemets typographiques ouvrants. => | cd $STRMWORK | change le dossier de travail pour le dossier défini par la variable d'environnement 'STRMWORK'| <|> ' => suggestions : ['“', '‘', '‹']
55 Mot inconnu : STRMWORK => | cd $STRMWORK | change le dossier de travail pour le dossier défini par la variable d'environnement 'STRMWORK'| <|> strmwork

56 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => | cd - | revient au dossier précédent (annule le dernier changement de dossier) | <|>  -  => suggestions : [' – ', ' — ', ' − ']

85 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  === chmod === <|>   => suggestions : ['']
85 Mot inconnu : chmod =>  === chmod === <|> chmod
90 Mot inconnu : __u__ =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> __u__
90 Mot inconnu : ser =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> ser
90 Mot inconnu : __g__ =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> __g__
90 Mot inconnu : roup =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> roup
90 Mot inconnu : __o__ =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> __o__
90 Mot inconnu : ther =>   * __u__: utilisateur (**u**ser), __g__: groupe (**g**roup) et __o__: autres (**o**ther) <|> ther
93 Mot inconnu : __r__ =>   * __r__: lire (**r**ead), __w__: écrire (**w**rite) et __x__: exécuter (e**x**ecute) <|> __r__
93 Mot inconnu : ead =>   * __r__: lire (**r**ead), __w__: écrire (**w**rite) et __x__: exécuter (e**x**ecute) <|> ead
93 Mot inconnu : __w__ =>   * __r__: lire (**r**ead), __w__: écrire (**w**rite) et __x__: exécuter (e**x**ecute) <|> __w__
93 Mot inconnu : __x__ =>   * __r__: lire (**r**ead), __w__: écrire (**w**rite) et __x__: exécuter (e**x**ecute) <|> __x__
93 Mot inconnu : ecute =>   * __r__: lire (**r**ead), __w__: écrire (**w**rite) et __x__: exécuter (e**x**ecute) <|> ecute

98 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Vous devez donc choisir le groupe à modifier (u, g, o) suivis du symbole + pour donner une permission, du symbole - pour la retirer ou du symbole = pour définir la permission exacte suivi des permissions à appliquer (r, w, x). <|>  -  => suggestions : [' – ', ' — ', ' − ']


119 Mot inconnu : rwx => On a propriétaire/groupe/autres donc rwx/rx/rx donc 4+2+1/4+1/4+1 et donc 7/5/5. <|> rwx
119 Mot inconnu : rx => On a propriétaire/groupe/autres donc rwx/rx/rx donc 4+2+1/4+1/4+1 et donc 7/5/5. <|> rx
119 Mot inconnu : rx => On a propriétaire/groupe/autres donc rwx/rx/rx donc 4+2+1/4+1/4+1 et donc 7/5/5. <|> rx

121 Espace(s) surnuméraire(s) à supprimer. => Astuce pour ceux qui connaissent le binaire. On veut  rwx lire/écrire/exécuter donc 111 en binaire qui vaut 7 en décimal. On veut r-x lire/**pas ecrire**/exécuter donc 101 en binaire qui vaut 5 en décimal.  <|>    => suggestions : [' ']
121 Mot inconnu : rwx => Astuce pour ceux qui connaissent le binaire. On veut  rwx lire/écrire/exécuter donc 111 en binaire qui vaut 7 en décimal. On veut r-x lire/**pas ecrire**/exécuter donc 101 en binaire qui vaut 5 en décimal.  <|> rwx
121 Mot inconnu : ecrire => Astuce pour ceux qui connaissent le binaire. On veut  rwx lire/écrire/exécuter donc 111 en binaire qui vaut 7 en décimal. On veut r-x lire/**pas ecrire**/exécuter donc 101 en binaire qui vaut 5 en décimal.  <|> ecrire

123 Mot inconnu : chgrp => === chgrp === <|> chgrp

129 Mot inconnu : chown => === chown === <|> chown

133 Mot inconnu : sheherazade => fait de sheherazade la propriétaire du fichier  //fichier//. <|> sheherazade
133 Espace(s) surnuméraire(s) à supprimer. => fait de sheherazade la propriétaire du fichier  //fichier//. <|>    => suggestions : [' ']

137 Mot inconnu : sheherazade => fait de sheherazade la propriétaire du dossier //dir// et de **tous** ses sous dossiers. <|> sheherazade
137 Mot inconnu : dir => fait de sheherazade la propriétaire du dossier //dir// et de **tous** ses sous dossiers. <|> dir

139 Mot inconnu : root => <note important>Vous devez être le/la propriétaire du fichier/dossier ou être root avant de taper ces commandes. Sous Ubuntu il faut les préfixer par **sudo**.</note> <|> root
139 Mot inconnu : sudo => <note important>Vous devez être le/la propriétaire du fichier/dossier ou être root avant de taper ces commandes. Sous Ubuntu il faut les préfixer par **sudo**.</note> <|> sudo

144 Mot inconnu : cp => |cp fichier_source fichier_destination | copie un fichier | <|> cp
144 Mot inconnu : fichier_source => |cp fichier_source fichier_destination | copie un fichier | <|> fichier_source
144 Mot inconnu : fichier_destination => |cp fichier_source fichier_destination | copie un fichier | <|> fichier_destination

145 Mot inconnu : cp => |cp -r dossier_source dossier_destination | copie un dossier | <|> cp
145 Il manque un espace à côté du tiret. => |cp -r dossier_source dossier_destination | copie un dossier | <|>  - => suggestions : [' – ', ' — ']
145 Mot inconnu : dossier_source => |cp -r dossier_source dossier_destination | copie un dossier | <|> dossier_source
145 Mot inconnu : dossier_destination => |cp -r dossier_source dossier_destination | copie un dossier | <|> dossier_destination

146 Mot inconnu : mv => | mv fichier1 nouveau_nom_fichier1 | déplace ou renomme un fichier | <|> mv
146 Mot inconnu : fichier1 => | mv fichier1 nouveau_nom_fichier1 | déplace ou renomme un fichier | <|> fichier1
146 Mot inconnu : nouveau_nom_fichier1 => | mv fichier1 nouveau_nom_fichier1 | déplace ou renomme un fichier | <|> nouveau_nom_fichier1

147 Mot inconnu : rm => | rm fichier1 [fichier2 ...] | supprime un fichier (ou une liste de fichiers) (( **Il n'y a pas de corbeille**)) | <|> rm
147 Mot inconnu : fichier1 => | rm fichier1 [fichier2 ...] | supprime un fichier (ou une liste de fichiers) (( **Il n'y a pas de corbeille**)) | <|> fichier1
147 Mot inconnu : fichier2 => | rm fichier1 [fichier2 ...] | supprime un fichier (ou une liste de fichiers) (( **Il n'y a pas de corbeille**)) | <|> fichier2
147 Typographie : points de suspension. Utilisez le caractère dédié. => | rm fichier1 [fichier2 ...] | supprime un fichier (ou une liste de fichiers) (( **Il n'y a pas de corbeille**)) | <|> ... => suggestions : ['…']
147 Pas d’espace après ce signe. => | rm fichier1 [fichier2 ...] | supprime un fichier (ou une liste de fichiers) (( **Il n'y a pas de corbeille**)) | <|> (  => suggestions : ['(']

148 Mot inconnu : rm => | rm -r dossier1 [dossier2...] | supprime un dossier et **tous** ses sous-dossiers, à manier avec précaution | <|> rm
148 Il manque un espace à côté du tiret. => | rm -r dossier1 [dossier2...] | supprime un dossier et **tous** ses sous-dossiers, à manier avec précaution | <|>  - => suggestions : [' – ', ' — ']
148 Mot inconnu : dossier1 => | rm -r dossier1 [dossier2...] | supprime un dossier et **tous** ses sous-dossiers, à manier avec précaution | <|> dossier1
148 Mot inconnu : dossier2 => | rm -r dossier1 [dossier2...] | supprime un dossier et **tous** ses sous-dossiers, à manier avec précaution | <|> dossier2
148 Typographie : points de suspension. Utilisez le caractère dédié. => | rm -r dossier1 [dossier2...] | supprime un dossier et **tous** ses sous-dossiers, à manier avec précaution | <|> ... => suggestions : ['…']

149 Mot inconnu : mkdir => | mkdir dossier1 [dossier2...]   | crée un dossier  | <|> mkdir
149 Mot inconnu : dossier1 => | mkdir dossier1 [dossier2...]   | crée un dossier  | <|> dossier1
149 Mot inconnu : dossier2 => | mkdir dossier1 [dossier2...]   | crée un dossier  | <|> dossier2
149 Typographie : points de suspension. Utilisez le caractère dédié. => | mkdir dossier1 [dossier2...]   | crée un dossier  | <|> ... => suggestions : ['…']
149 Espace(s) surnuméraire(s) à supprimer. => | mkdir dossier1 [dossier2...]   | crée un dossier  | <|>    => suggestions : [' ']

150 Mot inconnu : rmdir => |rmdir dossier1 [dossier2...] | supprime un dossier vide| <|> rmdir
150 Mot inconnu : dossier1 => |rmdir dossier1 [dossier2...] | supprime un dossier vide| <|> dossier1
150 Mot inconnu : dossier2 => |rmdir dossier1 [dossier2...] | supprime un dossier vide| <|> dossier2
150 Typographie : points de suspension. Utilisez le caractère dédié. => |rmdir dossier1 [dossier2...] | supprime un dossier vide| <|> ... => suggestions : ['…']

156 Mot inconnu : cat => | cat fichier | affiche le contenu du fichier à l'écran en ASCII | <|> cat

158 Mot inconnu : less => | less fichier | comme more, mais on peut utiliser la touche Page Précédente. Pas disponible sur tous les systèmes. | <|> less

159 Mot inconnu : vi => | vi fichier | éditer un fichier avec l'éditeur vi. Tous les systèmes Unix ont un éditeur //à la// vi. | <|> vi
159 Mot inconnu : vi => | vi fichier | éditer un fichier avec l'éditeur vi. Tous les systèmes Unix ont un éditeur //à la// vi. | <|> vi
159 Mot inconnu : vi => | vi fichier | éditer un fichier avec l'éditeur vi. Tous les systèmes Unix ont un éditeur //à la// vi. | <|> vi

160 Mot inconnu : emacs => | emacs fichier | éditer un fichier avec l'éditeur emacs. Pas disponible sur tous les systèmes. | <|> emacs
160 Mot inconnu : emacs => | emacs fichier | éditer un fichier avec l'éditeur emacs. Pas disponible sur tous les systèmes. | <|> emacs

161 Mot inconnu : head => | head fichier | affiche par défaut les 10 premières lignes d'un fichier | <|> head

162 Mot inconnu : head => | head -n{N} fichier | affiche les N premières lignes d'un fichier | <|> head
162 Il manque un espace à côté du tiret. => | head -n{N} fichier | affiche les N premières lignes d'un fichier | <|>  - => suggestions : [' – ', ' — ']
162 Accord de genre erroné entre « N » et « premières ». => | head -n{N} fichier | affiche les N premières lignes d'un fichier | <|> premières => suggestions : ['premiers']

163 Mot inconnu : tail => | tail fichier | affiche par défaut les 10 dernières lignes d'un fichier | <|> tail

164 Mot inconnu : tail => | tail -n{N} fichier | affiche les N dernières lignes d'un fichier | <|> tail
164 Il manque un espace à côté du tiret. => | tail -n{N} fichier | affiche les N dernières lignes d'un fichier | <|>  - => suggestions : [' – ', ' — ']
164 Accord de genre erroné entre « N » et « dernières ». => | tail -n{N} fichier | affiche les N dernières lignes d'un fichier | <|> dernières => suggestions : ['derniers']

184 Guillemets typographiques ouvrants. => Vous pouvez apprendre au shell à 'mémoriser' des informations pour utilisation ultérieure grâce aux variables d'environnement. <|> ' => suggestions : ['“', '‘', '‹']
184 Guillemets typographiques fermants. => Vous pouvez apprendre au shell à 'mémoriser' des informations pour utilisation ultérieure grâce aux variables d'environnement. <|> ' => suggestions : ['”', '’', '›']

189 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => définit la variable CASROOT avec la valeur /usr/local/CAS3.0. <|> définit => suggestions : ['définis']
189 Mot inconnu : CASROOT => définit la variable CASROOT avec la valeur /usr/local/CAS3.0. <|> casroot

193 Mot inconnu : CASROOT => change le répertoire de travail courant pour CASROOT. <|> casroot

197 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => définit la variable LD_LIBRARY_PATH qui prendra la valeur CASROOT avec /Linux/lib ajouté à la fin, c'est-à-dire /usr/local/CAS3.0/Linux/lib. <|> définit => suggestions : ['définis']
197 Mot inconnu : LD_LIBRARY_PATH => définit la variable LD_LIBRARY_PATH qui prendra la valeur CASROOT avec /Linux/lib ajouté à la fin, c'est-à-dire /usr/local/CAS3.0/Linux/lib. <|> ld_library_path
197 Mot inconnu : CASROOT => définit la variable LD_LIBRARY_PATH qui prendra la valeur CASROOT avec /Linux/lib ajouté à la fin, c'est-à-dire /usr/local/CAS3.0/Linux/lib. <|> casroot

205 Mot inconnu : CASROOT => affiche la valeur de la variable d'environnement nommée CASROOT : ///usr/local/CAS3.0.// <|> casroot
214 Mot inconnu : tcsh => Une fonctionnalité de bash et tcsh (et parfois d'autres) est de pouvoir utiliser la touche "flèche vers le haut" pour accéder aux dernières commandes entrées, les éditer, et les re-exécuter. <|> tcsh
214 Guillemets typographiques ouvrants. => Une fonctionnalité de bash et tcsh (et parfois d'autres) est de pouvoir utiliser la touche "flèche vers le haut" pour accéder aux dernières commandes entrées, les éditer, et les re-exécuter. <|> " => suggestions : ['«\xa0', '“']
214 Guillemets typographiques fermants. => Une fonctionnalité de bash et tcsh (et parfois d'autres) est de pouvoir utiliser la touche "flèche vers le haut" pour accéder aux dernières commandes entrées, les éditer, et les re-exécuter. <|> " => suggestions : ['\xa0»', '”']
221 Mot inconnu : tcsh => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> tcsh
221 Mot inconnu : TAB => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> tab
221 Mot inconnu : constantine-monks-and-willy-wonka => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> constantine-monks-and-willy-wonka
221 Mot inconnu : txt => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> txt
221 Guillemets typographiques ouvrants. => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> ' => suggestions : ['“', '‘', '‹']
221 Mot inconnu : vi => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> vi
221 Mot inconnu : const => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> const
221 Mot inconnu : TAB => Une des fonctionnalités de bash et tcsh (et probablement d'autres) est de pouvoir utiliser la touche TAB pour compléter un nom de fichier tapé partiellement. Par exemple, si vous avez un fichier nommé constantine-monks-and-willy-wonka.txt dans votre répertoire et si vous voulez l'éditer, vous pouvez taper 'vi const', enfoncer la touche TAB, et le shell va remplir le reste du nom pour vous (à condition qu'il soit unique). <|> tab

222 Mot inconnu : ksh => Dans ksh (kornshell), cette complétion se fait en appuyant 2 fois sur la touche Echap. <|> ksh
222 Mot inconnu : kornshell => Dans ksh (kornshell), cette complétion se fait en appuyant 2 fois sur la touche Echap. <|> kornshell
222 Mot inconnu : Echap => Dans ksh (kornshell), cette complétion se fait en appuyant 2 fois sur la touche Echap. <|> echap

228 Mot inconnu : TAB => En cas de possibilités multiples de complétion, taper deux fois sur la touche TAB vous montrera toutes les complétions possibles. Bash est le shell par défaut de la plupart des systèmes Linux. <|> tab

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  ====== <|>   => suggestions : ['']

238 Guillemets typographiques ouvrants. => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> ' => suggestions : ['“', '‘', '‹']
238 Mot inconnu : grep => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> grep
238 Guillemets typographiques fermants. => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> ' => suggestions : ['”', '’', '›']
238 Mot inconnu : nouveau_fichier => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> nouveau_fichier
238 Mot inconnu : nouveau_fichier => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> nouveau_fichier
238 Mot inconnu : ecrasé => redirige la sortie de la commande précédente 'grep' dans un fichier nommé //nouveau_fichier//. //Si nouveau_fichier existe il sera remplacé/ecrasé// <|> ecrasé

241 Guillemets typographiques ouvrants. => ajoute la sortie de la commande 'grep' à la fin du fichier //fichier_existant//. <|> ' => suggestions : ['“', '‘', '‹']
241 Mot inconnu : grep => ajoute la sortie de la commande 'grep' à la fin du fichier //fichier_existant//. <|> grep
241 Guillemets typographiques fermants. => ajoute la sortie de la commande 'grep' à la fin du fichier //fichier_existant//. <|> ' => suggestions : ['”', '’', '›']
241 Mot inconnu : fichier_existant => ajoute la sortie de la commande 'grep' à la fin du fichier //fichier_existant//. <|> fichier_existant

245 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

249 Guillemets typographiques ouvrants. => Le symbole tube ("pipe") "|" est utilisé pour rediriger la sortie d'une commande vers une autre. <|> " => suggestions : ['«\xa0', '“']
249 Guillemets typographiques fermants. => Le symbole tube ("pipe") "|" est utilisé pour rediriger la sortie d'une commande vers une autre. <|> " => suggestions : ['\xa0»', '”']

255 Guillemets typographiques ouvrants. => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|> " => suggestions : ['«\xa0', '“']
255 Mot inconnu : ls => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|> ls
255 Il manque un espace à côté du tiret. => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|>  - => suggestions : [' – ', ' — ']
255 Guillemets typographiques fermants. => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|> " => suggestions : ['\xa0»', '”']
255 Guillemets typographiques ouvrants. => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|> " => suggestions : ['«\xa0', '“']
255 Guillemets typographiques fermants. => Cette commande prend la sortie du listage au format long des fichiers dans un répertoire produit par "ls -l" et la redirige vers la commande "more" (aussi appelé filtre). Dans ce cas, une très longue liste de fichier peut être vue page par page. <|> " => suggestions : ['\xa0»', '”']

269 Mot inconnu : ecran => va afficher à l'ecran (voir cat) le contenu de tous les fichiers nommés aaa.txt dans le dossier de travail courant ou ses sous-dossiers. <|> ecran
269 Mot inconnu : cat => va afficher à l'ecran (voir cat) le contenu de tous les fichiers nommés aaa.txt dans le dossier de travail courant ou ses sous-dossiers. <|> cat
269 Mot inconnu : aaa => va afficher à l'ecran (voir cat) le contenu de tous les fichiers nommés aaa.txt dans le dossier de travail courant ou ses sous-dossiers. <|> aaa
269 Mot inconnu : txt => va afficher à l'ecran (voir cat) le contenu de tous les fichiers nommés aaa.txt dans le dossier de travail courant ou ses sous-dossiers. <|> txt

270 Pas d’espace après ce signe. => <note>Cette syntaxe est dépassée, on lui préfère maintenant la notation $( expression ) </note> <|> (  => suggestions : ['(']
270 Pas d’espace avant ce signe. => <note>Cette syntaxe est dépassée, on lui préfère maintenant la notation $( expression ) </note> <|>  ) => suggestions : [')']
273 Mot inconnu : grep => === Rechercher une chaîne de caractères : La commande grep === <|> grep
280 Mot inconnu : find => === Rechercher des fichiers : La commande find === <|> find

284 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

288 Mot inconnu : aaa => cherche les fichiers nommés aaa.txt dans le dossier courant ou ses sous-dossiers. <|> aaa
288 Mot inconnu : txt => cherche les fichiers nommés aaa.txt dans le dossier courant ou ses sous-dossiers. <|> txt

292 Mot inconnu : vimrc => cherche les fichiers nommés vimrc depuis le dossier racine <|> vimrc

296 Mot inconnu : xpilot => cherche tous les fichiers dont le nom contient //xpilot// dans le dossier /usr/local/games  <|> xpilot
299 Mot inconnu : tar => ==== Créer des archives ('grappe de fichier') : La commande tar ==== <|> tar

302 Mot inconnu : tar => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> tar
302 Mot inconnu : ape => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ape
302 Mot inconnu : ar => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ar
302 Mot inconnu : chive => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> chive
302 Guillemets typographiques fermants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['”', '’', '›']
302 Guillemets typographiques ouvrants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['“', '‘', '‹']
302 Guillemets typographiques fermants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['”', '’', '›']
302 Guillemets typographiques ouvrants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['“', '‘', '‹']
302 Guillemets typographiques fermants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['”', '’', '›']
302 Mot inconnu : email => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> email
302 Erreur de numérisation ? Virgules au lieu de points ? => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ,... => suggestions : ['….']
302 Typographie : points de suspension. Utilisez le caractère dédié. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ... => suggestions : ['…']
302 Erreur de numérisation ? Virgules au lieu de points ? => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ,... => suggestions : ['….']
302 Typographie : points de suspension. Utilisez le caractère dédié. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ... => suggestions : ['…']
302 Guillemets typographiques ouvrants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['“', '‘', '‹']
302 Guillemets typographiques fermants. => La commande tar signifie '**t**ape **ar**chive' (archive sur bande). C'est la méthode 'standard' pour lire et écrire des archives. Le sens commun d'archives papier est ici dépassé et élargi : il s'agit simplement de regrouper plusieurs fichiers dans un 'pack' en un seul nouveau fichier, pour des raisons pratiques de transfert (une seule pièce jointe dans un email par exemple), de stockage (par thème, par année,...) ou de dépendances (installation d'une application, d'un système d'exploitation,...) par exemple. Il faut noter que les fichiers ainsi rassemblés restent 'indépendants' et ne se mélangent pas comme on pourrait le faire en fusionnant les données (avec un traitement de texte par exemple).  <|> ' => suggestions : ['”', '’', '›']

305 Mot inconnu : tar => Vous trouverez souvent des archives de fichiers avec des noms comme fichiers.tar, ou fichiers.tar.gz. Ce sont respectivement des fichiers dans une archive tar et des fichiers dans une archive tar qui a été compressée avec le programme de compression gzip. <|> tar
305 Mot inconnu : tar => Vous trouverez souvent des archives de fichiers avec des noms comme fichiers.tar, ou fichiers.tar.gz. Ce sont respectivement des fichiers dans une archive tar et des fichiers dans une archive tar qui a été compressée avec le programme de compression gzip. <|> tar
305 Mot inconnu : tar => Vous trouverez souvent des archives de fichiers avec des noms comme fichiers.tar, ou fichiers.tar.gz. Ce sont respectivement des fichiers dans une archive tar et des fichiers dans une archive tar qui a été compressée avec le programme de compression gzip. <|> tar
305 Mot inconnu : gzip => Vous trouverez souvent des archives de fichiers avec des noms comme fichiers.tar, ou fichiers.tar.gz. Ce sont respectivement des fichiers dans une archive tar et des fichiers dans une archive tar qui a été compressée avec le programme de compression gzip. <|> gzip

307 Mot inconnu : tar => Il est très probable, si quelqu'un vous envoie des fichiers, qu'ils soient compressés dans une archive tar. <|> tar

309 Mot inconnu : tar => De même, si vous devez envoyer des fichiers, vous devriez utiliser tar. <|> tar
320 Mot inconnu : gzip => ==== Compression de fichier : gzip, bzip2 ==== <|> gzip
320 Mot inconnu : bzip2 => ==== Compression de fichier : gzip, bzip2 ==== <|> bzip2

322 Mot inconnu : gzip => == gzip == <|> gzip

324 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|> gzip => suggestions : ['Gzip']
324 Mot inconnu : gzip => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|> gzip
324 Mot inconnu : decompression => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|> decompression
324 Mot inconnu : gzippés => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|> gzippés
324 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|>  . => suggestions : ['. ', '.']
324 Mot inconnu : gz => gzip est un outil GNU de compression et de decompression. L'extension pour les fichiers gzippés est .gz. <|> gz

326 Mot inconnu : gzip => | gzip fichier.txt | crée le fichier compressé fichier.txt.gz | <|> gzip
326 Mot inconnu : txt => | gzip fichier.txt | crée le fichier compressé fichier.txt.gz | <|> txt

327 Mot inconnu : gunzip => | gunzip fichier.txt.gz | extrait le fichier fichier.txt | <|> gunzip
327 Doublon. => | gunzip fichier.txt.gz | extrait le fichier fichier.txt | <|> fichier fichier => suggestions : ['fichier']
327 Mot inconnu : txt => | gunzip fichier.txt.gz | extrait le fichier fichier.txt | <|> txt

330 Mot inconnu : bzip2 => == bzip2 == <|> bzip2

332 Mot inconnu : bzip2 => L'utilitaire bzip2 offre (en général) un meilleur taux de compression que gzip, mais au coût d'un temps de compression et décompression plus élevé. <|> bzip2
332 Mot inconnu : gzip => L'utilitaire bzip2 offre (en général) un meilleur taux de compression que gzip, mais au coût d'un temps de compression et décompression plus élevé. <|> gzip

334 Mot inconnu : bzip2 => | bzip2 fichier.txt | crée le fichier fichier.txt.bz2 | <|> bzip2
334 Mot inconnu : txt => | bzip2 fichier.txt | crée le fichier fichier.txt.bz2 | <|> txt
334 Doublon. => | bzip2 fichier.txt | crée le fichier fichier.txt.bz2 | <|> fichier fichier => suggestions : ['fichier']

335 Mot inconnu : bunzip2 => | bunzip2 fichier.txt.bz2 | décompresse le fichier fichier.txt.bz2.  | <|> bunzip2
335 Doublon. => | bunzip2 fichier.txt.bz2 | décompresse le fichier fichier.txt.bz2.  | <|> fichier fichier => suggestions : ['fichier']
335 Espace(s) surnuméraire(s) à supprimer. => | bunzip2 fichier.txt.bz2 | décompresse le fichier fichier.txt.bz2.  | <|>    => suggestions : [' ']

341 Guillemets typographiques ouvrants. => La plupart des commandes ont une page de manuel qui donne une description de leurs utilisations plus ou moins détaillées, parfois utiles, parfois obscures. Certains disent qu'elles ont été appelées "man pages", parce qu'elles ne s'adressent qu'aux vrais Hommes. <|> " => suggestions : ['«\xa0', '“']
341 Guillemets typographiques fermants. => La plupart des commandes ont une page de manuel qui donne une description de leurs utilisations plus ou moins détaillées, parfois utiles, parfois obscures. Certains disent qu'elles ont été appelées "man pages", parce qu'elles ne s'adressent qu'aux vrais Hommes. <|> " => suggestions : ['\xa0»', '”']

345 Mot inconnu : ls => affiche la page de manuel pour la commande ls <|> ls

347 Accord de nombre erroné : « man » devrait être au pluriel. => Pour obtenir des man pages en français : <|> man => suggestions : ['mans']

351 Mot inconnu : Vi => ==== Commandes de base de l'éditeur Vi ==== <|> vi

430 Guillemets typographiques ouvrants. => Ces caractères, tout comme les autres caractères spéciaux, peuvent être 'échappés' à l'aide du \ : <|> ' => suggestions : ['“', '‘', '‹']
430 Guillemets typographiques fermants. => Ces caractères, tout comme les autres caractères spéciaux, peuvent être 'échappés' à l'aide du \ : <|> ' => suggestions : ['”', '’', '›']

431 Mot inconnu : STRIM100 => c'est-à-dire pour capturer la chaîne de caractères "/usr/STRIM100/SOFT", il faut utiliser l'expression régulière "\/usr\/STRIM100\/SOFT"  <|> strim100
431 Guillemets typographiques fermants. => c'est-à-dire pour capturer la chaîne de caractères "/usr/STRIM100/SOFT", il faut utiliser l'expression régulière "\/usr\/STRIM100\/SOFT"  <|> " => suggestions : ['\xa0»', '”']

439 Guillemets typographiques ouvrants. => Remplace 'chien' par 'chat', pour chaque occurrence du fichier - de la ligne 1 à la fin du fichier ($) <|> ' => suggestions : ['“', '‘', '‹']
439 Guillemets typographiques fermants. => Remplace 'chien' par 'chat', pour chaque occurrence du fichier - de la ligne 1 à la fin du fichier ($) <|> ' => suggestions : ['”', '’', '›']
439 Guillemets typographiques ouvrants. => Remplace 'chien' par 'chat', pour chaque occurrence du fichier - de la ligne 1 à la fin du fichier ($) <|> ' => suggestions : ['“', '‘', '‹']
439 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Remplace 'chien' par 'chat', pour chaque occurrence du fichier - de la ligne 1 à la fin du fichier ($) <|>  -  => suggestions : [' – ', ' — ', ' − ']

443 Guillemets typographiques ouvrants. => Remplace 'chien' par 'chat' des lignes 23 à 25. Une fois par ligne, dès la première apparition. <|> ' => suggestions : ['“', '‘', '‹']
443 Guillemets typographiques fermants. => Remplace 'chien' par 'chat' des lignes 23 à 25. Une fois par ligne, dès la première apparition. <|> ' => suggestions : ['”', '’', '›']
443 Guillemets typographiques ouvrants. => Remplace 'chien' par 'chat' des lignes 23 à 25. Une fois par ligne, dès la première apparition. <|> ' => suggestions : ['“', '‘', '‹']
443 Guillemets typographiques fermants. => Remplace 'chien' par 'chat' des lignes 23 à 25. Une fois par ligne, dès la première apparition. <|> ' => suggestions : ['”', '’', '›']

450 Espace(s) surnuméraire(s) à supprimer. => Appuyer sur  <ECHAP> pour sortir du mode édition <|>    => suggestions : [' ']

470 Mot inconnu : FAQs => ===== FAQs ===== <|> faqs
479 Mot inconnu : vi => Le document original a été rédigé à l'aide de Vim. Vim est la meilleure version du seul véritable éditeur de texte : vi (sans compter emacs, bien entendu ;-) ) <|> vi
479 Mot inconnu : emacs => Le document original a été rédigé à l'aide de Vim. Vim est la meilleure version du seul véritable éditeur de texte : vi (sans compter emacs, bien entendu ;-) ) <|> emacs
479 Pas d’espace avant ce signe. => Le document original a été rédigé à l'aide de Vim. Vim est la meilleure version du seul véritable éditeur de texte : vi (sans compter emacs, bien entendu ;-) ) <|>  ) => suggestions : [')']

481 Formatage des grands nombres. => Copyright (c)  2000,2001  C R Johnson <|> 2000 => suggestions : ['2\xa0000']
481 Espace(s) surnuméraire(s) à supprimer. => Copyright (c)  2000,2001  C R Johnson <|>    => suggestions : [' ']

482 Mot inconnu : License => Permission vous est donnée de copier, distribuer et/ou modifier ces documents selon les termes de la Licence GNU Free Documentation License, Version 1.1 ou ultérieure publiée par la Free Software Foundation ;  avec comme la préface section invariante, pas de couverture ni quatrième de couverture. Consultez la GNU Free Documentation License : [[http://www.gnu.org/licenses/fdl.html|GFDL]]. <|> license
482 Mot inconnu : Foundation => Permission vous est donnée de copier, distribuer et/ou modifier ces documents selon les termes de la Licence GNU Free Documentation License, Version 1.1 ou ultérieure publiée par la Free Software Foundation ;  avec comme la préface section invariante, pas de couverture ni quatrième de couverture. Consultez la GNU Free Documentation License : [[http://www.gnu.org/licenses/fdl.html|GFDL]]. <|> foundation
482 Espace(s) surnuméraire(s) à supprimer. => Permission vous est donnée de copier, distribuer et/ou modifier ces documents selon les termes de la Licence GNU Free Documentation License, Version 1.1 ou ultérieure publiée par la Free Software Foundation ;  avec comme la préface section invariante, pas de couverture ni quatrième de couverture. Consultez la GNU Free Documentation License : [[http://www.gnu.org/licenses/fdl.html|GFDL]]. <|>    => suggestions : [' ']
482 Mot inconnu : License => Permission vous est donnée de copier, distribuer et/ou modifier ces documents selon les termes de la Licence GNU Free Documentation License, Version 1.1 ou ultérieure publiée par la Free Software Foundation ;  avec comme la préface section invariante, pas de couverture ni quatrième de couverture. Consultez la GNU Free Documentation License : [[http://www.gnu.org/licenses/fdl.html|GFDL]]. <|> license
