
4 Accord avec la forme verbale “est” : “risquées” devrait être au singulier. => <note important>Cette documentation est obsolète et contient des manipulations inutiles est risquées (modifications du fichier apache2.conf notamment).</note> <|> risquées => suggestions : ['risquée']
4 Mot inconnu : apache2 => <note important>Cette documentation est obsolète et contient des manipulations inutiles est risquées (modifications du fichier apache2.conf notamment).</note> <|> apache2
4 Il manque un espace. => <note important>Cette documentation est obsolète et contient des manipulations inutiles est risquées (modifications du fichier apache2.conf notamment).</note> <|> conf => suggestions : [' conf']

5 Mot inconnu : Symfony => ====== Démarrer un projet Web avec Symfony ====== <|> symfony

6 Espace(s) surnuméraire(s) à supprimer. => <note important>Avoir une la mis à jour PHP  ou au moins 7.2 v</note> <|>    => suggestions : [' ']

10 Mot inconnu : Symfony => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> symfony
10 Guillemets typographiques ouvrants. => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> " => suggestions : ['«\xa0', '“']
10 Guillemets typographiques fermants. => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> " => suggestions : ['\xa0»', '”']
10 Confusion probable : “à” est une préposition. Pour le verbe avoir, écrivez “a”. => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> à => suggestions : ['a']
10 Mot inconnu : Symfony => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> symfony
10 Mot inconnu : MySQL => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> mysql
10 Mot inconnu : MVC => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> mvc
10 Mot inconnu : html => J'aurais bien aimé trouver l’équivalent du présent tutoriel (en français pour l'installation et la production d'un premier site Web avec Symfony) lors de mes premières recherches de "framework" il y à quatre mois, ou à mes débuts avec Symfony, il y a une semaine ! Je suis nouveau en ce domaine, vous le comprendrez ! Avec Apache, MySQL, PHP, framework MVC et compagnie, ça fait de gros morceaux à avaler pour moi, mais pas pour ce qui touche à la programmation-objet et en html ! <|> html

12 Mot inconnu : Projet01 => Comme je souhaitais produire un modèle générique de base pour mes propres besoins éventuels, j'ai adapté les exemples du tutoriel pour un projet générique que je nomme Projet01. Cela m'a poussé à toujours bien comprendre les étapes, procédures et commandes, pour que le tout soit cohérent et bien sûr fonctionnel pour mes futurs projets. Je ne suis pas certain d'avoir tout bien réussi, mais pour moi cela est suffisamment potable pour être mise en ligne. Cette expérience sera probablement utile à d'autres. C'est ce que je souhaite ! <|> projet01
12 Pléonasme. => Comme je souhaitais produire un modèle générique de base pour mes propres besoins éventuels, j'ai adapté les exemples du tutoriel pour un projet générique que je nomme Projet01. Cela m'a poussé à toujours bien comprendre les étapes, procédures et commandes, pour que le tout soit cohérent et bien sûr fonctionnel pour mes futurs projets. Je ne suis pas certain d'avoir tout bien réussi, mais pour moi cela est suffisamment potable pour être mise en ligne. Cette expérience sera probablement utile à d'autres. C'est ce que je souhaite ! <|> futurs projets => suggestions : ['projets']
14 Espace(s) en fin de ligne à supprimer. => Bon concert !  <|>   => suggestions : ['']

19 Mot inconnu : Symfony => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> symfony
19 Mot inconnu : MySQL => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> mysql
19 Mot inconnu : PhpMyAdmin => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> phpmyadmin
19 Guillemets typographiques ouvrants. => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> " => suggestions : ['«\xa0', '“']
19 Guillemets typographiques fermants. => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> " => suggestions : ['\xa0»', '”']
19 Mot inconnu : Symfony => Dans ce document, on retrouve toutes les étapes à suivre pour amorcer un nouveau projet Symfony 1.2.8 sous Linux Kubuntu 9.04, incluant une première installation. Cela implique l'installation d'un serveur Apache, d'un système de gestion de base de données MySQL, du langage de programmation PHP, de l'administration avec PhpMyAdmin et l'outil de développement "framework" Symfony. <|> symfony

21 Mot inconnu : Xfce => Si vous êtes sous Gnome ou Xfce, au lieu de KDE, la principale et peut-être la seule différence pour vous se trouve au niveau de l'éditeur de texte brut Kate que j'utilise dans les commandes d'édition à partir du terminal (console). <|> xfce
21 Mot inconnu : KDE => Si vous êtes sous Gnome ou Xfce, au lieu de KDE, la principale et peut-être la seule différence pour vous se trouve au niveau de l'éditeur de texte brut Kate que j'utilise dans les commandes d'édition à partir du terminal (console). <|> kde

23 Mot inconnu : MySQL => Si Apache, MySQL, PHP, PhpMyAdmin et Symfony sont déjà installés et configurés, sauter la section "Première installation" et passer à la section "[[#installer_un_nouveau_projet|Installer un nouveau projet]]". <|> mysql
23 Mot inconnu : PhpMyAdmin => Si Apache, MySQL, PHP, PhpMyAdmin et Symfony sont déjà installés et configurés, sauter la section "Première installation" et passer à la section "[[#installer_un_nouveau_projet|Installer un nouveau projet]]". <|> phpmyadmin
23 Mot inconnu : Symfony => Si Apache, MySQL, PHP, PhpMyAdmin et Symfony sont déjà installés et configurés, sauter la section "Première installation" et passer à la section "[[#installer_un_nouveau_projet|Installer un nouveau projet]]". <|> symfony
23 Guillemets typographiques ouvrants. => Si Apache, MySQL, PHP, PhpMyAdmin et Symfony sont déjà installés et configurés, sauter la section "Première installation" et passer à la section "[[#installer_un_nouveau_projet|Installer un nouveau projet]]". <|> " => suggestions : ['«\xa0', '“']
23 Guillemets typographiques fermants. => Si Apache, MySQL, PHP, PhpMyAdmin et Symfony sont déjà installés et configurés, sauter la section "Première installation" et passer à la section "[[#installer_un_nouveau_projet|Installer un nouveau projet]]". <|> " => suggestions : ['\xa0»', '”']

39 Guillemets typographiques ouvrants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard. <|> " => suggestions : ['«\xa0', '“']
39 Guillemets typographiques fermants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard. <|> " => suggestions : ['\xa0»', '”']

41 Guillemets typographiques ouvrants. => Pour activer le mode en lecture et écriture "mod_rewrite" d'Apache : <|> " => suggestions : ['«\xa0', '“']
41 Mot inconnu : mod_rewrite => Pour activer le mode en lecture et écriture "mod_rewrite" d'Apache : <|> mod_rewrite
41 Guillemets typographiques fermants. => Pour activer le mode en lecture et écriture "mod_rewrite" d'Apache : <|> " => suggestions : ['\xa0»', '”']

45 Mot inconnu : MySQL => ==== Installer MySQL ==== <|> mysql

49 Mot inconnu : root => À la fin de l'installation, une fenêtre vous demande de choisir le mot de passe pour l'utilisateur root de MySQL. <|> root
49 Mot inconnu : MySQL => À la fin de l'installation, une fenêtre vous demande de choisir le mot de passe pour l'utilisateur root de MySQL. <|> mysql

51 Guillemets typographiques ouvrants. => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> " => suggestions : ['«\xa0', '“']
51 Mot inconnu : MySQL => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> mysql
51 Mot inconnu : Root => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> root
51 Guillemets typographiques fermants. => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> " => suggestions : ['\xa0»', '”']
51 Guillemets typographiques ouvrants. => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> " => suggestions : ['«\xa0', '“']
51 Guillemets typographiques fermants. => Entrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" et valider par la touche "Entrer". <|> " => suggestions : ['\xa0»', '”']

53 Guillemets typographiques ouvrants. => Enregistrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" pour le retrouver au besoin. <|> " => suggestions : ['«\xa0', '“']
53 Mot inconnu : MySQL => Enregistrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" pour le retrouver au besoin. <|> mysql
53 Mot inconnu : Root => Enregistrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" pour le retrouver au besoin. <|> root
53 Guillemets typographiques fermants. => Enregistrer ce nouveau mot de passe pour ce nouveau compte "MySQL Root" pour le retrouver au besoin. <|> " => suggestions : ['\xa0»', '”']

55 Confusion probable. Dans cette locution, il faut employer “ce”. => Si cela n'est pas déjà dans votre habitude, je vous recommande d'enregistrer tous vos mots de passe dans un fichier Writer d'OpenOffice et d'enregistrer ce fichier avec un mot de passe. Pour se faire, dans OpenOffice, menu Fichier -> Enregistrer sous..., cocher la boîte "Enregistrer avec mot de passe". <|> se => suggestions : ['ce']
55 Typographie : points de suspension. Utilisez le caractère dédié. => Si cela n'est pas déjà dans votre habitude, je vous recommande d'enregistrer tous vos mots de passe dans un fichier Writer d'OpenOffice et d'enregistrer ce fichier avec un mot de passe. Pour se faire, dans OpenOffice, menu Fichier -> Enregistrer sous..., cocher la boîte "Enregistrer avec mot de passe". <|> ... => suggestions : ['…']
55 Guillemets typographiques ouvrants. => Si cela n'est pas déjà dans votre habitude, je vous recommande d'enregistrer tous vos mots de passe dans un fichier Writer d'OpenOffice et d'enregistrer ce fichier avec un mot de passe. Pour se faire, dans OpenOffice, menu Fichier -> Enregistrer sous..., cocher la boîte "Enregistrer avec mot de passe". <|> " => suggestions : ['«\xa0', '“']
55 Guillemets typographiques fermants. => Si cela n'est pas déjà dans votre habitude, je vous recommande d'enregistrer tous vos mots de passe dans un fichier Writer d'OpenOffice et d'enregistrer ce fichier avec un mot de passe. Pour se faire, dans OpenOffice, menu Fichier -> Enregistrer sous..., cocher la boîte "Enregistrer avec mot de passe". <|> " => suggestions : ['\xa0»', '”']

57 Guillemets typographiques ouvrants. => Par exemple, pour le mot de passe de "MySQL Root", j'ai les lignes suivantes dans mon fichier <|> " => suggestions : ['«\xa0', '“']
57 Mot inconnu : MySQL => Par exemple, pour le mot de passe de "MySQL Root", j'ai les lignes suivantes dans mon fichier <|> mysql
57 Mot inconnu : Root => Par exemple, pour le mot de passe de "MySQL Root", j'ai les lignes suivantes dans mon fichier <|> root
57 Guillemets typographiques fermants. => Par exemple, pour le mot de passe de "MySQL Root", j'ai les lignes suivantes dans mon fichier <|> " => suggestions : ['\xa0»', '”']

67 Mot inconnu : apache2 => Éditer le fichier apache2.conf pour y ajouter le nom (adresse) du serveur : <|> apache2
67 Il manque un espace. => Éditer le fichier apache2.conf pour y ajouter le nom (adresse) du serveur : <|> conf => suggestions : [' conf']

77 Mot inconnu : apache2 => Pour que ce changement soit pris en compte, il faut recharger le serveur apache2 avec la commande suivante dans un terminal : <|> apache2

81 Mot inconnu : PHP5 => ==== Vérification du bon fonctionnement de PHP5 ==== <|> php5

83 Guillemets typographiques ouvrants. => Nous allons créer un programme PHP, le fichier "phpinfo.php" nous sera très utile pour nous renseigner sur l'installation et la configuration de PHP. Il est très simple, mais permettra de savoir du coût si PHP est correctement installé et fonctionnel. <|> " => suggestions : ['«\xa0', '“']
83 Mot inconnu : phpinfo => Nous allons créer un programme PHP, le fichier "phpinfo.php" nous sera très utile pour nous renseigner sur l'installation et la configuration de PHP. Il est très simple, mais permettra de savoir du coût si PHP est correctement installé et fonctionnel. <|> phpinfo
83 Mot inconnu : php => Nous allons créer un programme PHP, le fichier "phpinfo.php" nous sera très utile pour nous renseigner sur l'installation et la configuration de PHP. Il est très simple, mais permettra de savoir du coût si PHP est correctement installé et fonctionnel. <|> php
83 Guillemets typographiques fermants. => Nous allons créer un programme PHP, le fichier "phpinfo.php" nous sera très utile pour nous renseigner sur l'installation et la configuration de PHP. Il est très simple, mais permettra de savoir du coût si PHP est correctement installé et fonctionnel. <|> " => suggestions : ['\xa0»', '”']

95 Mot inconnu : apache2 => Rééditer le fichier apache2.conf : <|> apache2
95 Il manque un espace. => Rééditer le fichier apache2.conf : <|> conf => suggestions : [' conf']

104 Mot inconnu : apache2 => Recharger le serveur apache2 : <|> apache2

108 Guillemets typographiques ouvrants. => Une fois le fichier "phpinfo.php" créé et enregistré, il apparaitre sur la page d'index de votre serveur. Entrez son adresse Web suivante dans votre navigateur préféré : <|> " => suggestions : ['«\xa0', '“']
108 Mot inconnu : phpinfo => Une fois le fichier "phpinfo.php" créé et enregistré, il apparaitre sur la page d'index de votre serveur. Entrez son adresse Web suivante dans votre navigateur préféré : <|> phpinfo
108 Mot inconnu : php => Une fois le fichier "phpinfo.php" créé et enregistré, il apparaitre sur la page d'index de votre serveur. Entrez son adresse Web suivante dans votre navigateur préféré : <|> php
108 Guillemets typographiques fermants. => Une fois le fichier "phpinfo.php" créé et enregistré, il apparaitre sur la page d'index de votre serveur. Entrez son adresse Web suivante dans votre navigateur préféré : <|> " => suggestions : ['\xa0»', '”']
108 Conjugaison erronée. Accord avec “il”. Le verbe devrait être à la 3ᵉ personne du singulier. => Une fois le fichier "phpinfo.php" créé et enregistré, il apparaitre sur la page d'index de votre serveur. Entrez son adresse Web suivante dans votre navigateur préféré : <|> apparaitre => suggestions : ['apparut', 'apparait', 'apparaissait']

112 Guillemets typographiques ouvrants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['«\xa0', '“']
112 Guillemets typographiques fermants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['\xa0»', '”']

114 Mot inconnu : MySQL => ==== Sécurisation de MySQL ==== <|> mysql

116 Mot inconnu : MySQL => Pour l'instant, on peut accéder aux bases de données MySQL avec le compte "root" et sans mot de passe, ce qui n'est pas très prudent et sécuritaire. Nous allons donc sécuriser un peu le serveur. <|> mysql
116 Guillemets typographiques ouvrants. => Pour l'instant, on peut accéder aux bases de données MySQL avec le compte "root" et sans mot de passe, ce qui n'est pas très prudent et sécuritaire. Nous allons donc sécuriser un peu le serveur. <|> " => suggestions : ['«\xa0', '“']
116 Mot inconnu : root => Pour l'instant, on peut accéder aux bases de données MySQL avec le compte "root" et sans mot de passe, ce qui n'est pas très prudent et sécuritaire. Nous allons donc sécuriser un peu le serveur. <|> root
116 Guillemets typographiques fermants. => Pour l'instant, on peut accéder aux bases de données MySQL avec le compte "root" et sans mot de passe, ce qui n'est pas très prudent et sécuritaire. Nous allons donc sécuriser un peu le serveur. <|> " => suggestions : ['\xa0»', '”']

124 Mot inconnu : MySQL => lancer MySQL avant de faire ces manipulations avec la commande suivante dans un terminal : <|> mysql

128 Accord de genre erroné : « scripte » est féminin. => Exécutons le scripte de sécurisation avec la commande suivante dans un terminal : <|> le => suggestions : ['la']
128 Accord de genre erroné : « le » est un déterminant masculin. => Exécutons le scripte de sécurisation avec la commande suivante dans un terminal : <|> scripte => suggestions : ['scripté', 'script']

138 Mot inconnu : MySQL => Il faut un mot de passe pour bien exécuter le script. Le mot de passe demandé précédemment en fin d'installation de MySQL est ce mot de passe root, il faut donc entrer celui-ci. <|> mysql
138 Mot inconnu : root => Il faut un mot de passe pour bien exécuter le script. Le mot de passe demandé précédemment en fin d'installation de MySQL est ce mot de passe root, il faut donc entrer celui-ci. <|> root

140 Guillemets typographiques ouvrants. => Validez votre entrée avec la touche "Entrée". <|> " => suggestions : ['«\xa0', '“']
140 Guillemets typographiques fermants. => Validez votre entrée avec la touche "Entrée". <|> " => suggestions : ['\xa0»', '”']

149 Guillemets typographiques ouvrants. => Appuyez sur la touche "Entrée" pour entrer un mot de passe. <|> " => suggestions : ['«\xa0', '“']
149 Guillemets typographiques fermants. => Appuyez sur la touche "Entrée" pour entrer un mot de passe. <|> " => suggestions : ['\xa0»', '”']

153 Guillemets typographiques ouvrants. => Entrez le mot de passe de votre choix et validez par la touche "Entrée". <|> " => suggestions : ['«\xa0', '“']
153 Guillemets typographiques fermants. => Entrez le mot de passe de votre choix et validez par la touche "Entrée". <|> " => suggestions : ['\xa0»', '”']

176 Guillemets typographiques ouvrants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['«\xa0', '“']
176 Guillemets typographiques fermants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['\xa0»', '”']
176 Guillemets typographiques ouvrants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['«\xa0', '“']
176 Mot inconnu : root => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> root
176 Guillemets typographiques fermants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['\xa0»', '”']
176 Guillemets typographiques ouvrants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['«\xa0', '“']
176 Guillemets typographiques fermants. => Vous n'avez pas besoin d'administrer votre base de données à distance pour le moment, ce qui devrait être le cas de la plupart des utilisateurs. Validez par la touche "Entrée". Ainsi, l'utilisateur "root" ne pourra se connecter qu'en local. Sinon tapez la touche "n". <|> " => suggestions : ['\xa0»', '”']

182 Guillemets typographiques ouvrants. => Validez par la touche "Entrée" pour supprimer la base de données de test créée lors de l'installation. <|> " => suggestions : ['«\xa0', '“']
182 Guillemets typographiques fermants. => Validez par la touche "Entrée" pour supprimer la base de données de test créée lors de l'installation. <|> " => suggestions : ['\xa0»', '”']

192 Guillemets typographiques ouvrants. => Validez par la touche "Entrée" pour prendre en compte les changements que vous venez de faire et les appliquer immédiatement. <|> " => suggestions : ['«\xa0', '“']
192 Guillemets typographiques fermants. => Validez par la touche "Entrée" pour prendre en compte les changements que vous venez de faire et les appliquer immédiatement. <|> " => suggestions : ['\xa0»', '”']

194 Mot inconnu : PhpMyAdmin => ==== Installer PhpMyAdmin ==== <|> phpmyadmin
196 Mot inconnu : PhpMyAdmin => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> phpmyadmin
196 Guillemets typographiques ouvrants. => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> " => suggestions : ['«\xa0', '“']
196 Mot inconnu : apache2 => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> apache2
196 Guillemets typographiques fermants. => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> " => suggestions : ['\xa0»', '”']
196 Accord de genre erroné : « sélectionné » est masculin. => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> la => suggestions : ['le']
196 Accord de genre erroné : « la » est un déterminant féminin. => ATTENTION : Pendant l'installation de PhpMyAdmin, il vous sera demandé de choisir le serveur Web à configurer. Choisissez avec les touches Flèche vers le haut et Flèche vers le bas la ligne "apache2" et appuyant sur la barre d'espacement la sélectionné cette entrée. <|> sélectionné => suggestions : ['sélectionnée']

200 Mot inconnu : PhpMyAdmin => Pour vérifier le bon fonctionnement de PhpMyAdmin, rendez-vous à l'URL : <|> phpmyadmin

204 Mot inconnu : not => si vous tombez sur une page (not found), Tapez la command <|> not
204 Mot inconnu : found => si vous tombez sur une page (not found), Tapez la command <|> found
204 Mot inconnu : command => si vous tombez sur une page (not found), Tapez la command <|> command

208 Espace(s) en fin de ligne à supprimer. => et ajoutez à la fin un nouveau ligne  <|>   => suggestions : ['']

209 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

213 Mot inconnu : PhpMyAdmin => Vous arriverez alors sur la page d'authentification de PhpMyAdmin. Entrez alors votre non de compte qui est <|> phpmyadmin

217 Mot inconnu : MySQL => et le mot de passe choisi lors de la sécurisation de MySQL <|> mysql
219 Mot inconnu : dupont => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> dupont
219 Mot inconnu : dupont => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> dupont
219 Guillemets typographiques ouvrants. => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> " => suggestions : ['«\xa0', '“']
219 Mot inconnu : root => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> root
219 Guillemets typographiques fermants. => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> " => suggestions : ['\xa0»', '”']
219 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|>  -  => suggestions : [' – ', ' — ', ' − ']
219 Mot inconnu : Access => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> access
219 Mot inconnu : denied => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> denied
219 Guillemets typographiques ouvrants. => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> ' => suggestions : ['“', '‘', '‹']
219 Mot inconnu : root => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> root
219 Mot inconnu : localhost => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> localhost
219 Guillemets typographiques fermants. => Remarque : si votre compte est dupont ne pas mettre dupont comme utilisateur, mais "root" puis le mot de passe sinon vous risquez d'avoir l'erreur #1045 - Access denied for user 'root'@'localhost' en tentant d'accéder à vos bases de données. <|> ' => suggestions : ['”', '’', '›']

221 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Si tout s'est bien passé, vous devriez être connecté à PhpMyAdmin et pouvoir créer et gérer vos bases de données. <|> -  => suggestions : ['—\xa0', '–\xa0']
221 Mot inconnu : PhpMyAdmin => - Si tout s'est bien passé, vous devriez être connecté à PhpMyAdmin et pouvoir créer et gérer vos bases de données. <|> phpmyadmin

222 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|> -  => suggestions : ['—\xa0', '–\xa0']
222 Mot inconnu : PhpMyAdmin => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|> phpmyadmin
222 Mot inconnu : MyPhpAdmin => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|> myphpadmin
222 Guillemets isolés. => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|>  "  => suggestions : [' «\xa0', '\xa0» ', ' “', '” ']
222 Mot inconnu : sudo => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|> sudo
222 Il manque un espace à côté du tiret. => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|>  - => suggestions : [' – ', ' — ']
222 Guillemets fermants. => - Si vous arrivez pas à vous connecter à PhpMyAdmin il faut créer un lien symbolique vers MyPhpAdmin, il faut juste faire la commande suivante: " sudo ln -s /usr/share/phpmyadmin /var/www/phpmyadmin " <|>  " => suggestions : ['\xa0»', '”']

223 Mot inconnu : MySQL => Il existe déjà deux bases de données, n'y touchez pas. Elles servent au bon fonctionnement de MySQL. <|> mysql

225 Guillemets typographiques ouvrants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['«\xa0', '“']
225 Guillemets typographiques fermants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['\xa0»', '”']

243 Guillemets typographiques ouvrants. => Le groupe utilisateur pour Apache est "www-data". <|> " => suggestions : ['«\xa0', '“']
243 Guillemets typographiques fermants. => Le groupe utilisateur pour Apache est "www-data". <|> " => suggestions : ['\xa0»', '”']

245 Guillemets typographiques ouvrants. => Pour accéder aux fichiers qu'il doit lire, Apache utilise donc en standard le droit "r", mais seul root peut modifier ces fichiers, ce qui n'est pas très pratique. Un ajustement de la politique des droits permet de faciliter l'utilisation de ce répertoire. <|> " => suggestions : ['«\xa0', '“']
245 Guillemets typographiques fermants. => Pour accéder aux fichiers qu'il doit lire, Apache utilise donc en standard le droit "r", mais seul root peut modifier ces fichiers, ce qui n'est pas très pratique. Un ajustement de la politique des droits permet de faciliter l'utilisation de ce répertoire. <|> " => suggestions : ['\xa0»', '”']
245 Mot inconnu : root => Pour accéder aux fichiers qu'il doit lire, Apache utilise donc en standard le droit "r", mais seul root peut modifier ces fichiers, ce qui n'est pas très pratique. Un ajustement de la politique des droits permet de faciliter l'utilisation de ce répertoire. <|> root

247 Guillemets typographiques ouvrants. => Il faut commencer par s'ajouter au groupe d'Apache, le groupe "www-data", alors dans un terminal, on exécute la commande suivante : <|> " => suggestions : ['«\xa0', '“']
247 Guillemets typographiques fermants. => Il faut commencer par s'ajouter au groupe d'Apache, le groupe "www-data", alors dans un terminal, on exécute la commande suivante : <|> " => suggestions : ['\xa0»', '”']

256 Mot inconnu : Dolpin => Il faut actualiser fermer et rouvrir votre gestionnaire de fichiers (Dolpin ou Konqueror) pour que cela soit pris en compte. <|> dolpin
256 Mot inconnu : Konqueror => Il faut actualiser fermer et rouvrir votre gestionnaire de fichiers (Dolpin ou Konqueror) pour que cela soit pris en compte. <|> konqueror

258 Mot inconnu : MySQL => Vous avez maintenant un serveur Apache gérant le PHP avec des bases de données MySQL. <|> mysql

260 Mot inconnu : Symfony => ==== Installer Symfony ==== <|> symfony

264 Mot inconnu : Symfony => Pour configurer Symfony avec PEAR, entrer les commandes : <|> symfony
264 Mot inconnu : PEAR => Pour configurer Symfony avec PEAR, entrer les commandes : <|> pear

274 Mot inconnu : comand => Tapez cette comand dans le terminal : <|> comand

278 Mot inconnu : Symfony => Nous avons un premier niveau d'aide pour Symfony avec la commande suivante : <|> symfony

282 Mot inconnu : Symfony => La commande suivante nous donne la version installée de Symfony : <|> symfony

286 Mot inconnu : Symfony => C'est tout ce qu'il faut pour Symfony ! <|> symfony

292 Guillemets typographiques ouvrants. => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> " => suggestions : ['«\xa0', '“']
292 Mot inconnu : projet01 => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> projet01
292 Guillemets typographiques fermants. => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> " => suggestions : ['\xa0»', '”']
292 Guillemets typographiques ouvrants. => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> " => suggestions : ['«\xa0', '“']
292 Mot inconnu : projet01 => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> projet01
292 Guillemets typographiques fermants. => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> " => suggestions : ['\xa0»', '”']
292 Guillemets typographiques ouvrants. => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> ' => suggestions : ['“', '‘', '‹']
292 Mot inconnu : projet01 => Pour notre exemple, nous créons le projet "projet01", dans le dossier "projet01" de votre dossier utilisateur principal (/home/votre_nom_d'utilisateur/projet01). <|> projet01

313 Mot inconnu : projet01 => Puis ajoutez à la fin de la ligne qui commence par "127.0.0.1", le nom de domaine de notre projet01 : <|> projet01

319 Guillemets typographiques ouvrants. => Créez un nouveau fichier "projet01" pour le serveur virtuel Apache avec la commande suivante dans un terminal : <|> " => suggestions : ['«\xa0', '“']
319 Mot inconnu : projet01 => Créez un nouveau fichier "projet01" pour le serveur virtuel Apache avec la commande suivante dans un terminal : <|> projet01
319 Guillemets typographiques fermants. => Créez un nouveau fichier "projet01" pour le serveur virtuel Apache avec la commande suivante dans un terminal : <|> " => suggestions : ['\xa0»', '”']

323 Guillemets typographiques ouvrants. => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> " => suggestions : ['«\xa0', '“']
323 Mot inconnu : rene => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> rene
323 Guillemets typographiques fermants. => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> " => suggestions : ['\xa0»', '”']
323 Mot inconnu : votre_nom_utilisateur => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> votre_nom_utilisateur
323 Mot inconnu : projet01 => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> projet01
323 Mot inconnu : votre_dossier_projet => Copiez-y les lignes suivantes en remplacent le mot "rene" par votre_nom_utilisateur et projet01 par votre_dossier_projet : <|> votre_dossier_projet

342 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

356 Guillemets typographiques ouvrants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['«\xa0', '“']
356 Guillemets typographiques fermants. => Je vous suggère d'ajouter cette adresse à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard ! <|> " => suggestions : ['\xa0»', '”']

360 Guillemets typographiques ouvrants. => Assurez-vous d'être à la racine du dossier "projet01" ! <|> " => suggestions : ['«\xa0', '“']
360 Mot inconnu : projet01 => Assurez-vous d'être à la racine du dossier "projet01" ! <|> projet01
360 Guillemets typographiques fermants. => Assurez-vous d'être à la racine du dossier "projet01" ! <|> " => suggestions : ['\xa0»', '”']

362 Mot inconnu : Symfony => Créons maintenant le canevas de base avec Symfony avec la commande suivante dans le terminal : <|> symfony

365 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   <|>   => suggestions : ['']

366 Mot inconnu : sudo => Si vous avez un message d'avertissement pensez à avoir les droits (sudo) car symfony ne dit toujours qu'il faut avoir les permissions <|> sudo
366 Mot inconnu : symfony => Si vous avez un message d'avertissement pensez à avoir les droits (sudo) car symfony ne dit toujours qu'il faut avoir les permissions <|> symfony

368 Mot inconnu : symfony => Cette commande génère la structure par défaut des répertoires et crée les fichiers nécessaires d'un projet symfony. <|> symfony

371 Mot inconnu : apps => | apps | Contient les applications du projet | <|> apps

374 Mot inconnu : lib => | lib | Les librairies et classes du projet | <|> lib
380 Mot inconnu : symfony => Pourquoi autant de fichiers ? Un des bénéfices est de standardiser les développements. Grâce à cette structure par défaut des fichiers et répertoires de symfony, n'importe quel développeur connaissant symfony peut reprendre n'importe quel projet. Il pourra naviguer dans le code, de fixer les bogues, et d'ajouter de nouvelles fonctionnalités, etc. <|> symfony
380 Mot inconnu : symfony => Pourquoi autant de fichiers ? Un des bénéfices est de standardiser les développements. Grâce à cette structure par défaut des fichiers et répertoires de symfony, n'importe quel développeur connaissant symfony peut reprendre n'importe quel projet. Il pourra naviguer dans le code, de fixer les bogues, et d'ajouter de nouvelles fonctionnalités, etc. <|> symfony

382 Mot inconnu : symfony => À la racine du projet, un raccourci la commande symfony y est pour faciliter l'écriture des commandes lorsque vous exécutez une tâche dans le terminal. Toutes les commandes symfony doivent maintenant être exécutées à partir du répertoire racine du projet, sauf indication contraire. <|> symfony
382 Mot inconnu : symfony => À la racine du projet, un raccourci la commande symfony y est pour faciliter l'écriture des commandes lorsque vous exécutez une tâche dans le terminal. Toutes les commandes symfony doivent maintenant être exécutées à partir du répertoire racine du projet, sauf indication contraire. <|> symfony

386 Forme interrogative ? Mettez un trait d’union. => D’abord assurez vous que vous situés sous le répertoire projet symfone, dans notre cas projet01 : <|> assurez vous => suggestions : ['assurez-vous']
386 Après “vous”, le verbe ne devrait pas être un participe passé. => D’abord assurez vous que vous situés sous le répertoire projet symfone, dans notre cas projet01 : <|> situés => suggestions : []
386 Mot inconnu : symfone => D’abord assurez vous que vous situés sous le répertoire projet symfone, dans notre cas projet01 : <|> symfone
386 Mot inconnu : projet01 => D’abord assurez vous que vous situés sous le répertoire projet symfone, dans notre cas projet01 : <|> projet01

390 Mot inconnu : frontend => Créons l'application frontend en exécutant la commande suivante : <|> frontend

393 Mot inconnu : apps => Cette commande crée la structure par défaut des répertoires de l'application dans le dossier apps/frontend. <|> apps
393 Mot inconnu : frontend => Cette commande crée la structure par défaut des répertoires de l'application dans le dossier apps/frontend. <|> frontend

397 Mot inconnu : lib => | lib | Les librairies et classes de l'application | <|> lib

398 Pas d’espace après ce signe. => | modules | Le code de l'application ( MVC ) | <|> (  => suggestions : ['(']
398 Mot inconnu : MVC => | modules | Le code de l'application ( MVC ) | <|> mvc
398 Pas d’espace avant ce signe. => | modules | Le code de l'application ( MVC ) | <|>  ) => suggestions : [')']

399 Mot inconnu : templates => | templates | Les gabarits principaux | <|> templates

401 Mot inconnu : escaping-strategy => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> escaping-strategy
401 Guillemets typographiques fermants. => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> " => suggestions : ['\xa0»', '”']
401 Mot inconnu : XSS => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> xss
401 Mot inconnu : csrf-secret => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> csrf-secret
401 Guillemets typographiques fermants. => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> " => suggestions : ['\xa0»', '”']
401 Mot inconnu : CSRF => Avec cette commande nous avons passé deux paramètres en options pour la sécurité, "--escaping-strategy" pour activer les échappements pour prévenir des attaques XSS et "--csrf-secret" pour activer les jetons de sessions des formulaires pour prévenir des attaques CSRF. <|> csrf

403 Mot inconnu : Symfony => En passant ces deux options, nous avons sécurisé le développement des deux plus courantes vulnérabilités trouvées sur le web. Symfony va automatiquement prendre les mesures de sécurité pour nous. <|> symfony

405 Mot inconnu : symfony => Lors de la portabilité du projet sur hébergement sur le Web, nous changerons le chemin absolu de l'installation de symfony par un chemin relatif. <|> symfony

411 Ceci est un verbe à la 2ᵉ personne du pluriel. Sujet (“vous” ou équivalent) introuvable. => Remplacerez la ligne : <|> remplacerez => suggestions : ['Remplaceront']

415 Mot inconnu : Symfony => Par la ligne suivante qui est un chemin relatif si vous y copier le dossier de l'archive de Symfony dans le dossier /home/rene/projet01/lib/vendor : <|> symfony

421 Mot inconnu : oeil => Si vous jetez un oeil au répertoire web/, vous trouvez deux fichiers PHP, soit index.php et frontend_dev.php. Ces fichiers sont appelés front controllers. Toutes les requêtes vers l'application sont faites en passant par eux. <|> oeil
421 Mot inconnu : php => Si vous jetez un oeil au répertoire web/, vous trouvez deux fichiers PHP, soit index.php et frontend_dev.php. Ces fichiers sont appelés front controllers. Toutes les requêtes vers l'application sont faites en passant par eux. <|> php
421 Mot inconnu : frontend_dev => Si vous jetez un oeil au répertoire web/, vous trouvez deux fichiers PHP, soit index.php et frontend_dev.php. Ces fichiers sont appelés front controllers. Toutes les requêtes vers l'application sont faites en passant par eux. <|> frontend_dev
421 Mot inconnu : php => Si vous jetez un oeil au répertoire web/, vous trouvez deux fichiers PHP, soit index.php et frontend_dev.php. Ces fichiers sont appelés front controllers. Toutes les requêtes vers l'application sont faites en passant par eux. <|> php
421 Mot inconnu : controllers => Si vous jetez un oeil au répertoire web/, vous trouvez deux fichiers PHP, soit index.php et frontend_dev.php. Ces fichiers sont appelés front controllers. Toutes les requêtes vers l'application sont faites en passant par eux. <|> controllers

423 Accord de nombre erroné avec « deux » : « front » devrait être au pluriel. => Mais pourquoi avoir deux front controllers alors que nous n'avons qu'une seule application ? <|> front => suggestions : ['fronts']
423 Mot inconnu : controllers => Mais pourquoi avoir deux front controllers alors que nous n'avons qu'une seule application ? <|> controllers

427 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - L'environnement de développement. C'est l'environnement utilisé par le développeur pour ajouter de nouvelles fonctionnalités, fixer les bogues, etc. <|> -  => suggestions : ['—\xa0', '–\xa0']

429 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - L'environnement de tests. C'est l'environnement pour tester automatiquement l'application. <|> -  => suggestions : ['—\xa0', '–\xa0']

431 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - L'environnement de recette. C'est l'environnement utilisé par le client pour tester l'application et faire un retour sur les bogues. <|> -  => suggestions : ['—\xa0', '–\xa0']

433 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - L'environnement de production. C'est l'environnement utilisé par l'utilisateur final. <|> -  => suggestions : ['—\xa0', '–\xa0']

439 Mot inconnu : Symfony => Dans Symfony un environnement est un jeu unique de paramètres de configuration et Symfony est installé avec trois d'entre eux : dev, test, et prod. <|> symfony
439 Mot inconnu : Symfony => Dans Symfony un environnement est un jeu unique de paramètres de configuration et Symfony est installé avec trois d'entre eux : dev, test, et prod. <|> symfony
439 Mot inconnu : dev => Dans Symfony un environnement est un jeu unique de paramètres de configuration et Symfony est installé avec trois d'entre eux : dev, test, et prod. <|> dev

487 Mot inconnu : mysqladmin => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> mysqladmin
487 Mot inconnu : MySQLAdmin => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> mysqladmin
487 Guillemets typographiques ouvrants. => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> " => suggestions : ['«\xa0', '“']
487 Guillemets typographiques fermants. => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> " => suggestions : ['\xa0»', '”']
487 Mot inconnu : MySQLAdmin => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> mysqladmin
487 Guillemets typographiques ouvrants. => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> " => suggestions : ['«\xa0', '“']
487 Formatage des grands nombres. => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> 22222222 => suggestions : ['22\xa0222\xa0222']
487 Guillemets typographiques fermants. => Avec mysqladmin, nous créons la base de données avec la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> le commande sera : <|> " => suggestions : ['\xa0»', '”']

491 Mot inconnu : Symfony => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> symfony
491 Mot inconnu : MySQLAdmin => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> mysqladmin
491 Guillemets typographiques ouvrants. => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> " => suggestions : ['«\xa0', '“']
491 Guillemets typographiques fermants. => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> " => suggestions : ['\xa0»', '”']
491 Mot inconnu : MySQLAdmin => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> mysqladmin
491 Guillemets typographiques ouvrants. => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> " => suggestions : ['«\xa0', '“']
491 Formatage des grands nombres. => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> 22222222 => suggestions : ['22\xa0222\xa0222']
491 Guillemets typographiques fermants. => Pour indiquer à Symfony la base de données que nous utilisons pour le projet, entrons la commande suivante <B>en prenant soin de modifier la commande. Si votre nom d'utilisateur MySQLAdmin est "1111" et que votre mot de passe MySQLAdmin est "22222222"</B> la commande sera : <|> " => suggestions : ['\xa0»', '”']

495 Mot inconnu : schema => Avec la description de la base de données dans le fichier schema.yml, nous pouvons utiliser les tâches intégrées de l'ORM pour générer les déclarations SQL nécessaires pour créer des tables : <|> schema
495 Mot inconnu : yml => Avec la description de la base de données dans le fichier schema.yml, nous pouvons utiliser les tâches intégrées de l'ORM pour générer les déclarations SQL nécessaires pour créer des tables : <|> yml
495 Mot inconnu : ORM => Avec la description de la base de données dans le fichier schema.yml, nous pouvons utiliser les tâches intégrées de l'ORM pour générer les déclarations SQL nécessaires pour créer des tables : <|> orm

499 Accord de genre erroné : « déclarations » est féminin. => Cette commande génère le déclarations SQL dans le répertoire data/sql, optimisées pour le moteur de base de données que nous avons configuré. <|> le => suggestions : ['les', 'la']
499 Accord de nombre erroné : « déclarations » devrait être au singulier. => Cette commande génère le déclarations SQL dans le répertoire data/sql, optimisées pour le moteur de base de données que nous avons configuré. <|> déclarations => suggestions : []
499 Mot inconnu : sql => Cette commande génère le déclarations SQL dans le répertoire data/sql, optimisées pour le moteur de base de données que nous avons configuré. <|> sql

505 Mot inconnu : ORM => L'ORM génère également les classes PHP qui font la correspondance entre les enregistrements des tables et les objets <|> orm

507 Mot inconnu : lib => Générer les fichiers PHP qui seront utilisés pour interagir avec la base de données dans le répertoire lib/model avec la commande suivante : <|> lib
507 Mot inconnu : model => Générer les fichiers PHP qui seront utilisés pour interagir avec la base de données dans le répertoire lib/model avec la commande suivante : <|> model

511 Mot inconnu : Propel => En navigant parmi les fichiers générés, vous avez probablement remarqué que Propel génère quatre classes par table. <|> propel

513 Mot inconnu : accessors => Les valeurs des colonnes d'un enregistrement peuvent être manipulées par l'objet en utilisant un accesseur (accessors get*() méthode) ou un mutateur (mutators set*() méthode): <|> accessors
513 Mot inconnu : get => Les valeurs des colonnes d'un enregistrement peuvent être manipulées par l'objet en utilisant un accesseur (accessors get*() méthode) ou un mutateur (mutators set*() méthode): <|> get
513 Mot inconnu : mutators => Les valeurs des colonnes d'un enregistrement peuvent être manipulées par l'objet en utilisant un accesseur (accessors get*() méthode) ou un mutateur (mutators set*() méthode): <|> mutators

531 Mot inconnu : propel => La tâche propel:build-all est un raccourci pour exécuter les tâches que nous avons vues dans cette section et d'autres. Donc, exécutez cette tâche maintenant pour générer les formulaires et les validateurs du modèle des classes : <|> propel
531 Il manque un espace. => La tâche propel:build-all est un raccourci pour exécuter les tâches que nous avons vues dans cette section et d'autres. Donc, exécutez cette tâche maintenant pour générer les formulaires et les validateurs du modèle des classes : <|> build-all => suggestions : [' build-all']
531 Mot inconnu : build-all => La tâche propel:build-all est un raccourci pour exécuter les tâches que nous avons vues dans cette section et d'autres. Donc, exécutez cette tâche maintenant pour générer les formulaires et les validateurs du modèle des classes : <|> build-all

535 Mot inconnu : propel => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> propel
535 Il manque un espace. => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> build-all-load => suggestions : [' build-all-load']
535 Mot inconnu : build-all-load => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> build-all-load
535 Mot inconnu : propel => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> propel
535 Il manque un espace. => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> build-all => suggestions : [' build-all']
535 Mot inconnu : build-all => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> build-all
535 Mot inconnu : propel => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> propel
535 Il manque un espace. => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> data-load => suggestions : [' data-load']
535 Mot inconnu : data-load => La tâche propel:build-all-load est un raccourci pour la tâche propel:build-all suivie de la tâche propel:data-load. <|> data-load

537 Mot inconnu : Symfony => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> symfony
537 Mot inconnu : require => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> require
537 Mot inconnu : Symfony => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> symfony
537 Mot inconnu : propel => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> propel
537 Il manque un espace. => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> build-model => suggestions : [' build-model']
537 Mot inconnu : build-model => Comme nous le verrons un peu plus tard, Symfony charge automatiquement les classes PHP pour vous, ce qui signifie que vous n'avez jamais besoin d'utiliser require dans votre code. C'est une des nombreuses choses que Symfony automatise pour les développeurs, mais il y a une contre partie : Chaque fois que vous ajoutez une classe vous devez effacer le cache. Comme la tâche propel:build-model a créé de nouvelles classes, effaçons la cache : <|> build-model

541 Mot inconnu : Symfony => Une tâche Symfony est composée d'un espace de nom et d'un nom de tâche. Chaque tâche a un raccourci avec le moins d'ambiguïté avec les autres tâches. La commande suivante est équivalente à cache:clear: <|> symfony
541 Il manque un espace. => Une tâche Symfony est composée d'un espace de nom et d'un nom de tâche. Chaque tâche a un raccourci avec le moins d'ambiguïté avec les autres tâches. La commande suivante est équivalente à cache:clear: <|> clear => suggestions : [' clear']
541 Mot inconnu : clear => Une tâche Symfony est composée d'un espace de nom et d'un nom de tâche. Chaque tâche a un raccourci avec le moins d'ambiguïté avec les autres tâches. La commande suivante est équivalente à cache:clear: <|> clear

549 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Les données initiales : Les données initiales sont nécessaires pour que l'application fonctionne. Par exemple, notre projet01 a besoin de catégories, sinon personne ne pourra soumettre un poste. Nous avons également besoin d'un administrateur capable de s'authentifier au backend. <|> -  => suggestions : ['—\xa0', '–\xa0']
549 Mot inconnu : projet01 => - Les données initiales : Les données initiales sont nécessaires pour que l'application fonctionne. Par exemple, notre projet01 a besoin de catégories, sinon personne ne pourra soumettre un poste. Nous avons également besoin d'un administrateur capable de s'authentifier au backend. <|> projet01
549 Mot inconnu : backend => - Les données initiales : Les données initiales sont nécessaires pour que l'application fonctionne. Par exemple, notre projet01 a besoin de catégories, sinon personne ne pourra soumettre un poste. Nous avons également besoin d'un administrateur capable de s'authentifier au backend. <|> backend

551 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Les données de test : Les données de test sont nécessaires pour tester l'application. Comme développeur vous allez écrire des tests pour être certain que tout se comporte comme prévu. Le meilleur moyen est d'écrire des tests automatiques. Donc à chaque fois que vous faites des tests, vous avez besoin d'une base de données propre avec des données actualisées. <|> -  => suggestions : ['—\xa0', '–\xa0']

553 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Les données utilisateurs : Les données utilisateurs sont créées par les utilisateurs pendant la vie normale de l'application. <|> -  => suggestions : ['—\xa0', '–\xa0']
553 Accord de genre erroné avec « utilisateurs ». => - Les données utilisateurs : Les données utilisateurs sont créées par les utilisateurs pendant la vie normale de l'application. <|> données => suggestions : ['donnés']
553 Accord de genre erroné entre « données » et « utilisateurs ». => - Les données utilisateurs : Les données utilisateurs sont créées par les utilisateurs pendant la vie normale de l'application. <|> utilisateurs => suggestions : ['utilisatrices']
553 Accord de genre erroné avec « utilisateurs ». => - Les données utilisateurs : Les données utilisateurs sont créées par les utilisateurs pendant la vie normale de l'application. <|> données => suggestions : ['donnés']
553 Accord de genre erroné entre « données » et « utilisateurs ». => - Les données utilisateurs : Les données utilisateurs sont créées par les utilisateurs pendant la vie normale de l'application. <|> utilisateurs => suggestions : ['utilisatrices']

555 Mot inconnu : Symfony => Chaque fois que Symfony crée des tables dans la base de données, les données sont perdues. Pour envoyer des données initiales à la base nous pouvons écrire un script PHP, ou exécuter du code SQL avec le programme MySQL. <|> symfony
555 Mot inconnu : MySQL => Chaque fois que Symfony crée des tables dans la base de données, les données sont perdues. Pour envoyer des données initiales à la base nous pouvons écrire un script PHP, ou exécuter du code SQL avec le programme MySQL. <|> mysql

557 Mot inconnu : Symfony => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> symfony
557 Mot inconnu : YAML => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> yaml
557 Mot inconnu : fixtures => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> fixtures
557 Mot inconnu : propel => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> propel
557 Il manque un espace. => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> data-load => suggestions : [' data-load']
557 Mot inconnu : data-load => Mais comme le besoin est commun, il y a une meilleure méthode avec Symfony. Créez un fichier YAML dans le répertoire data/fixtures/ et utilisez la tâche propel:data-load pour les envoyer dans la base de données. <|> data-load

559 Mot inconnu : fixtures => Créer les deux fichiers suivants avec leur contenu respectif dans le dossier data/fixtures/ : <|> fixtures

561 Mot inconnu : _categories => Fichier 1) 010_categories.yml <|> _categories
561 Mot inconnu : yml => Fichier 1) 010_categories.yml <|> yml

571 Mot inconnu : _jobs => Fichier 2) 020_jobs.yml <|> _jobs
571 Mot inconnu : yml => Fichier 2) 020_jobs.yml <|> yml

624 Mot inconnu : YAML => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> yaml
624 Mot inconnu : job_sensio_labs => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> job_sensio_labs
624 Mot inconnu : programming => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> programming
624 Guillemets typographiques ouvrants. => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> ' => suggestions : ['“', '‘', '‹']
624 Mot inconnu : Programming => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> programming
624 Guillemets typographiques fermants. => Un fichier de jeu de données tests est écrit en YAML. Il utilise le modèle des objets avec un nom unique pour chaque enregistrement. Ce nom est utile pour lier les objets relationnels entre eux sans à avoir à définir une clé primaire (qui sont souvent des champs auto-incrémentés et ne peuvent être définis). Par exemple, le poste job_sensio_labs utilise la catégorie programming, ce qui correspond à la catégorie 'Programming' . <|> ' => suggestions : ['”', '’', '›']

630 Mot inconnu : Symfony => Dans un fichier de jeu de données, vous n'avez pas besoin de définir toutes les valeurs de colonnes. Dans ce cas Symfony, va utiliser la valeur par défaut indiquée dans le schéma de la base de données. Et comme Symfony utilise un Propel pour charger les données en base, tous les comportements à la création (comme pour created_at ou updated_at) ou les comportements que vous aurez ajoutés au modèle sont activés. <|> symfony
630 Mot inconnu : Symfony => Dans un fichier de jeu de données, vous n'avez pas besoin de définir toutes les valeurs de colonnes. Dans ce cas Symfony, va utiliser la valeur par défaut indiquée dans le schéma de la base de données. Et comme Symfony utilise un Propel pour charger les données en base, tous les comportements à la création (comme pour created_at ou updated_at) ou les comportements que vous aurez ajoutés au modèle sont activés. <|> symfony
630 Mot inconnu : Propel => Dans un fichier de jeu de données, vous n'avez pas besoin de définir toutes les valeurs de colonnes. Dans ce cas Symfony, va utiliser la valeur par défaut indiquée dans le schéma de la base de données. Et comme Symfony utilise un Propel pour charger les données en base, tous les comportements à la création (comme pour created_at ou updated_at) ou les comportements que vous aurez ajoutés au modèle sont activés. <|> propel
630 Mot inconnu : created_at => Dans un fichier de jeu de données, vous n'avez pas besoin de définir toutes les valeurs de colonnes. Dans ce cas Symfony, va utiliser la valeur par défaut indiquée dans le schéma de la base de données. Et comme Symfony utilise un Propel pour charger les données en base, tous les comportements à la création (comme pour created_at ou updated_at) ou les comportements que vous aurez ajoutés au modèle sont activés. <|> created_at
630 Mot inconnu : updated_at => Dans un fichier de jeu de données, vous n'avez pas besoin de définir toutes les valeurs de colonnes. Dans ce cas Symfony, va utiliser la valeur par défaut indiquée dans le schéma de la base de données. Et comme Symfony utilise un Propel pour charger les données en base, tous les comportements à la création (comme pour created_at ou updated_at) ou les comportements que vous aurez ajoutés au modèle sont activés. <|> updated_at

640 Mot inconnu : Symfony => Voyons comment afficher la liste des postes, comment éditer un poste existant, et comment l'effacer. Comme nous l'avons expliqué, un projet Symfony est fait d'application. Chacune d'entre elles est faite de module. Un module contient un jeu de code PHP qui représente une fonctionnalité de l'application (le module de l'API par exemple) ou un jeu de manipulation sur le modèle objet que peut faire un utilisateur (le module des postes par exemple). <|> symfony

642 Mot inconnu : Symfony => Symfony est capable de générer automatiquement pour un modèle un module qui fournit des fonctionnalités basiques. Entrer les commandes suivantent pour les frontend affiliate, category et job : <|> symfony
642 Mot inconnu : suivantent => Symfony est capable de générer automatiquement pour un modèle un module qui fournit des fonctionnalités basiques. Entrer les commandes suivantent pour les frontend affiliate, category et job : <|> suivantent
642 Mot inconnu : frontend => Symfony est capable de générer automatiquement pour un modèle un module qui fournit des fonctionnalités basiques. Entrer les commandes suivantent pour les frontend affiliate, category et job : <|> frontend
642 Mot inconnu : affiliate => Symfony est capable de générer automatiquement pour un modèle un module qui fournit des fonctionnalités basiques. Entrer les commandes suivantent pour les frontend affiliate, category et job : <|> affiliate
642 Mot inconnu : category => Symfony est capable de générer automatiquement pour un modèle un module qui fournit des fonctionnalités basiques. Entrer les commandes suivantent pour les frontend affiliate, category et job : <|> category

652 Mot inconnu : frontend => Cette commande génère un module job dans l'application frontend sur le modèle de Projet01Job. Comme pour la plupart des tâches Symfony, des répertoires et des fichiers ont été créés pour vous dans le répertoire apps/frontend/modules/job : <|> frontend
652 Mot inconnu : Projet01Job => Cette commande génère un module job dans l'application frontend sur le modèle de Projet01Job. Comme pour la plupart des tâches Symfony, des répertoires et des fichiers ont été créés pour vous dans le répertoire apps/frontend/modules/job : <|> projet01job
652 Mot inconnu : Symfony => Cette commande génère un module job dans l'application frontend sur le modèle de Projet01Job. Comme pour la plupart des tâches Symfony, des répertoires et des fichiers ont été créés pour vous dans le répertoire apps/frontend/modules/job : <|> symfony
652 Mot inconnu : apps => Cette commande génère un module job dans l'application frontend sur le modèle de Projet01Job. Comme pour la plupart des tâches Symfony, des répertoires et des fichiers ont été créés pour vous dans le répertoire apps/frontend/modules/job : <|> apps
652 Mot inconnu : frontend => Cette commande génère un module job dans l'application frontend sur le modèle de Projet01Job. Comme pour la plupart des tâches Symfony, des répertoires et des fichiers ont été créés pour vous dans le répertoire apps/frontend/modules/job : <|> frontend

654 Mot inconnu : Directory => ^ Directory ^ Description ^ <|> directory

656 Mot inconnu : templates => | templates | Les gabarits du module | <|> templates

658 Conjugaison erronée. Accord avec “Le fichier…”. Le verbe devrait être à la 3ᵉ personne du singulier. => Le fichier actions/actions.class.php définit toutes les actions disponibles pour le module job : <|> actions => suggestions : ['actait']

660 Mot inconnu : name => ^ Action name ^ Description ^ <|> name

664 Mot inconnu : create => | create | Créer un nouvel enregistrement | <|> create

665 Mot inconnu : edit => | edit | Affiche un formulaire pour éditer un enregistrement | <|> edit

666 Mot inconnu : update => | update | Mise à jour d'un enregistrement avec les données soumises | <|> update

667 Mot inconnu : delete => | delete | Efface un enregistrement donné | <|> delete

679 Guillemets typographiques ouvrants. => Je vous suggère d'ajouter ces adresses à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard. <|> " => suggestions : ['«\xa0', '“']
679 Guillemets typographiques fermants. => Je vous suggère d'ajouter ces adresses à vos "Marque-pages" (Signets, favoris), vous en aurez besoin plus tard. <|> " => suggestions : ['\xa0»', '”']

683 Mot inconnu : layout => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> layout
683 Mot inconnu : php => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> php
683 Guillemets typographiques ouvrants. => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> " => suggestions : ['«\xa0', '“']
683 Mot inconnu : apps => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> apps
683 Mot inconnu : frontend => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> frontend
683 Mot inconnu : templates => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> templates
683 Mot inconnu : templates => La mise en page par défaut d'une application est appelée layout.php et se trouve dans le dossier "apps/frontend/templates/". Ce dossier contient tous les templates globaux pour une application. <|> templates

767 Mot inconnu : template => Un template Symfony n'est ni plus ni moins qu'un fichier PHP. Dans le template layout, vous trouverez des appels à des fonctions PHP et des références à des variables PHP. sf_content est la variable la plus intéressante : elle est définie par le framework lui-même et contient le code HTML généré par l'action. <|> template
767 Mot inconnu : Symfony => Un template Symfony n'est ni plus ni moins qu'un fichier PHP. Dans le template layout, vous trouverez des appels à des fonctions PHP et des références à des variables PHP. sf_content est la variable la plus intéressante : elle est définie par le framework lui-même et contient le code HTML généré par l'action. <|> symfony
767 Mot inconnu : template => Un template Symfony n'est ni plus ni moins qu'un fichier PHP. Dans le template layout, vous trouverez des appels à des fonctions PHP et des références à des variables PHP. sf_content est la variable la plus intéressante : elle est définie par le framework lui-même et contient le code HTML généré par l'action. <|> template
767 Mot inconnu : layout => Un template Symfony n'est ni plus ni moins qu'un fichier PHP. Dans le template layout, vous trouverez des appels à des fonctions PHP et des références à des variables PHP. sf_content est la variable la plus intéressante : elle est définie par le framework lui-même et contient le code HTML généré par l'action. <|> layout
767 Mot inconnu : sf_content => Un template Symfony n'est ni plus ni moins qu'un fichier PHP. Dans le template layout, vous trouverez des appels à des fonctions PHP et des références à des variables PHP. sf_content est la variable la plus intéressante : elle est définie par le framework lui-même et contient le code HTML généré par l'action. <|> sf_content

773 Mot inconnu : layout => Vous verrez que toutes les actions sont mises en page selon le modèle défini dans le layout. <|> layout

775 Mot inconnu : Jobeet => Nous utiliserons les images et les fichiers CSS du tutoriel Jobeet, sans les modifier pour ne pas alourdir le présent texte. Vous de jouer avec ces fichiers si le coeur vous en dit. <|> jobeet
775 Mot inconnu : coeur => Nous utiliserons les images et les fichiers CSS du tutoriel Jobeet, sans les modifier pour ne pas alourdir le présent texte. Vous de jouer avec ces fichiers si le coeur vous en dit. <|> coeur

781 Guillemets typographiques ouvrants. => Copier le dossier "images" sur le dossier "web/images" <|> " => suggestions : ['«\xa0', '“']
781 Guillemets typographiques fermants. => Copier le dossier "images" sur le dossier "web/images" <|> " => suggestions : ['\xa0»', '”']
781 Guillemets typographiques ouvrants. => Copier le dossier "images" sur le dossier "web/images" <|> " => suggestions : ['«\xa0', '“']
781 Guillemets typographiques fermants. => Copier le dossier "images" sur le dossier "web/images" <|> " => suggestions : ['\xa0»', '”']

785 Guillemets typographiques ouvrants. => Copier le dossier "css" sur le dossier "web/css" <|> " => suggestions : ['«\xa0', '“']
785 Mot inconnu : css => Copier le dossier "css" sur le dossier "web/css" <|> css
785 Guillemets typographiques fermants. => Copier le dossier "css" sur le dossier "web/css" <|> " => suggestions : ['\xa0»', '”']
785 Guillemets typographiques ouvrants. => Copier le dossier "css" sur le dossier "web/css" <|> " => suggestions : ['«\xa0', '“']
785 Mot inconnu : css => Copier le dossier "css" sur le dossier "web/css" <|> css
785 Guillemets typographiques fermants. => Copier le dossier "css" sur le dossier "web/css" <|> " => suggestions : ['\xa0»', '”']

789 Guillemets typographiques ouvrants. => Copier l'image "favicon.ico" dans le dossier "web/images" <|> " => suggestions : ['«\xa0', '“']
789 Mot inconnu : favicon => Copier l'image "favicon.ico" dans le dossier "web/images" <|> favicon
789 Mot inconnu : ico => Copier l'image "favicon.ico" dans le dossier "web/images" <|> ico
789 Guillemets typographiques fermants. => Copier l'image "favicon.ico" dans le dossier "web/images" <|> " => suggestions : ['\xa0»', '”']
789 Guillemets typographiques ouvrants. => Copier l'image "favicon.ico" dans le dossier "web/images" <|> " => suggestions : ['«\xa0', '“']
789 Guillemets typographiques fermants. => Copier l'image "favicon.ico" dans le dossier "web/images" <|> " => suggestions : ['\xa0»', '”']

805 Mot inconnu : Symfony => ===== Principes de configuration dans Symfony ===== <|> symfony

807 Mot inconnu : generate => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> generate
807 Il manque un espace. => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> project => suggestions : [' project']
807 Mot inconnu : project => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> project
807 Accord de nombre erroné avec « trois » : « dossier » devrait être au pluriel. => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> dossier => suggestions : ['dossiers']
807 Mot inconnu : css => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> css
807 Mot inconnu : js => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> js
807 Mot inconnu : Javascript => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> javascript
807 Mot inconnu : Symfony => Par défaut, la tâche generate:project a créé trois dossier pour le projet courant : web/images/ pour les images, web/css/ pour les feuilles de style, et web/js/ pour les fichiers Javascript. Ceci fait partie des nombreuses conventions définies par Symfony, mais vous pouvez évidemment les placer dans un autre dossier sous le répertoire web/, mais cela n'est pas recommandé. <|> symfony

809 Mot inconnu : css => Bien que le fichier main.css n'est défini nul part dans le layout par défaut, il est nécessairement présent dans le code HTML généré. Mais pas les autres. Comment est-ce possible ? <|> css
809 Confusion : pour dire “en aucun lieu”, écrivez “nulle part”. => Bien que le fichier main.css n'est défini nul part dans le layout par défaut, il est nécessairement présent dans le code HTML généré. Mais pas les autres. Comment est-ce possible ? <|> nul part => suggestions : ['nulle part']
809 Mot inconnu : layout => Bien que le fichier main.css n'est défini nul part dans le layout par défaut, il est nécessairement présent dans le code HTML généré. Mais pas les autres. Comment est-ce possible ? <|> layout

811 Mot inconnu : helper => ==== Les helper ==== <|> helper

813 Après “avoir été”, il faut un participe passé. => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> inclue => suggestions : ['incluses', 'inclus', 'incluse']
813 Mot inconnu : include_stylesheets => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> include_stylesheets
813 Mot inconnu : layout => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> layout
813 Mot inconnu : include_stylesheets => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> include_stylesheets
813 Mot inconnu : helper => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> helper
813 Mot inconnu : helper => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> helper
813 Mot inconnu : symfony => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> symfony
813 Mot inconnu : helpers => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> helpers
813 Mot inconnu : templates => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> templates
813 Mot inconnu : helper => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> helper
813 Mot inconnu : include_stylesheets => La feuille de style a été inclue grâce à la fonction include_stylesheets() située entre les balises <head> du fichier layout. La fonction include_stylesheets() est appelée un helper. Un helper est une fonction, définie par symfony, pouvant prendre des paramètres et renvoyant du code HTML. La plupart du temps, les helpers permettent de gagner du temps, ils contiennent du code fréquemment utilisé dans les templates. Ici, le helper include_stylesheets() génère une balise <link> spécifique aux feuilles de style. <|> include_stylesheets

815 Mot inconnu : helper => Mais comment le helper sait quelle feuille de style inclure ? <|> helper

817 Mot inconnu : view => La couche vue peut être paramétrée en éditant le fichier de configuration view.yml de l'application. Voici le fichier par défaut généré lors de l'appel à la tâche generate:app <|> view
817 Mot inconnu : yml => La couche vue peut être paramétrée en éditant le fichier de configuration view.yml de l'application. Voici le fichier par défaut généré lors de l'appel à la tâche generate:app <|> yml
817 Mot inconnu : generate => La couche vue peut être paramétrée en éditant le fichier de configuration view.yml de l'application. Voici le fichier par défaut généré lors de l'appel à la tâche generate:app <|> generate
817 Il manque un espace. => La couche vue peut être paramétrée en éditant le fichier de configuration view.yml de l'application. Voici le fichier par défaut généré lors de l'appel à la tâche generate:app <|> app => suggestions : [' app']
817 Mot inconnu : app => La couche vue peut être paramétrée en éditant le fichier de configuration view.yml de l'application. Voici le fichier par défaut généré lors de l'appel à la tâche generate:app <|> app

840 Mot inconnu : view => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> view
840 Mot inconnu : yml => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> yml
840 Mot inconnu : default => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> default
840 Mot inconnu : templates => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> templates
840 Mot inconnu : stylesheets => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> stylesheets
840 Guillemets typographiques fermants. => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> ' => suggestions : ['”', '’', '›']
840 Mot inconnu : helper => Le fichier view.yml contient les paramètres par défaut (default) pour tous les templates de l'application. Par exemple, l'entrée `stylesheets' définit un tableau de fichiers de feuilles de style à inclure pour toutes les pages de l'application (ceci grâce au helper vu ci-dessus). <|> helper

842 Mot inconnu : view => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> view
842 Mot inconnu : yml => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> yml
842 Mot inconnu : css => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> css
842 Mot inconnu : css => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> css
842 Mot inconnu : css => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> css
842 Mot inconnu : Symfony => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> symfony
842 Accord de nombre erroné : « chemin » devrait être au pluriel. => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> chemin => suggestions : ['chemins']
842 Mot inconnu : css => Dans le fichier de configuration par défaut view.yml, le fichier référence est main.css, et non pas css/main.css. En fait, les deux définitions sont équivalentes. Symfony préfixe les chemin relatifs avec /css/. <|> css

844 Mot inconnu : Symfony => Si plusieurs fichiers sont définis, Symfony les inclura dans le même ordre que celui dans lequel ils ont été définis : <|> symfony

848 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Vous pouvez également définir l'attribut media et omettre le suffixe .css : <|>  . => suggestions : ['. ', '.']
848 Mot inconnu : css => Vous pouvez également définir l'attribut media et omettre le suffixe .css : <|> css

859 Mot inconnu : view => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> view
859 Mot inconnu : yml => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> yml
859 Mot inconnu : layout => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> layout
859 Mot inconnu : layout => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> layout
859 Mot inconnu : Symfony => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> symfony
859 Mot inconnu : layout => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> layout
859 Mot inconnu : php => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> php
859 Mot inconnu : has_layout => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> has_layout
859 Mot inconnu : false => Le fichier de configuration view.yml définit également le layout utilisé par défaut pour l'application. Par défaut, son nom est layout. Par conséquent, Symfony met en page chacune de vos pages à partir du fichier layout.php. Vous pouvez également désactiver cette mise en page en définissant l'entrée has_layout à false. <|> false

861 Mot inconnu : css => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> css
861 Mot inconnu : css => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> css
861 Confusion probable : « peut-être » signifie « possiblement ». => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> peut-être => suggestions : ['peut être']
861 Mot inconnu : inclu => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> inclu
861 Mot inconnu : view => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> view
861 Mot inconnu : yml => Tel quel, le site répond à nos attentes. Le fichier jobs.css est uniquement utile pour la page d'accueil, et le fichier job.css uniquement pour la page job. Il peut-être intéressant de faire en sorte que chaque fichier ne soit inclu que lorsqu'il est utile. Le fichier de configuration view.yml peut résoudre ce problème en le personnalisant par module. <|> yml

863 Mot inconnu : indexSuccess => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> indexsuccess
863 Mot inconnu : showSuccess => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> showsuccess
863 Mot inconnu : templates => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> templates
863 Mot inconnu : default => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> default
863 Mot inconnu : view => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> view
863 Mot inconnu : yml => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> yml
863 Mot inconnu : all => Sous les sections indexSuccess et showSuccess (qui sont les noms des templates associés aux actions index et show, comme nous le verrons plus tard), vous pouvez personnaliser les entrées se trouvant sous la section default du fichier view.yml de l'application. Toutes les entrées spécifiques sont fusionnées avec celles de l'application. Vous pouvez également définir des paramètres pour toutes les actions d'un module avec la section spéciale all. <|> all

865 Mot inconnu : Symfony => Pour beaucoup de fichiers de configuration de Symfony, un même paramètre peut être définit à différents niveaux : <|> symfony
865 Après “être”, le verbe ne devrait pas être conjugué à la 3ᵉ personne du singulier. => Pour beaucoup de fichiers de configuration de Symfony, un même paramètre peut être définit à différents niveaux : <|> définit => suggestions : ['définie', 'définies', 'défini', 'définis']

867 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Au niveau du framework lui-même <|> -  => suggestions : ['—\xa0', '–\xa0']

868 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Au niveau du projet (dans le répertoire config/) <|> -  => suggestions : ['—\xa0', '–\xa0']

869 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - A un niveau plus local, celui de l'application (dans le répertoire apps/APP/config/) <|> -  => suggestions : ['—\xa0', '–\xa0']
869 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => - A un niveau plus local, celui de l'application (dans le répertoire apps/APP/config/) <|> a => suggestions : ['À']
869 Mot inconnu : apps => - A un niveau plus local, celui de l'application (dans le répertoire apps/APP/config/) <|> apps
869 Mot inconnu : APP => - A un niveau plus local, celui de l'application (dans le répertoire apps/APP/config/) <|> app

870 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Au niveau restreint au module (dans le répertoire apps/APP/modules/MODULE/config/) <|> -  => suggestions : ['—\xa0', '–\xa0']
870 Mot inconnu : apps => - Au niveau restreint au module (dans le répertoire apps/APP/modules/MODULE/config/) <|> apps
870 Mot inconnu : APP => - Au niveau restreint au module (dans le répertoire apps/APP/modules/MODULE/config/) <|> app

872 Il faut élider “si” et l’accoler au pronom. => Lors de l'exécution, le système de configuration fusionne tous les paramètres depuis les différents fichiers si ils existent et les met en cache pour de meilleurs performances. <|> si  => suggestions : ['s’']
872 Accord de genre erroné avec « performances ». => Lors de l'exécution, le système de configuration fusionne tous les paramètres depuis les différents fichiers si ils existent et les met en cache pour de meilleurs performances. <|> meilleurs => suggestions : ['meilleures']
872 Accord de genre erroné avec « meilleurs ». => Lors de l'exécution, le système de configuration fusionne tous les paramètres depuis les différents fichiers si ils existent et les met en cache pour de meilleurs performances. <|> performances => suggestions : []

874 Mot inconnu : view => En règle générale, quand quelque chose est configurable via un fichier de configuration, la même chose peut être faite avec du code PHP. Au lieu de créer un fichier view.yml pour le module job par exemple, vous pouvez aussi utiliser le helper use_stylesheet() pour inclure une feuille de style depuis un template avec par exemple la ligne : <|> view
874 Mot inconnu : yml => En règle générale, quand quelque chose est configurable via un fichier de configuration, la même chose peut être faite avec du code PHP. Au lieu de créer un fichier view.yml pour le module job par exemple, vous pouvez aussi utiliser le helper use_stylesheet() pour inclure une feuille de style depuis un template avec par exemple la ligne : <|> yml
874 Mot inconnu : helper => En règle générale, quand quelque chose est configurable via un fichier de configuration, la même chose peut être faite avec du code PHP. Au lieu de créer un fichier view.yml pour le module job par exemple, vous pouvez aussi utiliser le helper use_stylesheet() pour inclure une feuille de style depuis un template avec par exemple la ligne : <|> helper
874 Mot inconnu : use_stylesheet => En règle générale, quand quelque chose est configurable via un fichier de configuration, la même chose peut être faite avec du code PHP. Au lieu de créer un fichier view.yml pour le module job par exemple, vous pouvez aussi utiliser le helper use_stylesheet() pour inclure une feuille de style depuis un template avec par exemple la ligne : <|> use_stylesheet
874 Mot inconnu : template => En règle générale, quand quelque chose est configurable via un fichier de configuration, la même chose peut être faite avec du code PHP. Au lieu de créer un fichier view.yml pour le module job par exemple, vous pouvez aussi utiliser le helper use_stylesheet() pour inclure une feuille de style depuis un template avec par exemple la ligne : <|> template

878 Mot inconnu : helper => Vous pouvez également utiliser ce helper dans le layout pour inclure une feuille de style globale à l'application. <|> helper
878 Mot inconnu : layout => Vous pouvez également utiliser ce helper dans le layout pour inclure une feuille de style globale à l'application. <|> layout

880 Mot inconnu : view => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> view
880 Mot inconnu : yml => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> yml
880 Mot inconnu : template => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> template
880 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> a => suggestions : ['À']
880 Mot inconnu : helper => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> helper
880 Mot inconnu : use_stylesheet => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> use_stylesheet
880 Mot inconnu : Projet01 => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> projet01
880 Mot inconnu : helper => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> helper
880 Mot inconnu : use_stylesheet => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> use_stylesheet
880 Mot inconnu : template => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> template
880 Mot inconnu : use_stylesheet => Le choix entre une méthode ou l'autre est réellement une question de goût. Le fichier view.yml permet de définir quelque chose pour toutes les actions d'un module, ce qui n'est pas possible depuis un template. Cela dit, la configuration est plus statique. A l'inverse, le helper use_stylesheet() est plus flexible et plus encore, tout se trouve au même endroit : la définition des feuilles de style et le code HTML. Pour Projet01, nous allons utiliser le helper use_stylesheet(), et mettre à jour le template job avec les appels à use_stylesheet(). <|> use_stylesheet

882 Mot inconnu : javascripts => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> javascripts
882 Mot inconnu : view => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> view
882 Mot inconnu : yml => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> yml
882 Mot inconnu : helper => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> helper
882 Mot inconnu : use_javascript => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> use_javascript
882 Mot inconnu : template => De la même manière, la configuration JavaScript est faite via l'entrée javascripts du fichier de configuration view.yml ou via le helper use_javascript() permettant d'inclure des fichiers JavaScript dans un template. <|> template

886 Mot inconnu : template => Comme déjà vu, la page d'accueil est générée par l'action index du module job. L'action index fait partie de la couche Contrôleur de la page et le template associé, indexSuccess.php, fait parti de la couche Vue : <|> template
886 Mot inconnu : indexSuccess => Comme déjà vu, la page d'accueil est générée par l'action index du module job. L'action index fait partie de la couche Contrôleur de la page et le template associé, indexSuccess.php, fait parti de la couche Vue : <|> indexsuccess
886 Mot inconnu : php => Comme déjà vu, la page d'accueil est générée par l'action index du module job. L'action index fait partie de la couche Contrôleur de la page et le template associé, indexSuccess.php, fait parti de la couche Vue : <|> php
886 Confusion. On écrit « faire partie ». => Comme déjà vu, la page d'accueil est générée par l'action index du module job. L'action index fait partie de la couche Contrôleur de la page et le template associé, indexSuccess.php, fait parti de la couche Vue : <|> parti => suggestions : ['partie']

901 Mot inconnu : jobActions => Chaque action est représentée par une méthode de classe. Pour la page d'accueil de job, la classe est jobActions (le nom du module avec le suffixe Actions) et la méthode est executeIndex() (le nom de l'action avec le préfixe execute). Dans notre cas, cela renvoie tous les jobs de la BDD : <|> jobactions
901 Mot inconnu : executeIndex => Chaque action est représentée par une méthode de classe. Pour la page d'accueil de job, la classe est jobActions (le nom du module avec le suffixe Actions) et la méthode est executeIndex() (le nom de l'action avec le préfixe execute). Dans notre cas, cela renvoie tous les jobs de la BDD : <|> executeindex
901 Mot inconnu : execute => Chaque action est représentée par une méthode de classe. Pour la page d'accueil de job, la classe est jobActions (le nom du module avec le suffixe Actions) et la méthode est executeIndex() (le nom de l'action avec le préfixe execute). Dans notre cas, cela renvoie tous les jobs de la BDD : <|> execute
901 Mot inconnu : BDD => Chaque action est représentée par une méthode de classe. Pour la page d'accueil de job, la classe est jobActions (le nom du module avec le suffixe Actions) et la méthode est executeIndex() (le nom de l'action avec le préfixe execute). Dans notre cas, cela renvoie tous les jobs de la BDD : <|> bdd
917 Mot inconnu : executeIndex => Analysons de plus près le code : la méthode executeIndex() (couche Contrôleur) appelle la (couche) Modèle Projet01JobPeer pour renvoyer tous les jobs (new Criteria()). Le modèle renvoie un tableau d'objet de type Projet01Job que l'on affecte à la propriété projet01_job_list de l'objet courant. <|> executeindex
917 Mot inconnu : Projet01JobPeer => Analysons de plus près le code : la méthode executeIndex() (couche Contrôleur) appelle la (couche) Modèle Projet01JobPeer pour renvoyer tous les jobs (new Criteria()). Le modèle renvoie un tableau d'objet de type Projet01Job que l'on affecte à la propriété projet01_job_list de l'objet courant. <|> projet01jobpeer
917 Mot inconnu : Projet01Job => Analysons de plus près le code : la méthode executeIndex() (couche Contrôleur) appelle la (couche) Modèle Projet01JobPeer pour renvoyer tous les jobs (new Criteria()). Le modèle renvoie un tableau d'objet de type Projet01Job que l'on affecte à la propriété projet01_job_list de l'objet courant. <|> projet01job
917 Mot inconnu : projet01_job_list => Analysons de plus près le code : la méthode executeIndex() (couche Contrôleur) appelle la (couche) Modèle Projet01JobPeer pour renvoyer tous les jobs (new Criteria()). Le modèle renvoie un tableau d'objet de type Projet01Job que l'on affecte à la propriété projet01_job_list de l'objet courant. <|> projet01_job_list

919 Mot inconnu : template => Toutes les propriétés des objets sont automatiquement passées au template (la couche Vue). Pour transmettre des données du Contrôleur à la Vue, il vous suffit simplement de créer une nouvelle propriété : <|> template
919 Pléonasme. => Toutes les propriétés des objets sont automatiquement passées au template (la couche Vue). Pour transmettre des données du Contrôleur à la Vue, il vous suffit simplement de créer une nouvelle propriété : <|> suffit simplement => suggestions : ['suffit']

929 Mot inconnu : foo => Cette méthode rendra les variables $foo et $bar accessibles depuis le template. <|> foo
929 Mot inconnu : template => Cette méthode rendra les variables $foo et $bar accessibles depuis le template. <|> template

930 Mot inconnu : Template => Le Template <|> template

932 Mot inconnu : template => Par défaut, le nom du template associé à l'action est déduit par symfony : le nom de l'action avec le suffixe Success. <|> template
932 Mot inconnu : symfony => Par défaut, le nom du template associé à l'action est déduit par symfony : le nom de l'action avec le suffixe Success. <|> symfony
932 Mot inconnu : Success => Par défaut, le nom du template associé à l'action est déduit par symfony : le nom de l'action avec le suffixe Success. <|> success

934 Mot inconnu : template => Le template indexSuccess.php génère une table HTML pour tous les jobs : <|> template
934 Mot inconnu : indexSuccess => Le template indexSuccess.php génère une table HTML pour tous les jobs : <|> indexsuccess
934 Mot inconnu : php => Le template indexSuccess.php génère une table HTML pour tous les jobs : <|> php

972 Mot inconnu : foreach => Dans ce code, la boucle foreach parcourt la liste d'objets job ($projet01_job_list) et, pour chaque job, chaque colonne est affichée.  <|> foreach
972 Mot inconnu : projet01_job_list => Dans ce code, la boucle foreach parcourt la liste d'objets job ($projet01_job_list) et, pour chaque job, chaque colonne est affichée.  <|> projet01_job_list
972 Espace(s) en fin de ligne à supprimer. => Dans ce code, la boucle foreach parcourt la liste d'objets job ($projet01_job_list) et, pour chaque job, chaque colonne est affichée.  <|>   => suggestions : ['']

974 Pléonasme. => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> suffit simplement => suggestions : ['suffit']
974 Mot inconnu : Symfony => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> symfony
974 Mot inconnu : get => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> get
974 Mot inconnu : camelCased => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> camelcased
974 Mot inconnu : getCreatedAt => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> getcreatedat
974 Mot inconnu : created_at => Souvenez-vous, pour accéder à la valeur d'une colonne (propriété), il suffit simplement de faire appel à un accesseur. Comme d'habitude, le nom de ces accesseurs suit une convention établit par Symfony : chaque accesseur commence par le préfixe get suivit du nom de la colonne (propriété) en camelCased (par exemple, la méthode getCreatedAt() permet d'accéder à la valeur de la colonne created_at de l'objet). <|> created_at

999 Mot inconnu : url_for => La fonction url_for() utilisée dans ce template est un helper Symfony. <|> url_for
999 Mot inconnu : template => La fonction url_for() utilisée dans ce template est un helper Symfony. <|> template
999 Mot inconnu : helper => La fonction url_for() utilisée dans ce template est un helper Symfony. <|> helper
999 Mot inconnu : Symfony => La fonction url_for() utilisée dans ce template est un helper Symfony. <|> symfony

1001 Mot inconnu : template => === Le template de la page d'un job === <|> template

1003 Mot inconnu : template => Personnalisons maintenant le template de la page d'un job. Ouvrez le fichier showSuccess.php avec la commande  <|> template
1003 Mot inconnu : showSuccess => Personnalisons maintenant le template de la page d'un job. Ouvrez le fichier showSuccess.php avec la commande  <|> showsuccess
1003 Mot inconnu : php => Personnalisons maintenant le template de la page d'un job. Ouvrez le fichier showSuccess.php avec la commande  <|> php
1003 Espace(s) en fin de ligne à supprimer. => Personnalisons maintenant le template de la page d'un job. Ouvrez le fichier showSuccess.php avec la commande  <|>   => suggestions : ['']

1048 Mot inconnu : template => Ce template utilise la variable $job passée en paramètre par l'action servant à afficher les informations sur un job. Comme nous avons renommé la variable utilisée dans le template ($job au lieu de $projet01_job), vous devez également modifier le nom de la variable envoyée au template depuis l'action show (attention, elle s'y trouve deux fois). Remplacez le contenu par : <|> template
1048 Mot inconnu : template => Ce template utilise la variable $job passée en paramètre par l'action servant à afficher les informations sur un job. Comme nous avons renommé la variable utilisée dans le template ($job au lieu de $projet01_job), vous devez également modifier le nom de la variable envoyée au template depuis l'action show (attention, elle s'y trouve deux fois). Remplacez le contenu par : <|> template
1048 Mot inconnu : projet01_job => Ce template utilise la variable $job passée en paramètre par l'action servant à afficher les informations sur un job. Comme nous avons renommé la variable utilisée dans le template ($job au lieu de $projet01_job), vous devez également modifier le nom de la variable envoyée au template depuis l'action show (attention, elle s'y trouve deux fois). Remplacez le contenu par : <|> projet01_job
1048 Mot inconnu : template => Ce template utilise la variable $job passée en paramètre par l'action servant à afficher les informations sur un job. Comme nous avons renommé la variable utilisée dans le template ($job au lieu de $projet01_job), vous devez également modifier le nom de la variable envoyée au template depuis l'action show (attention, elle s'y trouve deux fois). Remplacez le contenu par : <|> template

1130 Mot inconnu : Propel => Remarquez que certains accesseurs Propel prennent des paramètres. Comme nous avons défini la colonne created_at de type timestamp, l'accesseur getCreatedAt() prend en paramètre le format de la date à renvoyer : <|> propel
1130 Mot inconnu : created_at => Remarquez que certains accesseurs Propel prennent des paramètres. Comme nous avons défini la colonne created_at de type timestamp, l'accesseur getCreatedAt() prend en paramètre le format de la date à renvoyer : <|> created_at
1130 Mot inconnu : timestamp => Remarquez que certains accesseurs Propel prennent des paramètres. Comme nous avons défini la colonne created_at de type timestamp, l'accesseur getCreatedAt() prend en paramètre le format de la date à renvoyer : <|> timestamp
1130 Mot inconnu : getCreatedAt => Remarquez que certains accesseurs Propel prennent des paramètres. Comme nous avons défini la colonne created_at de type timestamp, l'accesseur getCreatedAt() prend en paramètre le format de la date à renvoyer : <|> getcreatedat

1134 Mot inconnu : helper => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> helper
1134 Mot inconnu : simple_format_text => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> simple_format_text
1134 Mot inconnu : helper => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> helper
1134 Confusion. On écrit « faire partie ». => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> parti => suggestions : ['partie']
1134 Mot inconnu : Text => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> text
1134 Mot inconnu : helper => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> helper
1134 Mot inconnu : use_helper => La description d'un job utilise le helper simple_format_text() afin de formater le texte en HTML, en remplaçant notamment les retours chariots par des balises <br />. Comme ce helper fait parti du groupe Text et que celui-ci n'est pas chargé par défaut, nous le chargeons manuellement en utilisant le helper use_helper(). <|> use_helper
1139 Mot inconnu : Symfony =>   * [[http://trac.symfony-project.org/wiki/Resources/fr_FR|Symfony - Ressources symfony en français]] <|> symfony
1139 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://trac.symfony-project.org/wiki/Resources/fr_FR|Symfony - Ressources symfony en français]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1139 Mot inconnu : symfony =>   * [[http://trac.symfony-project.org/wiki/Resources/fr_FR|Symfony - Ressources symfony en français]] <|> symfony
1140 Mot inconnu : Symfony =>   * [[http://www.sensiolabs.com/blog/|Symfony - Le blog]] <|> symfony
1140 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.sensiolabs.com/blog/|Symfony - Le blog]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1144 Mot inconnu : Symfony-project =>   * [[http://www.symfony-project.org/jobeet/1_2/Propel/fr/01|Symfony-project.org - Le projet Jobeet]] <|> symfony-project
1144 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.symfony-project.org/jobeet/1_2/Propel/fr/01|Symfony-project.org - Le projet Jobeet]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1144 Mot inconnu : Jobeet =>   * [[http://www.symfony-project.org/jobeet/1_2/Propel/fr/01|Symfony-project.org - Le projet Jobeet]] <|> jobeet
1145 Mot inconnu : Symfony-project =>   * [[http://www.symfony-project.org/cookbook/1_2/fr/|Symfony-project.org - Symfony le Cookbook]] <|> symfony-project
1145 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.symfony-project.org/cookbook/1_2/fr/|Symfony-project.org - Symfony le Cookbook]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1145 Mot inconnu : Symfony =>   * [[http://www.symfony-project.org/cookbook/1_2/fr/|Symfony-project.org - Symfony le Cookbook]] <|> symfony
1145 Mot inconnu : Cookbook =>   * [[http://www.symfony-project.org/cookbook/1_2/fr/|Symfony-project.org - Symfony le Cookbook]] <|> cookbook
1146 Mot inconnu : Symfony-project =>   * [[http://www.symfony-project.org/forms/1_2/fr/ | Symfony-project.org - Symfony le Forms en Action]] <|> symfony-project
1146 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.symfony-project.org/forms/1_2/fr/ | Symfony-project.org - Symfony le Forms en Action]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1146 Mot inconnu : Symfony =>   * [[http://www.symfony-project.org/forms/1_2/fr/ | Symfony-project.org - Symfony le Forms en Action]] <|> symfony
1146 Mot inconnu : Forms =>   * [[http://www.symfony-project.org/forms/1_2/fr/ | Symfony-project.org - Symfony le Forms en Action]] <|> forms
1147 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.lafermeduweb.net/tutorial/demarrer-un-projet-avec-symfony-p27.html|La Ferme du Web - Démarrer un projet avec Symfony]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1147 Mot inconnu : Symfony =>   * [[http://www.lafermeduweb.net/tutorial/demarrer-un-projet-avec-symfony-p27.html|La Ferme du Web - Démarrer un projet avec Symfony]] <|> symfony
1148 Mot inconnu : Glagla =>   * [[http://www.glagla.org/weblog/2008/06/19/configuration-svn-pour-un-projet-symfony/|Glagla Dot Org -  <|> glagla
1148 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://www.glagla.org/weblog/2008/06/19/configuration-svn-pour-un-projet-symfony/|Glagla Dot Org -  <|>  -  => suggestions : [' – ', ' — ', ' − ']
1148 Espace(s) en fin de ligne à supprimer. =>   * [[http://www.glagla.org/weblog/2008/06/19/configuration-svn-pour-un-projet-symfony/|Glagla Dot Org -  <|>   => suggestions : ['']

1149 Mot inconnu : SVN => Configuration SVN pour un projet Symfony]] <|> svn
1149 Mot inconnu : Symfony => Configuration SVN pour un projet Symfony]] <|> symfony
1150 Mot inconnu : Developpez =>   * [[https://c-maneu.developpez.com/tutorial/web/php/symfony/intro/|Developpez.com - Commencer à développer avec le framework symfony]] <|> developpez
1150 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[https://c-maneu.developpez.com/tutorial/web/php/symfony/intro/|Developpez.com - Commencer à développer avec le framework symfony]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1150 Mot inconnu : symfony =>   * [[https://c-maneu.developpez.com/tutorial/web/php/symfony/intro/|Developpez.com - Commencer à développer avec le framework symfony]] <|> symfony
1151 Mot inconnu : prendreuncafe =>   * [[http://prendreuncafe.com/blog/post/2006/06/20/473-installer-le-framework-php-symfony-sur-ubuntu-dapper-drake|prendreuncafe.com - Installer le framework PHP Symfony sur Ubuntu Dapper Drake]] <|> prendreuncafe
1151 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[http://prendreuncafe.com/blog/post/2006/06/20/473-installer-le-framework-php-symfony-sur-ubuntu-dapper-drake|prendreuncafe.com - Installer le framework PHP Symfony sur Ubuntu Dapper Drake]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
1151 Mot inconnu : Symfony =>   * [[http://prendreuncafe.com/blog/post/2006/06/20/473-installer-le-framework-php-symfony-sur-ubuntu-dapper-drake|prendreuncafe.com - Installer le framework PHP Symfony sur Ubuntu Dapper Drake]] <|> symfony
1151 Mot inconnu : Dapper =>   * [[http://prendreuncafe.com/blog/post/2006/06/20/473-installer-le-framework-php-symfony-sur-ubuntu-dapper-drake|prendreuncafe.com - Installer le framework PHP Symfony sur Ubuntu Dapper Drake]] <|> dapper

1159 Écriture épicène dystypographique. Préférez écrire lisiblement. Sinon, utilisez les points médians. => //Contributeur(e)s : [[utilisateurs:lami|L'ami René]] (L'auteur), [[utilisateurs:YoBoY]].// <|> contributeur(e)s => suggestions : ['Contributeurs et Contributeures', 'Contributeures et Contributeurs', 'Contributeur·e·s']
