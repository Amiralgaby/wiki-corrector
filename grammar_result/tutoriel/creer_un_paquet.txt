16 Conjugaison erronée. Accord avec “Les dépôts…”. Le verbe devrait être à la 3ᵉ personne du pluriel. [[15:21]] =>   * Les dépôts source doivent être disponibles dans synaptic (décommentez les lignes qui commencent par deb-src dans /etc/apt/sources.list) <|> source => suggestions : ['sourcent']
16 Mot inconnu : synaptic [[52:60]] =>   * Les dépôts source doivent être disponibles dans synaptic (décommentez les lignes qui commencent par deb-src dans /etc/apt/sources.list) <|> synaptic
16 Mot inconnu : décommentez [[62:73]] =>   * Les dépôts source doivent être disponibles dans synaptic (décommentez les lignes qui commencent par deb-src dans /etc/apt/sources.list) <|> décommentez
16 Mot inconnu : deb-src [[104:111]] =>   * Les dépôts source doivent être disponibles dans synaptic (décommentez les lignes qui commencent par deb-src dans /etc/apt/sources.list) <|> deb-src
24 Espace(s) en fin de ligne à supprimer. [[47:48]] => Commençons par une petite précision technique :  <|>   => suggestions : ['']

26 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. [[0:2]] => - Un paquet binaire est un paquet (.deb) qui contient les fichiers nécessaires à l'application pour pouvoir fonctionner sur votre ordinateur. C'est ce que nous allons nous efforcer de créer.  <|> -  => suggestions : ['—\xa0', '–\xa0']
26 Espace(s) en fin de ligne à supprimer. [[190:191]] => - Un paquet binaire est un paquet (.deb) qui contient les fichiers nécessaires à l'application pour pouvoir fonctionner sur votre ordinateur. C'est ce que nous allons nous efforcer de créer.  <|>   => suggestions : ['']

27 Espace(s) en fin de ligne à supprimer. [[108:109]] => Tous les paquets binaires disponibles dans les dépôts Ubuntu ont été construits à partir de paquets sources.  <|>   => suggestions : ['']

29 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. [[0:2]] => - Un paquet source est un ensemble de fichiers (attention le terme de paquet est utilisé par analogie. Il n'y a pas ici de fichier conteneur comme peut l'être le .deb pour les binaires) contenant les sources originelles de l'application, ainsi que les indications des modifications nécessaires à la création du paquet debian. <|> -  => suggestions : ['—\xa0', '–\xa0']
29 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[161:163]] => - Un paquet source est un ensemble de fichiers (attention le terme de paquet est utilisé par analogie. Il n'y a pas ici de fichier conteneur comme peut l'être le .deb pour les binaires) contenant les sources originelles de l'application, ainsi que les indications des modifications nécessaires à la création du paquet debian. <|>  . => suggestions : ['. ', '.']
33 Espace(s) en fin de ligne à supprimer. [[148:149]] => Pour illustrer cela, nous allons examiner le contenu d'un paquet source. Pour cela il faut le télécharger d'un des dépôts source configuré pour apt.  <|>   => suggestions : ['']

44 Mot inconnu : ls [[14:16]] => La commande « ls » nous donne comme contenu : <|> ls
45 Mot inconnu : xfce4-xkb-plugin-0 [[18:36]] =>   * un répertoire xfce4-xkb-plugin-0.4.1 <|> xfce4-xkb-plugin-0

55 Mot inconnu : xfce4-xkb-plugin_0 [[13:31]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.dsc** contient la description du paquet source (et des deux autres fichiers, avec leur taille et leur somme MD5). <|> xfce4-xkb-plugin_0
55 Mot inconnu : ubuntu5 [[37:44]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.dsc** contient la description du paquet source (et des deux autres fichiers, avec leur taille et leur somme MD5). <|> ubuntu5
55 Mot inconnu : dsc [[45:48]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.dsc** contient la description du paquet source (et des deux autres fichiers, avec leur taille et leur somme MD5). <|> dsc
55 Mot inconnu : MD5 [[153:156]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.dsc** contient la description du paquet source (et des deux autres fichiers, avec leur taille et leur somme MD5). <|> md5

57 Mot inconnu : xfce4-xkb-plugin_0 [[13:31]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.diff.gz** contient toutes les modifications nécessaires pour construire le paquet Debian. Constituer un paquet source nécessite d'ajouter aux sources existantes un répertoire debian/ avec quelques fichiers. C'est ce répertoire que contient le fichier « .diff.gz ». <|> xfce4-xkb-plugin_0
57 Mettez des guillemets fermants plutôt qu’ouvrants. [[295:297]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.diff.gz** contient toutes les modifications nécessaires pour construire le paquet Debian. Constituer un paquet source nécessite d'ajouter aux sources existantes un répertoire debian/ avec quelques fichiers. C'est ce répertoire que contient le fichier « .diff.gz ». <|>  « => suggestions : ['\xa0»', '”']
57 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[297:299]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.diff.gz** contient toutes les modifications nécessaires pour construire le paquet Debian. Constituer un paquet source nécessite d'ajouter aux sources existantes un répertoire debian/ avec quelques fichiers. C'est ce répertoire que contient le fichier « .diff.gz ». <|>  . => suggestions : ['. ', '.']
57 Mot inconnu : diff [[299:303]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.diff.gz** contient toutes les modifications nécessaires pour construire le paquet Debian. Constituer un paquet source nécessite d'ajouter aux sources existantes un répertoire debian/ avec quelques fichiers. C'est ce répertoire que contient le fichier « .diff.gz ». <|> diff
57 Mot inconnu : gz [[304:306]] => Le fichier **xfce4-xkb-plugin_0.4.1-0ubuntu5.diff.gz** contient toutes les modifications nécessaires pour construire le paquet Debian. Constituer un paquet source nécessite d'ajouter aux sources existantes un répertoire debian/ avec quelques fichiers. C'est ce répertoire que contient le fichier « .diff.gz ». <|> gz

77 Mot inconnu : Gloubiboulga [[26:38]] => On utilise ici le site de Gloubiboulga en lieu et place du site officiel, car ce dernier est particulièrement lent. <|> gloubiboulga

78 Mot inconnu : tarball [[82:89]] => Une fois les sources récupérées, la **première** chose à faire est de renommer le tarball, afin de pouvoir créer un paquet source correct par la suite. Attention le format de ce nom est important. Une erreur ici n'est pas particulièrement désastreuse, mais met en péril la qualité du paquet source. La syntaxe est //paquet_version.orig.tar.gz// (notez le « _ » à la place du « - » d'origine). <|> tarball

90 Mot inconnu : tarball [[70:77]] => Une règle d'or dans la création de paquets est de **ne pas toucher au tarball d'origine**. La seule chose autorisée est de le renommer (c'est même nécessaire). Ne pas modifier le tarball permet de bien distinguer le travail de l'auteur de celui du packageur (empaqueteur). <|> tarball
90 Mot inconnu : tarball [[179:186]] => Une règle d'or dans la création de paquets est de **ne pas toucher au tarball d'origine**. La seule chose autorisée est de le renommer (c'est même nécessaire). Ne pas modifier le tarball permet de bien distinguer le travail de l'auteur de celui du packageur (empaqueteur). <|> tarball

107 Guillemets typographiques ouvrants. [[102:103]] => Ceci vous permet de préciser quel type de package vous construisez. Ici, choisissez le type de paquet "single" : répondez donc *s* à la question. <|> " => suggestions : ['«\xa0', '“']
107 Guillemets typographiques fermants. [[109:110]] => Ceci vous permet de préciser quel type de package vous construisez. Ici, choisissez le type de paquet "single" : répondez donc *s* à la question. <|> " => suggestions : ['\xa0»', '”']
110 Mot inconnu : binary [[13:19]] =>   * multiple binary permet de créer plusieurs paquets binaires à partir d'un unique paquet source <|> binary
111 Mot inconnu : library [[4:11]] =>   * library permet de créer une bibliothèque (lib quelque chose) <|> library
111 Mot inconnu : lib [[46:49]] =>   * library permet de créer une bibliothèque (lib quelque chose) <|> lib
112 Typographie : points de suspension. Utilisez le caractère dédié. [[17:20]] =>   * kernel module... un module pour le noyau <|> ... => suggestions : ['…']
113 Mot inconnu : cdbs [[4:8]] =>   * cdbs... on verra plus tard <|> cdbs
113 Typographie : points de suspension. Utilisez le caractère dédié. [[8:11]] =>   * cdbs... on verra plus tard <|> ... => suggestions : ['…']
130 Mot inconnu : README [[137:143]] => Et là, horreur, plein de fichiers à éditer ! Certains éléments de ce squelette ne nous sont pas utiles ici. On va supprimer le fichier « README » et les fichiers « *.ex » et « *.EX » (qui sont des fichiers exemples) avec la commande suivante : <|> readme
135 Mot inconnu : changelog [[4:13]] =>   * changelog <|> changelog
136 Mot inconnu : compat [[4:10]] =>   * compat <|> compat
137 Mot inconnu : control [[4:11]] =>   * control <|> control
140 Mot inconnu : rules [[4:9]] =>   * rules <|> rules
141 Mot inconnu : dirs [[4:8]] =>   * dirs <|> dirs

145 Mot inconnu : changelog [[17:26]] => === Le fichier « changelog » === <|> changelog
148 Mot inconnu : nom_du_paquet_source [[4:24]] =>   * nom_du_paquet_source (version_du_paquet) distro; urgency=low <|> nom_du_paquet_source
148 Mot inconnu : version_du_paquet [[26:43]] =>   * nom_du_paquet_source (version_du_paquet) distro; urgency=low <|> version_du_paquet
148 Mot inconnu : distro [[45:51]] =>   * nom_du_paquet_source (version_du_paquet) distro; urgency=low <|> distro
148 Mot inconnu : urgency [[53:60]] =>   * nom_du_paquet_source (version_du_paquet) distro; urgency=low <|> urgency
152 Mot inconnu : timezone [[46:54]] =>   * nom du packageur <email> jour, date heure timezone <|> timezone

154 Accord erroné : “espaces et ponctuations” et “anodins” ne sont pas accordés. Mettez au féminin pluriel. [[64:71]] => Attention à la syntaxe, les espaces et ponctuations ne sont pas anodins. La compilation du paquet source étant très automatisée, les scripts doivent avoir des points de repère solides. <|> anodins => suggestions : ['anodines']

156 Typographie : points de suspension. Utilisez le caractère dédié. [[41:44]] => Quelques mots sur les versions de paquets... Une même version d'un logiciel peut être empaquetée plusieurs fois. De même, Ubuntu étant basée sur Debian, il peut exister plusieurs modifications faites dans Ubuntu à partir du même paquet venant de chez Debian. Les versions sont donc de la forme *<upstream_version>-<debian_version>ubuntu<ubuntu_version>*. <|> ... => suggestions : ['…']
156 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[312:315]] => Quelques mots sur les versions de paquets... Une même version d'un logiciel peut être empaquetée plusieurs fois. De même, Ubuntu étant basée sur Debian, il peut exister plusieurs modifications faites dans Ubuntu à partir du même paquet venant de chez Debian. Les versions sont donc de la forme *<upstream_version>-<debian_version>ubuntu<ubuntu_version>*. <|> >-< => suggestions : [' – ', ' — ', ' − ']

159 Mot inconnu : upstream [[19:27]] => <note>Debian est « upstream » pour Ubuntu (« flux venant d'en haut »), de même que les sources du logiciel sont « upstream » pour Debian et Ubuntu.</note> <|> upstream
159 Mot inconnu : upstream [[114:122]] => <note>Debian est « upstream » pour Ubuntu (« flux venant d'en haut »), de même que les sources du logiciel sont « upstream » pour Debian et Ubuntu.</note> <|> upstream
164 Guillemets typographiques ouvrants. [[63:64]] =>   * le nom de la distribution (dapper) ou (edgy) à la place de "unstable", selon la version d'Ubuntu que vous utilisez. <|> " => suggestions : ['«\xa0', '“']
164 Mot inconnu : unstable [[64:72]] =>   * le nom de la distribution (dapper) ou (edgy) à la place de "unstable", selon la version d'Ubuntu que vous utilisez. <|> unstable
164 Guillemets typographiques fermants. [[72:73]] =>   * le nom de la distribution (dapper) ou (edgy) à la place de "unstable", selon la version d'Ubuntu que vous utilisez. <|> " => suggestions : ['\xa0»', '”']

172 Mot inconnu : changelog [[52:61]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|> changelog
172 Mot inconnu : dch [[81:84]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|> dch
172 Mot inconnu : devscripts [[108:118]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|> devscripts
172 Mot inconnu : debchange [[120:129]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|> debchange
172 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[129:132]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|>  -  => suggestions : [' – ', ' — ', ' − ']
172 Mot inconnu : changelog [[176:185]] => <note>Il est notamment possible d'éditer le fichier changelog avec la commande **dch**, provenant du paquet devscripts (debchange - Outil pour la maintenance du fichier debian/changelog d’un paquet source).</note> <|> changelog

176 Mot inconnu : COPYING [[163:170]] => Le squelette de ce fichier est plutôt clair, pas vraiment besoin de s'étendre dessus. Mais le contenu n'est pas toujours évident à déterminer. Il y a un fichier « COPYING » dans le répertoire source, qui contient dans notre exemple la GPL en entier.  <|> copying
176 Espace(s) en fin de ligne à supprimer. [[249:250]] => Le squelette de ce fichier est plutôt clair, pas vraiment besoin de s'étendre dessus. Mais le contenu n'est pas toujours évident à déterminer. Il y a un fichier « COPYING » dans le répertoire source, qui contient dans notre exemple la GPL en entier.  <|>   => suggestions : ['']

177 Conjugaison erronée. Accord avec “les fichiers…”. Le verbe devrait être à la 3ᵉ personne du pluriel. [[99:105]] => Notez que ce n'est pas ce fichier qui sert de référence pour définir la licence, mais les fichiers source (qui contiennent le code, souvent présents dans un dossier « src/ »). <|> source => suggestions : ['sourcent']
177 Mot inconnu : src [[167:170]] => Notez que ce n'est pas ce fichier qui sert de référence pour définir la licence, mais les fichiers source (qui contiennent le code, souvent présents dans un dossier « src/ »). <|> src

179 Mot inconnu : DocumentRectangle [[34:51]] => Regardez par exemple le fichier « DocumentRectangle.cxx » dans les sources : <|> documentrectangle
179 Mot inconnu : cxx [[52:55]] => Regardez par exemple le fichier « DocumentRectangle.cxx » dans les sources : <|> cxx

183 Mot inconnu : quatres [[4:11]] => Les quatres premiers paragraphes sont ceux à recopier bêtement (et oui) dans « debian/copyright ». Ce sont ces paragraphes qui désignent le nom et l'année du Copyright, ainsi que la licence (pas le fichier « COPYING »). <|> quatres
183 Mot inconnu : COPYING [[208:215]] => Les quatres premiers paragraphes sont ceux à recopier bêtement (et oui) dans « debian/copyright ». Ce sont ces paragraphes qui désignent le nom et l'année du Copyright, ainsi que la licence (pas le fichier « COPYING »). <|> copying

188 Ceci est un verbe à la 1ʳᵉ personne du pluriel. Sujet (“nous” ou équivalent) introuvable. [[248:258]] => Il est important de faire attention à ce fichier car s'il est mal renseigné, le détenteur du copyright peut très bien aller jusqu'à vous intenter un procès (la majorité se contenteront d'un mail vous signalant l'erreur et, si vous êtes courtois, n'hésiterons pas à vous aider). Mais soyez prudent(e) malgré tout, certains deviennent susceptibles dès que l'on écorne leur copyright. <|> hésiterons => suggestions : ['hésiteront']
188 Écriture épicène. Utilisez un point médian. [[289:299]] => Il est important de faire attention à ce fichier car s'il est mal renseigné, le détenteur du copyright peut très bien aller jusqu'à vous intenter un procès (la majorité se contenteront d'un mail vous signalant l'erreur et, si vous êtes courtois, n'hésiterons pas à vous aider). Mais soyez prudent(e) malgré tout, certains deviennent susceptibles dès que l'on écorne leur copyright. <|> prudent(e) => suggestions : ['prudent·e']

192 Mot inconnu : control [[17:24]] => === Le fichier « control » === <|> control

196 Écriture invariable. Utilisez un point médian. [[53:66]] => Le premier paragraphe décrit le paquet source. Le(s) paragraphe(s) suivant(s) décrit(décrivent) le(s) paquet(s) binaire(s), car il peut y avoir plusieurs paquets binaires générés pour un seul paquet source. Les champs présents dans ce fichier squelette **doivent** être présents. <|> paragraphe(s) => suggestions : ['paragraphe·s']
196 Écriture invariable. Utilisez un point médian. [[67:77]] => Le premier paragraphe décrit le paquet source. Le(s) paragraphe(s) suivant(s) décrit(décrivent) le(s) paquet(s) binaire(s), car il peut y avoir plusieurs paquets binaires générés pour un seul paquet source. Les champs présents dans ce fichier squelette **doivent** être présents. <|> suivant(s) => suggestions : ['suivant·s']
196 Il manque un espace avant la parenthèse. [[84:85]] => Le premier paragraphe décrit le paquet source. Le(s) paragraphe(s) suivant(s) décrit(décrivent) le(s) paquet(s) binaire(s), car il peut y avoir plusieurs paquets binaires générés pour un seul paquet source. Les champs présents dans ce fichier squelette **doivent** être présents. <|> ( => suggestions : [' (']
196 Écriture invariable. Utilisez un point médian. [[102:111]] => Le premier paragraphe décrit le paquet source. Le(s) paragraphe(s) suivant(s) décrit(décrivent) le(s) paquet(s) binaire(s), car il peut y avoir plusieurs paquets binaires générés pour un seul paquet source. Les champs présents dans ce fichier squelette **doivent** être présents. <|> paquet(s) => suggestions : ['paquet·s']
196 Écriture invariable. Utilisez un point médian. [[112:122]] => Le premier paragraphe décrit le paquet source. Le(s) paragraphe(s) suivant(s) décrit(décrivent) le(s) paquet(s) binaire(s), car il peut y avoir plusieurs paquets binaires générés pour un seul paquet source. Les champs présents dans ce fichier squelette **doivent** être présents. <|> binaire(s) => suggestions : ['binaire·s']

198 Mot inconnu : oeil [[25:29]] => Jetons d'abord un coup d'oeil aux champs concernant le paquet source : <|> oeil
199 Mot inconnu : packagez [[40:48]] =>   * Source: le nom du logiciel que vous packagez <|> packagez
201 Mot inconnu : Priority [[4:12]] =>   * Priority: l'importance du paquet. Le kernel a en général une importance plus grande qu'un applet pour le panel KDE ;) <|> priority
202 Mot inconnu : Maintainer [[4:14]] =>   * Maintainer: Le mainteneur du paquet, en l'occurrence : vous <adresse@foo.bar> <|> maintainer
203 Mot inconnu : Build-Depends [[4:17]] =>   * Build-Depends: la liste des paquets nécessaires à la compilation des sources (/!\, les paquets nécessaires à la compilation sont en général différents de ceux nécessaires à l'exécution du programme compilé) <|> build-depends
207 Mot inconnu : policy [[10:16]] => La debian policy peut faire peur... mais c'est la référence pour l'empaquetage debian/ubuntu. <|> policy
207 Typographie : points de suspension. Utilisez le caractère dédié. [[32:35]] => La debian policy peut faire peur... mais c'est la référence pour l'empaquetage debian/ubuntu. <|> ... => suggestions : ['…']

209 Mot inconnu : oeil [[25:29]] => Jetons ensuite un coup d'oeil aux champs concernant le paquet binaire :  <|> oeil
209 Espace(s) en fin de ligne à supprimer. [[71:72]] => Jetons ensuite un coup d'oeil aux champs concernant le paquet binaire :  <|>   => suggestions : ['']
211 Mot inconnu : i386 [[117:121]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> i386
211 Mot inconnu : powerpc [[123:130]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> powerpc
211 Typographie : points de suspension. Utilisez le caractère dédié. [[130:133]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> ... => suggestions : ['…']
211 Guillemets typographiques ouvrants. [[149:150]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> " => suggestions : ['«\xa0', '“']
211 Mot inconnu : all [[150:153]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> all
211 Guillemets typographiques fermants. [[153:154]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> " => suggestions : ['\xa0»', '”']
211 Guillemets typographiques ouvrants. [[308:309]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> " => suggestions : ['«\xa0', '“']
211 Mot inconnu : any [[309:312]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> any
211 Guillemets typographiques fermants. [[312:313]] =>   * Architecture: l'architecture pour laquelle sera valable le paquet binaire. Ça peut être une architecture unique (i386, powerpc...), une liste ou "all" (un seul et même paquet binaire sera utilisable sur toutes les architectures, comme dans le cas d'une application python ou d'un script bash), ou encore "any" (dans ce cas le paquet source doit être compilé sur chacune des architectures disponibles) <|> " => suggestions : ['\xa0»', '”']
212 Mot inconnu : Depends [[4:11]] =>   * Depends: les dépendances du paquet (${shlibs:Depends} sera remplacé plus tard lors de la construction du paquet grâce à un outil fort pratique) <|> depends
212 Mot inconnu : shlibs [[42:48]] =>   * Depends: les dépendances du paquet (${shlibs:Depends} sera remplacé plus tard lors de la construction du paquet grâce à un outil fort pratique) <|> shlibs
212 Il manque un espace. [[49:56]] =>   * Depends: les dépendances du paquet (${shlibs:Depends} sera remplacé plus tard lors de la construction du paquet grâce à un outil fort pratique) <|> depends => suggestions : [' Depends']
212 Mot inconnu : Depends [[49:56]] =>   * Depends: les dépendances du paquet (${shlibs:Depends} sera remplacé plus tard lors de la construction du paquet grâce à un outil fort pratique) <|> depends
213 Mot inconnu : synaptic [[208:216]] =>   * Description: une description courte (d'une ligne), suivie d'une description plus longue (dont chaque ligne commence par un espace). C'est cette description qui apparaît dans les propriétés du paquet dans synaptic. Le plus simple est d'aller chercher un texte dans un  fichier readme des sources (s'il y en a un), ou sur le site de l'auteur. <|> synaptic
213 Espace(s) surnuméraire(s) à supprimer. [[270:272]] =>   * Description: une description courte (d'une ligne), suivie d'une description plus longue (dont chaque ligne commence par un espace). C'est cette description qui apparaît dans les propriétés du paquet dans synaptic. Le plus simple est d'aller chercher un texte dans un  fichier readme des sources (s'il y en a un), ou sur le site de l'auteur. <|>    => suggestions : [' ']
213 Mot inconnu : readme [[280:286]] =>   * Description: une description courte (d'une ligne), suivie d'une description plus longue (dont chaque ligne commence par un espace). C'est cette description qui apparaît dans les propriétés du paquet dans synaptic. Le plus simple est d'aller chercher un texte dans un  fichier readme des sources (s'il y en a un), ou sur le site de l'auteur. <|> readme

215 Guillemets typographiques ouvrants. [[109:110]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> " => suggestions : ['«\xa0', '“']
215 Mot inconnu : Suggests [[110:118]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> suggests
215 Mot inconnu : foo1 [[120:124]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> foo1
215 Mot inconnu : foo2 [[126:130]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> foo2
215 Mot inconnu : foo3 [[132:136]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> foo3
215 Guillemets typographiques fermants. [[136:137]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> " => suggestions : ['\xa0»', '”']
215 Guillemets typographiques ouvrants. [[141:142]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> " => suggestions : ['«\xa0', '“']
215 Mot inconnu : Recommends [[142:152]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> recommends
215 Mot inconnu : bar1 [[154:158]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> bar1
215 Mot inconnu : bar2 [[160:164]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> bar2
215 Mot inconnu : bar3 [[166:170]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> bar3
215 Guillemets typographiques fermants. [[170:171]] => Notez que l'on peut indiquer ici les paquets supplémentaires suggérés par l'application à l'aide d'une ligne "Suggests: foo1, foo2, foo3" ou "Recommends: bar1, bar2, bar3". <|> " => suggestions : ['\xa0»', '”']

219 Mot inconnu : Build-Depends [[72:85]] => La difficulté principale de cette étape est d'indiquer correctement les Build-Depends. Elles peuvent être déterminées en fouillant les sources ou en compilant à la main l'application (grâce aux messages d'erreurs du ./configure notamment). Elles sont quelquefois indiquées sur le site du projet. <|> build-depends

223 Mot inconnu : debhelper [[15:24]] => == Le paquet « debhelper » == <|> debhelper

225 Mot inconnu : Build-Depends [[14:27]] => Dans la ligne Build-Depends figure la mention d'un paquet particulier : le paquet debhelper. <|> build-depends
225 Mot inconnu : debhelper [[82:91]] => Dans la ligne Build-Depends figure la mention d'un paquet particulier : le paquet debhelper. <|> debhelper

227 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:9]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> debhelper => suggestions : ['Debhelper']
227 Mot inconnu : debhelper [[0:9]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> debhelper
227 Guillemets typographiques ouvrants. [[125:126]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> ' => suggestions : ['“', '‘', '‹']
227 Mot inconnu : dh_ [[126:129]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> dh_
227 Mot inconnu : dh_truc [[206:213]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> dh_truc
227 Mot inconnu : rules [[318:323]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> rules
227 Guillemets typographiques ouvrants. [[397:398]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> " => suggestions : ['«\xa0', '“']
227 Mot inconnu : debhelper [[412:421]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> debhelper
227 Guillemets typographiques fermants. [[421:422]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> " => suggestions : ['\xa0»', '”']
227 Mot inconnu : debhelper [[482:491]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> debhelper
227 Mot inconnu : dh_make [[509:516]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> dh_make
227 Mot inconnu : debhelper [[555:564]] => debhelper est un outil qui facilite la vie des empaqueteurs, avec tout un tas de petits scripts dont les noms commencent par 'dh_'. Chacun a un rôle particulier et fonctionne différemment. La commande `man dh_truc` vous apprendra tout ce qu'il faut savoir ;). On verra quelques exemples en regardant le fichier debian/rules. La version de référence pour Ubuntu Dapper et Edgy est la version 5. La "compatibilité debhelper" (cf paragraphe suivant) correspond à la version majeure de debhelper (c'est donc 5). `dh_make` utilise par défaut une compatibilité debhelper 4 sous dapper. Veillez à mettre à jour les informations (bien que ce ne soit à priori pas vital pour la compilation de votre paquet). <|> debhelper

229 Mot inconnu : compat [[17:23]] => === Le fichier « compat » === <|> compat

231 Mot inconnu : debhelper [[44:53]] => Ce fichier sert à indiquer la compatibilité debhelper.  <|> debhelper
231 Espace(s) en fin de ligne à supprimer. [[54:55]] => Ce fichier sert à indiquer la compatibilité debhelper.  <|>   => suggestions : ['']

233 Mot inconnu : rules [[17:22]] => === Le fichier « rules » === <|> rules

235 Mot inconnu : rules [[13:18]] => Le fichier « rules » est un fichier exécutable. C'est lui qui va servir à piloter la compilation lors de la création du paquet binaire. <|> rules

237 Mot inconnu : make [[204:208]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> make
237 Guillemets typographiques ouvrants. [[225:226]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['«\xa0', '“']
237 Guillemets typographiques fermants. [[231:232]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['\xa0»', '”']
237 Guillemets typographiques ouvrants. [[269:270]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['«\xa0', '“']
237 Mot inconnu : install [[270:277]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> install
237 Guillemets typographiques fermants. [[277:278]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['\xa0»', '”']
237 Mot inconnu : CURDIR [[329:335]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> curdir
237 Mot inconnu : make [[361:365]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> make
237 Mot inconnu : install [[366:373]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> install
237 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[414:416]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|>  . => suggestions : ['. ', '.']
237 Guillemets typographiques ouvrants. [[436:437]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['«\xa0', '“']
237 Mot inconnu : binary-install [[437:451]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> binary-install
237 Guillemets typographiques fermants. [[451:452]] => C'est ce fichier qui contient les règles nécessaires à la compilation du paquet. Le principe est simple. Il s'agit tout simplement de compiler le logiciel exactement comme on compile avec `./configure && make`(c'est la règle "build"), et de l'installer (c'est la règle "install") non pas sur le système, mais dans un dossier ("$(CURDIR)/debian/<paquet>", avec `make install`), avant de pouvoir en faire une archive .deb (c'est la règle "binary-install"). <|> " => suggestions : ['\xa0»', '”']

239 Mot inconnu : rules [[11:16]] => Le fichier rules est un makefile  dont chaque cible est appelée lors de la construction du paquet. Chaque partie correspond en fait à une certaine étape de la compilation : <|> rules
239 Mot inconnu : makefile [[24:32]] => Le fichier rules est un makefile  dont chaque cible est appelée lors de la construction du paquet. Chaque partie correspond en fait à une certaine étape de la compilation : <|> makefile
239 Espace(s) surnuméraire(s) à supprimer. [[32:34]] => Le fichier rules est un makefile  dont chaque cible est appelée lors de la construction du paquet. Chaque partie correspond en fait à une certaine étape de la compilation : <|>    => suggestions : [' ']
240 Il manque un espace. [[11:17]] =>   * config.status: correspond au `./configure` (avec un paquet d'options dans notre fichier rules) <|> status => suggestions : [' status']
240 S’il s’agit d’un impératif, ajoutez un “s”. [[19:29]] =>   * config.status: correspond au `./configure` (avec un paquet d'options dans notre fichier rules) <|> correspond => suggestions : ['corresponds']
240 Mot inconnu : rules [[92:97]] =>   * config.status: correspond au `./configure` (avec un paquet d'options dans notre fichier rules) <|> rules
241 S’il s’agit d’un impératif, ajoutez un “s”. [[11:21]] =>   * build: correspond au `make` ($(MAKE)) <|> correspond => suggestions : ['corresponds']
241 Mot inconnu : make [[26:30]] =>   * build: correspond au `make` ($(MAKE)) <|> make
241 Mot inconnu : MAKE [[35:39]] =>   * build: correspond au `make` ($(MAKE)) <|> make
242 Mot inconnu : install [[4:11]] =>   * install: correspond au `make install` <|> install
242 S’il s’agit d’un impératif, ajoutez un “s”. [[13:23]] =>   * install: correspond au `make install` <|> correspond => suggestions : ['corresponds']
242 Mot inconnu : make [[28:32]] =>   * install: correspond au `make install` <|> make
242 Mot inconnu : install [[33:40]] =>   * install: correspond au `make install` <|> install
244 Mot inconnu : Makefile [[55:63]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> makefile
244 Mot inconnu : rules [[91:96]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> rules
244 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. [[172:176]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> 1ère => suggestions : ['1ʳᵉ']
244 Guillemets typographiques ouvrants. [[187:188]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> " => suggestions : ['«\xa0', '“']
244 Mot inconnu : debuild [[188:195]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> debuild
244 Guillemets typographiques fermants. [[195:196]] => <note important>//ATTENTION// : si l'on met un fichier Makefile à la racine de son projet, rules lancera la première cible ce qui est potentiellement catastrophique (si la 1ère cible est "debuild", il tournera en boucle par exemple)</note> <|> " => suggestions : ['\xa0»', '”']

246 Mot inconnu : CURDIR [[35:41]] => Ici l'installation se fait dans "$(CURDIR)/debian/epdfview", donc dans le dossier « debian/ » créé tout à l'heure. <|> curdir
246 Mot inconnu : epdfview [[50:58]] => Ici l'installation se fait dans "$(CURDIR)/debian/epdfview", donc dans le dossier « debian/ » créé tout à l'heure. <|> epdfview
246 Guillemets typographiques fermants. [[58:59]] => Ici l'installation se fait dans "$(CURDIR)/debian/epdfview", donc dans le dossier « debian/ » créé tout à l'heure. <|> " => suggestions : ['\xa0»', '”']

247 Mot inconnu : rules [[13:18]] => Le fichier « rules » que vous avez n'a pas à être modifié pour notre exemple. <|> rules

254 Mot inconnu : epdvfiew [[46:54]] => Cette page est à installer dans « ~/packaging/epdvfiew/epdfview-0.1.5/debian ». <|> epdvfiew
254 Mot inconnu : epdfview-0 [[55:65]] => Cette page est à installer dans « ~/packaging/epdvfiew/epdfview-0.1.5/debian ». <|> epdfview-0
255 Mot inconnu : dpatch [[230:236]] => Si vous ajoutez un fichier dans les sources c'est **toujours et uniquement** dans le dossier **debian**. Les sources de l'auteur ne doivent en aucun cas être directement modifiées (vous pouvez utiliser un système de patch tel que dpatch ou simple-patchsys, ce que nous n'aborderons pas ici). <|> dpatch
255 Mot inconnu : simple-patchsys [[240:255]] => Si vous ajoutez un fichier dans les sources c'est **toujours et uniquement** dans le dossier **debian**. Les sources de l'auteur ne doivent en aucun cas être directement modifiées (vous pouvez utiliser un système de patch tel que dpatch ou simple-patchsys, ce que nous n'aborderons pas ici). <|> simple-patchsys

257 Mot inconnu : dh_installman [[74:87]] => Pour indiquer que l'on veut ajouter cette page man on va utiliser l'outil dh_installman. Cela va se faire via le fichier debian/rules. <|> dh_installman
257 Mot inconnu : rules [[128:133]] => Pour indiquer que l'on veut ajouter cette page man on va utiliser l'outil dh_installman. Cela va se faire via le fichier debian/rules. <|> rules

258 Mot inconnu : rules [[28:33]] => Cherchez dans votre fichier rules la ligne qui contient //dh_installman// (normalement ligne 92 ou 93). On va préciser quelle page man on veut installer en la changeant en : <|> rules
258 Mot inconnu : dh_installman [[58:71]] => Cherchez dans votre fichier rules la ligne qui contient //dh_installman// (normalement ligne 92 ou 93). On va préciser quelle page man on veut installer en la changeant en : <|> dh_installman

262 Mot inconnu : dh_installman [[25:38]] => (vous aurez remarqué que dh_installman fait partie des outils du paquet debhelper). <|> dh_installman
262 Mot inconnu : debhelper [[72:81]] => (vous aurez remarqué que dh_installman fait partie des outils du paquet debhelper). <|> debhelper

264 Mot inconnu : dh_ [[48:51]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> dh_
264 Mot inconnu : debhelper [[235:244]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> debhelper
264 Guillemets typographiques ouvrants. [[292:293]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> " => suggestions : ['«\xa0', '“']
264 Guillemets typographiques fermants. [[299:300]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> " => suggestions : ['\xa0»', '”']
264 Mot inconnu : dh_ [[324:327]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> dh_
264 Il manque un espace à côté du tiret. [[410:412]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|>  - => suggestions : [' – ', ' — ']
264 Mot inconnu : dh_ [[417:420]] => Pour avoir des informations sur tous les outils dh_* que vous voyez listés dans ce fichier n'hésitez pas à consulter les pages man. Elles ont toutes été traduites en français (et en espagnol). Ces traductions font partie intégrante de debhelper et s'installent donc automatiquement. Si votre "locale" est «*.fr» alors « man dh_* » affiche directement la version française, sinon il faut le spécifier avec « man -L fr dh_* ». <|> dh_

268 Mot inconnu : dirs [[17:21]] => === Le fichier « dirs » === <|> dirs

270 Mot inconnu : dirs [[13:17]] => Le fichier « dirs » permet de créer des répertoires qui ne sont pas créés automatiquement à l'installation du programme. <|> dirs

284 Mot inconnu : fakeroot [[36:44]] => La commande utilise automatiquement fakeroot (commande simulant les privilèges super-utilisateur) si rien est précisé (voir le man de debuild). <|> fakeroot
284 Mot inconnu : debuild [[134:141]] => La commande utilise automatiquement fakeroot (commande simulant les privilèges super-utilisateur) si rien est précisé (voir le man de debuild). <|> debuild

295 Mot inconnu : debuild [[124:131]] => Pas de panique contrairement, à ce qui est indiqué ce n'est pas une erreur si fatale que cela. Elle signifie simplement que debuild n'a pas pu signer le paquet avec une clef gpg.\\ <|> debuild
295 Mot inconnu : gpg [[174:177]] => Pas de panique contrairement, à ce qui est indiqué ce n'est pas une erreur si fatale que cela. Elle signifie simplement que debuild n'a pas pu signer le paquet avec une clef gpg.\\ <|> gpg

297 Mot inconnu : gpg [[22:25]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> gpg
297 Si “l’ adresse…” est bien le COD du participe passé “indiqué”, celui-ci devrait être au féminin singulier. [[66:73]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> indiqué => suggestions : ['indiquée']
297 Mot inconnu : k0x12345678 [[108:119]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> k0x12345678
297 Mot inconnu : debuild [[156:163]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> debuild
297 Formatage des grands nombres. [[167:175]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> 12345678 => suggestions : ['12\xa0345\xa0678']
297 Mot inconnu : gpg [[236:239]] => Si vous avez une clef gpg associée à l'adresse mail que vous avez indiqué au début, vous pouvez utiliser **-k0x12345678** comme paramètre supplémentaire de debuild où 12345678 est remplacé par l’identifiant de 8 caractères de votre clé gpg **publique**.\\ <|> gpg

315 Pas d’espace avant une virgule. [[49:51]] => Votre clef hexadécimale de 8 caractères récupérée , il vous suffit de rajouter un 0x devant afin de l'exploiter dans debuild sous forme : <|>  , => suggestions : [',']
315 Mot inconnu : debuild [[117:124]] => Votre clef hexadécimale de 8 caractères récupérée , il vous suffit de rajouter un 0x devant afin de l'exploiter dans debuild sous forme : <|> debuild

318 Mot inconnu : devscripts [[55:65]] => Une autre solution est d'ajouter dans votre fichier **.devscripts** (dans votre $HOME : le créer si besoin) export DEBSIGN_KEYID=<clé_publique_de_8_caractères> pour qu'elle soit prise en compte automatiquement. Pour une prise en compte immédiate, relancez le shell, ou bien entrez la commande : <|> devscripts
318 Mot inconnu : DEBSIGN_KEYID [[115:128]] => Une autre solution est d'ajouter dans votre fichier **.devscripts** (dans votre $HOME : le créer si besoin) export DEBSIGN_KEYID=<clé_publique_de_8_caractères> pour qu'elle soit prise en compte automatiquement. Pour une prise en compte immédiate, relancez le shell, ou bien entrez la commande : <|> debsign_keyid

321 Mot inconnu : debuild [[66:73]] => <note>//Note :// si votre clef nécessite une phrase de passe, que debuild ne vous le  demande et que le message d'erreur suivant apparait : <|> debuild
321 Espace(s) surnuméraire(s) à supprimer. [[84:86]] => <note>//Note :// si votre clef nécessite une phrase de passe, que debuild ne vous le  demande et que le message d'erreur suivant apparait : <|>    => suggestions : [' ']

327 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  Taper les lignes suivantes de commande suivante et lancer debuild à nouveau : <|>   => suggestions : ['']
327 Mot inconnu : debuild [[59:66]] =>  Taper les lignes suivantes de commande suivante et lancer debuild à nouveau : <|> debuild

346 Mot inconnu : pbuilder [[19:27]] => === Préparation de pbuilder=== <|> pbuilder

349 Mot inconnu : pbuilder [[25:33]] => Lors de l'utilisation de pbuilder pour construire le paquet binaire, le chroot va être décompressé, les Build-Deps installées, et le paquet compilé. S'il manque une Build-Dep, la compilation échouera.\\ <|> pbuilder
349 Mot inconnu : chroot [[72:78]] => Lors de l'utilisation de pbuilder pour construire le paquet binaire, le chroot va être décompressé, les Build-Deps installées, et le paquet compilé. S'il manque une Build-Dep, la compilation échouera.\\ <|> chroot
349 Mot inconnu : Build-Deps [[104:114]] => Lors de l'utilisation de pbuilder pour construire le paquet binaire, le chroot va être décompressé, les Build-Deps installées, et le paquet compilé. S'il manque une Build-Dep, la compilation échouera.\\ <|> build-deps
349 Mot inconnu : Build-Dep [[165:174]] => Lors de l'utilisation de pbuilder pour construire le paquet binaire, le chroot va être décompressé, les Build-Deps installées, et le paquet compilé. S'il manque une Build-Dep, la compilation échouera.\\ <|> build-dep

350 Mot inconnu : pbuilder [[24:32]] => Le principal intérêt de pbuilder est de vérifier que les Build Deps sont bonnes (cf. notre fichier control). <|> pbuilder
350 Accord de nombre erroné : « Build » devrait être au pluriel. [[57:62]] => Le principal intérêt de pbuilder est de vérifier que les Build Deps sont bonnes (cf. notre fichier control). <|> build => suggestions : ['Builds']
350 Mot inconnu : Deps [[63:67]] => Le principal intérêt de pbuilder est de vérifier que les Build Deps sont bonnes (cf. notre fichier control). <|> deps
350 Mot inconnu : control [[99:106]] => Le principal intérêt de pbuilder est de vérifier que les Build Deps sont bonnes (cf. notre fichier control). <|> control

352 Mot inconnu : Universe [[26:34]] => Pour supporter les dépôts Universe et Multiverse <|> universe
352 Mot inconnu : Multiverse [[38:48]] => Pour supporter les dépôts Universe et Multiverse <|> multiverse

359 Mot inconnu : pbuilder [[17:25]] => Pour initialiser pbuilder, tapez dans votre terminal :  <|> pbuilder
359 Espace(s) en fin de ligne à supprimer. [[54:55]] => Pour initialiser pbuilder, tapez dans votre terminal :  <|>   => suggestions : ['']

365 Mot inconnu : universe [[60:68]] => La première ligne permet d'activer l'utilisation des dépôts universe et multiverse sous dapper (désactivés par défaut). La seconde crée le chroot et le compresse. <|> universe
365 Mot inconnu : multiverse [[72:82]] => La première ligne permet d'activer l'utilisation des dépôts universe et multiverse sous dapper (désactivés par défaut). La seconde crée le chroot et le compresse. <|> multiverse
365 Mot inconnu : chroot [[139:145]] => La première ligne permet d'activer l'utilisation des dépôts universe et multiverse sous dapper (désactivés par défaut). La seconde crée le chroot et le compresse. <|> chroot
378 Mot inconnu : epdfview [[145:153]] => Une fois l'étape précédente terminée il ne vous reste plus qu'à taper la commande suivante pour compiler votre paquet source (dans « ~/packaging/epdfview ») : <|> epdfview

391 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[36:38]] => Une fois cette étape terminée, votre .deb est dans **/var/cache/pbuilder/result** <|>  . => suggestions : ['. ', '.']
393 Espace(s) en fin de ligne à supprimer. [[57:58]] => En dernière étape, nous allons vérifier quelques points :  <|>   => suggestions : ['']

396 Mot inconnu : shlibs [[31:37]] => </code>Notez que la variable ${shlibs:Depends} a été remplacée par une liste de bibliothèques (avec précision des versions pour certaines). <|> shlibs
396 Il manque un espace. [[38:45]] => </code>Notez que la variable ${shlibs:Depends} a été remplacée par une liste de bibliothèques (avec précision des versions pour certaines). <|> depends => suggestions : [' Depends']
396 Mot inconnu : Depends [[38:45]] => </code>Notez que la variable ${shlibs:Depends} a été remplacée par une liste de bibliothèques (avec précision des versions pour certaines). <|> depends

404 Mot inconnu : lintian [[21:28]] => Cet avertissement de lintian : <|> lintian
405 Mot inconnu : epdfview [[5:13]] => > W: epdfview: old-fsf-address-in-copyright-file  <|> epdfview
405 Espace(s) en fin de ligne à supprimer. [[48:49]] => > W: epdfview: old-fsf-address-in-copyright-file  <|>   => suggestions : ['']

408 Mot inconnu : lintian [[40:47]] => Linda fonctionne de la même manière que lintian. <|> lintian
411 Accord de nombre erroné avec « 59 » : « Temple » devrait être au pluriel. [[30:36]] => L'ancienne adresse était : 59 Temple Place - Suite 330, Boston, MA 02111-1307 USA qu'il faut remplacer par : 51 Franklin Street, Fifth Floor, Boston, MA <|> temple => suggestions : ['Temples']
411 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[42:45]] => L'ancienne adresse était : 59 Temple Place - Suite 330, Boston, MA 02111-1307 USA qu'il faut remplacer par : 51 Franklin Street, Fifth Floor, Boston, MA <|>  -  => suggestions : [' – ', ' — ', ' − ']
411 Mot inconnu : Fifth [[129:134]] => L'ancienne adresse était : 59 Temple Place - Suite 330, Boston, MA 02111-1307 USA qu'il faut remplacer par : 51 Franklin Street, Fifth Floor, Boston, MA <|> fifth
411 Mot inconnu : Floor [[135:140]] => L'ancienne adresse était : 59 Temple Place - Suite 330, Boston, MA 02111-1307 USA qu'il faut remplacer par : 51 Franklin Street, Fifth Floor, Boston, MA <|> floor

426 Mot inconnu : make [[44:48]] => === L'étape de création de paquet échoue au make, comment gérer les dépendances ? === <|> make

428 Mot inconnu : sudo [[1:5]] => `sudo pbuilder login` vous amènera dans l'environnement chrooté, donc sans paquets installés. Utilisez le `./configure && make` ici pour savoir quels paquets sont nécessaires à la compilation. <|> sudo
428 Mot inconnu : pbuilder [[6:14]] => `sudo pbuilder login` vous amènera dans l'environnement chrooté, donc sans paquets installés. Utilisez le `./configure && make` ici pour savoir quels paquets sont nécessaires à la compilation. <|> pbuilder
428 Mot inconnu : chrooté [[56:63]] => `sudo pbuilder login` vous amènera dans l'environnement chrooté, donc sans paquets installés. Utilisez le `./configure && make` ici pour savoir quels paquets sont nécessaires à la compilation. <|> chrooté
428 S’il s’agit d’un impératif, mettez un trait d’union. [[94:105]] => `sudo pbuilder login` vous amènera dans l'environnement chrooté, donc sans paquets installés. Utilisez le `./configure && make` ici pour savoir quels paquets sont nécessaires à la compilation. <|> utilisez le => suggestions : ['Utilisez-le']
428 Mot inconnu : make [[122:126]] => `sudo pbuilder login` vous amènera dans l'environnement chrooté, donc sans paquets installés. Utilisez le `./configure && make` ici pour savoir quels paquets sont nécessaires à la compilation. <|> make

430 Mot inconnu : debuild [[25:32]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|> debuild
430 Il manque un espace à côté du tiret. [[32:34]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|>  - => suggestions : [' – ', ' — ']
430 Confusion probable : “sa” est un déterminant féminin singulier. Pour l’équivalent de “cela” ou “ceci”, écrivez “ça”. [[37:39]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|> sa => suggestions : ['ça']
430 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[56:58]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|>  . => suggestions : ['. ', '.']
430 Mot inconnu : diff [[58:62]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|> diff
430 Mot inconnu : gz [[63:65]] => === Après avoir exécuté `debuild -S -sa`, je n'ai pas de .diff.gz ! === <|> gz

432 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[29:31]] => C'est que la syntaxe de votre .orig.tar.gz n'est pas correcte. Vérifiez bien qu'il est de la forme : nomDuPaquet**_**x.y.z.orig.tar.gz <|>  . => suggestions : ['. ', '.']
432 Mot inconnu : nomDuPaquet [[101:112]] => C'est que la syntaxe de votre .orig.tar.gz n'est pas correcte. Vérifiez bien qu'il est de la forme : nomDuPaquet**_**x.y.z.orig.tar.gz <|> nomdupaquet
432 Sigle. Il est recommandé d’ôter les points pour les sigles. [[117:123]] => C'est que la syntaxe de votre .orig.tar.gz n'est pas correcte. Vérifiez bien qu'il est de la forme : nomDuPaquet**_**x.y.z.orig.tar.gz <|> x.y.z. => suggestions : ['XYZ']

434 Guillemets typographiques ouvrants. [[9:10]] => Notez le '_' (pas de '-'), qui est souvent source d'erreur. <|> ' => suggestions : ['“', '‘', '‹']
434 Guillemets typographiques fermants. [[11:12]] => Notez le '_' (pas de '-'), qui est souvent source d'erreur. <|> ' => suggestions : ['”', '’', '›']

436 Mot inconnu : debuild [[24:31]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|> debuild
436 Il manque un espace à côté du tiret. [[31:33]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|>  - => suggestions : [' – ', ' — ']
436 Confusion probable : “sa” est un déterminant féminin singulier. Pour l’équivalent de “cela” ou “ceci”, écrivez “ça”. [[36:38]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|> sa => suggestions : ['ça']
436 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[82:84]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|>  . => suggestions : ['. ', '.']
436 Mot inconnu : diff [[84:88]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|> diff
436 Mot inconnu : gz [[89:91]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|> gz
436 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[115:117]] => Lors de l'exécution de `debuild -S -sa`, vous pouvez vérifier qu'il a bien créé le .diff.gz et tenu compte de votre .orig.tar.gz en cherchant les lignes suivantes : <|>  . => suggestions : ['. ', '.']

440 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[58:60]] => === Le programme que je veux empaqueter est fourni dans un .tar.bz2. Qu'est-ce que j'en fait ? === <|>  . => suggestions : ['. ', '.']
440 Mot inconnu : bz2 [[64:67]] => === Le programme que je veux empaqueter est fourni dans un .tar.bz2. Qu'est-ce que j'en fait ? === <|> bz2
440 Conjugaison erronée. Accord avec “j’”. Le verbe devrait être à la 1ʳᵉ personne du singulier. [[88:92]] => === Le programme que je veux empaqueter est fourni dans un .tar.bz2. Qu'est-ce que j'en fait ? === <|> fait => suggestions : ['fis', 'fais', 'faisais']

442 Mot inconnu : gzip [[53:57]] => Il faut absolument avoir une archive compressée avec gzip. Décompressez ce que vous avez téléchargé avec : <|> gzip

446 Mot inconnu : gzip [[23:27]] => puis recompressez avec gzip (compression maximale) : <|> gzip

450 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[42:44]] => Renommez enfin votre archive pour avoir un .orig.tar.gz correct. <|>  . => suggestions : ['. ', '.']

452 Mot inconnu : app [[92:95]] => === De nombreuses applications sous Ubuntu sont disponibles via plusieurs paquets notamment app.deb et app-common.deb. Comment cela est il obtenu ? === <|> app
452 Mot inconnu : app-common [[103:113]] => === De nombreuses applications sous Ubuntu sont disponibles via plusieurs paquets notamment app.deb et app-common.deb. Comment cela est il obtenu ? === <|> app-common
452 Forme interrogative ? Mettez un trait d’union. [[132:138]] => === De nombreuses applications sous Ubuntu sont disponibles via plusieurs paquets notamment app.deb et app-common.deb. Comment cela est il obtenu ? === <|> est il => suggestions : ['est-il']
457 Mot inconnu : control [[61:68]] =>   * Décrire les deux paquets binaires résultants dans debian/control (en plus de la description du paquet source) <|> control
458 Mot inconnu : app [[63:66]] =>   * en installant les fichiers voulus dans les dossiers debian/app et debian/app-common <|> app
458 Mot inconnu : app-common [[77:87]] =>   * en installant les fichiers voulus dans les dossiers debian/app et debian/app-common <|> app-common

460 Il manque un espace à côté du tiret. [[56:58]] => L'intérêt de ce procédé est de n'avoir qu'un seul paquet -common sur les dépôts, utilisable sur toutes les architectures (des images, fichiers .xml, etc). <|>  - => suggestions : [' – ', ' — ']
460 Mot inconnu : common [[58:64]] => L'intérêt de ce procédé est de n'avoir qu'un seul paquet -common sur les dépôts, utilisable sur toutes les architectures (des images, fichiers .xml, etc). <|> common
460 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[142:144]] => L'intérêt de ce procédé est de n'avoir qu'un seul paquet -common sur les dépôts, utilisable sur toutes les architectures (des images, fichiers .xml, etc). <|>  . => suggestions : ['. ', '.']
