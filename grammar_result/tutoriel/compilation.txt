35 Mot inconnu : fakeroot [[52:60]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|> fakeroot
35 Mot inconnu : checkinstall [[68:80]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|> checkinstall
35 Mot inconnu : checkinstall [[143:155]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|> checkinstall
35 Mettez des guillemets fermants plutôt qu’ouvrants. [[213:215]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|>  « => suggestions : None
35 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[215:217]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|>  . => suggestions : None
35 Espace(s) surnuméraire(s) à supprimer. [[278:280]] => Nous vous suggérons aussi d'installer les paquets « fakeroot » et « checkinstall » et nous supposerons que vous les aurez installés. L'outil « checkinstall » surveille la procédure d'installation et crée un paquet « .deb » qui sera présent dans votre liste de paquets installés.  Ceci aura pour avantage de vous permettre une désinstallation simplifiée et propre, si vous souhaitez désinstaller ultérieurement vos logiciels et bibliothèques. <|>    => suggestions : None
46 Mot inconnu : README [[321:327]] => Si le système APT récupère toutes les dépendances d'un logiciel, ce n'est pas le cas lorsque vous effectuez vous-même une compilation. Parcourez bien le site du projet et les pages de documentation afin de savoir quelles dépendances nécessite le logiciel (fréquemment, vous en trouverez aussi une liste dans le fichier « README » se trouvant dans l'archive contenant le code source). Beaucoup de paquets sont disponibles dans les dépôts APT pour les satisfaire. <|> readme

55 Mot inconnu : dev [[150:153]] => Le plus important pour une bonne compilation, ce sont les bibliothèques de développement. Elles sont contenues dans des paquets qui finissent par "**-dev**". Pour connaître celles qui sont nécessaires, lisez bien les fichiers README ou INSTALL livrés habituellement avec le programme. <|> dev
55 Mot inconnu : README [[226:232]] => Le plus important pour une bonne compilation, ce sont les bibliothèques de développement. Elles sont contenues dans des paquets qui finissent par "**-dev**". Pour connaître celles qui sont nécessaires, lisez bien les fichiers README ou INSTALL livrés habituellement avec le programme. <|> readme
55 Mot inconnu : INSTALL [[236:243]] => Le plus important pour une bonne compilation, ce sont les bibliothèques de développement. Elles sont contenues dans des paquets qui finissent par "**-dev**". Pour connaître celles qui sont nécessaires, lisez bien les fichiers README ou INSTALL livrés habituellement avec le programme. <|> install
57 Mot inconnu : dev [[204:207]] => Par exemple, si le logiciel dispose d'une interface graphique en GTK+, il vous faut les bibliothèques de développement GTK+. En général, le nom du paquet à récupérer a la forme « //nom-de-la-dépendance//-dev » et se trouve dans Synaptic ; ici, le paquet à installer se nommerait « libgtk2.0-dev ». <|> dev
57 Mot inconnu : Synaptic [[228:236]] => Par exemple, si le logiciel dispose d'une interface graphique en GTK+, il vous faut les bibliothèques de développement GTK+. En général, le nom du paquet à récupérer a la forme « //nom-de-la-dépendance//-dev » et se trouve dans Synaptic ; ici, le paquet à installer se nommerait « libgtk2.0-dev ». <|> synaptic
57 Mot inconnu : libgtk2 [[281:288]] => Par exemple, si le logiciel dispose d'une interface graphique en GTK+, il vous faut les bibliothèques de développement GTK+. En général, le nom du paquet à récupérer a la forme « //nom-de-la-dépendance//-dev » et se trouve dans Synaptic ; ici, le paquet à installer se nommerait « libgtk2.0-dev ». <|> libgtk2
57 Mot inconnu : dev [[291:294]] => Par exemple, si le logiciel dispose d'une interface graphique en GTK+, il vous faut les bibliothèques de développement GTK+. En général, le nom du paquet à récupérer a la forme « //nom-de-la-dépendance//-dev » et se trouve dans Synaptic ; ici, le paquet à installer se nommerait « libgtk2.0-dev ». <|> dev

61 Accord de nombre erroné avec « les paquets » : « utile » devrait être au pluriel. [[55:60]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> utile => suggestions : None
61 Mot inconnu : apt-cache [[96:105]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> apt-cache
61 Mot inconnu : showsrc [[106:113]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> showsrc
61 Mot inconnu : dépots [[121:127]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> dépots
61 Guillemets typographiques ouvrants. [[135:136]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> " => suggestions : None
61 Mot inconnu : deb-src [[136:143]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> deb-src
61 Guillemets typographiques fermants. [[143:144]] => Une méthode très intéressante pour trouver les paquets utile à la compilation est la commande **apt-cache showsrc** (Les dépots source "deb-src" doivent être activés !!). Cette commande n'est valide que pour les logiciels déjà présents dans les dépôts (et que vous compilez pour profiter d'une mise-à-jour). <|> " => suggestions : None

70 Mot inconnu : build-dep [[39:48]] => Vous pouvez aussi utiliser directement build-dep : <|> build-dep
85 Mot inconnu : Tab [[47:50]] => <note tip>N'hésitez pas à utiliser la touche « Tab » de votre clavier pour compléter automatiquement le nom de commandes et de fichiers dans votre terminal. ;-)</note> <|> tab
90 Espace(s) surnuméraire(s) à supprimer. [[100:102]] => La procédure pour récupérer un code source depuis un dépôt CVS ou SVN varie d'une place à une autre.  Les instructions pour récupérer le code source sont indiquées, dans la plupart des cas, sur la page des téléchargements du site du logiciel concerné ou dans les pages pour développeurs. <|>    => suggestions : None

97 Mot inconnu : sudo [[41:45]] => Pour compiler un programme sans utiliser sudo rajouter l'utilisateur au groupe src. <|> sudo
97 Mot inconnu : src [[79:82]] => Pour compiler un programme sans utiliser sudo rajouter l'utilisateur au groupe src. <|> src

134 Mot inconnu : apt-get [[211:218]] => Tout paquet Debian/Ubuntu qui se respecte liste toutes les dépendances qui lui sont nécessaires tant à l'exécution comme à la compilation. La manière la plus simple de télécharger les dépendances est d'utiliser apt-get avec l'option build-dep, ainsi la commande : <|> apt-get
134 Mot inconnu : build-dep [[233:242]] => Tout paquet Debian/Ubuntu qui se respecte liste toutes les dépendances qui lui sont nécessaires tant à l'exécution comme à la compilation. La manière la plus simple de télécharger les dépendances est d'utiliser apt-get avec l'option build-dep, ainsi la commande : <|> build-dep
142 Incohérence avec “de” : “configure” est une forme verbale conjuguée. [[21:30]] => === Les erreurs de « configure » === <|> configure => suggestions : None

144 Mot inconnu : Siles [[0:5]] => Siles dépendances ne sont pas installées, l'étape de configuration <|> siles

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  n'ira pas jusqu'au bout et vous donnera un message d'erreur indiquant ce qui manque. <|>   => suggestions : None
150 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. [[51:53]] => Prenons l'exemple de la dépendance manquante « gtk+-2.0 ». <|> -2 => suggestions : None
155 Mot inconnu : dev [[38:41]] => On sait que l'on cherche un paquet « -dev ». Donc on va utiliser la commande : <|> dev
159 Mot inconnu : names-only [[13:23]] => L'option « --names-only » permet de faire abstraction des descriptions des paquets pour la recherche. <|> names-only
174 Mot inconnu : libgtk2 [[29:36]] => Le paquet manquant était : **libgtk2.0-dev**. <|> libgtk2
174 Mot inconnu : dev [[39:42]] => Le paquet manquant était : **libgtk2.0-dev**. <|> dev
185 Mot inconnu : library [[96:103]] => Les fichiers appelés par les programmes en C sont des parties de bibliothèques (traduction de « library »). Les bibliothèques sont des ensembles de fonctions (des mini-programmes qui effectuent une tâche précise, par exemple réunir deux mots en un seul, afficher une image, réagir lorsqu'on clique...) qui n'ont pas besoin d'être réécrites à chaque fois que quelqu'un veut développer un logiciel. Par exemple, les bibliothèques GTK et Qt dépendent toutes deux de « libpng », qui sert à manipuler des images « .png » (pour un résultat totalement différent). <|> library
185 Typographie : points de suspension. Utilisez le caractère dédié. [[297:300]] => Les fichiers appelés par les programmes en C sont des parties de bibliothèques (traduction de « library »). Les bibliothèques sont des ensembles de fonctions (des mini-programmes qui effectuent une tâche précise, par exemple réunir deux mots en un seul, afficher une image, réagir lorsqu'on clique...) qui n'ont pas besoin d'être réécrites à chaque fois que quelqu'un veut développer un logiciel. Par exemple, les bibliothèques GTK et Qt dépendent toutes deux de « libpng », qui sert à manipuler des images « .png » (pour un résultat totalement différent). <|> ... => suggestions : None
185 Mot inconnu : libpng [[465:471]] => Les fichiers appelés par les programmes en C sont des parties de bibliothèques (traduction de « library »). Les bibliothèques sont des ensembles de fonctions (des mini-programmes qui effectuent une tâche précise, par exemple réunir deux mots en un seul, afficher une image, réagir lorsqu'on clique...) qui n'ont pas besoin d'être réécrites à chaque fois que quelqu'un veut développer un logiciel. Par exemple, les bibliothèques GTK et Qt dépendent toutes deux de « libpng », qui sert à manipuler des images « .png » (pour un résultat totalement différent). <|> libpng
185 Mettez des guillemets fermants plutôt qu’ouvrants. [[506:508]] => Les fichiers appelés par les programmes en C sont des parties de bibliothèques (traduction de « library »). Les bibliothèques sont des ensembles de fonctions (des mini-programmes qui effectuent une tâche précise, par exemple réunir deux mots en un seul, afficher une image, réagir lorsqu'on clique...) qui n'ont pas besoin d'être réécrites à chaque fois que quelqu'un veut développer un logiciel. Par exemple, les bibliothèques GTK et Qt dépendent toutes deux de « libpng », qui sert à manipuler des images « .png » (pour un résultat totalement différent). <|>  « => suggestions : None
185 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[508:510]] => Les fichiers appelés par les programmes en C sont des parties de bibliothèques (traduction de « library »). Les bibliothèques sont des ensembles de fonctions (des mini-programmes qui effectuent une tâche précise, par exemple réunir deux mots en un seul, afficher une image, réagir lorsqu'on clique...) qui n'ont pas besoin d'être réécrites à chaque fois que quelqu'un veut développer un logiciel. Par exemple, les bibliothèques GTK et Qt dépendent toutes deux de « libpng », qui sert à manipuler des images « .png » (pour un résultat totalement différent). <|>  . => suggestions : None
191 Mot inconnu : dev [[93:96]] => Pour chaque bibliothèque existante dans Ubuntu, il existe un paquet dont le nom finit par « -dev », qu'il est nécessaire d'installer pour compiler les logiciels qui dépendent de cette bibliothèque. <|> dev
195 Mot inconnu : autotools [[11:20]] => ==== Les « autotools » ==== <|> autotools

197 Mot inconnu : autotools [[15:24]] => En fait, des //autotools// créent le fichier « configure » des sources. Le fichier « configure » est un script exécutable, qui est dans votre dossier source il nécessite d'être exécuté avec « ./ ». <|> autotools
197 Mettez des guillemets fermants plutôt qu’ouvrants. [[189:191]] => En fait, des //autotools// créent le fichier « configure » des sources. Le fichier « configure » est un script exécutable, qui est dans votre dossier source il nécessite d'être exécuté avec « ./ ». <|>  « => suggestions : None
201 Mot inconnu : Makefile [[22:30]] => « configure » crée le Makefile à partir d'un Makefile.in (que vous avez dans les sources). Tout ça est créé à partir d'un fichier assez simple qu'écrit le développeur. <|> makefile
201 Mot inconnu : Makefile [[45:53]] => « configure » crée le Makefile à partir d'un Makefile.in (que vous avez dans les sources). Tout ça est créé à partir d'un fichier assez simple qu'écrit le développeur. <|> makefile
201 Il manque un espace. [[54:56]] => « configure » crée le Makefile à partir d'un Makefile.in (que vous avez dans les sources). Tout ça est créé à partir d'un fichier assez simple qu'écrit le développeur. <|> in => suggestions : None

202 Mot inconnu : autotools [[6:15]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|> autotools
202 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[18:21]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|>  -  => suggestions : None
202 Guillemets typographiques ouvrants. [[24:25]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|> " => suggestions : None
202 Guillemets typographiques fermants. [[54:55]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|> " => suggestions : None
202 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[55:58]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|>  -  => suggestions : None
202 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[220:223]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|>  -  => suggestions : None
202 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[235:238]] => Les //autotools//  - ou "outils de gestion automatisée" - forment un ensemble de scripts qui permettent la gestion des procédures de configuration, compilation et installation très complexes à partir de quelques fichiers - relativement - simples. <|>  -  => suggestions : None

208 Mot inconnu : make [[4:8]] => === make === <|> make
210 Mot inconnu : make [[2:6]] => « make » peut être suivi d'un mot clé comme « install », « uninstall », « clean », « distclean ». Ça permet d'appeler une fonction particulière du Makefile : <|> make
210 Mot inconnu : install [[46:53]] => « make » peut être suivi d'un mot clé comme « install », « uninstall », « clean », « distclean ». Ça permet d'appeler une fonction particulière du Makefile : <|> install
210 Mot inconnu : uninstall [[59:68]] => « make » peut être suivi d'un mot clé comme « install », « uninstall », « clean », « distclean ». Ça permet d'appeler une fonction particulière du Makefile : <|> uninstall
210 Mot inconnu : distclean [[85:94]] => « make » peut être suivi d'un mot clé comme « install », « uninstall », « clean », « distclean ». Ça permet d'appeler une fonction particulière du Makefile : <|> distclean
210 Mot inconnu : Makefile [[147:155]] => « make » peut être suivi d'un mot clé comme « install », « uninstall », « clean », « distclean ». Ça permet d'appeler une fonction particulière du Makefile : <|> makefile
211 Mot inconnu : make [[6:10]] =>   * « make install » permet d'installer le programme ; <|> make
211 Mot inconnu : install [[11:18]] =>   * « make install » permet d'installer le programme ; <|> install
212 Mot inconnu : make [[6:10]] =>   * « make uninstall » permet de tout désinstaller ; <|> make
212 Mot inconnu : uninstall [[11:20]] =>   * « make uninstall » permet de tout désinstaller ; <|> uninstall
213 Mot inconnu : make [[6:10]] =>   * « make clean » supprime tout ce qui a été créé pendant la compilation ; <|> make
214 Mot inconnu : make [[6:10]] =>   * « make distclean » supprime aussi ce que « configure » a généré. <|> make
214 Mot inconnu : distclean [[11:20]] =>   * « make distclean » supprime aussi ce que « configure » a généré. <|> distclean

216 Mot inconnu : apt-file [[4:12]] => === apt-file === <|> apt-file

223 Mot inconnu : apt-get [[35:42]] => On l'initialise ensuite comme pour apt-get en tapant : <|> apt-get
227 Mot inconnu : libgthread [[102:112]] => Dans notre exemple de tout à l'heure, on voulait trouver dans quel paquet se trouve la bibliothèque « libgthread », on tape alors : <|> libgthread
231 Mot inconnu : libglib2 [[36:44]] => Le paquet recherché est donc soit « libglib2.0-dev » soit « libglib1.2-dev ». <|> libglib2
231 Mot inconnu : dev [[47:50]] => Le paquet recherché est donc soit « libglib2.0-dev » soit « libglib1.2-dev ». <|> dev
231 Mot inconnu : libglib1 [[60:68]] => Le paquet recherché est donc soit « libglib2.0-dev » soit « libglib1.2-dev ». <|> libglib1
231 Mot inconnu : dev [[71:74]] => Le paquet recherché est donc soit « libglib2.0-dev » soit « libglib1.2-dev ». <|> dev

237 Accord de genre erroné : « sources » est féminin. [[15:17]] => Il se base sur le « sources.list ». <|> le => suggestions : None
237 Accord de genre erroné : « le » est un déterminant masculin. [[20:27]] => Il se base sur le « sources.list ». <|> sources => suggestions : None
237 Mot inconnu : list [[28:32]] => Il se base sur le « sources.list ». <|> list
