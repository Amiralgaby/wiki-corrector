
4 Mot inconnu : linux => ====== Les commandes de base en console linux ====== | linux
16 Espace(s) surnuméraire(s) à supprimer. => Le titre est un peu compliqué, mais le principe est simple : un fichier peut être référencé de manière **relative**, par rapport au répertoire courant, ou de manière **absolue** par rapport à la racine.  Le premier caractère de la référence permet d'effectuer la distinction : les références absolues commencent toujours par le caractère **/**, alors que les références relatives commencent par tout autre caractère valide pour un nom de fichier.\\ |    => suggestions : [' ']

17 Mot inconnu : MonFichier => Ainsi, les deux commandes ci-dessous sont équivalentes et peuvent être utilisées l'une comme l'autre pour renommer le fichier MonFichier localisé dans le répertoire personnel de l'utilisateur (/home/user) : | monfichier

19 Mot inconnu : mv => user@mulet:~$ mv MonFichier NouveauNomDuFichier | mv
19 Mot inconnu : MonFichier => user@mulet:~$ mv MonFichier NouveauNomDuFichier | monfichier
19 Mot inconnu : NouveauNomDuFichier => user@mulet:~$ mv MonFichier NouveauNomDuFichier | nouveaunomdufichier

22 Mot inconnu : srv => user@mulet:/srv $ mv /home/user/MonFichier /home/user/NouveauNomDuFichier | srv
22 Mot inconnu : mv => user@mulet:/srv $ mv /home/user/MonFichier /home/user/NouveauNomDuFichier | mv
24 Mot inconnu : srv => Dans le premier exemple, l'invite système (user@mulet:~$) montre que le répertoire courant est le répertoire personnel de l'utilisateur ("~", caractère spécial équivalent /home/user) ; la référence au fichier à renommer est exprimée de manière relative par rapport à ce répertoire. Dans le second exemple, l'invite système montre que le répertoire courant est /srv ; pour désigner le même fichier, il faut donc utiliser une référence absolue : /home/user/MonFichier (qui aurait tout aussi bien pu être exprimée par ~/MonFichier). | srv
24 Mot inconnu : MonFichier => Dans le premier exemple, l'invite système (user@mulet:~$) montre que le répertoire courant est le répertoire personnel de l'utilisateur ("~", caractère spécial équivalent /home/user) ; la référence au fichier à renommer est exprimée de manière relative par rapport à ce répertoire. Dans le second exemple, l'invite système montre que le répertoire courant est /srv ; pour désigner le même fichier, il faut donc utiliser une référence absolue : /home/user/MonFichier (qui aurait tout aussi bien pu être exprimée par ~/MonFichier). | monfichier

26 Mot inconnu : srv => user@mulet:/srv $ mv /home/user/MonFichier '/home/user/Nouveau NomDuFichier' | srv
26 Mot inconnu : mv => user@mulet:/srv $ mv /home/user/MonFichier '/home/user/Nouveau NomDuFichier' | mv
26 Mot inconnu : NomDuFichier => user@mulet:/srv $ mv /home/user/MonFichier '/home/user/Nouveau NomDuFichier' | nomdufichier
26 Guillemets typographiques fermants. => user@mulet:/srv $ mv /home/user/MonFichier '/home/user/Nouveau NomDuFichier' | ' => suggestions : ['”', '’', '›']

31 Espace(s) surnuméraire(s) à supprimer. => Les caractères spéciaux **~**,  **.** et **..** correspondent respectivement au répertoire personnel de l'utilisateur, au répertoire courant et au répertoire parent. Ils permettent tous les trois de simplifier l'expression de références absolues. \\ |    => suggestions : [' ']
31 Typographie : un ou trois points ? => Les caractères spéciaux **~**,  **.** et **..** correspondent respectivement au répertoire personnel de l'utilisateur, au répertoire courant et au répertoire parent. Ils permettent tous les trois de simplifier l'expression de références absolues. \\ | .. => suggestions : ['…', '.']

32 Mot inconnu : UnRep => Ainsi pour déplacer le fichier **/UnRep/MonFichier** respectivement dans le répertoire de l'utilisateur (/home/user), le répertoire courant (/rep1/sousrep2) ou le sous-répertoire toto du répertoire parent (/rep1/toto), on pourra utiliser les commandes ci-dessous : | unrep
32 Mot inconnu : MonFichier => Ainsi pour déplacer le fichier **/UnRep/MonFichier** respectivement dans le répertoire de l'utilisateur (/home/user), le répertoire courant (/rep1/sousrep2) ou le sous-répertoire toto du répertoire parent (/rep1/toto), on pourra utiliser les commandes ci-dessous : | monfichier
32 Mot inconnu : rep1 => Ainsi pour déplacer le fichier **/UnRep/MonFichier** respectivement dans le répertoire de l'utilisateur (/home/user), le répertoire courant (/rep1/sousrep2) ou le sous-répertoire toto du répertoire parent (/rep1/toto), on pourra utiliser les commandes ci-dessous : | rep1
32 Mot inconnu : sousrep2 => Ainsi pour déplacer le fichier **/UnRep/MonFichier** respectivement dans le répertoire de l'utilisateur (/home/user), le répertoire courant (/rep1/sousrep2) ou le sous-répertoire toto du répertoire parent (/rep1/toto), on pourra utiliser les commandes ci-dessous : | sousrep2
32 Mot inconnu : rep1 => Ainsi pour déplacer le fichier **/UnRep/MonFichier** respectivement dans le répertoire de l'utilisateur (/home/user), le répertoire courant (/rep1/sousrep2) ou le sous-répertoire toto du répertoire parent (/rep1/toto), on pourra utiliser les commandes ci-dessous : | rep1

34 Mot inconnu : rep1 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ~ | rep1
34 Mot inconnu : sousrep2 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ~ | sousrep2
34 Mot inconnu : mv => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ~ | mv
34 Mot inconnu : UnRep => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ~ | unrep
34 Mot inconnu : MonFichier => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ~ | monfichier

37 Mot inconnu : rep1 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier . | rep1
37 Mot inconnu : sousrep2 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier . | sousrep2
37 Mot inconnu : mv => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier . | mv
37 Mot inconnu : UnRep => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier . | unrep
37 Mot inconnu : MonFichier => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier . | monfichier

40 Mot inconnu : rep1 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | rep1
40 Mot inconnu : sousrep2 => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | sousrep2
40 Mot inconnu : mv => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | mv
40 Mot inconnu : UnRep => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | unrep
40 Mot inconnu : MonFichier => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | monfichier
40 Typographie : un ou trois points ? => user@mulet:/rep1/sousrep2 $ mv /UnRep/MonFichier ../toto/ | .. => suggestions : ['…', '.']

59 Mot inconnu : ls => ==== ls ==== | ls

76 Mot inconnu : dir => Il existe également une commande **dir** quasi identique à la commande **ls**. Elle s'utilise de la même façon, avec les mêmes options, et les pages man (manuel) les 2 commandes sont d'ailleurs identiques. | dir
76 Mot inconnu : ls => Il existe également une commande **dir** quasi identique à la commande **ls**. Elle s'utilise de la même façon, avec les mêmes options, et les pages man (manuel) les 2 commandes sont d'ailleurs identiques. | ls

77 Mot inconnu : dir => Seul l'affichage par défaut de la sortie est différent avec **dir** :  | dir
77 Espace(s) en fin de ligne à supprimer. => Seul l'affichage par défaut de la sortie est différent avec **dir** :  |   => suggestions : ['']

80 Mot inconnu : ls => La commande << **ls -C -b** >> produira une sortie identique à la commande **dir** employée sans options. | ls
80 Il manque un espace à côté du tiret. => La commande << **ls -C -b** >> produira une sortie identique à la commande **dir** employée sans options. |  - => suggestions : [' – ', ' — ']
80 Mot inconnu : dir => La commande << **ls -C -b** >> produira une sortie identique à la commande **dir** employée sans options. | dir

93 Mot inconnu : mv => ==== mv ==== | mv

106 Mot inconnu : cp => ==== cp ==== | cp

122 Mot inconnu : rm => ==== rm ==== | rm

137 Mot inconnu : mkdir => ==== mkdir ==== | mkdir

146 Mot inconnu : rmdir => ==== rmdir ==== | rmdir

170 Mot inconnu : pwd => ==== pwd ==== | pwd

187 Mot inconnu : find => ==== find ==== | find

228 Mot inconnu : grep => ==== grep ==== | grep

244 Mot inconnu : locate => ==== locate ==== | locate

245 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Son utilisation - très simple - est détaillée ici : |  -  => suggestions : [' – ', ' — ', ' − ']
245 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Son utilisation - très simple - est détaillée ici : |  -  => suggestions : [' – ', ' — ', ' − ']

248 Mot inconnu : cat => ==== cat ==== | cat

270 Mot inconnu : less => ==== less ==== | less

285 Accord de genre erroné entre « informations » et « utilisateur ». => La commande **id** affiche les informations utilisateur et de groupe pour un utilisateur spécifié, ou si aucun utilisateur n'est spécifié, elle affiche les informations sur l'utilisateur courant | utilisateur => suggestions : ['utilisatrices']

293 Mot inconnu : chmod => ==== chmod ==== | chmod

319 Mot inconnu : chown => ==== chown ==== | chown

329 Mot inconnu : chgrp => ==== chgrp ==== | chgrp

340 Mot inconnu : free => ==== free ==== | free

355 Mot inconnu : mount => ==== mount ==== | mount

384 Mot inconnu : umount => ==== umount ==== | umount

398 Mot inconnu : sudo => ==== sudo ==== | sudo
425 Il manque un espace à côté du tiret. => Avec l'utilisation de grep une ligne supplémentaire apparaît contenant: //grep -E --color=auto tuxpaint// correspondant à l'action de la recherche avec grep, à ignorer. Si vous ne voulez pas que ça apparaisse: <code bash>ps aux | egrep '[t]uxpaint'</code> </note> |  - => suggestions : [' – ', ' — ']
425 Mot inconnu : color => Avec l'utilisation de grep une ligne supplémentaire apparaît contenant: //grep -E --color=auto tuxpaint// correspondant à l'action de la recherche avec grep, à ignorer. Si vous ne voulez pas que ça apparaisse: <code bash>ps aux | egrep '[t]uxpaint'</code> </note> | color
425 Mot inconnu : tuxpaint => Avec l'utilisation de grep une ligne supplémentaire apparaît contenant: //grep -E --color=auto tuxpaint// correspondant à l'action de la recherche avec grep, à ignorer. Si vous ne voulez pas que ça apparaisse: <code bash>ps aux | egrep '[t]uxpaint'</code> </note> | tuxpaint

427 Mot inconnu : kill => ==== kill / killall ==== | kill

447 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   |   => suggestions : ['']

448 Mot inconnu : shutdown => ==== shutdown ==== | shutdown

464 Mot inconnu : shutdown => <note tip>Il semblerait que shutdown now ne fonctionne plus, ni sur Ubuntu, ni sur OpenBSD (du moins sur les miens). Cependant, la commande **shutdown -P now** fonctionne.</note> | shutdown
464 Mot inconnu : now => <note tip>Il semblerait que shutdown now ne fonctionne plus, ni sur Ubuntu, ni sur OpenBSD (du moins sur les miens). Cependant, la commande **shutdown -P now** fonctionne.</note> | now
464 Mot inconnu : shutdown => <note tip>Il semblerait que shutdown now ne fonctionne plus, ni sur Ubuntu, ni sur OpenBSD (du moins sur les miens). Cependant, la commande **shutdown -P now** fonctionne.</note> | shutdown
464 Il manque un espace à côté du tiret. => <note tip>Il semblerait que shutdown now ne fonctionne plus, ni sur Ubuntu, ni sur OpenBSD (du moins sur les miens). Cependant, la commande **shutdown -P now** fonctionne.</note> |  - => suggestions : [' – ', ' — ']
464 Mot inconnu : now => <note tip>Il semblerait que shutdown now ne fonctionne plus, ni sur Ubuntu, ni sur OpenBSD (du moins sur les miens). Cependant, la commande **shutdown -P now** fonctionne.</note> | now

466 Guillemets typographiques ouvrants. => <note tip>En effet, il suffit de remplacer "now" par "0" soit 0 minutes et le tour est joué.</note> | " => suggestions : ['«\xa0', '“']
466 Mot inconnu : now => <note tip>En effet, il suffit de remplacer "now" par "0" soit 0 minutes et le tour est joué.</note> | now
466 Guillemets typographiques fermants. => <note tip>En effet, il suffit de remplacer "now" par "0" soit 0 minutes et le tour est joué.</note> | " => suggestions : ['\xa0»', '”']
466 Guillemets typographiques ouvrants. => <note tip>En effet, il suffit de remplacer "now" par "0" soit 0 minutes et le tour est joué.</note> | " => suggestions : ['«\xa0', '“']
466 Guillemets typographiques fermants. => <note tip>En effet, il suffit de remplacer "now" par "0" soit 0 minutes et le tour est joué.</note> | " => suggestions : ['\xa0»', '”']

468 Mot inconnu : passwd => ==== passwd ==== | passwd

476 Mot inconnu : groups => ==== groups ==== | groups

483 Mot inconnu : adduser => ==== adduser ==== | adduser

501 Mot inconnu : deluser => ==== deluser ==== | deluser

512 Mot inconnu : usermod => ==== usermod ==== | usermod

523 Mot inconnu : df => ==== df ==== | df

537 Mot inconnu : fdisk => ==== fdisk ==== | fdisk

562 Mot inconnu : uptime => ==== uptime ==== | uptime

568 Mot inconnu : lspci => ==== lspci ==== | lspci

576 Mot inconnu : lsusb => ==== lsusb ==== | lsusb

584 Mot inconnu : uname => ==== uname ==== | uname

598 Mot inconnu : apt-get => ==== apt-get ==== | apt-get

628 Mot inconnu : apt-cache => ==== apt-cache ====  | apt-cache
628 Espace(s) en fin de ligne à supprimer. => ==== apt-cache ====  |   => suggestions : ['']

657 Mot inconnu : systemctl => ==== systemctl ==== | systemctl

690 Espace(s) en fin de ligne à supprimer. => ==== Liens externes ====  |   => suggestions : ['']

703 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  --- //Contributeurs : [[utilisateurs:CyberSDF]]// |   => suggestions : ['']
