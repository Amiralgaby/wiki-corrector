
5 Mot inconnu : Mplayer [[24:31]] => ====== Comment utiliser Mplayer en esclave ? ====== <|> mplayer

15 Mot inconnu : mplayer [[21:28]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> mplayer
15 Mot inconnu : backend [[51:58]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> backend
15 Mot inconnu : mplayer [[78:85]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> mplayer
15 Accord de nombre erroné avec « connaissance ». [[243:250]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> rapides => suggestions : ['rapide']
15 Accord de nombre erroné avec « rapides ». [[251:263]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> connaissance => suggestions : ['connaissances']
15 Mot inconnu : mplayer [[308:315]] => Cette utilisation de mplayer est dite en tant que «backend», c'est-à-dire que mplayer devient contrôlable par n'importe quel programme ou script. C'est cette deuxième solution qui va nous intéresser. Pour suivre ce tutoriel, il faudra donc de rapides connaissance sur les scripts shell. La lecture du man de mplayer permettra une meilleure compréhension de la suite. <|> mplayer

22 Mot inconnu : Let's [[6:11]] => ===== Let's go ? ===== <|> let's

24 Mot inconnu : mplayer [[63:70]] => Tout d'abord, il faut trouver la commande adéquate pour lancer mplayer. Le manuel nous informe qu'il faut utiliser l'argument -slave. <|> mplayer
24 Il manque un espace à côté du tiret. [[125:127]] => Tout d'abord, il faut trouver la commande adéquate pour lancer mplayer. Le manuel nous informe qu'il faut utiliser l'argument -slave. <|>  - => suggestions : [' – ', ' — ']

29 Mot inconnu : NB [[0:2]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|> nb
29 Il manque un espace à côté du tiret. [[15:17]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|>  - => suggestions : [' – ', ' — ']
29 Mot inconnu : shuffle [[17:24]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|> shuffle
29 Mot inconnu : idle [[66:70]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|> idle
29 Mot inconnu : mplayer [[79:86]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|> mplayer
29 Il manque un espace à côté du tiret. [[119:121]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|>  - => suggestions : [' – ', ' — ']
29 Mot inconnu : préloader [[140:149]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|> préloader
29 Espace(s) en fin de ligne à supprimer. [[163:164]] => NB : l'argument -shuffle permet de rendre la playlist aléatoire ,-idle évite à mplayer de quitter si rien n'est joué et -playlist permet de préloader une playlist.  <|>   => suggestions : ['']

32 Mot inconnu : fifofile [[70:78]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> fifofile
32 Il manque les traits d’union. [[80:92]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> c'est à dire => suggestions : ['C’est-à-dire']
32 Mot inconnu : stdin [[153:158]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> stdin
32 Mot inconnu : mplayer [[173:180]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> mplayer
32 Mot inconnu : fifofile [[214:222]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> fifofile
32 Mot inconnu : mplayer [[243:250]] => Comme indiqué dans le man, cette commande implique l'utilisation d'un fifofile. C'est à dire un «fichier» qui servira à rediriger ce qui rentre dans son stdin vers celui de mplayer. Ainsi, les commandes passées au fifofile seront transmises à mplayer, qui les exécutera. Pour obtenir une liste des commandes disponibles, c'est : <|> mplayer

34 Mot inconnu : fifofile [[71:79]] => Le principe est donc simple, il suffit de passer des commandes à notre fifofile ce qui influencera le comportement de mplayer. <|> fifofile
34 Mot inconnu : mplayer [[118:125]] => Le principe est donc simple, il suffit de passer des commandes à notre fifofile ce qui influencera le comportement de mplayer. <|> mplayer

37 Accord de genre erroné entre « chemins » et « cités ». [[22:27]] => <note tip>Les chemins cités ci-dessous ne sont pas obligatoires, ils ne font qu'office d'exemple. Adaptez les en fonction en vos besoins et envies.</note> <|> cités => suggestions : ['cités', 'citées']

39 Mot inconnu : fifofile [[45:53]] => Nous allons tout d'abord créer notre fichier fifofile. Pour cela, simplement exécuter la commande "mkfifo". <|> fifofile
39 Guillemets typographiques ouvrants. [[98:99]] => Nous allons tout d'abord créer notre fichier fifofile. Pour cela, simplement exécuter la commande "mkfifo". <|> " => suggestions : ['«\xa0', '“']
39 Mot inconnu : mkfifo [[99:105]] => Nous allons tout d'abord créer notre fichier fifofile. Pour cela, simplement exécuter la commande "mkfifo". <|> mkfifo
39 Guillemets typographiques fermants. [[105:106]] => Nous allons tout d'abord créer notre fichier fifofile. Pour cela, simplement exécuter la commande "mkfifo". <|> " => suggestions : ['\xa0»', '”']

43 Mot inconnu : stdout [[14:20]] => Cependant, le stdout et le stderr nous intéressent, car ils permettent de récupérer le nom du titre joué, par exemple dans le cas d'une chanson (cf fixme). Nous allons donc les rediriger vers deux fichiers distincts. <|> stdout
43 Mot inconnu : stderr [[27:33]] => Cependant, le stdout et le stderr nous intéressent, car ils permettent de récupérer le nom du titre joué, par exemple dans le cas d'une chanson (cf fixme). Nous allons donc les rediriger vers deux fichiers distincts. <|> stderr

46 Mot inconnu : mplayer [[15:22]] => Pour contrôler mplayer, il suffit de rediriger le stdout d'un echo vers le stdin du fifofile. <|> mplayer
46 Mot inconnu : stdout [[50:56]] => Pour contrôler mplayer, il suffit de rediriger le stdout d'un echo vers le stdin du fifofile. <|> stdout
46 Mot inconnu : echo [[62:66]] => Pour contrôler mplayer, il suffit de rediriger le stdout d'un echo vers le stdin du fifofile. <|> echo
46 Mot inconnu : stdin [[75:80]] => Pour contrôler mplayer, il suffit de rediriger le stdout d'un echo vers le stdin du fifofile. <|> stdin
46 Mot inconnu : fifofile [[84:92]] => Pour contrôler mplayer, il suffit de rediriger le stdout d'un echo vers le stdin du fifofile. <|> fifofile

52 Mot inconnu : mplayer [[41:48]] => Cela affichera la ligne suivante dans ~/.mplayer/mplayer.log <|> mplayer
52 Mot inconnu : mplayer [[49:56]] => Cela affichera la ligne suivante dans ~/.mplayer/mplayer.log <|> mplayer
52 Il manque un espace. [[57:60]] => Cela affichera la ligne suivante dans ~/.mplayer/mplayer.log <|> log => suggestions : [' log']

56 Mot inconnu : grep [[51:55]] => Notez l'utilisation de tac, qui passe le fichier à grep en ordre inverse (dernière ligne en premier), c'est plus rapide que de démarrer au début. Une autre solution consiste à utiliser un fifo comme sortie de mplayer (au lieu du fichier .log), mais il est (très) difficile d'avoir le même script qui contrôle à la fois une fifo d'entrée et de sortie, donc il faudra avoir deux scripts (un qui envoie les commandes, un qui affiche les infos). <|> grep
56 Mot inconnu : fifo [[188:192]] => Notez l'utilisation de tac, qui passe le fichier à grep en ordre inverse (dernière ligne en premier), c'est plus rapide que de démarrer au début. Une autre solution consiste à utiliser un fifo comme sortie de mplayer (au lieu du fichier .log), mais il est (très) difficile d'avoir le même script qui contrôle à la fois une fifo d'entrée et de sortie, donc il faudra avoir deux scripts (un qui envoie les commandes, un qui affiche les infos). <|> fifo
56 Mot inconnu : mplayer [[209:216]] => Notez l'utilisation de tac, qui passe le fichier à grep en ordre inverse (dernière ligne en premier), c'est plus rapide que de démarrer au début. Une autre solution consiste à utiliser un fifo comme sortie de mplayer (au lieu du fichier .log), mais il est (très) difficile d'avoir le même script qui contrôle à la fois une fifo d'entrée et de sortie, donc il faudra avoir deux scripts (un qui envoie les commandes, un qui affiche les infos). <|> mplayer
56 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[236:238]] => Notez l'utilisation de tac, qui passe le fichier à grep en ordre inverse (dernière ligne en premier), c'est plus rapide que de démarrer au début. Une autre solution consiste à utiliser un fifo comme sortie de mplayer (au lieu du fichier .log), mais il est (très) difficile d'avoir le même script qui contrôle à la fois une fifo d'entrée et de sortie, donc il faudra avoir deux scripts (un qui envoie les commandes, un qui affiche les infos). <|>  . => suggestions : ['. ', '.']
56 Mot inconnu : fifo [[323:327]] => Notez l'utilisation de tac, qui passe le fichier à grep en ordre inverse (dernière ligne en premier), c'est plus rapide que de démarrer au début. Une autre solution consiste à utiliser un fifo comme sortie de mplayer (au lieu du fichier .log), mais il est (très) difficile d'avoir le même script qui contrôle à la fois une fifo d'entrée et de sortie, donc il faudra avoir deux scripts (un qui envoie les commandes, un qui affiche les infos). <|> fifo

80 Mot inconnu : mplayer [[14:21]] => Cet aspect de mplayer nous permet de le contrôler via des scripts bash.  <|> mplayer
80 Espace(s) en fin de ligne à supprimer. [[71:72]] => Cet aspect de mplayer nous permet de le contrôler via des scripts bash.  <|>   => suggestions : ['']

127 S’il s’agit de la préposition « à », il faut accentuer la majuscule. [[0:1]] => A l'aide de [[../xbindkeys]], on peut facilement arriver à tout contrôler au clavier ! <|> a => suggestions : ['À']
127 Typographie : un ou trois points ? [[14:16]] => A l'aide de [[../xbindkeys]], on peut facilement arriver à tout contrôler au clavier ! <|> .. => suggestions : ['…', '.']
127 Mot inconnu : xbindkeys [[17:26]] => A l'aide de [[../xbindkeys]], on peut facilement arriver à tout contrôler au clavier ! <|> xbindkeys
