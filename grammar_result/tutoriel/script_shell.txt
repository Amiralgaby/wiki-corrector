
7 Espace(s) surnuméraire(s) à supprimer. [[143:145]] => Un script shell permet d'automatiser une série d'opérations. Il se présente sous la forme d'un fichier contenant une ou plusieurs commandes qui  seront exécutées de manière séquentielle.  <|>    => suggestions :  
7 Espace(s) en fin de ligne à supprimer. [[186:187]] => Un script shell permet d'automatiser une série d'opérations. Il se présente sous la forme d'un fichier contenant une ou plusieurs commandes qui  seront exécutées de manière séquentielle.  <|>  

41 Espace(s) en fin de ligne à supprimer. [[94:95]] => Pour qu'il soit autorisé à se lancer en tant que programme, il faut modifier ses propriétés.\\  <|>  

42 Guillemets typographiques ouvrants. [[63:64]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions : « “
42 Guillemets typographiques fermants. [[75:76]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions :  »”
42 Guillemets typographiques ouvrants. [[81:82]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions : « “
42 Guillemets typographiques fermants. [[92:93]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions :  »”
42 Guillemets typographiques ouvrants. [[112:113]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions : « “
42 Guillemets typographiques fermants. [[164:165]] => Pour cela faites un clic droit sur son icône, et dans l'onglet "Permissions" des "Propriétés", cocher la case //"autoriser l'exécution du fichier comme un programme"//. <|> " => suggestions :  »”

49 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>   <|>  
59 Pas d’espace après ce signe. [[23:25]] => mais pas toujours bash ( dépend du langage du script ) <|> (  => suggestions : (
59 Pas d’espace avant ce signe. [[52:54]] => mais pas toujours bash ( dépend du langage du script ) <|>  ) => suggestions : )

68 Guillemets typographiques ouvrants. [[52:53]] => Il peut être intéressant d'ajouter un répertoire au "PATH" pour pouvoir exécuter ses scripts sans avoir à se placer dans le bon dossier. <|> " => suggestions : « “
68 Mot inconnu : PATH [[53:57]] => Il peut être intéressant d'ajouter un répertoire au "PATH" pour pouvoir exécuter ses scripts sans avoir à se placer dans le bon dossier. <|> path
68 Guillemets typographiques fermants. [[57:58]] => Il peut être intéressant d'ajouter un répertoire au "PATH" pour pouvoir exécuter ses scripts sans avoir à se placer dans le bon dossier. <|> " => suggestions :  »”

69 Guillemets typographiques ouvrants. [[46:47]] => Je m'explique, quand vous tapez une commande ("ls" par exemple), le shell regarde dans le PATH qui lui indique où chercher le code de la commande. <|> " => suggestions : « “
69 Mot inconnu : ls [[47:49]] => Je m'explique, quand vous tapez une commande ("ls" par exemple), le shell regarde dans le PATH qui lui indique où chercher le code de la commande. <|> ls
69 Guillemets typographiques fermants. [[49:50]] => Je m'explique, quand vous tapez une commande ("ls" par exemple), le shell regarde dans le PATH qui lui indique où chercher le code de la commande. <|> " => suggestions :  »”
69 Mot inconnu : PATH [[90:94]] => Je m'explique, quand vous tapez une commande ("ls" par exemple), le shell regarde dans le PATH qui lui indique où chercher le code de la commande. <|> path

71 Mot inconnu : PATH [[33:37]] => Pour voir à quoi ressemble votre PATH, tapez dans votre console: <|> path

77 Il manque les traits d’union. [[0:12]] => C'est à dire que le shell va aller voir si la définition de la commande tapée ("ls" pour continuer sur le même exemple) se trouve dans **/usr/local/bin** puis dans **/usr/bin**... jusqu'à ce qu'il la trouve. <|> c'est à dire => suggestions : C’est-à-dire
77 Guillemets typographiques ouvrants. [[79:80]] => C'est à dire que le shell va aller voir si la définition de la commande tapée ("ls" pour continuer sur le même exemple) se trouve dans **/usr/local/bin** puis dans **/usr/bin**... jusqu'à ce qu'il la trouve. <|> " => suggestions : « “
77 Mot inconnu : ls [[80:82]] => C'est à dire que le shell va aller voir si la définition de la commande tapée ("ls" pour continuer sur le même exemple) se trouve dans **/usr/local/bin** puis dans **/usr/bin**... jusqu'à ce qu'il la trouve. <|> ls
77 Guillemets typographiques fermants. [[82:83]] => C'est à dire que le shell va aller voir si la définition de la commande tapée ("ls" pour continuer sur le même exemple) se trouve dans **/usr/local/bin** puis dans **/usr/bin**... jusqu'à ce qu'il la trouve. <|> " => suggestions :  »”
77 Typographie : points de suspension. Utilisez le caractère dédié. [[176:179]] => C'est à dire que le shell va aller voir si la définition de la commande tapée ("ls" pour continuer sur le même exemple) se trouve dans **/usr/local/bin** puis dans **/usr/bin**... jusqu'à ce qu'il la trouve. <|> ... => suggestions : …

79 Mot inconnu : PATH [[25:29]] => Ajouter un répertoire au PATH peut donc être très pratique. Par convention, ce répertoire s'appelle **bin** et se place dans votre répertoire personnel. Si votre répertoire personnel est /home/toto, ce répertoire sera donc **/home/toto/bin**. <|> path
79 Mot inconnu : bin [[102:105]] => Ajouter un répertoire au PATH peut donc être très pratique. Par convention, ce répertoire s'appelle **bin** et se place dans votre répertoire personnel. Si votre répertoire personnel est /home/toto, ce répertoire sera donc **/home/toto/bin**. <|> bin

80 Guillemets fermants. [[73:75]] => Pour pouvoir utiliser vos scripts en tapant directement leur nom (sans le "./") depuis n'importe quel répertoire de votre ordinateur, il vous suffit d'indiquer au shell de chercher aussi dans ce nouveau dossier en l'ajoutant au PATH. <|>  " => suggestions :  »”
80 Mot inconnu : PATH [[228:232]] => Pour pouvoir utiliser vos scripts en tapant directement leur nom (sans le "./") depuis n'importe quel répertoire de votre ordinateur, il vous suffit d'indiquer au shell de chercher aussi dans ce nouveau dossier en l'ajoutant au PATH. <|> path

89 Guillemets typographiques ouvrants. [[35:36]] => et je peux lancer le script appelé "monScript" situé dans "/home/toto/bin" en tapant directement :  monScript <|> " => suggestions : « “
89 Mot inconnu : monScript [[36:45]] => et je peux lancer le script appelé "monScript" situé dans "/home/toto/bin" en tapant directement :  monScript <|> monscript
89 Guillemets typographiques fermants. [[45:46]] => et je peux lancer le script appelé "monScript" situé dans "/home/toto/bin" en tapant directement :  monScript <|> " => suggestions :  »”
89 Espace(s) surnuméraire(s) à supprimer. [[98:100]] => et je peux lancer le script appelé "monScript" situé dans "/home/toto/bin" en tapant directement :  monScript <|>    => suggestions :  
89 Mot inconnu : monScript [[100:109]] => et je peux lancer le script appelé "monScript" situé dans "/home/toto/bin" en tapant directement :  monScript <|> monscript

91 Mot inconnu : PATH [[66:70]] => <note tip>Cette procédure est pour une modification temporaire du PATH et qui sera donc effacée à la fin de la session. Pour rendre la modification permanente, ajouter la commande dans le fichier texte caché .bashrc se trouvant dans votre dossier personnel ainsi que dans le dossier /root.</note> <|> path
91 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[207:209]] => <note tip>Cette procédure est pour une modification temporaire du PATH et qui sera donc effacée à la fin de la session. Pour rendre la modification permanente, ajouter la commande dans le fichier texte caché .bashrc se trouvant dans votre dossier personnel ainsi que dans le dossier /root.</note> <|>  . => suggestions : .. 

93 Élision de l’article devant un mot commençant par une voyelle. [[44:47]] => <note important>Dans les dernières versions de ubuntu (12.04 +) si le dossier $HOME/bin existe il est automatiquement ajouté au PATH. La commande est incluse dans le fichier ~/.profile lancé lors de toutes sessions (graphique ou console).</note> <|> de  => suggestions : d’
93 Mot inconnu : PATH [[128:132]] => <note important>Dans les dernières versions de ubuntu (12.04 +) si le dossier $HOME/bin existe il est automatiquement ajouté au PATH. La commande est incluse dans le fichier ~/.profile lancé lors de toutes sessions (graphique ou console).</note> <|> path
101 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[4:9]] =>   * rbash : un shell restreint basé sur bash. Il existe de nombreuses variantes de bash ; <|> rbash => suggestions : Rbash
101 Mot inconnu : rbash [[4:9]] =>   * rbash : un shell restreint basé sur bash. Il existe de nombreuses variantes de bash ; <|> rbash
102 Mot inconnu : csh [[4:7]] =>   * csh, tcsh : shells C, créés par Bill Joy de Berkeley ; <|> csh
102 Mot inconnu : tcsh [[9:13]] =>   * csh, tcsh : shells C, créés par Bill Joy de Berkeley ; <|> tcsh
103 Mot inconnu : Falstad [[32:39]] =>   * zsh, shell C écrit par Paul Falstad ; <|> falstad
105 Mot inconnu : rc [[4:6]] =>   * rc : shell C, lui aussi conçu par le projet GNU ; <|> rc
106 Mot inconnu : tclsh [[4:9]] =>   * tclsh : shell utilisant Tcl ;                         <|> tclsh
106 Mot inconnu : Tcl [[28:31]] =>   * tclsh : shell utilisant Tcl ;                         <|> tcl
106 Espace(s) en fin de ligne à supprimer. [[33:57]] =>   * tclsh : shell utilisant Tcl ;                         <|>                         
107 Mot inconnu : wish [[4:8]] =>   * wish : shell utilisant Tk .       <|> wish
107 Mot inconnu : Tk [[27:29]] =>   * wish : shell utilisant Tk .       <|> tk
107 Pas d’espace avant un point. [[29:31]] =>   * wish : shell utilisant Tk .       <|>  . => suggestions : .
107 Espace(s) en fin de ligne à supprimer. [[31:37]] =>   * wish : shell utilisant Tk .       <|>       

111 Mot inconnu : sh [[14:16]] => La commande **sh** est en fait un lien symbolique vers l'interpréteur de commandes par défaut : **/bin/dash**. <|> sh
115 Mot inconnu : ma_variable [[81:92]] => Cela dépendra de son USAGE, pour une opération arithmétique prochaine voir : let ma_variable sinon pour conserver une valeur :  <|> ma_variable
115 Espace(s) en fin de ligne à supprimer. [[126:127]] => Cela dépendra de son USAGE, pour une opération arithmétique prochaine voir : let ma_variable sinon pour conserver une valeur :  <|>  

120 Espace(s) surnuméraire(s) à supprimer. [[3:5]] => Ici  la valeur est affectée à la variable ma_variable .\\ <|>    => suggestions :  
120 Mot inconnu : ma_variable [[42:53]] => Ici  la valeur est affectée à la variable ma_variable .\\ <|> ma_variable

124 Mot inconnu : nbre_lignes [[2:13]] => //nbre_lignes// contiendra le nombre de lignes contenu dans //fichier.ext// . <|> nbre_lignes
124 Mot inconnu : ext [[70:73]] => //nbre_lignes// contiendra le nombre de lignes contenu dans //fichier.ext// . <|> ext

126 Mot inconnu : echo [[50:54]] => Pour voir le contenu d'une variable, on utilisera echo (par exemple) : <|> echo
128 Mot inconnu : unmot [[11:16]] => renverra : unmot . <|> unmot
135 Mot inconnu : unmot [[36:41]] => renverront toutes la même réponse : unmot . <|> unmot

143 Accord de nombre erroné avec « Des variables » : « système » devrait être au pluriel. [[14:21]] => Des variables système permettent d'accélérer la saisie et la compréhension. <|> système => suggestions : systèmes

148 Mot inconnu : PATH [[12:16]] => HOME, USER, PATH, IFS,... <|> path
148 Erreur de numérisation ? Virgules au lieu de points ? [[21:25]] => HOME, USER, PATH, IFS,... <|> ,... => suggestions : ….
148 Typographie : points de suspension. Utilisez le caractère dédié. [[22:25]] => HOME, USER, PATH, IFS,... <|> ... => suggestions : …

153 Accord de genre erroné : « la variable » est féminin, « HOME » est masculin. [[38:42]] => Ce petit code va afficher la variable HOME à l'écran. <|> home

162 Mot inconnu : PID [[17:20]] => |$!| contient le PID de la dernière commande lancée| <|> pid
164 Mot inconnu : arg [[27:30]] => Exemple : créer le fichier arg.sh avec le contenu qui suit : <|> arg
164 Mot inconnu : sh [[31:33]] => Exemple : créer le fichier arg.sh avec le contenu qui suit : <|> sh
183 Espace(s) en fin de ligne à supprimer. [[48:49]] => Pour déclarer un tableau, plusieurs méthodes :\\  <|>  
184 Mot inconnu : ksh93 [[43:48]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> ksh93
184 Mot inconnu : ksh88 [[58:63]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> ksh88
184 Mot inconnu : dash [[73:77]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> dash
184 Guillemets typographiques ouvrants. [[97:98]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> " => suggestions : « “
184 Mot inconnu : sh [[98:100]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> sh
184 Guillemets typographiques fermants. [[100:101]] => première méthode (compatible bash, zsh, et ksh93 mais pas ksh88, ni avec dash, qui est lancé par "sh") : <|> " => suggestions :  »”
205 Mot inconnu : ksh93 [[23:28]] => ou bien (en bash ou en ksh93 mais pas en ksh88) : <|> ksh93
205 Mot inconnu : ksh88 [[41:46]] => ou bien (en bash ou en ksh93 mais pas en ksh88) : <|> ksh88

207 Pas d’espace après ce signe. [[10:12]] => ou encore ( C style ) : <|> (  => suggestions : (
207 Pas d’espace avant ce signe. [[19:21]] => ou encore ( C style ) : <|>  ) => suggestions : )

211 Mot inconnu : NB [[0:2]] => NB : toutes les variables sont des tableaux. Par défaut, c'est le premier élément qui est appelé : <|> nb

217 Mot inconnu : NB2 [[0:3]] => NB2 : les tableaux sont séparés par un séparateur défini : l'IFS.  <|> nb2
217 Accord de nombre erroné : après « l’ », « IFS » devrait être au singulier. [[61:64]] => NB2 : les tableaux sont séparés par un séparateur défini : l'IFS.  <|> ifs => suggestions : IF
217 Espace(s) en fin de ligne à supprimer. [[65:66]] => NB2 : les tableaux sont séparés par un séparateur défini : l'IFS.  <|>  

218 Accord de nombre erroné : après « l’ », « IFS » devrait être au singulier. [[13:16]] => Par défaut l'IFS est composé des trois caractères : $' \t\n' soit espace, tabulation, saut de ligne.  <|> ifs => suggestions : IF
218 Guillemets typographiques fermants. [[59:60]] => Par défaut l'IFS est composé des trois caractères : $' \t\n' soit espace, tabulation, saut de ligne.  <|> ' => suggestions : ’”›
218 Espace(s) en fin de ligne à supprimer. [[100:101]] => Par défaut l'IFS est composé des trois caractères : $' \t\n' soit espace, tabulation, saut de ligne.  <|>  

221 Mot inconnu : SEPARATEUR [[1:11]] => $SEPARATEUR pourra être : <|> separateur
222 Mot inconnu : pe [[16:18]] =>   * une lettre (pe : n, i,...) <|> pe
222 Erreur de numérisation ? Virgules au lieu de points ? [[25:29]] =>   * une lettre (pe : n, i,...) <|> ,... => suggestions : ….
222 Typographie : points de suspension. Utilisez le caractère dédié. [[26:29]] =>   * une lettre (pe : n, i,...) <|> ... => suggestions : …
223 Mot inconnu : pe [[21:23]] =>   * une ponctuation (pe : ',', '.', '-'...) <|> pe
223 Typographie : points de suspension. Utilisez le caractère dédié. [[39:42]] =>   * une ponctuation (pe : ',', '.', '-'...) <|> ... => suggestions : …
224 Guillemets typographiques fermants. [[32:33]] =>   * un caractère spécial : ($'\t' : tabulation, $'\n' : saut de ligne,...) <|> ' => suggestions : ’”›
224 Guillemets typographiques fermants. [[52:53]] =>   * un caractère spécial : ($'\t' : tabulation, $'\n' : saut de ligne,...) <|> ' => suggestions : ’”›
224 Erreur de numérisation ? Virgules au lieu de points ? [[69:73]] =>   * un caractère spécial : ($'\t' : tabulation, $'\n' : saut de ligne,...) <|> ,... => suggestions : ….
224 Typographie : points de suspension. Utilisez le caractère dédié. [[70:73]] =>   * un caractère spécial : ($'\t' : tabulation, $'\n' : saut de ligne,...) <|> ... => suggestions : …

232 Mot inconnu : sh [[17:19]] => Voici notre test.sh <|> sh
288 Guillemets typographiques ouvrants. [[66:67]] => | -f fichier      | renvoie 0 si fichier existe et est un fichier 'normal'.| <|> ' => suggestions : ‘“‹

291 Mot inconnu : f1 [[2:4]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|> f1
291 Il manque un espace à côté du tiret. [[4:6]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|>  - => suggestions :  –  — 
291 Mot inconnu : nt [[6:8]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|> nt
291 Mot inconnu : f2 [[9:11]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|> f2
291 Mot inconnu : f1 [[33:35]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|> f1
291 Mot inconnu : f2 [[56:58]] => | f1 -nt f2       | renvoie 0 si f1 est plus récent que f2.                | <|> f2

292 Mot inconnu : f1 [[2:4]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|> f1
292 Il manque un espace à côté du tiret. [[4:6]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|>  - => suggestions :  –  — 
292 Mot inconnu : ot [[6:8]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|> ot
292 Mot inconnu : f2 [[9:11]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|> f2
292 Mot inconnu : f1 [[33:35]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|> f1
292 Mot inconnu : f2 [[55:57]] => | f1 -ot f2       | renvoie 0 si f1 est plus vieux que f2.                 | <|> f2

297 Il manque un espace à côté du tiret. [[4:6]] => | $A -lt 5         | renvoie 0 si $A est strictement inférieur à 5 | <|>  - => suggestions :  –  — 
297 Mot inconnu : lt [[6:8]] => | $A -lt 5         | renvoie 0 si $A est strictement inférieur à 5 | <|> lt

298 Il manque un espace à côté du tiret. [[4:6]] => | $A -le 5         | renvoie 0 si $A est inférieur ou égal à 5 | <|>  - => suggestions :  –  — 

299 Il manque un espace à côté du tiret. [[4:6]] => | $A -gt 5         | renvoie 0 si $A est strictement supérieur à 5 | <|>  - => suggestions :  –  — 
299 Mot inconnu : gt [[6:8]] => | $A -gt 5         | renvoie 0 si $A est strictement supérieur à 5 | <|> gt

300 Il manque un espace à côté du tiret. [[4:6]] => | $A -ge 5         | renvoie 0 si $A est supérieur ou égal à 5 | <|>  - => suggestions :  –  — 
300 Mot inconnu : ge [[6:8]] => | $A -ge 5         | renvoie 0 si $A est supérieur ou égal à 5 | <|> ge

301 Il manque un espace à côté du tiret. [[4:6]] => | $A -eq 5         | renvoie 0 si $A est égal à 5 | <|>  - => suggestions :  –  — 
301 Mot inconnu : eq [[6:8]] => | $A -eq 5         | renvoie 0 si $A est égal à 5 | <|> eq

302 Il manque un espace à côté du tiret. [[4:6]] => | $A -ne 5         | renvoie 0 si $A est différent de 5 | <|>  - => suggestions :  –  — 

320 Avant « etc. », il faut mettre une virgule. [[83:88]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|>  etc. => suggestions : , etc.
320 Un seul point après « etc. » [[84:90]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> etc... => suggestions : etc.
320 Mot inconnu : ksh [[137:140]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> ksh
320 Une de ces ponctuations est superflue. [[140:143]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> , ? => suggestions : ,?
320 Mot inconnu : POSIX [[336:341]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> posix
320 Pas d’espace après ce signe. [[342:344]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> (  => suggestions : (
320 Mot inconnu : Solaris [[417:424]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> solaris
320 Typographie : points de suspension. Utilisez le caractère dédié. [[424:427]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|> ... => suggestions : …
320 Pas d’espace avant ce signe. [[427:429]] => Cela gère bien mieux les problèmes d'espaces dans les noms de fichiers, les erreurs etc... C'est une structure <del>propre à</del> bash (ksh, ?) qui est le shell par défaut dans la plupart des distributions Linux, et de Ubuntu en particulier. On garde en général des simples crochets pour les scripts shell qui doivent être à tout prix POSIX ( utilisation sur des Unix sans installation préalable de bash, comme BSD, Solaris... ) . <|>  ) => suggestions : )
406 Pas d’espace après ce signe. [[72:74]] => Ensuite vient l'instruction conditionnelle `if`. Elle est suivie d'un « [ » <|> [  => suggestions : [

407 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:4]] => pour délimiter la condition. La condition doit bien être séparée des crochets par un espace ! Attention, la variable est mise entre guillemets <|> pour => suggestions : Pour

415 Apostrophe incorrecte. [[30:33]] => créer le répertoire toto s'il n' existe pas <|> n'  => suggestions : n’
415 Guillemets typographiques fermants. [[31:32]] => créer le répertoire toto s'il n' existe pas <|> ' => suggestions : ’”›

454 Mot inconnu : while [[20:25]] => ==== Les structures while et until ==== <|> while
454 Mot inconnu : until [[29:34]] => ==== Les structures while et until ==== <|> until

478 Guillemets typographiques ouvrants. [[29:30]] => Le `&&` sert à symboliser un "et", cela implique que deux conditions sont <|> " => suggestions : « “
478 Guillemets typographiques fermants. [[32:33]] => Le `&&` sert à symboliser un "et", cela implique que deux conditions sont <|> " => suggestions :  »”

480 Mot inconnu : done [[56:60]] => Si elle ne l'est pas, cela saute tout le bloc (jusqu'à `done`). <|> done

484 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:3]] => une opération arithmétique. A chaque passage, <|> une => suggestions : Une
484 S’il s’agit de la préposition « à », il faut accentuer la majuscule. [[28:29]] => une opération arithmétique. A chaque passage, <|> a => suggestions : À

485 Guillemets typographiques ouvrants. [[0:1]] => 'cmpt = cmpt+1' et 'cm = cm-1'. <|> ' => suggestions : ‘“‹
485 Mot inconnu : cmpt [[1:5]] => 'cmpt = cmpt+1' et 'cm = cm-1'. <|> cmpt
485 Mot inconnu : cmpt [[8:12]] => 'cmpt = cmpt+1' et 'cm = cm-1'. <|> cmpt
485 Guillemets typographiques fermants. [[14:15]] => 'cmpt = cmpt+1' et 'cm = cm-1'. <|> ' => suggestions : ’”›
485 Guillemets typographiques ouvrants. [[19:20]] => 'cmpt = cmpt+1' et 'cm = cm-1'. <|> ' => suggestions : ‘“‹

487 Mot inconnu : while [[1:6]] => `while` permet de faire exécuter la portion de code un nombre indéterminé de fois. <|> while

488 Mot inconnu : until [[13:18]] => La commande `until` fait la même chose que la commande `while` mais en inversant. <|> until
488 Mot inconnu : while [[56:61]] => La commande `until` fait la même chose que la commande `while` mais en inversant. <|> while

490 Mot inconnu : while [[40:45]] => s'emploie exactement comme la commande `while`. <|> while

492 Mot inconnu : window [[61:67]] => Par exemple, si on a besoin d'attendre le démarrage de notre window manager pour exécuter des commandes dans notre Xsession il sera plus intéressant d'utiliser le `until`: <|> window
492 Mot inconnu : Xsession [[115:123]] => Par exemple, si on a besoin d'attendre le démarrage de notre window manager pour exécuter des commandes dans notre Xsession il sera plus intéressant d'utiliser le `until`: <|> xsession
492 Mot inconnu : until [[164:169]] => Par exemple, si on a besoin d'attendre le démarrage de notre window manager pour exécuter des commandes dans notre Xsession il sera plus intéressant d'utiliser le `until`: <|> until

523 Si « mais » est la conjonction de coordination, une virgule est souhaitable si elle introduit une nouvelle proposition. [[27:32]] => Cela peut paraître complexe mais on s'y habitue quand on l'utilise. <|>  mais => suggestions : , mais
525 Une de ces ponctuations est superflue. [[77:79]] => Elle sert à comparer le contenu d'une variable à des modèles différents. Les ;; sont indipensables car il est possible de placer plusieurs instructions entre un modèle et le <|> ;; => suggestions : ;;
525 Mot inconnu : indipensables [[85:98]] => Elle sert à comparer le contenu d'une variable à des modèles différents. Les ;; sont indipensables car il est possible de placer plusieurs instructions entre un modèle et le <|> indipensables
525 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. [[98:102]] => Elle sert à comparer le contenu d'une variable à des modèles différents. Les ;; sont indipensables car il est possible de placer plusieurs instructions entre un modèle et le <|>  car => suggestions : , car
526 Une de ces ponctuations est superflue. [[13:15]] => suivant. Les ;; servent donc à identifier clairement la fin d'une instruction et <|> ;; => suggestions : ;;

543 Pas d’espace avant ce signe. [[69:71]] => La seule chose qui mérite vraiment d'être expliquée est sans doute `* )`. <|>  ) => suggestions : )

553 Typographie : points de suspension. Utilisez le caractère dédié. [[24:27]] => Et plein d'autres encore... <|> ... => suggestions : …

616 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:2]] => ce programme. En effet, celui-ci est plus lisible et cela évite aussi de faire <|> ce => suggestions : Ce

617 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:3]] => des erreurs. C'est pourquoi il est préférable de bien structurer le code que vous <|> des => suggestions : Des

636 Mot inconnu : iable [[80:85]] => Comme vous l'aurez sans doute remarqué, on assigne une valeur différente à //variable// à chaque itération. On peut aussi très facilement utiliser des fichiers comme "valeur".\\ <|> iable
636 Guillemets typographiques ouvrants. [[166:167]] => Comme vous l'aurez sans doute remarqué, on assigne une valeur différente à //variable// à chaque itération. On peut aussi très facilement utiliser des fichiers comme "valeur".\\ <|> " => suggestions : « “
636 Guillemets typographiques fermants. [[173:174]] => Comme vous l'aurez sans doute remarqué, on assigne une valeur différente à //variable// à chaque itération. On peut aussi très facilement utiliser des fichiers comme "valeur".\\ <|> " => suggestions :  »”

657 Pléonasme. [[62:79]] => On peut très bien aussi utiliser d'autres types de variables, comme par exemple des chaînes de caractères : <|> comme par exemple => suggestions : commepar exemple
665 Guillemets typographiques ouvrants. [[89:90]] => Il faut quand même faire attention au fait que //Ubuntu Breezy 5.10// est différent de //"Ubuntu Breezy 5.10"// dans ce cas. En effet, tous les mots placés entre "" sont considérés comme faisant partie de la même chaîne de caractères. Sans les "", sh considèrera qu'il y a une liste de trois chaînes de caractères. <|> " => suggestions : « “
665 Guillemets typographiques fermants. [[108:109]] => Il faut quand même faire attention au fait que //Ubuntu Breezy 5.10// est différent de //"Ubuntu Breezy 5.10"// dans ce cas. En effet, tous les mots placés entre "" sont considérés comme faisant partie de la même chaîne de caractères. Sans les "", sh considèrera qu'il y a une liste de trois chaînes de caractères. <|> " => suggestions :  »”
665 Mot inconnu : sh [[248:250]] => Il faut quand même faire attention au fait que //Ubuntu Breezy 5.10// est différent de //"Ubuntu Breezy 5.10"// dans ce cas. En effet, tous les mots placés entre "" sont considérés comme faisant partie de la même chaîne de caractères. Sans les "", sh considèrera qu'il y a une liste de trois chaînes de caractères. <|> sh

670 Typographie : points de suspension. Utilisez le caractère dédié. [[130:133]] => Les fonctions sont indispensables pour bien structurer un programme mais aussi pouvoir le simplifier, créer une tâche, la rappeler... Voici la syntaxe générale de 'déclaration' d'une fonction : <|> ... => suggestions : …
670 Guillemets typographiques ouvrants. [[163:164]] => Les fonctions sont indispensables pour bien structurer un programme mais aussi pouvoir le simplifier, créer une tâche, la rappeler... Voici la syntaxe générale de 'déclaration' d'une fonction : <|> ' => suggestions : ‘“‹
670 Guillemets typographiques fermants. [[175:176]] => Les fonctions sont indispensables pour bien structurer un programme mais aussi pouvoir le simplifier, créer une tâche, la rappeler... Voici la syntaxe générale de 'déclaration' d'une fonction : <|> ' => suggestions : ’”›

677 Il manque un trait d’union si “même” se rapporte à “elle”. [[29:38]] => Cette partie ne fait rien en elle même, elle dit juste que quand on appellera nom_fonction, elle fera instruction. Pour appeler une fonction (qui ne possède pas d'argument, voir plus loin) rien de plus simple : <|> elle même => suggestions : elle-même
677 Mot inconnu : nom_fonction [[78:90]] => Cette partie ne fait rien en elle même, elle dit juste que quand on appellera nom_fonction, elle fera instruction. Pour appeler une fonction (qui ne possède pas d'argument, voir plus loin) rien de plus simple : <|> nom_fonction

696 Mot inconnu : echo [[143:147]] => Comme vous l'avez sans doute remarqué, quand on appelle la fonction, on exécute simplement ce qu'on lui a défini au début, dans notre exemple, echo... et ls -l, on peut donc faire exécuter n'importe quoi à une fonction.  <|> echo
696 Typographie : points de suspension. Utilisez le caractère dédié. [[147:150]] => Comme vous l'avez sans doute remarqué, quand on appelle la fonction, on exécute simplement ce qu'on lui a défini au début, dans notre exemple, echo... et ls -l, on peut donc faire exécuter n'importe quoi à une fonction.  <|> ... => suggestions : …
696 Mot inconnu : ls [[154:156]] => Comme vous l'avez sans doute remarqué, quand on appelle la fonction, on exécute simplement ce qu'on lui a défini au début, dans notre exemple, echo... et ls -l, on peut donc faire exécuter n'importe quoi à une fonction.  <|> ls
696 Il manque un espace à côté du tiret. [[156:158]] => Comme vous l'avez sans doute remarqué, quand on appelle la fonction, on exécute simplement ce qu'on lui a défini au début, dans notre exemple, echo... et ls -l, on peut donc faire exécuter n'importe quoi à une fonction.  <|>  - => suggestions :  –  — 
696 Espace(s) en fin de ligne à supprimer. [[219:220]] => Comme vous l'avez sans doute remarqué, quand on appelle la fonction, on exécute simplement ce qu'on lui a défini au début, dans notre exemple, echo... et ls -l, on peut donc faire exécuter n'importe quoi à une fonction.  <|>  
698 Mot inconnu : ma_fonction [[273:284]] => Les fonctions peuvent être définies n'importe où dans le code du moment qu'elles sont définies avant d'être utilisées. Même si en bash les variables sont globales, il est possible de les déclarer comme locales au sein d'une fonction en la précédant du mot clé local: local ma_fonction . <|> ma_fonction
700 Mot inconnu : sleep [[12:17]] => Exemple: un sleep interactif : <|> sleep
782 S’il s’agit d’un impératif, ajoutez un “s”. [[4:14]] => A : correspond à un effet affecté au texte affiché <|> correspond => suggestions : corresponds
783 S’il s’agit d’un impératif, ajoutez un “s”. [[4:14]] => B : correspond à la couleur du texte <|> correspond => suggestions : corresponds
838 Espace(s) en fin de ligne à supprimer. [[201:202]] => La programmation de script shell étant ouverte à tous, cela permet de bénéficier de nombreux scripts pour des applications très variées ; cependant, **la plupart sont proposés sans aucune garantie**.\\  <|>  
846 Guillemets typographiques ouvrants. [[116:117]] =>   * Des commentaires détaillés doivent apparaître lors de chaque étape. De même, chaque étape doit être suivie d'un "echo <voici ce que je fais>" (particulièrement utile notamment lors du débogage). <|> " => suggestions : « “
846 Mot inconnu : echo [[117:121]] =>   * Des commentaires détaillés doivent apparaître lors de chaque étape. De même, chaque étape doit être suivie d'un "echo <voici ce que je fais>" (particulièrement utile notamment lors du débogage). <|> echo

861 Typographie : points de suspension. Utilisez le caractère dédié. [[0:4]] => ....</code>Ça permettra d'identifier d'où vient l'erreur. <|> .... => suggestions : …
862 Mot inconnu : PIPESTATUS [[26:36]] =>   * Utiliser le tableau ${PIPESTATUS[@]} pour récupérer les états des autres commandes. <|> pipestatus
884 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) [[40:43]] =>   * calculer le nombre total d'éléphants - nombre d'éléphants roses <|>  -  => suggestions :  –  —  − 
