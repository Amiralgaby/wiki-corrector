6 Typographie : points de suspension. Utilisez le caractère dédié. => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main ! | ... => suggestions : ['…']

8 Typographie : points de suspension. Utilisez le caractère dédié. => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque. | ... => suggestions : ['…']
8 Mot inconnu : kernel => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque. | kernel

12 Mot inconnu : arm => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]] | arm
12 Mot inconnu : Xcompile_arm => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]] | xcompile_arm
12 Mot inconnu : ARM => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]] | arm

16 Mot inconnu : oeil => Avoir jeté un oeil sur la page traitant de la compilation standard : [[tutoriel:compilation]]. | oeil
16 Il manque un espace. => Avoir jeté un oeil sur la page traitant de la compilation standard : [[tutoriel:compilation]]. | compilation => suggestions : [' compilation']

18 Mot inconnu : vouler => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  | vouler
18 Accord de nombre erroné avec « 64 bits » : « croisé » devrait être au pluriel. => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  | croisé => suggestions : ['croisés']
18 Espace(s) en fin de ligne à supprimer. => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  |   => suggestions : ['']

19 Incohérence avec “sur”. Confusion probable : “à” est une préposition. Écrivez “a” pour la conjugaison de “avoir”. => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]] | à => suggestions : ['a']
19 Il manque un espace. => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]] | comment_utiliser_mingw32_pour_faire_des_executables_windows => suggestions : [' comment_utiliser_mingw32_pour_faire_des_executables_windows']
19 Mot inconnu : comment_utiliser_mingw32_pour_faire_des_executables_windows => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]] | comment_utiliser_mingw32_pour_faire_des_executables_windows
19 Mot inconnu : MingW => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]] | mingw
25 Mot inconnu : binutils => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. | binutils
25 Mot inconnu : gcc => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. | gcc
25 Mot inconnu : binutils => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. | binutils
25 Mot inconnu : ld => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. | ld
25 Mot inconnu : ar => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. | ar

28 Mot inconnu : binutils => ==== Les binutils ==== | binutils

35 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ./configure --target=x86_64-pc-linux |    => suggestions : ['']
35 Mot inconnu : target =>   ./configure --target=x86_64-pc-linux | target
35 Mot inconnu : x86_64-pc-linux =>   ./configure --target=x86_64-pc-linux | x86_64-pc-linux

37 Guillemets typographiques ouvrants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | " => suggestions : ['«\xa0', '“']
37 Mot inconnu : target => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | target
37 Guillemets typographiques fermants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | " => suggestions : ['\xa0»', '”']
37 Mot inconnu : x86_64 => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | x86_64

39 Guillemets typographiques ouvrants. => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. | " => suggestions : ['«\xa0', '“']
39 Mot inconnu : prefix => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. | prefix
39 Guillemets typographiques fermants. => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. | " => suggestions : ['\xa0»', '”']
39 Mot inconnu : PATH => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. | path

44 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make all |    => suggestions : ['']
44 Mot inconnu : make =>   make all | make
44 Mot inconnu : all =>   make all | all

48 Guillemets typographiques ouvrants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | " => suggestions : ['«\xa0', '“']
48 Mot inconnu : prefix => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | prefix
48 Guillemets typographiques fermants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | " => suggestions : ['\xa0»', '”']

49 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make install |    => suggestions : ['']
49 Mot inconnu : make =>   make install | make
49 Mot inconnu : install =>   make install | install

52 Mot inconnu : gcc => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ==== | gcc
52 Guillemets typographiques ouvrants. => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ==== | " => suggestions : ['«\xa0', '“']
52 Guillemets typographiques fermants. => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ==== | " => suggestions : ['\xa0»', '”']

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux |    => suggestions : ['']
59 Mot inconnu : enable-languages =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | enable-languages
59 Mot inconnu : disable-threads =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | disable-threads
59 Mot inconnu : disable-shared =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | disable-shared
59 Mot inconnu : disable-checking =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | disable-checking
59 Mot inconnu : prefix =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | prefix
59 Mot inconnu : mandir =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | mandir
59 Mot inconnu : infodir =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | infodir
59 Mot inconnu : target =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | target
59 Mot inconnu : x86_64-pc-linux =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux | x86_64-pc-linux

61 Guillemets typographiques ouvrants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | " => suggestions : ['«\xa0', '“']
61 Mot inconnu : target => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | target
61 Guillemets typographiques fermants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | " => suggestions : ['\xa0»', '”']
61 Mot inconnu : x86_64 => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. | x86_64
63 Mot inconnu : enable-languages => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++ | enable-languages
63 Il manque un espace. => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++ | c => suggestions : [' c']

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make all-gcc |    => suggestions : ['']
68 Mot inconnu : make =>   make all-gcc | make
68 Mot inconnu : all-gcc =>   make all-gcc | all-gcc

72 Guillemets typographiques ouvrants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | " => suggestions : ['«\xa0', '“']
72 Mot inconnu : prefix => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | prefix
72 Guillemets typographiques fermants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : | " => suggestions : ['\xa0»', '”']

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make install-gcc |    => suggestions : ['']
73 Mot inconnu : make =>   make install-gcc | make
73 Mot inconnu : install-gcc =>   make install-gcc | install-gcc

78 Typographie : points de suspension. Utilisez le caractère dédié. => Voila, on devrait avoir un compilateur en état de marche... | ... => suggestions : ['…']

82 Espace(s) surnuméraire(s) à supprimer. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" |    => suggestions : [' ']
82 Typographie : un ou trois points ? => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" | .. => suggestions : ['…', '.']
82 Mot inconnu : iables_d_environnement => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" | iables_d_environnement
82 Guillemets typographiques ouvrants. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" | " => suggestions : ['«\xa0', '“']
82 Mot inconnu : xxxxxx => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" | xxxxxx
82 Guillemets typographiques fermants. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx" | " => suggestions : ['\xa0»', '”']

83 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. | où => suggestions : ['Où']
83 Mot inconnu : xxxxxx => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. | xxxxxx
83 Mot inconnu : make => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. | make
83 Mot inconnu : target => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. | target

85 Mot inconnu : m64 => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". | m64
85 Mot inconnu : gcc => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". | gcc
85 Guillemets typographiques ouvrants. => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". | " => suggestions : ['«\xa0', '“']
85 Mot inconnu : lib64 => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". | lib64

87 Mot inconnu : kernel => ==== Le kernel ==== | kernel

89 Mot inconnu : kernel => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg : | kernel
89 Mot inconnu : make-kpkg => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg : | make-kpkg

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image |    => suggestions : ['']
90 Mot inconnu : sudo =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | sudo
90 Mot inconnu : make-kpkg =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | make-kpkg
90 Mot inconnu : initrd =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | initrd
90 Mot inconnu : arch =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | arch
90 Mot inconnu : amd64 =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | amd64
90 Mot inconnu : cross_compile =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | cross_compile
90 Mot inconnu : x86_64-pc-linux =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | x86_64-pc-linux
90 Mot inconnu : revision =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | revision
90 Mot inconnu : amd64noyaujojo =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | amd64noyaujojo
90 Mot inconnu : append-to-version =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | append-to-version
90 Mot inconnu : kernel_image =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | kernel_image
90 Mot inconnu : kernel_headers =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | kernel_headers
90 Mot inconnu : modules_image =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image | modules_image

91 Mot inconnu : arch => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | arch
91 Guillemets typographiques ouvrants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | " => suggestions : ['«\xa0', '“']
91 Mot inconnu : amd64 => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | amd64
91 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | " => suggestions : ['\xa0»', '”']
91 Guillemets typographiques ouvrants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | " => suggestions : ['«\xa0', '“']
91 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | " => suggestions : ['\xa0»', '”']
91 Mot inconnu : arch => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | arch
91 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". | " => suggestions : ['\xa0»', '”']

93 Il manque un espace. => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]]. | comment_compiler_un_kernel_de_kernel => suggestions : [' Comment_compiler_un_kernel_de_kernel']
93 Mot inconnu : comment_compiler_un_kernel_de_kernel => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]]. | comment_compiler_un_kernel_de_kernel
93 Mot inconnu : kernel => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]]. | kernel

97 Guillemets typographiques fermants. => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". | " => suggestions : ['\xa0»', '”']
97 Mot inconnu : make => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". | make
97 Mot inconnu : bicore => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". | bicore
97 Guillemets typographiques fermants. => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". | " => suggestions : ['\xa0»', '”']

98 Mot inconnu : cores => X = (nombre de cores)x2 | cores
98 Il manque un espace après la parenthèse. => X = (nombre de cores)x2 | ) => suggestions : [') ']
98 Mot inconnu : x2 => X = (nombre de cores)x2 | x2
105 Il manque un espace. => //Contributeurs: Créée par [[utilisateurs:Johndescs]].// | johndescs => suggestions : [' Johndescs']
