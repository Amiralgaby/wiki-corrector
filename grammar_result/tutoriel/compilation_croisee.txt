6 Typographie : points de suspension. Utilisez le caractère dédié. [[178:181]] => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main ! <|> ... => suggestions : …

8 Typographie : points de suspension. Utilisez le caractère dédié. [[45:48]] => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque. <|> ... => suggestions : …

18 Mot inconnu : vouler [[8:14]] => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  <|> vouler
18 Accord de nombre erroné avec « 64 bits » : « croisé » devrait être au pluriel. [[62:68]] => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  <|> croisé => suggestions : croisés
18 Espace(s) en fin de ligne à supprimer. [[69:70]] => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé,  <|>  
25 Mot inconnu : binutils [[43:51]] => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. <|> binutils
25 Mot inconnu : binutils [[81:89]] => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. <|> binutils
25 Mot inconnu : ld [[135:137]] => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. <|> ld
25 Mot inconnu : ar [[145:147]] => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**. <|> ar

28 Mot inconnu : binutils [[9:17]] => ==== Les binutils ==== <|> binutils

37 Guillemets typographiques ouvrants. [[9:10]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> " => suggestions : « “
37 Mot inconnu : target [[10:16]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> target
37 Guillemets typographiques fermants. [[16:17]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> " => suggestions :  »”
37 Mot inconnu : x86_64 [[136:142]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> x86_64

39 Guillemets typographiques ouvrants. [[26:27]] => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. <|> " => suggestions : « “
39 Mot inconnu : prefix [[27:33]] => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. <|> prefix
39 Guillemets typographiques fermants. [[33:34]] => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. <|> " => suggestions :  »”
39 Mot inconnu : PATH [[260:264]] => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher. <|> path

48 Guillemets typographiques ouvrants. [[88:89]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> " => suggestions : « “
48 Mot inconnu : prefix [[89:95]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> prefix
48 Guillemets typographiques fermants. [[95:96]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> " => suggestions :  »”
52 Guillemets typographiques ouvrants. [[11:12]] => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ==== <|> " => suggestions : « “
52 Guillemets typographiques fermants. [[35:36]] => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ==== <|> " => suggestions :  »”

61 Guillemets typographiques ouvrants. [[9:10]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> " => suggestions : « “
61 Mot inconnu : target [[10:16]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> target
61 Guillemets typographiques fermants. [[16:17]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> " => suggestions :  »”
61 Mot inconnu : x86_64 [[136:142]] => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire. <|> x86_64
63 Mot inconnu : enable-languages [[65:81]] => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++ <|> enable-languages
63 Il manque un espace. [[84:85]] => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++ <|> c => suggestions :  c

72 Guillemets typographiques ouvrants. [[88:89]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> " => suggestions : « “
72 Mot inconnu : prefix [[89:95]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> prefix
72 Guillemets typographiques fermants. [[95:96]] => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") : <|> " => suggestions :  »”

78 Typographie : points de suspension. Utilisez le caractère dédié. [[56:59]] => Voila, on devrait avoir un compilateur en état de marche... <|> ... => suggestions : …

83 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[0:2]] => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. <|> où => suggestions : Où
83 Mot inconnu : xxxxxx [[3:9]] => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. <|> xxxxxx
83 Mot inconnu : make [[58:62]] => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. <|> make
83 Mot inconnu : target [[108:114]] => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut. <|> target

85 Mot inconnu : m64 [[76:79]] => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". <|> m64
85 Guillemets typographiques ouvrants. [[179:180]] => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". <|> " => suggestions : « “
85 Mot inconnu : lib64 [[180:185]] => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*". <|> lib64
89 Mot inconnu : make-kpkg [[103:112]] => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg : <|> make-kpkg
91 Guillemets typographiques ouvrants. [[77:78]] => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". <|> " => suggestions : « “
91 Guillemets typographiques fermants. [[83:84]] => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". <|> " => suggestions :  »”
91 Guillemets typographiques ouvrants. [[231:232]] => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". <|> " => suggestions : « “
91 Guillemets typographiques fermants. [[245:246]] => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". <|> " => suggestions :  »”
91 Guillemets typographiques fermants. [[280:281]] => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch". <|> " => suggestions :  »”

97 Guillemets typographiques fermants. [[23:24]] => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". <|> " => suggestions :  »”
97 Mot inconnu : make [[27:31]] => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". <|> make
97 Mot inconnu : bicore [[96:102]] => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". <|> bicore
97 Guillemets typographiques fermants. [[110:111]] => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4". <|> " => suggestions :  »”

98 Mot inconnu : cores [[15:20]] => X = (nombre de cores)x2 <|> cores
98 Il manque un espace après la parenthèse. [[20:21]] => X = (nombre de cores)x2 <|> ) => suggestions : ) 
98 Mot inconnu : x2 [[21:23]] => X = (nombre de cores)x2 <|> x2
