
3 Mot inconnu : cross-compiling [[28:43]] => ====== Compilation croisée (cross-compiling) pour architecture arm ====== <|> cross-compiling
3 Mot inconnu : arm [[63:66]] => ====== Compilation croisée (cross-compiling) pour architecture arm ====== <|> arm

5 Mot inconnu : Groovy [[80:86]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> groovy
5 Mot inconnu : arm [[169:172]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> arm
5 Mot inconnu : gcc-arm-linux-gnueabihf [[208:231]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> gcc-arm-linux-gnueabihf
5 Mot inconnu : armhf [[246:251]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> armhf
5 Mot inconnu : gcc-arm-linux-gnueabi [[259:280]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> gcc-arm-linux-gnueabi
5 Mot inconnu : armel [[282:287]] => <note important>Les informations fournies après cet encadré sont obsolètes. Sur Groovy (et sans doute sur des versions antérieures), pour compiler pour une architecture arm, il suffit d'installer les paquets gcc-arm-linux-gnueabihf (architecture armhf) et/ou gcc-arm-linux-gnueabi (armel). <|> armel

6 Mot inconnu : libc6 [[207:212]] => Si vous avez besoin de librairies ou d'en-têtes supplémentaires, un certain nombre d'entre eux sont sûrement déjà disponibles dans votre configuration actuelle et peuvent être installés directement (exemple libc6 pour armhf est disponible dans les paquets : libc6-armhf-cross et libc6-dev-armhf-cross). <|> libc6
6 Mot inconnu : armhf [[218:223]] => Si vous avez besoin de librairies ou d'en-têtes supplémentaires, un certain nombre d'entre eux sont sûrement déjà disponibles dans votre configuration actuelle et peuvent être installés directement (exemple libc6 pour armhf est disponible dans les paquets : libc6-armhf-cross et libc6-dev-armhf-cross). <|> armhf
6 Mot inconnu : libc6-armhf-cross [[258:275]] => Si vous avez besoin de librairies ou d'en-têtes supplémentaires, un certain nombre d'entre eux sont sûrement déjà disponibles dans votre configuration actuelle et peuvent être installés directement (exemple libc6 pour armhf est disponible dans les paquets : libc6-armhf-cross et libc6-dev-armhf-cross). <|> libc6-armhf-cross
6 Mot inconnu : libc6-dev-armhf-cross [[279:300]] => Si vous avez besoin de librairies ou d'en-têtes supplémentaires, un certain nombre d'entre eux sont sûrement déjà disponibles dans votre configuration actuelle et peuvent être installés directement (exemple libc6 pour armhf est disponible dans les paquets : libc6-armhf-cross et libc6-dev-armhf-cross). <|> libc6-dev-armhf-cross
8 Guillemets typographiques ouvrants. [[123:124]] => Cependant, si vous avez besoin d'une librairie non disponible de base, il faut modifier sa configuration apt et activer le "Multiarch". Procédure : <|> " => suggestions : ['«\xa0', '“']
8 Mot inconnu : Multiarch [[124:133]] => Cependant, si vous avez besoin d'une librairie non disponible de base, il faut modifier sa configuration apt et activer le "Multiarch". Procédure : <|> multiarch
8 Guillemets typographiques fermants. [[133:134]] => Cependant, si vous avez besoin d'une librairie non disponible de base, il faut modifier sa configuration apt et activer le "Multiarch". Procédure : <|> " => suggestions : ['\xa0»', '”']

10 Mot inconnu : Editer [[0:6]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> editer
10 Écriture invariable. Utilisez un point médian. [[121:136]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> architecture(s) => suggestions : ['architecture·s']
10 Écriture invariable. Utilisez un point médian. [[139:150]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> actuelle(s) => suggestions : ['actuelle·s']
10 Guillemets typographiques ouvrants. [[205:206]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> " => suggestions : ['«\xa0', '“']
10 Mot inconnu : deb-src [[206:213]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> deb-src
10 Guillemets typographiques fermants. [[213:214]] => Editer le fichier /etc/apt/sources.list ainsi que tous les fichiers dans /etc/apt/sources.list.d pour préciser la ou les architecture(s) **actuelle(s)** entre crochets. Il est inutile de le faire pour les "deb-src" (le code source n'a pas d'architecture). Exemple : <|> " => suggestions : ['\xa0»', '”']

21 Mot inconnu : armhf [[81:86]] => Ensuite, ajouter l'architecture souhaitée. Exemple pour ajouter une architecture armhf : <|> armhf

24 Pas d’espace avant un point. [[97:99]] => Créer le fichier qui va lister les sources pour la nouvelle architecture dans /etc/sources.list.d . Exemple : <|>  . => suggestions : ['.']

27 Mot inconnu : armhf [[73:78]] => Y ajouter la liste des sources en précisant l'architecture. Exemple pour armhf : <|> armhf

40 Mot inconnu : libssl-dev [[165:175]] => Vous pouvez désormais installer les paquets spécifiques à l'architecture en la précisant après le nom du paquet, séparé par un ":". Exemple pour installer le paquet libssl-dev pour l'architecture armhf : <|> libssl-dev
40 Mot inconnu : armhf [[196:201]] => Vous pouvez désormais installer les paquets spécifiques à l'architecture en la précisant après le nom du paquet, séparé par un ":". Exemple pour installer le paquet libssl-dev pour l'architecture armhf : <|> armhf

45 Mot inconnu : Makefile [[39:47]] => Afin de construire des sources en C et Makefile pour une architecture armhf, en général, au lieu de "make" tout court, il suffit d'utiliser : <|> makefile
45 Mot inconnu : armhf [[70:75]] => Afin de construire des sources en C et Makefile pour une architecture armhf, en général, au lieu de "make" tout court, il suffit d'utiliser : <|> armhf
45 Guillemets typographiques ouvrants. [[100:101]] => Afin de construire des sources en C et Makefile pour une architecture armhf, en général, au lieu de "make" tout court, il suffit d'utiliser : <|> " => suggestions : ['«\xa0', '“']
45 Mot inconnu : make [[101:105]] => Afin de construire des sources en C et Makefile pour une architecture armhf, en général, au lieu de "make" tout court, il suffit d'utiliser : <|> make
45 Guillemets typographiques fermants. [[105:106]] => Afin de construire des sources en C et Makefile pour une architecture armhf, en général, au lieu de "make" tout court, il suffit d'utiliser : <|> " => suggestions : ['\xa0»', '”']

58 Doublon. [[157:166]] => Pour vous faciliter la tâche et vous permettre de boire un café de plus aujourd'hui, je vous présente un petit script qui télécharge, compile et installe le tout tout seul. <|> tout tout => suggestions : ['tout']

60 Mot inconnu : sudo [[32:36]] => <note tip>Le script utilise des sudo pour les make install. Afin de vous demander le mot de passe tout au début pour que vous puissiez aller boire un café tranquillement, un sudo echo est placé en tête.</note> <|> sudo
60 Mot inconnu : make [[46:50]] => <note tip>Le script utilise des sudo pour les make install. Afin de vous demander le mot de passe tout au début pour que vous puissiez aller boire un café tranquillement, un sudo echo est placé en tête.</note> <|> make
60 Mot inconnu : install [[51:58]] => <note tip>Le script utilise des sudo pour les make install. Afin de vous demander le mot de passe tout au début pour que vous puissiez aller boire un café tranquillement, un sudo echo est placé en tête.</note> <|> install
60 Mot inconnu : sudo [[174:178]] => <note tip>Le script utilise des sudo pour les make install. Afin de vous demander le mot de passe tout au début pour que vous puissiez aller boire un café tranquillement, un sudo echo est placé en tête.</note> <|> sudo
60 Mot inconnu : echo [[179:183]] => <note tip>Le script utilise des sudo pour les make install. Afin de vous demander le mot de passe tout au début pour que vous puissiez aller boire un café tranquillement, un sudo echo est placé en tête.</note> <|> echo
