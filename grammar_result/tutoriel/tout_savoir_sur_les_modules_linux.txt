8 Un seul point après « etc. » => Un module est un morceau de code permettant d'ajouter des fonctionnalités au noyau : pilotes de périphériques matériels, protocoles réseaux, etc... | etc... => suggestions : ['etc.']

38 Guillemets typographiques ouvrants. => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | " => suggestions : ['«\xa0', '“']
38 Mot inconnu : freq_table => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | freq_table
38 Guillemets typographiques fermants. => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | " => suggestions : ['\xa0»', '”']
38 Guillemets typographiques ouvrants. => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | " => suggestions : ['«\xa0', '“']
38 Mot inconnu : cpufreq_stats => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | cpufreq_stats
38 Guillemets typographiques fermants. => On voit que le module "freq_table" est utilisé par "cpufreq_stats". Il y a des dépendances entre les modules. Il faut en tenir compte lorsque l'on veut décharger des modules. | " => suggestions : ['\xa0»', '”']

58 Mot inconnu : rt2500 => On voit que rt2500 s'occupe de la gestion d'une interface wlan chipset Ralink rt2500 et on est bien content qu'elle fonctionne. (cette interface s'appelle ra*)\\ | rt2500
58 Mot inconnu : wlan => On voit que rt2500 s'occupe de la gestion d'une interface wlan chipset Ralink rt2500 et on est bien content qu'elle fonctionne. (cette interface s'appelle ra*)\\ | wlan
58 Mot inconnu : chipset => On voit que rt2500 s'occupe de la gestion d'une interface wlan chipset Ralink rt2500 et on est bien content qu'elle fonctionne. (cette interface s'appelle ra*)\\ | chipset
58 Mot inconnu : Ralink => On voit que rt2500 s'occupe de la gestion d'une interface wlan chipset Ralink rt2500 et on est bien content qu'elle fonctionne. (cette interface s'appelle ra*)\\ | ralink
58 Mot inconnu : rt2500 => On voit que rt2500 s'occupe de la gestion d'une interface wlan chipset Ralink rt2500 et on est bien content qu'elle fonctionne. (cette interface s'appelle ra*)\\ | rt2500

60 Mot inconnu : field => Si l'on ne désire qu'une information précise, on peut spécifier le champ (field) à afficher avec l'option -F. | field
60 Il manque un espace à côté du tiret. => Si l'on ne désire qu'une information précise, on peut spécifier le champ (field) à afficher avec l'option -F. |  - => suggestions : [' – ', ' — ']

61 Mot inconnu : rt2500 => Par exemple, si nous ne voulons voir que la description du module rt2500 : | rt2500

66 Accord de nombre erroné : « même » devrait être au pluriel. => Sachez cependant que tous les modules ne fournissent pas les même informations, et qu'il se peut que ce type de commande ne renvoie rien. Par exemple, le module //rt2500// n'a pas de champ "version", alors que le module //8139too// en a un. | même => suggestions : ['mêmes']
66 Mot inconnu : rt2500 => Sachez cependant que tous les modules ne fournissent pas les même informations, et qu'il se peut que ce type de commande ne renvoie rien. Par exemple, le module //rt2500// n'a pas de champ "version", alors que le module //8139too// en a un. | rt2500
66 Guillemets typographiques ouvrants. => Sachez cependant que tous les modules ne fournissent pas les même informations, et qu'il se peut que ce type de commande ne renvoie rien. Par exemple, le module //rt2500// n'a pas de champ "version", alors que le module //8139too// en a un. | " => suggestions : ['«\xa0', '“']
66 Guillemets typographiques fermants. => Sachez cependant que tous les modules ne fournissent pas les même informations, et qu'il se peut que ce type de commande ne renvoie rien. Par exemple, le module //rt2500// n'a pas de champ "version", alors que le module //8139too// en a un. | " => suggestions : ['\xa0»', '”']
66 Mot inconnu : too => Sachez cependant que tous les modules ne fournissent pas les même informations, et qu'il se peut que ce type de commande ne renvoie rien. Par exemple, le module //rt2500// n'a pas de champ "version", alors que le module //8139too// en a un. | too

67 Mot inconnu : author => Il y a cependant des champs standards que tous les modules devraient avoir, comme **author**, **description**, **license**, **parm**, **depends**, et **alias**. | author
67 Mot inconnu : license => Il y a cependant des champs standards que tous les modules devraient avoir, comme **author**, **description**, **license**, **parm**, **depends**, et **alias**. | license
67 Mot inconnu : parm => Il y a cependant des champs standards que tous les modules devraient avoir, comme **author**, **description**, **license**, **parm**, **depends**, et **alias**. | parm
67 Mot inconnu : depends => Il y a cependant des champs standards que tous les modules devraient avoir, comme **author**, **description**, **license**, **parm**, **depends**, et **alias**. | depends

75 Guillemets typographiques ouvrants. => Pour charger manuellement le module "3c59x" (il y a de grandes chances qu'il soit chargé si vous en avez besoin...) : | " => suggestions : ['«\xa0', '“']
75 Mot inconnu : c59x => Pour charger manuellement le module "3c59x" (il y a de grandes chances qu'il soit chargé si vous en avez besoin...) : | c59x
75 Guillemets typographiques fermants. => Pour charger manuellement le module "3c59x" (il y a de grandes chances qu'il soit chargé si vous en avez besoin...) : | " => suggestions : ['\xa0»', '”']
75 Typographie : points de suspension. Utilisez le caractère dédié. => Pour charger manuellement le module "3c59x" (il y a de grandes chances qu'il soit chargé si vous en avez besoin...) : | ... => suggestions : ['…']

81 Guillemets typographiques ouvrants. => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | " => suggestions : ['«\xa0', '“']
81 Mot inconnu : c59x => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | c59x
81 Guillemets typographiques fermants. => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | " => suggestions : ['\xa0»', '”']
81 Mot inconnu : eth0 => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | eth0
81 Guillemets typographiques ouvrants. => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | " => suggestions : ['«\xa0', '“']
81 Mot inconnu : c59x => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | c59x
81 Guillemets typographiques fermants. => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | " => suggestions : ['\xa0»', '”']
81 Typographie : points de suspension. Utilisez le caractère dédié. => Pour décharger le module "3c59x" (imaginons que l'interface eth0 soit inutile et que celle-ci soit gérée par "3c59x"...) : | ... => suggestions : ['…']

87 Guillemets typographiques ouvrants. => Voir la liste des modules (on peut aussi utiliser l'utilitaire "modconf" - cf plus bas) : | " => suggestions : ['«\xa0', '“']
87 Mot inconnu : modconf => Voir la liste des modules (on peut aussi utiliser l'utilitaire "modconf" - cf plus bas) : | modconf
87 Guillemets typographiques fermants. => Voir la liste des modules (on peut aussi utiliser l'utilitaire "modconf" - cf plus bas) : | " => suggestions : ['\xa0»', '”']
87 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Voir la liste des modules (on peut aussi utiliser l'utilitaire "modconf" - cf plus bas) : |  -  => suggestions : [' – ', ' — ', ' − ']

91 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => A utiliser avec "| grep" !! | a => suggestions : ['À']
91 Mot inconnu : grep => A utiliser avec "| grep" !! | grep
91 Guillemets typographiques fermants. => A utiliser avec "| grep" !! | " => suggestions : ['\xa0»', '”']

97 Mot inconnu : FIXME => FIXME | fixme

99 Guillemets typographiques ouvrants. => Comme nous l'avons vu plus haut, certains modules possèdent des options ("parm"). Ces options permettent un plus grand contrôle sur le module en lui-même. | " => suggestions : ['«\xa0', '“']
99 Mot inconnu : parm => Comme nous l'avons vu plus haut, certains modules possèdent des options ("parm"). Ces options permettent un plus grand contrôle sur le module en lui-même. | parm
99 Guillemets typographiques fermants. => Comme nous l'avons vu plus haut, certains modules possèdent des options ("parm"). Ces options permettent un plus grand contrôle sur le module en lui-même. | " => suggestions : ['\xa0»', '”']

105 Guillemets typographiques ouvrants. => les "parm" vous indique quoi mettre : | " => suggestions : ['«\xa0', '“']
105 Mot inconnu : parm => les "parm" vous indique quoi mettre : | parm
105 Guillemets typographiques fermants. => les "parm" vous indique quoi mettre : | " => suggestions : ['\xa0»', '”']

112 Mot inconnu : FIXME => FIXME | fixme
130 Mot inconnu : kernel => <file># /etc/modules: kernel modules to load at boot time. | kernel
130 Mot inconnu : to => <file># /etc/modules: kernel modules to load at boot time. | to
130 Mot inconnu : load => <file># /etc/modules: kernel modules to load at boot time. | load
130 Mot inconnu : at => <file># /etc/modules: kernel modules to load at boot time. | at
130 Mot inconnu : boot => <file># /etc/modules: kernel modules to load at boot time. | boot
130 Mot inconnu : time => <file># /etc/modules: kernel modules to load at boot time. | time

132 Mot inconnu : This => # This file contains the names of kernel modules that should be loaded | this
132 Mot inconnu : contains => # This file contains the names of kernel modules that should be loaded | contains
132 Mot inconnu : the => # This file contains the names of kernel modules that should be loaded | the
132 Mot inconnu : names => # This file contains the names of kernel modules that should be loaded | names
132 Mot inconnu : of => # This file contains the names of kernel modules that should be loaded | of
132 Mot inconnu : kernel => # This file contains the names of kernel modules that should be loaded | kernel
132 Mot inconnu : that => # This file contains the names of kernel modules that should be loaded | that
132 Mot inconnu : should => # This file contains the names of kernel modules that should be loaded | should
132 Mot inconnu : loaded => # This file contains the names of kernel modules that should be loaded | loaded

133 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => # at boot time, one per line. Lines beginning with "#" are ignored. | at => suggestions : ['At']
133 Mot inconnu : at => # at boot time, one per line. Lines beginning with "#" are ignored. | at
133 Mot inconnu : boot => # at boot time, one per line. Lines beginning with "#" are ignored. | boot
133 Mot inconnu : time => # at boot time, one per line. Lines beginning with "#" are ignored. | time
133 Mot inconnu : one => # at boot time, one per line. Lines beginning with "#" are ignored. | one
133 Mot inconnu : per => # at boot time, one per line. Lines beginning with "#" are ignored. | per
133 Mot inconnu : line => # at boot time, one per line. Lines beginning with "#" are ignored. | line
133 Mot inconnu : Lines => # at boot time, one per line. Lines beginning with "#" are ignored. | lines
133 Mot inconnu : beginning => # at boot time, one per line. Lines beginning with "#" are ignored. | beginning
133 Mot inconnu : with => # at boot time, one per line. Lines beginning with "#" are ignored. | with
133 Mot inconnu : ignored => # at boot time, one per line. Lines beginning with "#" are ignored. | ignored

136 Mot inconnu : lp => lp | lp

146 Mot inconnu : modprobe => Il peut parfois être utile d'empêcher le noyau de charger un module automatiquement, par exemple si celui-ci pose des problèmes de stabilité. Un module prohibé ne sera pas chargé au démarrage ou au branchement à chaud du périphérique, mais pourra quand-même être chargé à la main, par exemple à l'aide de **modprobe**. | modprobe

156 Il manque un espace. => \\ Pour prohiber un module, [[tutoriel:comment_editer_un_fichier|éditez le fichier]] **/etc/modprobe.d/blacklist.conf** avec les droits administrateur (root), et ajoutez en fin de fichier une ligne structurée comme ci-dessus. | comment_editer_un_fichier => suggestions : [' comment_editer_un_fichier']
156 Mot inconnu : comment_editer_un_fichier => \\ Pour prohiber un module, [[tutoriel:comment_editer_un_fichier|éditez le fichier]] **/etc/modprobe.d/blacklist.conf** avec les droits administrateur (root), et ajoutez en fin de fichier une ligne structurée comme ci-dessus. | comment_editer_un_fichier
156 Accord de nombre erroné avec « les droits » : « administrateur » devrait être au pluriel. => \\ Pour prohiber un module, [[tutoriel:comment_editer_un_fichier|éditez le fichier]] **/etc/modprobe.d/blacklist.conf** avec les droits administrateur (root), et ajoutez en fin de fichier une ligne structurée comme ci-dessus. | administrateur => suggestions : ['administrateurs']
156 Mot inconnu : root => \\ Pour prohiber un module, [[tutoriel:comment_editer_un_fichier|éditez le fichier]] **/etc/modprobe.d/blacklist.conf** avec les droits administrateur (root), et ajoutez en fin de fichier une ligne structurée comme ci-dessus. | root

158 Mot inconnu : r818x => Par exemple, si le module **r818x** vous pose problème, il faut ajouter au fichier /etc/modprobe.d/blacklist.conf la ligne suivante : | r818x

168 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Tout ce qui est à droite d'un "#" sera ignoré par le système.</note> |   => suggestions : ['']

179 Mot inconnu : eth0 => Par exemple pour indiquer que le périphérique eth0 utilise le module tg3 : | eth0
179 Mot inconnu : tg3 => Par exemple pour indiquer que le périphérique eth0 utilise le module tg3 : | tg3

182 Mot inconnu : eth0 => alias eth0 tg3 | eth0
182 Mot inconnu : tg3 => alias eth0 tg3 | tg3

189 Mot inconnu : kernel => Module-assistant est un outil simplifiant la création de paquets contenant des modules. Il aide les utilisateurs et contributeurs en s'occupant des modules externes du kernel empaquetés pour Debian. Il peut : | kernel
191 Mot inconnu : headers => * Préparer automatiquement l'environnement de compilation (ex : détection et installation automatiques des sources et les headers du kernel requis) | headers
191 Mot inconnu : kernel => * Préparer automatiquement l'environnement de compilation (ex : détection et installation automatiques des sources et les headers du kernel requis) | kernel

197 Mot inconnu : kernel => * Compilations multiples pour versions du kernel multiples semi-automatiques | kernel

209 Mot inconnu : Hardinfo => ==== Hardinfo ==== | hardinfo

215 Mot inconnu : System => Vous le trouverez ensuite dans //**Applications -> Outils système -> System Profiler and Benchmark**// | system
215 Mot inconnu : and => Vous le trouverez ensuite dans //**Applications -> Outils système -> System Profiler and Benchmark**// | and
