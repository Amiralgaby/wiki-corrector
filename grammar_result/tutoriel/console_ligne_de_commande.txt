
8 Mot inconnu : How [[5:8]] => Ce //How To// est fait pour les débutants qui ne connaissent pas **GNU/Linux** et n'a pas la prétention de faire de vous des champions de la console. <|> how

22 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. [[12:27]] => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ <|> auto-complétion => suggestions : ['Auto-complétion']
22 Mot inconnu : tab [[110:113]] => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ <|> tab
22 Confusion probable. Pour dire “possiblement”, écrivez “peut-être”. [[354:363]] => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ <|> peut être => suggestions : ['Peut-être']

23 Incohérence avec “il” : “peut-être” devrait être un verbe, un pronom objet, un adverbe de négation, etc. [[77:86]] => **retour à la ligne** pour clarifier une ligne de commande un peu longue, il peut-être utile d'utiliser le ** \** puis retour charriot pour continuer à saisir la ligne de commande sur plusieurs lignes d'affichage. <|> peut-être => suggestions : []

29 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. [[3:6]] => Le 1er mot tapé est une commande. Les lettres tapées après un tiret, et les mots tapés après 2 tirets, sont des options. <|> 1er => suggestions : ['1ᵉʳ']

58 Mot inconnu : ls [[5:7]] => ==== ls ==== <|> ls

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) <|>   => suggestions : ['']
59 Mot inconnu : ls [[15:17]] =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) <|> ls
59 Mot inconnu : ls [[64:66]] =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) <|> ls

63 Mot inconnu : ongue [[77:82]] => Pour obtenir plus d'information, utilisez l'option **-l** (pour version **l**ongue) : <|> ongue

67 Guillemets typographiques ouvrants. [[33:34]] => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) <|> " => suggestions : ['«\xa0', '“']
67 Guillemets typographiques fermants. [[40:41]] => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) <|> " => suggestions : ['\xa0»', '”']

68 Mot inconnu : ll [[36:38]] => utilisez l'option **-A** (pour **A**ll) : <|> ll

78 Mot inconnu : ls [[67:69]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> ls
78 Il manque un espace à côté du tiret. [[69:71]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|>  - => suggestions : [' – ', ' — ']
78 Mot inconnu : all [[79:82]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> all
78 Guillemets typographiques ouvrants. [[101:102]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. [[110:111]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['\xa0»', '”']
78 Pas d’espace avant un point. [[111:113]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|>  . => suggestions : ['.']
78 Typographie : un ou trois points ? [[117:119]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> .. => suggestions : ['…', '.']
78 Mot inconnu : ls [[155:157]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> ls
78 Il manque un espace à côté du tiret. [[157:159]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|>  - => suggestions : [' – ', ' — ']
78 Mot inconnu : almost-all [[164:174]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> almost-all
78 Pas d’espace avant un point. [[199:201]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|>  . => suggestions : ['.']
78 Typographie : un ou trois points ? [[205:207]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> .. => suggestions : ['…', '.']
78 Il manque les traits d’union. [[209:221]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> c'est à dire => suggestions : ['c’est-à-dire']
78 Guillemets typographiques ouvrants. [[223:224]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. [[238:239]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['\xa0»', '”']
78 Guillemets typographiques ouvrants. [[243:244]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. [[258:259]] => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> <|> " => suggestions : ['\xa0»', '”']

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur). <|>   => suggestions : ['']
82 Mot inconnu : directory [[70:79]] =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur). <|> directory

97 Mot inconnu : Tab [[22:25]] => <note tip>La touche //Tab// permet de compléter le nom du répertoire que vous êtes en train de taper.</note> <|> tab

99 Accord de genre erroné entre « informations » et « utilisateur ». [[44:55]] => La commande **id** affiche les informations utilisateur et de groupe pour un utilisateur spécifié, ou si aucun utilisateur n'est spécifié, elle affiche les informations sur l'utilisateur courant <|> utilisateur => suggestions : ['utilisatrices']

105 Mot inconnu : mkdir [[5:10]] => ==== mkdir ==== <|> mkdir

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : <|>   => suggestions : ['']
106 Mot inconnu : mkdir [[15:20]] =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : <|> mkdir
106 Mot inconnu : mkdir [[62:67]] =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : <|> mkdir
106 Mot inconnu : make [[70:74]] =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : <|> make
106 Mot inconnu : directory [[75:84]] =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : <|> directory

113 Mot inconnu : pwd [[5:8]] => ==== pwd ==== <|> pwd

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|>   => suggestions : ['']
114 Mot inconnu : pwd [[15:18]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|> pwd
114 Mot inconnu : pwd [[103:106]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|> pwd
114 Mot inconnu : present [[109:116]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|> present
114 Mot inconnu : working [[117:124]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|> working
114 Mot inconnu : directory [[125:134]] =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple <|> directory

119 Mot inconnu : mv [[5:7]] => ==== mv ==== <|> mv

120 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : <|>   => suggestions : ['']
120 Mot inconnu : mv [[15:17]] =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : <|> mv
120 Mot inconnu : mv [[102:104]] =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : <|> mv
120 Mot inconnu : move [[107:111]] =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : <|> move

134 Mot inconnu : cp [[5:7]] => ==== cp ==== <|> cp

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : <|>   => suggestions : ['']
135 Mot inconnu : cp [[15:17]] =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : <|> cp
135 Mot inconnu : cp [[50:52]] =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : <|> cp
135 Mot inconnu : copy [[55:59]] =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : <|> copy

145 Mot inconnu : less [[5:9]] => ==== less ==== <|> less

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple : <|>   => suggestions : ['']
146 Mot inconnu : less [[15:19]] =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple : <|> less

164 Mot inconnu : cat [[25:28]] => il y a aussi la commande cat <nom_du_fichier> <|> cat

166 Mot inconnu : rm [[5:7]] => ==== rm ==== <|> rm

169 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) <|>   => suggestions : ['']
169 Mot inconnu : rm [[15:17]] =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) <|> rm
169 Mot inconnu : rm [[67:69]] =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) <|> rm
169 Mot inconnu : remove [[72:78]] =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) <|> remove

186 Mot inconnu : __ [[0:2]] => __**ATTENTION**__ <|> __
186 Mot inconnu : __ [[15:17]] => __**ATTENTION**__ <|> __

200 Mot inconnu : chown [[5:10]] => ==== chown ==== <|> chown

201 Mot inconnu : chown [[14:19]] => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. <|> chown
201 Mot inconnu : chown [[84:89]] => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. <|> chown
201 Mot inconnu : owner [[99:104]] => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. <|> owner

212 Mot inconnu : chmod [[5:10]] => ==== chmod ==== <|> chmod

213 Mot inconnu : chmod [[14:19]] => La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation. <|> chmod

217 Mot inconnu : __ [[0:2]] => __**Méthode symbolique**__ <|> __
217 Mot inconnu : __ [[24:26]] => __**Méthode symbolique**__ <|> __

219 Mot inconnu : chmod [[2:7]] => **chmod ugoa|+/-/=|rwxugo fichier*** <|> chmod
219 Mot inconnu : ugoa [[8:12]] => **chmod ugoa|+/-/=|rwxugo fichier*** <|> ugoa
219 Mot inconnu : rwxugo [[19:25]] => **chmod ugoa|+/-/=|rwxugo fichier*** <|> rwxugo

221 Mot inconnu : chmod [[18:23]] => Les paramètres de chmod se décomposent là en trois parties : <|> chmod

251 Mot inconnu : __ [[0:2]] => __**Méthode octale**__ <|> __
251 Mot inconnu : __ [[20:22]] => __**Méthode octale**__ <|> __

253 Mot inconnu : chmod [[2:7]] => **chmod XXX fichier**, où XXX = Utilisateur | Groupe | Autres (X représente un entier compris entre 1 et 7) <|> chmod

270 Mot inconnu : chmod [[7:12]] => Ainsi, chmod 777 fichier donne tous les droits à tout le monde. <|> chmod
270 Accord de nombre erroné avec « 777 » : « fichier » devrait être au pluriel. [[17:24]] => Ainsi, chmod 777 fichier donne tous les droits à tout le monde. <|> fichier => suggestions : ['fichiers']
