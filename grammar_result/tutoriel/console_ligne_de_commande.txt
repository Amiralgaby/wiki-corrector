
8 Mot inconnu : How => Ce //How To// est fait pour les débutants qui ne connaissent pas **GNU/Linux** et n'a pas la prétention de faire de vous des champions de la console. | how

17 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Cette page vous donnera des commandes GNU/Linux basiques à utiliser dans un terminal. |    => suggestions : ['']

18 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Tous les noms de commande seront en **GRAS**. |    => suggestions : ['']

19 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les commandes devront être tapées en respectant **la casse** selon l'exemple encadré. |    => suggestions : ['']

20 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour un complément d'information, lisez le **man** de chaque commande. |    => suggestions : ['']

22 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ | auto-complétion => suggestions : ['Auto-complétion']
22 Mot inconnu : tab => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ | tab
22 Confusion probable. Pour dire “possiblement”, écrivez “peut-être”. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\ | peut être => suggestions : ['Peut-être']

23 Incohérence avec “il” : “peut-être” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => **retour à la ligne** pour clarifier une ligne de commande un peu longue, il peut-être utile d'utiliser le ** \** puis retour charriot pour continuer à saisir la ligne de commande sur plusieurs lignes d'affichage. | peut-être => suggestions : []

29 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Le 1er mot tapé est une commande. Les lettres tapées après un tiret, et les mots tapés après 2 tirets, sont des options. | 1er => suggestions : ['1ᵉʳ']

58 Mot inconnu : ls => ==== ls ==== | ls

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) |   => suggestions : ['']
59 Mot inconnu : ls =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) | ls
59 Mot inconnu : ls =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t) | ls

63 Mot inconnu : ongue => Pour obtenir plus d'information, utilisez l'option **-l** (pour version **l**ongue) : | ongue

67 Guillemets typographiques ouvrants. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point)  | " => suggestions : ['«\xa0', '“']
67 Guillemets typographiques fermants. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point)  | " => suggestions : ['\xa0»', '”']
67 Espace(s) en fin de ligne à supprimer. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point)  |   => suggestions : ['']

68 Mot inconnu : ll => utilisez l'option **-A** (pour **A**ll) : | ll

78 Mot inconnu : ls => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | ls
78 Il manque un espace à côté du tiret. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> |  - => suggestions : [' – ', ' — ']
78 Mot inconnu : all => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | all
78 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['\xa0»', '”']
78 Pas d’espace avant un point. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> |  . => suggestions : ['.']
78 Typographie : un ou trois points ? => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | .. => suggestions : ['…', '.']
78 Mot inconnu : ls => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | ls
78 Il manque un espace à côté du tiret. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> |  - => suggestions : [' – ', ' — ']
78 Mot inconnu : almost-all => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | almost-all
78 Pas d’espace avant un point. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> |  . => suggestions : ['.']
78 Typographie : un ou trois points ? => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | .. => suggestions : ['…', '.']
78 Il manque les traits d’union. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | c'est à dire => suggestions : ['c’est-à-dire']
78 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['\xa0»', '”']
78 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['«\xa0', '“']
78 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note> | " => suggestions : ['\xa0»', '”']

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur). |   => suggestions : ['']
82 Mot inconnu : directory =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur). | directory

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd /home/utilisateur/dossier      ### vous déplacera à votre répertoire (/home/utilisateur/dossier) |    => suggestions : ['']
86 Espace(s) surnuméraire(s) à supprimer. =>   cd /home/utilisateur/dossier      ### vous déplacera à votre répertoire (/home/utilisateur/dossier) |        => suggestions : [' ']

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd |    => suggestions : ['']

95 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd .. |    => suggestions : ['']
95 Typographie : un ou trois points ? =>   cd .. | .. => suggestions : ['…', '.']

97 Mot inconnu : Tab => <note tip>La touche //Tab// permet de compléter le nom du répertoire que vous êtes en train de taper.</note> | tab

99 Accord de genre erroné entre « informations » et « utilisateur ». => La commande **id** affiche les informations utilisateur et de groupe pour un utilisateur spécifié, ou si aucun utilisateur n'est spécifié, elle affiche les informations sur l'utilisateur courant | utilisateur => suggestions : ['utilisatrices']

105 Mot inconnu : mkdir => ==== mkdir ==== | mkdir

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : |   => suggestions : ['']
106 Mot inconnu : mkdir =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : | mkdir
106 Mot inconnu : mkdir =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : | mkdir
106 Mot inconnu : make =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : | make
106 Mot inconnu : directory =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple : | directory

113 Mot inconnu : pwd => ==== pwd ==== | pwd

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple |   => suggestions : ['']
114 Mot inconnu : pwd =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple | pwd
114 Mot inconnu : pwd =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple | pwd
114 Mot inconnu : present =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple | present
114 Mot inconnu : working =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple | working
114 Mot inconnu : directory =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple | directory

119 Mot inconnu : mv => ==== mv ==== | mv

120 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : |   => suggestions : ['']
120 Mot inconnu : mv =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : | mv
120 Mot inconnu : mv =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : | mv
120 Mot inconnu : move =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples : | move

134 Mot inconnu : cp => ==== cp ==== | cp

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : |   => suggestions : ['']
135 Mot inconnu : cp =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : | cp
135 Mot inconnu : cp =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : | cp
135 Mot inconnu : copy =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple : | copy

145 Mot inconnu : less => ==== less ==== | less

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple : |   => suggestions : ['']
146 Mot inconnu : less =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple : | less

162 Mot inconnu : cat => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]]. | cat
162 Mot inconnu : nano => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]]. | nano
162 Mot inconnu : vi => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]]. | vi
162 Typographie : points de suspension. Utilisez le caractère dédié. => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]]. | ... => suggestions : ['…']

164 Mot inconnu : cat => il y a aussi la commande cat <nom_du_fichier> | cat

166 Mot inconnu : rm => ==== rm ==== | rm
167 Espace(s) en fin de ligne à supprimer. => Remarque : cette commande ne demande jamais autorisation.  |   => suggestions : ['']

169 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove)  |   => suggestions : ['']
169 Mot inconnu : rm =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove)  | rm
169 Mot inconnu : rm =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove)  | rm
169 Mot inconnu : remove =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove)  | remove
169 Espace(s) en fin de ligne à supprimer. =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove)  |   => suggestions : ['']

172 Espace(s) en fin de ligne à supprimer. => Attention cette commande est irréversible donc soyez vigilant quand vous l'utilisez.  |   => suggestions : ['']

186 Mot inconnu : __ => __**ATTENTION**__ | __
186 Mot inconnu : __ => __**ATTENTION**__ | __

200 Mot inconnu : chown => ==== chown ==== | chown

201 Mot inconnu : chown => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. | chown
201 Mot inconnu : chown => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. | chown
201 Mot inconnu : owner => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. | owner
201 Mot inconnu : root => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation. | root

212 Mot inconnu : chmod => ==== chmod ==== | chmod

213 Mot inconnu : chmod => La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation. | chmod
213 Mot inconnu : root => La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation. | root

217 Mot inconnu : __ => __**Méthode symbolique**__ | __
217 Mot inconnu : __ => __**Méthode symbolique**__ | __

219 Mot inconnu : chmod => **chmod ugoa|+/-/=|rwxugo fichier*** | chmod
219 Mot inconnu : ugoa => **chmod ugoa|+/-/=|rwxugo fichier*** | ugoa
219 Mot inconnu : rwxugo => **chmod ugoa|+/-/=|rwxugo fichier*** | rwxugo

221 Mot inconnu : chmod => Les paramètres de chmod se décomposent là en trois parties : | chmod

223 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 1ère indique à qui s'applique la modification des droits d'accès : |      => suggestions : ['']
223 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>     * la 1ère indique à qui s'applique la modification des droits d'accès : | 1ère => suggestions : ['1ʳᵉ']

224 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * u pour l'utilisateur, le propriétaire du fichier (u pour //user//) |        => suggestions : ['']

225 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * g pour le groupe (g pour //group//) |        => suggestions : ['']
225 Mot inconnu : group =>       * g pour le groupe (g pour //group//) | group

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * o pour le reste du monde (o pour //others//) |        => suggestions : ['']
226 Mot inconnu : others =>       * o pour le reste du monde (o pour //others//) | others

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * a pour tous (a pour //all//) |        => suggestions : ['']
227 Mot inconnu : all =>       * a pour tous (a pour //all//) | all

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>            |            => suggestions : ['']

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 2ème est un caractère +, - ou = : |      => suggestions : ['']
229 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>     * la 2ème est un caractère +, - ou = : | 2ème => suggestions : ['2ᵉ']
229 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     * la 2ème est un caractère +, - ou = : |  -  => suggestions : [' – ', ' — ', ' − ']

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * + signifie l'ajout de nouveaux droits d'accès |        => suggestions : ['']

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * - signifie la suppression de droits d'accès |        => suggestions : ['']
231 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>       * - signifie la suppression de droits d'accès |  -  => suggestions : [' – ', ' — ', ' − ']

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * = signifie l'autorisation exclusive des droits d'accès spécifiés  |        => suggestions : ['']
232 Espace(s) en fin de ligne à supprimer. =>       * = signifie l'autorisation exclusive des droits d'accès spécifiés  |   => suggestions : ['']

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>            |            => suggestions : ['']

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 3ème indique le(s) droit(s) concerné(s) :  |      => suggestions : ['']
234 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>     * la 3ème indique le(s) droit(s) concerné(s) :  | 3ème => suggestions : ['3ᵉ']
234 Écriture invariable. Utilisez un point médian. =>     * la 3ème indique le(s) droit(s) concerné(s) :  | droit(s) => suggestions : ['droit·s']
234 Écriture invariable. Utilisez un point médian. =>     * la 3ème indique le(s) droit(s) concerné(s) :  | concerné(s) => suggestions : ['concerné·s']
234 Espace(s) en fin de ligne à supprimer. =>     * la 3ème indique le(s) droit(s) concerné(s) :  |   => suggestions : ['']

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * r pour lecture (r pour Read) |        => suggestions : ['']
235 Mot inconnu : Read =>       * r pour lecture (r pour Read) | read

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * w pour écriture (w pour Write) |        => suggestions : ['']
236 Mot inconnu : Write =>       * w pour écriture (w pour Write) | write

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * x pour exécution (x pour eXecute) |        => suggestions : ['']
237 Mot inconnu : eXecute =>       * x pour exécution (x pour eXecute) | execute

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs |        => suggestions : ['']
238 Il manque un espace. =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs | g => suggestions : [' g']
238 Il manque un espace. =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs | groupe => suggestions : [' groupe']

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      |      => suggestions : ['']

241 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * r signifie lecture totale du répertoire (la commande ls liste ainsi par exemple tous les fichiers contenus dans le répertoire). Mais en l'absence de ce droit, il est toujours possible de lire un fichier contenu dans ce répertoire (en connaissant son chemin). |      => suggestions : ['']
241 Mot inconnu : ls =>     * r signifie lecture totale du répertoire (la commande ls liste ainsi par exemple tous les fichiers contenus dans le répertoire). Mais en l'absence de ce droit, il est toujours possible de lire un fichier contenu dans ce répertoire (en connaissant son chemin). | ls

242 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever.  |      => suggestions : ['']
242 Guillemets typographiques ouvrants. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever.  | " => suggestions : ['«\xa0', '“']
242 Guillemets typographiques fermants. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever.  | " => suggestions : ['\xa0»', '”']
242 Espace(s) en fin de ligne à supprimer. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever.  |   => suggestions : ['']

251 Mot inconnu : __ => __**Méthode octale**__ | __
251 Mot inconnu : __ => __**Méthode octale**__ | __

253 Mot inconnu : chmod => **chmod XXX fichier**, où XXX = Utilisateur | Groupe | Autres (X représente un entier compris entre 1 et 7) | chmod

257 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 0 : aucun droit en lecture, écriture, exécution |     => suggestions : ['']

258 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 1 : droit d'exécution |     => suggestions : ['']

259 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 2 : droit d'écriture |     => suggestions : ['']

260 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 4 : droit de lecture |     => suggestions : ['']

266 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 1er chiffre X spécifie les droits pour //le propriétaire// du fichier. |     => suggestions : ['']
266 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>    * Le 1er chiffre X spécifie les droits pour //le propriétaire// du fichier. | 1er => suggestions : ['1ᵉʳ']

267 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 2ème chiffre X spécifie les droits pour //le groupe propriétaire// du fichier. |     => suggestions : ['']
267 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>    * Le 2ème chiffre X spécifie les droits pour //le groupe propriétaire// du fichier. | 2ème => suggestions : ['2ᵉ']

268 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 3ème chiffre X spécifie les droits pour //tous les autres utilisateurs// sur le fichier. |     => suggestions : ['']
268 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>    * Le 3ème chiffre X spécifie les droits pour //tous les autres utilisateurs// sur le fichier. | 3ème => suggestions : ['3ᵉ']

270 Mot inconnu : chmod => Ainsi, chmod 777 fichier donne tous les droits à tout le monde. | chmod
270 Accord de nombre erroné avec « 777 » : « fichier » devrait être au pluriel. => Ainsi, chmod 777 fichier donne tous les droits à tout le monde. | fichier => suggestions : ['fichiers']

272 Mot inconnu : chmod => Un calculateur de chmod est disponible sur [[http://pages.infinit.net/glopglop/local/chmod.htm]] | chmod
