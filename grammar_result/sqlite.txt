
4 Mot inconnu : SQLite => ====== SQLite ====== <|> sqlite

7 Mot inconnu : SQLite3 => SQLite3 présente l'avantage de n'avoir rien à configurer, rien à maintenir ou à administrer. C'est aussi son objectif. En contrepartie, certaines fonctionnalités sont absentes, comme la gestion des utilisateurs ou la possibilité de se connecter à distance à la base (en TCP/IP par exemple). <|> sqlite3
7 Mot inconnu : TCP => SQLite3 présente l'avantage de n'avoir rien à configurer, rien à maintenir ou à administrer. C'est aussi son objectif. En contrepartie, certaines fonctionnalités sont absentes, comme la gestion des utilisateurs ou la possibilité de se connecter à distance à la base (en TCP/IP par exemple). <|> tcp

9 Guillemets typographiques ouvrants. => //Cette description est tirée de "C en action" 2e édition de Yves METTIER.// <|> " => suggestions : ['«\xa0', '“']
9 Guillemets typographiques fermants. => //Cette description est tirée de "C en action" 2e édition de Yves METTIER.// <|> " => suggestions : ['\xa0»', '”']
9 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => //Cette description est tirée de "C en action" 2e édition de Yves METTIER.// <|> 2e => suggestions : ['2ᵉ']
9 Mot inconnu : METTIER => //Cette description est tirée de "C en action" 2e édition de Yves METTIER.// <|> mettier

19 Mot inconnu : SQLite => ==== Lancer le terminal SQLite ==== <|> sqlite

24 Guillemets typographiques ouvrants. => Le curseur indique que vous êtes maintenant dans le "terminal" SQlite comme ici: <|> " => suggestions : ['«\xa0', '“']
24 Guillemets typographiques fermants. => Le curseur indique que vous êtes maintenant dans le "terminal" SQlite comme ici: <|> " => suggestions : ['\xa0»', '”']
24 Mot inconnu : SQlite => Le curseur indique que vous êtes maintenant dans le "terminal" SQlite comme ici: <|> sqlite

32 Mot inconnu : SQLite => //Toute commande SQLite sera précédée de son curseur afin de bien distinguer les commandes SQLite des autres commandes.// <|> sqlite
32 Mot inconnu : SQLite => //Toute commande SQLite sera précédée de son curseur afin de bien distinguer les commandes SQLite des autres commandes.// <|> sqlite

35 Mot inconnu : SQLite => ==== Quitter le terminal SQLite ==== <|> sqlite

38 Mot inconnu : SQLite => ==== Lister les commandes SQLite ==== <|> sqlite
95 Pas d’espace avant ce signe. =>   * [[#Afficher le nom des colonnes / Changer l'aspect des colonnes ]] <|>  ] => suggestions : [']']
98 Mot inconnu : html =>   * [[#Modifier la sortie en code html]] <|> html
102 Accord de nombre erroné : « résultat » devrait être au pluriel. =>   * Pour présenter les résultat d'une requête sous forme de tableau dans le terminal on utilisera: <|> résultat => suggestions : ['résultats']
131 Mot inconnu : list =>   * Il est possible de modifier le séparateur dans le mode list: <|> list

159 Mot inconnu : html => === Modifier la sortie en code html === <|> html
161 Mot inconnu : html =>   * Il est possible de sortir directement les résultats en html: <|> html
221 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * [[#Créer une base - ouvrir une base]] <|>  -  => suggestions : [' – ', ' — ', ' − ']
231 Mot inconnu : SQLite =>   * [[#Dumper une table depuis SQLite en format SQL pour sauvegarder la structure et les données sur un disque]] <|> sqlite

234 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => === Créer une base - ouvrir une base === <|>  -  => suggestions : [' – ', ' — ', ' − ']

239 Espace(s) surnuméraire(s) à supprimer. => === Détruire une base  === <|>    => suggestions : [' ']

250 Mot inconnu : SQLite3 => <note>Les types de données SQLite3 sont tels qu'expliqué [[https://www.sqlite.org/datatype3.html|ici]] à savoir: //NULL, INTEGER, REAL, TEXT// et //BLOB//. Ce qui donne par exemple : <|> sqlite3
250 Mot inconnu : NULL => <note>Les types de données SQLite3 sont tels qu'expliqué [[https://www.sqlite.org/datatype3.html|ici]] à savoir: //NULL, INTEGER, REAL, TEXT// et //BLOB//. Ce qui donne par exemple : <|> null
250 Mot inconnu : INTEGER => <note>Les types de données SQLite3 sont tels qu'expliqué [[https://www.sqlite.org/datatype3.html|ici]] à savoir: //NULL, INTEGER, REAL, TEXT// et //BLOB//. Ce qui donne par exemple : <|> integer
250 Mot inconnu : REAL => <note>Les types de données SQLite3 sont tels qu'expliqué [[https://www.sqlite.org/datatype3.html|ici]] à savoir: //NULL, INTEGER, REAL, TEXT// et //BLOB//. Ce qui donne par exemple : <|> real
250 Mot inconnu : TEXT => <note>Les types de données SQLite3 sont tels qu'expliqué [[https://www.sqlite.org/datatype3.html|ici]] à savoir: //NULL, INTEGER, REAL, TEXT// et //BLOB//. Ce qui donne par exemple : <|> text

297 Mot inconnu : congo => 1|tintin au congo|hergé|Tintin est au congo.|5.0||casterman <|> congo
297 Mot inconnu : hergé => 1|tintin au congo|hergé|Tintin est au congo.|5.0||casterman <|> hergé
297 Mot inconnu : congo => 1|tintin au congo|hergé|Tintin est au congo.|5.0||casterman <|> congo
297 Mot inconnu : casterman => 1|tintin au congo|hergé|Tintin est au congo.|5.0||casterman <|> casterman

302 Mot inconnu : marsupilamis => le nid des marsupilamis <|> marsupilamis

338 Mot inconnu : Dumper => === Dumper une table depuis SQLite en format SQL pour sauvegarder la structure et les données sur un disque === <|> dumper
338 Mot inconnu : SQLite => === Dumper une table depuis SQLite en format SQL pour sauvegarder la structure et les données sur un disque === <|> sqlite

340 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => == Voir le résultat de la commande .dump == <|>  . => suggestions : ['. ', '.']
340 Mot inconnu : dump => == Voir le résultat de la commande .dump == <|> dump

353 Mot inconnu : dumper => == Rediriger la sortie vers un fichier puis dumper la table depuis SQLite == <|> dumper
353 Mot inconnu : SQLite => == Rediriger la sortie vers un fichier puis dumper la table depuis SQLite == <|> sqlite

365 Mot inconnu : dumpé => == Lire directement un fichier dumpé depuis sqlite == <|> dumpé
365 Mot inconnu : sqlite => == Lire directement un fichier dumpé depuis sqlite == <|> sqlite

367 Conjugaison erronée. Accord avec « tout ». Le verbe devrait être à la 3ᵉ personne du singulier. => Tout d'abord effacez la table de la base: <|> effacez => suggestions : ['efface']

385 Mot inconnu : Dumper => === Dumper une base en format SQL pour sauvegarder sa structure, ses tables et ses données === <|> dumper

387 Mot inconnu : Dumper => == Dumper la base == <|> dumper

392 Mot inconnu : dumpé => == Récupérer un fichier dumpé pour recréer la base == <|> dumpé
414 Mot inconnu : Sqlite =>   * [[https://sqlitebrowser.org/|Sqlite Browser]], présent dans les dépôts Ubuntu dans le paquet **[[apt>sqlitebrowser]]**. <|> sqlite
414 Mot inconnu : Browser =>   * [[https://sqlitebrowser.org/|Sqlite Browser]], présent dans les dépôts Ubuntu dans le paquet **[[apt>sqlitebrowser]]**. <|> browser
414 Mot inconnu : sqlitebrowser =>   * [[https://sqlitebrowser.org/|Sqlite Browser]], présent dans les dépôts Ubuntu dans le paquet **[[apt>sqlitebrowser]]**. <|> sqlitebrowser

419 Mot inconnu : Sqlite => ===== Utiliser Sqlite avec Python ===== <|> sqlite

421 Mot inconnu : SQLite => Exemple d'utilisation de SQLite avec un script python.\\ <|> sqlite

429 Mot inconnu : coding => #-*- coding: utf-8 -*- <|> coding
429 Mot inconnu : utf-8 => #-*- coding: utf-8 -*- <|> utf-8

431 Mot inconnu : sqlite3 => import sqlite3 <|> sqlite3

433 Mot inconnu : class => class Mabase(): <|> class
433 Mot inconnu : Mabase => class Mabase(): <|> mabase

435 Mot inconnu : def => 	def __init__(self): <|> def
435 Mot inconnu : __init__ => 	def __init__(self): <|> __init__
435 Il manque un espace avant la parenthèse. => 	def __init__(self): <|> ( => suggestions : [' (']

437 Mot inconnu : conn => 		self.conn = sqlite3.connect('mabase.db') <|> conn
437 Mot inconnu : sqlite3 => 		self.conn = sqlite3.connect('mabase.db') <|> sqlite3
437 Mot inconnu : connect => 		self.conn = sqlite3.connect('mabase.db') <|> connect
437 Il manque un espace avant la parenthèse. => 		self.conn = sqlite3.connect('mabase.db') <|> ( => suggestions : [' (']
437 Mot inconnu : mabase => 		self.conn = sqlite3.connect('mabase.db') <|> mabase
437 Mot inconnu : db => 		self.conn = sqlite3.connect('mabase.db') <|> db

439 Mot inconnu : def => 	def creer(self): <|> def
439 Mot inconnu : creer => 	def creer(self): <|> creer
439 Il manque un espace avant la parenthèse. => 	def creer(self): <|> ( => suggestions : [' (']

441 Mot inconnu : True => 			Renvoi True si reussie, False si déjà créée. """ <|> true
441 Mot inconnu : reussie => 			Renvoi True si reussie, False si déjà créée. """ <|> reussie
441 Mot inconnu : False => 			Renvoi True si reussie, False si déjà créée. """ <|> false

447 Mot inconnu : try => 		try: <|> try

448 Mot inconnu : execute => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> execute
448 Il manque un espace avant la parenthèse. => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> ( => suggestions : [' (']
448 Mot inconnu : create => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> create
448 Mot inconnu : INTEGER => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> integer
448 Mot inconnu : PRIMARY => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> primary
448 Mot inconnu : KEY => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> key
448 Il manque un espace. => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> signature => suggestions : [' signature']
448 Mot inconnu : VARCHAR => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> varchar
448 Mot inconnu : INTEGER => 			c.execute('create table comptes (id INTEGER PRIMARY KEY,signature VARCHAR(50), compteur INTEGER)') <|> integer

449 Mot inconnu : Inserer => 			# Inserer deux lignes de données <|> inserer

450 Mot inconnu : execute => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> execute
450 Il manque un espace avant la parenthèse. => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> ( => suggestions : [' (']
450 Mot inconnu : into => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> into
450 Mot inconnu : null => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> null
450 Guillemets typographiques ouvrants. => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> " => suggestions : ['«\xa0', '“']
450 Mot inconnu : gffgdfgd => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> gffgdfgd
450 Guillemets typographiques fermants. => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> " => suggestions : ['\xa0»', '”']
450 Guillemets typographiques ouvrants. => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> " => suggestions : ['«\xa0', '“']
450 Guillemets typographiques fermants. => 			c.execute('insert into comptes values (null,"gffgdfgd","0")') <|> " => suggestions : ['\xa0»', '”']

451 Mot inconnu : execute => 			c.execute('insert into comptes values (null,"Martin","1")') <|> execute
451 Il manque un espace avant la parenthèse. => 			c.execute('insert into comptes values (null,"Martin","1")') <|> ( => suggestions : [' (']
451 Mot inconnu : into => 			c.execute('insert into comptes values (null,"Martin","1")') <|> into
451 Mot inconnu : null => 			c.execute('insert into comptes values (null,"Martin","1")') <|> null
451 Guillemets typographiques ouvrants. => 			c.execute('insert into comptes values (null,"Martin","1")') <|> " => suggestions : ['«\xa0', '“']
451 Guillemets typographiques fermants. => 			c.execute('insert into comptes values (null,"Martin","1")') <|> " => suggestions : ['\xa0»', '”']
451 Guillemets typographiques ouvrants. => 			c.execute('insert into comptes values (null,"Martin","1")') <|> " => suggestions : ['«\xa0', '“']
451 Guillemets typographiques fermants. => 			c.execute('insert into comptes values (null,"Martin","1")') <|> " => suggestions : ['\xa0»', '”']

457 Il manque un espace. => 			c.close() <|> close => suggestions : [' close']

458 Mot inconnu : print => 			print "Création de la base réussie." <|> print
458 Guillemets typographiques ouvrants. => 			print "Création de la base réussie." <|> " => suggestions : ['«\xa0', '“']
458 Guillemets typographiques fermants. => 			print "Création de la base réussie." <|> " => suggestions : ['\xa0»', '”']

459 Mot inconnu : return => 			return True <|> return
459 Mot inconnu : True => 			return True <|> true

461 Mot inconnu : except => 		except: <|> except

463 Il manque un espace. => 			c.close() <|> close => suggestions : [' close']

464 Mot inconnu : return => 			return False <|> return
464 Mot inconnu : False => 			return False <|> false

466 Mot inconnu : def => 	def lire(self): <|> def
466 Il manque un espace avant la parenthèse. => 	def lire(self): <|> ( => suggestions : [' (']

469 Mot inconnu : execute => 		c.execute("SELECT * FROM comptes") <|> execute
469 Il manque un espace avant la parenthèse. => 		c.execute("SELECT * FROM comptes") <|> ( => suggestions : [' (']
469 Guillemets typographiques ouvrants. => 		c.execute("SELECT * FROM comptes") <|> " => suggestions : ['«\xa0', '“']
469 Mot inconnu : FROM => 		c.execute("SELECT * FROM comptes") <|> from
469 Guillemets typographiques fermants. => 		c.execute("SELECT * FROM comptes") <|> " => suggestions : ['\xa0»', '”']

470 Mot inconnu : row => 		for row in c: <|> row
470 Confusion possible : pour le déterminant désignant quelque chose, écrivez “un”. => 		for row in c: <|> in => suggestions : ['un']

471 Mot inconnu : print => 			print row <|> print
471 Mot inconnu : row => 			print row <|> row

472 Il manque un espace. => 		c.close() <|> close => suggestions : [' close']

475 Mot inconnu : mabase => mabase = Mabase() <|> mabase
475 Mot inconnu : Mabase => mabase = Mabase() <|> mabase

476 Mot inconnu : not => if not mabase.creer():	# Si la méthode creer() renvoi False, lire la base <|> not
476 Mot inconnu : mabase => if not mabase.creer():	# Si la méthode creer() renvoi False, lire la base <|> mabase
476 Mot inconnu : creer => if not mabase.creer():	# Si la méthode creer() renvoi False, lire la base <|> creer
476 Mot inconnu : creer => if not mabase.creer():	# Si la méthode creer() renvoi False, lire la base <|> creer
476 Mot inconnu : False => if not mabase.creer():	# Si la méthode creer() renvoi False, lire la base <|> false

477 Mot inconnu : mabase => 	mabase.lire() <|> mabase
477 Il manque un espace. => 	mabase.lire() <|> lire => suggestions : [' lire']
