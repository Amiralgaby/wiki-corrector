
5 Mot inconnu : SNMP [[7:11]] => ====== SNMP (Simple Network Management Protocol) ou la supervision d'équipements réseaux ====== <|> snmp
5 Mot inconnu : Network [[20:27]] => ====== SNMP (Simple Network Management Protocol) ou la supervision d'équipements réseaux ====== <|> network
5 Mot inconnu : Protocol [[39:47]] => ====== SNMP (Simple Network Management Protocol) ou la supervision d'équipements réseaux ====== <|> protocol

9 S’il s’agit d’une interrogation, il manque un trait d’union. [[8:14]] => ==== Qu'est ce que le SNMP ? ==== <|> est ce => suggestions : ['est-ce']
9 Mot inconnu : SNMP [[22:26]] => ==== Qu'est ce que le SNMP ? ==== <|> snmp

11 Mot inconnu : SNMP [[5:9]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> snmp
11 Mot inconnu : SNMP [[137:141]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> snmp
11 Mot inconnu : Network [[160:167]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> network
11 Mot inconnu : Protocol [[179:187]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> protocol
11 Mot inconnu : switchs [[208:215]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> switchs
11 Mot inconnu : UPS [[217:220]] => Le **SNMP** est un protocole qui permet aux administrateurs réseaux de gérer les équipements et de diagnostiquer les problèmes. Le sigle SNMP signifie //Simple Network Management Protocol// et la plupart des switchs, UPS, pare-feux matériels, routeurs, etc. comprennent ce protocole pour les diagnostics. <|> ups
13 Mot inconnu : SNMP [[219:223]] => <note tip>Quand on dit « la plupart », on parle du matériel que l'on retrouve en entreprise ; pas forcément le routeur fourni par votre fournisseur d'accès Internet. Pour savoir si votre matériel est compatible avec le SNMP, veuillez consulter les spécifications techniques livrées avec l'appareil.</note> <|> snmp

15 Mot inconnu : SNMP [[13:17]] => Le protocole SNMP est un standard défini par l'IETF dans la [[https://www.ietf.org/rfc/rfc1157.txt|RFC 1157]] (mai 1990). Le SNMP est souvent vu comme quelque chose de compliqué et d'assez confus. Les API permettant d'interagir avec le protocole englobent tellement de choses qu'au final, on ne s'y retrouve plus. Les livres et la documentation disponibles sur le sujet ont tendance à compliquer les choses et à ne pas les démystifier. C'est ce que je vais essayer de faire dans cet article. <|> snmp
15 Mot inconnu : SNMP [[125:129]] => Le protocole SNMP est un standard défini par l'IETF dans la [[https://www.ietf.org/rfc/rfc1157.txt|RFC 1157]] (mai 1990). Le SNMP est souvent vu comme quelque chose de compliqué et d'assez confus. Les API permettant d'interagir avec le protocole englobent tellement de choses qu'au final, on ne s'y retrouve plus. Les livres et la documentation disponibles sur le sujet ont tendance à compliquer les choses et à ne pas les démystifier. C'est ce que je vais essayer de faire dans cet article. <|> snmp

19 Mot inconnu : SNMP [[13:17]] => Le protocole SNMP(Simple Network Management Protocol) est relativement simple… une fois qu'on a compris. Voyons comment se compose un ensemble d'éléments communiquant //via// SNMP. <|> snmp
19 Il manque un espace avant la parenthèse. [[17:18]] => Le protocole SNMP(Simple Network Management Protocol) est relativement simple… une fois qu'on a compris. Voyons comment se compose un ensemble d'éléments communiquant //via// SNMP. <|> ( => suggestions : [' (']
19 Mot inconnu : Network [[25:32]] => Le protocole SNMP(Simple Network Management Protocol) est relativement simple… une fois qu'on a compris. Voyons comment se compose un ensemble d'éléments communiquant //via// SNMP. <|> network
19 Mot inconnu : Protocol [[44:52]] => Le protocole SNMP(Simple Network Management Protocol) est relativement simple… une fois qu'on a compris. Voyons comment se compose un ensemble d'éléments communiquant //via// SNMP. <|> protocol
19 Mot inconnu : SNMP [[175:179]] => Le protocole SNMP(Simple Network Management Protocol) est relativement simple… une fois qu'on a compris. Voyons comment se compose un ensemble d'éléments communiquant //via// SNMP. <|> snmp

21 Mot inconnu : switch [[33:39]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> switch
21 Typographie : pas de virgule avant les points de suspension. [[49:52]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> , … => suggestions : ['…']
21 Mot inconnu : SNMP [[78:82]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp
21 Mot inconnu : dæmon [[116:121]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> dæmon
21 Mot inconnu : SNMP [[169:173]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp
21 Mot inconnu : Object [[230:236]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> object
21 Mot inconnu : Identifiers [[237:248]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> identifiers
21 Mot inconnu : OID [[256:259]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> oid
21 Mot inconnu : OID [[269:272]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> oid
21 Mot inconnu : SNMP [[318:322]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp
21 Mot inconnu : SNMP [[404:408]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp
21 Mot inconnu : SNMP [[425:429]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp
21 Mot inconnu : OID [[542:545]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> oid
21 Mot inconnu : SNMP [[546:550]] => Un périphérique réseau (routeur, switch, pare-feu, …) fait tourner un //agent SNMP// qui est en fait un processus //dæmon// qui répond aux requêtes du réseau. L'**agent SNMP** fournit un grand nombre d'**identifiant d'objets** (//Object Identifiers// ou **OID**). Un **OID** est une paire clé-valeur unique. L'**agent SNMP** remplit ces valeurs et fait en sorte qu'elles soient disponibles. Un **manager SNMP** (ou **Serveur SNMP**) peut effectuer des requêtes aux agents avec ces paires clé-valeur à propos d'informations spécifiques. Les **OID SNMP** peuvent être lus ou écrits. <|> snmp

23 Mot inconnu : SNMP [[68:72]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> snmp
23 Mot inconnu : SNMP [[77:81]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> snmp
23 Mot inconnu : switches [[250:258]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> switches
23 Mot inconnu : SNMP [[314:318]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> snmp
23 Mot inconnu : community [[357:366]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> community
23 Mot inconnu : name [[367:371]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> name
23 Mot inconnu : OID [[461:464]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> oid
23 Mot inconnu : community [[510:519]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> community
23 Mot inconnu : name [[520:524]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> name
23 Mot inconnu : SNMP [[571:575]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> snmp
23 Mot inconnu : UDP [[602:605]] => Notons qu'il est rare d'écrire des informations sur un périphérique SNMP. Le SNMP est surtout utilisé par de nombreuses applications de management pour contrôler l'état des périphériques réseaux (comme une interface graphique administrative pour les switches). Un système d'authentification basique existe dans le SNMP ; il permet au manager d'envoyer un //community name// (qui est en fait un mot de passe en clair) pour autoriser la lecture ou l'écriture des OID. La plupart des périphériques utilisent le //community name// non sécurisé « public ». Les communications SNMP se font //via// les ports UDP 161 et 162. <|> udp

27 Mot inconnu : MIB [[5:8]] => ==== MIB ==== <|> mib

29 Mot inconnu : SNMP [[54:58]] => Si vous avez déjà effectué quelques recherches sur le SNMP, vous avez sûrement été confronté aux **MIB** (//Management Information Base//). L'importance des MIB est très surfaite et vous allez comprendre pourquoi. Au premier coup d'œil, une MIB peut paraître très complexe ; en réalité, c'est très simple. <|> snmp
29 Mot inconnu : MIB [[99:102]] => Si vous avez déjà effectué quelques recherches sur le SNMP, vous avez sûrement été confronté aux **MIB** (//Management Information Base//). L'importance des MIB est très surfaite et vous allez comprendre pourquoi. Au premier coup d'œil, une MIB peut paraître très complexe ; en réalité, c'est très simple. <|> mib
29 Mot inconnu : MIB [[157:160]] => Si vous avez déjà effectué quelques recherches sur le SNMP, vous avez sûrement été confronté aux **MIB** (//Management Information Base//). L'importance des MIB est très surfaite et vous allez comprendre pourquoi. Au premier coup d'œil, une MIB peut paraître très complexe ; en réalité, c'est très simple. <|> mib
29 Mot inconnu : MIB [[241:244]] => Si vous avez déjà effectué quelques recherches sur le SNMP, vous avez sûrement été confronté aux **MIB** (//Management Information Base//). L'importance des MIB est très surfaite et vous allez comprendre pourquoi. Au premier coup d'œil, une MIB peut paraître très complexe ; en réalité, c'est très simple. <|> mib

31 Mot inconnu : OID [[6:9]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> oid
31 Mot inconnu : OID [[45:48]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> oid
31 Mot inconnu : IPv6 [[84:88]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> ipv6
31 Mot inconnu : OID [[224:227]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> oid
31 Mot inconnu : OID [[419:422]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> oid
31 Mot inconnu : MIB [[576:579]] => Les **OID** sont numériques et globaux. Un **OID** est très similaire à une adresse IPv6 et les différents fabricants ont différents préfixes, chaque fabricant a sa gamme de produit (un autre préfixe) et ainsi de suite. Les OID peuvent très vite être longs et c'est compliqué pour un humain de se rappeler la signification de cet ensemble de nombres. C'est pour cela qu'une méthode a été mise au point pour traduire un OID numérique dans une forme lisible pour un humain. Cette carte de traduction est stockée dans un fichier texte appelé //Management Information Base// ou **MIB**. <|> mib

33 Mot inconnu : MIB [[28:31]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> mib
33 Mot inconnu : SNMP [[46:50]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> snmp
33 Mot inconnu : SNMP [[99:103]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> snmp
33 Mot inconnu : MIB [[117:120]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> mib
33 Mot inconnu : MIB [[389:392]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> mib
33 Mot inconnu : MIB [[591:594]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> mib
33 Mot inconnu : MIB [[661:664]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> mib
33 Mot inconnu : SNMP [[703:707]] => Vous n'avez pas besoin d'un MIB pour utiliser SNMP ou effectuer des requêtes sur des périphériques SNMP mais sans la MIB, vous n'allez pas savoir facilement ce que signifient les données retournées par le périphérique. Dans certains cas, c'est facile comme le nom de l'hôte, l'usage des disques ou les informations d'état des ports. Dans d'autres cas, cela peut être plus difficile et une MIB peut être d'une grande aide. Notez qu'il est assez inhabituel pour la plupart des applications d'écrire des requêtes uniquement numériques ; la plupart des applications permettent l'installation de MIB complémentaires. Cette installation consiste en fait à placer les MIB à un endroit où l'application cliente SNMP peut les trouver pour effectuer la traduction. <|> snmp

35 Mot inconnu : SNMP [[36:40]] => ==== Techniques de supervision avec SNMP ==== <|> snmp

37 Mot inconnu : SNMP [[0:4]] => SNMP peut être utilisé de deux manières distinctes : le //polling// et les //traps//. <|> snmp
37 Mot inconnu : polling [[58:65]] => SNMP peut être utilisé de deux manières distinctes : le //polling// et les //traps//. <|> polling
37 Mot inconnu : traps [[77:82]] => SNMP peut être utilisé de deux manières distinctes : le //polling// et les //traps//. <|> traps

39 Mot inconnu : polling [[5:12]] => Le **polling** consiste simplement à envoyer une requête à intervalles réguliers pour obtenir une valeur particulière. Cette technique est appelée « vérification active ». Vous pouvez, par programme ou script, vérifier si les valeurs sont correctes. Si la requête échoue, il est possible qu'il y ait un problème avec le périphérique. Cependant, vu que le SNMP s'appuie sur UDP, il est conseillé de réitérer la requête pour confirmer le problème (surtout dans le cas d'une vérification au travers d'Internet). <|> polling
39 Mot inconnu : SNMP [[355:359]] => Le **polling** consiste simplement à envoyer une requête à intervalles réguliers pour obtenir une valeur particulière. Cette technique est appelée « vérification active ». Vous pouvez, par programme ou script, vérifier si les valeurs sont correctes. Si la requête échoue, il est possible qu'il y ait un problème avec le périphérique. Cependant, vu que le SNMP s'appuie sur UDP, il est conseillé de réitérer la requête pour confirmer le problème (surtout dans le cas d'une vérification au travers d'Internet). <|> snmp
39 Mot inconnu : UDP [[373:376]] => Le **polling** consiste simplement à envoyer une requête à intervalles réguliers pour obtenir une valeur particulière. Cette technique est appelée « vérification active ». Vous pouvez, par programme ou script, vérifier si les valeurs sont correctes. Si la requête échoue, il est possible qu'il y ait un problème avec le périphérique. Cependant, vu que le SNMP s'appuie sur UDP, il est conseillé de réitérer la requête pour confirmer le problème (surtout dans le cas d'une vérification au travers d'Internet). <|> udp

41 Mot inconnu : traps [[6:11]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> traps
41 Mot inconnu : SNMP [[92:96]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> snmp
41 Mot inconnu : SNMP [[132:136]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> snmp
41 Mot inconnu : trap [[260:264]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : SNMP [[265:269]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> snmp
41 Mot inconnu : trap [[343:347]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : down [[395:399]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> down
41 Mot inconnu : trap [[425:429]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : trap [[486:490]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : trap [[550:554]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : host [[555:559]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> host
41 Mot inconnu : trap [[568:572]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : host [[573:577]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> host
41 Mot inconnu : SNMP [[605:609]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> snmp
41 Mot inconnu : traps [[643:648]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> traps
41 Mot inconnu : traps [[692:697]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> traps
41 Mot inconnu : trap [[723:727]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap
41 Mot inconnu : handlers [[728:736]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> handlers
41 Mot inconnu : handler [[745:752]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> handler
41 Mot inconnu : trap [[806:810]] => Les **traps** consistent à faire de la vérification passive ; en gros, on configure l'agent SNMP pour qu'il contacte un autre agent SNMP en cas de problème. C'est-à-dire que l'on peut configurer un périphérique réseau (comme un routeur) pour qu'il envoie un **trap SNMP** lors de certains événements. Par exemple, le routeur peut envoyer un **trap** lorsqu'il détecte que la ligne est coupée (//down//). Quand un **événement trap** apparait, l'agent sur le périphérique va envoyer le **trap** vers une destination pré-configurée communément appelé **trap host**. Le //trap host// possède son propre agent SNMP qui va accepter et traiter les //traps// lorsqu'ils arrivent. Le traitement des //traps// est effectué par des **trap handlers**. Le **handler** peut faire ce qui est approprié pour répondre au //trap//, comme envoyer un courriel d'alerte ou faire ce qu'on veut. <|> trap

43 Mot inconnu : SNMP [[33:37]] => ==== Les différentes versions de SNMP ==== <|> snmp

45 Mot inconnu : SNMP [[59:63]] => Il existe actuellement 3 versions différentes du protocole SNMP : <|> snmp
46 Mot inconnu : SNMP [[4:8]] =>   * SNMP v1 (RFC 1155, 1157 et 1212). <|> snmp
46 Mot inconnu : v1 [[9:11]] =>   * SNMP v1 (RFC 1155, 1157 et 1212). <|> v1
47 Mot inconnu : SNMP [[4:8]] =>   * SNMP v2c (RFC 1901 à 1908). <|> snmp
47 Mot inconnu : v2c [[9:12]] =>   * SNMP v2c (RFC 1901 à 1908). <|> v2c
48 Mot inconnu : SNMP [[4:8]] =>   * SNMP v3 (RFC 3411 à 3418). <|> snmp
48 Mot inconnu : v3 [[9:11]] =>   * SNMP v3 (RFC 3411 à 3418). <|> v3

50 Mot inconnu : co-existence [[3:15]] => La co-existence des trois versions est détaillée dans la RFC 3584.  <|> co-existence
50 Espace(s) en fin de ligne à supprimer. [[66:67]] => La co-existence des trois versions est détaillée dans la RFC 3584.  <|>   => suggestions : ['']
110 Mot inconnu : MIBDIRS [[13:20]] =>   * **export MIBDIRS=** définit le répertoire où sont stocké les MIBs <|> mibdirs
110 Mot inconnu : MIBs [[65:69]] =>   * **export MIBDIRS=** définit le répertoire où sont stocké les MIBs <|> mibs
112 Mot inconnu : SNMPDRUN [[6:14]] =>   * **SNMPDRUN=** active ou désactive le service SNMP <|> snmpdrun
112 Mot inconnu : SNMP [[49:53]] =>   * **SNMPDRUN=** active ou désactive le service SNMP <|> snmp
114 Mot inconnu : SNMPDOPTS [[6:15]] =>   * **SNMPDOPTS=** options de démarrage du daemon SNMPD <|> snmpdopts
114 Mot inconnu : daemon [[43:49]] =>   * **SNMPDOPTS=** options de démarrage du daemon SNMPD <|> daemon
114 Mot inconnu : SNMPD [[50:55]] =>   * **SNMPDOPTS=** options de démarrage du daemon SNMPD <|> snmpd
116 Mot inconnu : TRAPDRUN [[6:14]] =>   * **TRAPDRUN=** active ou désactive le service de capture des traps SNMP <|> trapdrun
116 Mot inconnu : traps [[64:69]] =>   * **TRAPDRUN=** active ou désactive le service de capture des traps SNMP <|> traps
116 Mot inconnu : SNMP [[70:74]] =>   * **TRAPDRUN=** active ou désactive le service de capture des traps SNMP <|> snmp
118 Mot inconnu : TRAPDOPTS [[6:15]] =>   * **TRAPDOPTS=** options de démarrage de daemon SNMPTRAPD <|> trapdopts
118 Mot inconnu : daemon [[43:49]] =>   * **TRAPDOPTS=** options de démarrage de daemon SNMPTRAPD <|> daemon
118 Mot inconnu : SNMPTRAPD [[50:59]] =>   * **TRAPDOPTS=** options de démarrage de daemon SNMPTRAPD <|> snmptrapd

120 Mot inconnu : SNMP [[50:54]] => Valider les changements, et redémarrer le service SNMP <|> snmp

125 Mot inconnu : MIBs [[17:21]] => ==== Gestion des MIBs avec tkmib ==== <|> mibs
125 Mot inconnu : tkmib [[27:32]] => ==== Gestion des MIBs avec tkmib ==== <|> tkmib

131 Mot inconnu : MIB [[46:49]] => L'étape suivante consiste à vous procurer les MIB concernant votre matériel (en général, sur le site web du constructeur) et à les copier dans le répertoire « /usr/share/snmp/mibs/ », répertoire par défaut sous Debian/Ubuntu. <|> mib

141 Mot inconnu : Net-SNMP [[16:24]] => La bibliothèque Net-SNMP supporte une liste finie bien qu'extensible de MIB, définie lors de la compilation. <|> net-snmp
141 Mot inconnu : MIB [[72:75]] => La bibliothèque Net-SNMP supporte une liste finie bien qu'extensible de MIB, définie lors de la compilation. <|> mib

150 Mot inconnu : MIBs [[17:21]] => ==== Gestion des MIBs avec SNMPb ==== <|> mibs
150 Mot inconnu : SNMPb [[27:32]] => ==== Gestion des MIBs avec SNMPb ==== <|> snmpb

155 Mot inconnu : SNMP [[32:36]] => Pour une utilisation de base du SNMP, vous avez besoin de 2 commandes principales :  <|> snmp
155 Espace(s) en fin de ligne à supprimer. [[83:84]] => Pour une utilisation de base du SNMP, vous avez besoin de 2 commandes principales :  <|>   => suggestions : ['']

161 Mot inconnu : snmpwalk [[5:13]] => ==== snmpwalk ==== <|> snmpwalk
172 Espace(s) en fin de ligne à supprimer. [[70:71]] => Une telle commande retourne quelque chose de similaire à ce qui suit :  <|>   => suggestions : ['']

195 Mot inconnu : MIB [[125:128]] => Cette liste peut être très longue et dépend du périphérique supervisé. Vous constatez que les informations sont classées par MIB suivi du OID.  <|> mib
195 Mot inconnu : OID [[138:141]] => Cette liste peut être très longue et dépend du périphérique supervisé. Vous constatez que les informations sont classées par MIB suivi du OID.  <|> oid
195 Espace(s) en fin de ligne à supprimer. [[142:143]] => Cette liste peut être très longue et dépend du périphérique supervisé. Vous constatez que les informations sont classées par MIB suivi du OID.  <|>   => suggestions : ['']

203 Mot inconnu : switch [[49:55]] => Nous fournira l'état de toutes les interfaces du switch. <|> switch

205 Mot inconnu : snmpget [[5:12]] => ==== snmpget ==== <|> snmpget

220 Écriture invariable. Utilisez un point médian. [[6:13]] => ===== Note(s) ===== <|> note(s) => suggestions : ['Note·s']

222 Mot inconnu : traps [[17:22]] => La gestion des //traps// se fait avec le serveur SNMP et fera l'objet d'un autre article. <|> traps
222 Mot inconnu : SNMP [[49:53]] => La gestion des //traps// se fait avec le serveur SNMP et fera l'objet d'un autre article. <|> snmp
228 Mot inconnu : BRISOT [[123:129]] => //Contributeurs : [[utilisateurs:ostaquet|ostaquet]], [[utilisateurs:sefran|Franc SERRES]], [[utilisateurs:Yannis.B|Yannis BRISOT]], [[utilisateurs:HacKurx|HacKurx]].// <|> brisot
