
12 Guillemets typographiques ouvrants. => J'ai appris à faire des extensions "en autodidacte" et mes conseils sont sans aucun doute perfectibles, je ne suis en aucun cas une autorité en la matière.</note> | " => suggestions : ['«\xa0', '“']
12 Guillemets typographiques fermants. => J'ai appris à faire des extensions "en autodidacte" et mes conseils sont sans aucun doute perfectibles, je ne suis en aucun cas une autorité en la matière.</note> | " => suggestions : ['\xa0»', '”']

19 Avec une unité de mesure, mettez un espace insécable. => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs. | 6 mois => suggestions : ['6\xa0mois']
19 Mot inconnu : xx => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs. | xx
19 Mot inconnu : xx => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs. | xx

26 Mot inconnu : javascript => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox). | javascript
26 Mot inconnu : Gjs => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox). | gjs
26 Mot inconnu : javascript => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox). | javascript

28 Mot inconnu : javascript => Vous le savez peut-être, javascript a la particularité d'autoriser le //monkeypatching//, c'est-à-dire qu'une fonction du code peut être réécrite à un autre endroit du code, dynamiquement. On peut donc modifier l'aspect et le comportement de la quasi-totalité des composants de l'interface GNOME Shell ! | javascript
28 Mot inconnu : monkeypatching => Vous le savez peut-être, javascript a la particularité d'autoriser le //monkeypatching//, c'est-à-dire qu'une fonction du code peut être réécrite à un autre endroit du code, dynamiquement. On peut donc modifier l'aspect et le comportement de la quasi-totalité des composants de l'interface GNOME Shell ! | monkeypatching

32 Guillemets typographiques ouvrants. => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives. | '' => suggestions : ['«\xa0', '“']
32 Mot inconnu : xx => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives. | xx
32 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives. |  . => suggestions : ['. ', '.']

34 Guillemets fermants. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter. |  '' => suggestions : ['\xa0»', '”']
34 Mot inconnu : js => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter. | js
34 Mot inconnu : ui => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter. | ui
34 Guillemets typographiques fermants. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter. | '' => suggestions : ['\xa0»', '”']
34 Il manque probablement un trait d’union. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter. | dossier là => suggestions : ['dossier-là']

36 Mot inconnu : Javascript => ==== Javascript ==== | javascript

38 Mot inconnu : javascript => Ce tutoriel n'est pas un cours sur le javascript, il est conseillé de se familiariser préalablement avec ce langage, qui n'est heureusement pas le plus compliqué en ce monde. | javascript

45 Guillemets typographiques ouvrants. => On va ici "jouer" avec GNOME Shell lui-même. Il est très très probable qu'on le fasse crasher à un moment ou à un autre, et il va donc falloir sérieusement améliorer la résilience aux crashs de votre installation. | " => suggestions : ['«\xa0', '“']
45 Guillemets typographiques fermants. => On va ici "jouer" avec GNOME Shell lui-même. Il est très très probable qu'on le fasse crasher à un moment ou à un autre, et il va donc falloir sérieusement améliorer la résilience aux crashs de votre installation. | " => suggestions : ['\xa0»', '”']

52 Mot inconnu : Xorg => On va donc plutôt utiliser Xorg pour le développement. | xorg

57 Guillemets typographiques ouvrants. => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres. | " => suggestions : ['«\xa0', '“']
57 Mot inconnu : CSD => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres. | csd
57 Guillemets typographiques fermants. => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres. | " => suggestions : ['\xa0»', '”']

64 Mot inconnu : share => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes : | share
64 Mot inconnu : nautilus => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes : | nautilus
64 Guillemets typographiques fermants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes : | '' => suggestions : ['\xa0»', '”']
64 Guillemets typographiques ouvrants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes : | " => suggestions : ['«\xa0', '“']
64 Guillemets typographiques fermants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes : | " => suggestions : ['\xa0»', '”']

68 Il manque un espace à côté du tiret. => gnome-shell -r |  - => suggestions : [' – ', ' — ']

71 Guillemets typographiques ouvrants. => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau. | " => suggestions : ['«\xa0', '“']
71 Guillemets typographiques fermants. => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau. | " => suggestions : ['\xa0»', '”']
71 Mot inconnu : Nautilus => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau. | nautilus

76 Guillemets typographiques ouvrants. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | '' => suggestions : ['«\xa0', '“']
76 Typographie des composés chimiques. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | f2 => suggestions : ['F₂']
76 Mot inconnu : F2 => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | f2
76 Guillemets typographiques fermants. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | '' => suggestions : ['\xa0»', '”']
76 S’il s’agit d’une action que le sujet peut accomplir, le verbe devrait être à l’infinitif. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | accédez => suggestions : ['accéder']
76 Mot inconnu : tty2 => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | tty2
76 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu. | 1er => suggestions : ['1ᵉʳ']

80 Mot inconnu : débugguer => ==== Tester et débugguer ==== | débugguer

81 Mot inconnu : débuggage => <note help>J'admets ne pas être un grand expert en débuggage, il existe probablement mieux que ce que je suggère ici.</note> | débuggage

83 Guillemets typographiques ouvrants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | '' => suggestions : ['«\xa0', '“']
83 Typographie des composés chimiques. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | f2 => suggestions : ['F₂']
83 Mot inconnu : F2 => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | f2
83 Guillemets typographiques fermants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | '' => suggestions : ['\xa0»', '”']
83 Guillemets typographiques ouvrants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | " => suggestions : ['«\xa0', '“']
83 Guillemets typographiques fermants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell. | " => suggestions : ['\xa0»', '”']
85 Guillemets typographiques ouvrants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | '' => suggestions : ['«\xa0', '“']
85 Typographie des composés chimiques. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | f2 => suggestions : ['F₂']
85 Mot inconnu : F2 => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | f2
85 Guillemets typographiques fermants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | '' => suggestions : ['\xa0»', '”']
85 Guillemets typographiques ouvrants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | '' => suggestions : ['«\xa0', '“']
85 Mot inconnu : runDialog => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | rundialog
85 Mot inconnu : js => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | js
85 Guillemets typographiques fermants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note> | '' => suggestions : ['\xa0»', '”']

89 Guillemets typographiques ouvrants. => La commande spéciale ''r'' recharge GNOME Shell, cela peut prendre quelques instants. | '' => suggestions : ['«\xa0', '“']
89 Guillemets typographiques fermants. => La commande spéciale ''r'' recharge GNOME Shell, cela peut prendre quelques instants. | '' => suggestions : ['\xa0»', '”']

93 Mot inconnu : Looking => === Looking Glass === | looking

94 Guillemets typographiques ouvrants. => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard. | '' => suggestions : ['«\xa0', '“']
94 Mot inconnu : lg => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard. | lg
94 Guillemets typographiques fermants. => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard. | '' => suggestions : ['\xa0»', '”']
94 Mot inconnu : Looking => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard. | looking

96 Guillemets typographiques ouvrants. => === Voir les logs "en direct" === | " => suggestions : ['«\xa0', '“']
96 Guillemets typographiques fermants. => === Voir les logs "en direct" === | " => suggestions : ['\xa0»', '”']

101 Mot inconnu : Caffeine => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous). | caffeine
101 Mot inconnu : __tout => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous). | __tout
101 Mot inconnu : temps__ => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous). | temps__

105 Espace(s) en fin de ligne à supprimer. => Pour voir en direct les logs, et ainsi tester le fonctionnement de l'extension, entrez dans un terminal la commande  |   => suggestions : ['']

107 Guillemets typographiques ouvrants. => C'est beaucoup plus "violent" que de simplement recharger GNOME Shell, et donc plus long. Toutes les erreurs émises entre autres par les extensions, mais aussi les messages ou les avertissements relatifs à d'autres librairies, apparaissent maintenant dans le terminal. | " => suggestions : ['«\xa0', '“']
107 Guillemets typographiques fermants. => C'est beaucoup plus "violent" que de simplement recharger GNOME Shell, et donc plus long. Toutes les erreurs émises entre autres par les extensions, mais aussi les messages ou les avertissements relatifs à d'autres librairies, apparaissent maintenant dans le terminal. | " => suggestions : ['\xa0»', '”']

112 Guillemets typographiques ouvrants. => On peut créer une extension en partant de zéro ou en //forkant// une extension existante, mais pour commencer, nous allons utiliser la méthode "classique" en lançant la commande | " => suggestions : ['«\xa0', '“']
112 Guillemets typographiques fermants. => On peut créer une extension en partant de zéro ou en //forkant// une extension existante, mais pour commencer, nous allons utiliser la méthode "classique" en lançant la commande | " => suggestions : ['\xa0»', '”']

115 Guillemets typographiques ouvrants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | " => suggestions : ['«\xa0', '“']
115 Mot inconnu : uuid => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | uuid
115 Guillemets typographiques fermants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | " => suggestions : ['\xa0»', '”']
115 Guillemets typographiques ouvrants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | '' => suggestions : ['«\xa0', '“']
115 Guillemets typographiques fermants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | '' => suggestions : ['\xa0»', '”']
115 Mot inconnu : share => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | share
115 Mot inconnu : Nautilus => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). | nautilus
115 Pas d’espace avant ce signe. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ). |  ) => suggestions : [')']

117 Mot inconnu : World => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') : | world
117 Mot inconnu : share => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') : | share
117 Mot inconnu : votre-uuid => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') : | votre-uuid

119 Mot inconnu : metadata => ==== metadata.json ==== | metadata
119 Mot inconnu : json => ==== metadata.json ==== | json

123 Guillemets typographiques ouvrants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules. | " => suggestions : ['«\xa0', '“']
123 Guillemets typographiques fermants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules. | " => suggestions : ['\xa0»', '”']
123 Guillemets typographiques fermants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules. | '' => suggestions : ['\xa0»', '”']

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ; |    => suggestions : ['']
126 Guillemets typographiques ouvrants. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ; | '' => suggestions : ['«\xa0', '“']
126 Mot inconnu : uuid =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ; | uuid
126 Guillemets typographiques fermants. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ; | '' => suggestions : ['\xa0»', '”']

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. |    => suggestions : ['']
129 Guillemets typographiques ouvrants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. | '' => suggestions : ['«\xa0', '“']
129 Guillemets typographiques fermants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. | '' => suggestions : ['\xa0»', '”']
129 Mot inconnu : array =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. | array
129 Guillemets typographiques ouvrants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. | " => suggestions : ['«\xa0', '“']
129 Guillemets typographiques fermants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée. | " => suggestions : ['\xa0»', '”']

131 Mot inconnu : stylesheet => ==== stylesheet.css ==== | stylesheet
131 Mot inconnu : css => ==== stylesheet.css ==== | css

135 Mot inconnu : js => ==== extension.js ==== | js

141 Mot inconnu : const => const St = imports.gi.St; | const

143 Mot inconnu : Toolkit => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...). | toolkit
143 Une de ces ponctuations est superflue. => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...). | , . => suggestions : [',', '.']
143 Typographie : points de suspension. Utilisez le caractère dédié. => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...). | ... => suggestions : ['…']

145 Mot inconnu : javascript => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | javascript
145 Mot inconnu : ui => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | ui
145 Guillemets typographiques fermants. => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | '' => suggestions : ['\xa0»', '”']
145 Mot inconnu : js => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | js
145 Mot inconnu : tweener => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | tweener
145 Mot inconnu : js => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations). | js

147 Mot inconnu : const => const Main = imports.ui.main; | const

148 Mot inconnu : const => const Tweener = imports.ui.tweener; | const
148 Mot inconnu : Tweener => const Tweener = imports.ui.tweener; | tweener

151 Mot inconnu : text => let text, button; | text
151 Mot inconnu : button => let text, button; | button

153 Mot inconnu : function => function init() { | function
153 Mot inconnu : init => function init() { | init

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); |      => suggestions : ['']
154 Mot inconnu : button =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | button
154 Mot inconnu : Bin =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | bin
154 Il manque un espace avant la parenthèse. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | ( => suggestions : [' (']
154 Mot inconnu : style_class =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | style_class
154 Guillemets typographiques ouvrants. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | ' => suggestions : ['“', '‘', '‹']
154 Mot inconnu : panel-button =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | panel-button
154 Mot inconnu : reactive =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | reactive
154 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | true
154 Mot inconnu : can_focus =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | can_focus
154 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | true
154 Mot inconnu : x_fill =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | x_fill
154 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | true
154 Mot inconnu : y_fill =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | y_fill
154 Mot inconnu : false =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | false
154 Mot inconnu : track_hover =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | track_hover
154 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true }); | true

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); |      => suggestions : ['']
155 Mot inconnu : icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | icon
155 Mot inconnu : Icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | icon
155 Il manque un espace avant la parenthèse. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | ( => suggestions : [' (']
155 Mot inconnu : icon_name =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | icon_name
155 Guillemets typographiques ouvrants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | ' => suggestions : ['“', '‘', '‹']
155 Mot inconnu : system-run-symbolic =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | system-run-symbolic
155 Mot inconnu : style_class =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | style_class
155 Guillemets typographiques ouvrants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | ' => suggestions : ['“', '‘', '‹']
155 Mot inconnu : system-status-icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | system-status-icon
155 Guillemets typographiques fermants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' }); | ' => suggestions : ['”', '’', '›']

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button.set_child(icon); |      => suggestions : ['']
156 Mot inconnu : button =>     button.set_child(icon); | button
156 Mot inconnu : set_child =>     button.set_child(icon); | set_child
156 Il manque un espace avant la parenthèse. =>     button.set_child(icon); | ( => suggestions : [' (']
156 Mot inconnu : icon =>     button.set_child(icon); | icon

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button.connect('button-press-event', _showHello); |      => suggestions : ['']
157 Mot inconnu : button =>     button.connect('button-press-event', _showHello); | button
157 Mot inconnu : connect =>     button.connect('button-press-event', _showHello); | connect
157 Il manque un espace avant la parenthèse. =>     button.connect('button-press-event', _showHello); | ( => suggestions : [' (']
157 Mot inconnu : button-press-event =>     button.connect('button-press-event', _showHello); | button-press-event
157 Mot inconnu : _showHello =>     button.connect('button-press-event', _showHello); | _showhello

159 Mot inconnu : init => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | init
159 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['«\xa0', '“']
159 Mot inconnu : button => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | button
159 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['\xa0»', '”']
159 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['«\xa0', '“']
159 Mot inconnu : _showHello => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | _showhello
159 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['\xa0»', '”']
159 Mot inconnu : button-press-event => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | button-press-event
159 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['«\xa0', '“']
159 Mot inconnu : _showHello => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | _showhello
159 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface. | '' => suggestions : ['\xa0»', '”']

162 Mot inconnu : function => function enable() { | function
162 Mot inconnu : enable => function enable() { | enable

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.panel._rightBox.insert_child_at_index(button, 0); |      => suggestions : ['']
163 Il manque un espace. =>     Main.panel._rightBox.insert_child_at_index(button, 0); | panel => suggestions : [' panel']
163 Il manque un espace avant la parenthèse. =>     Main.panel._rightBox.insert_child_at_index(button, 0); | ( => suggestions : [' (']
163 Mot inconnu : button =>     Main.panel._rightBox.insert_child_at_index(button, 0); | button

166 Mot inconnu : function => function disable() { | function
166 Mot inconnu : disable => function disable() { | disable

167 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.panel._rightBox.remove_child(button); |      => suggestions : ['']
167 Il manque un espace. =>     Main.panel._rightBox.remove_child(button); | panel => suggestions : [' panel']
167 Il manque un espace avant la parenthèse. =>     Main.panel._rightBox.remove_child(button); | ( => suggestions : [' (']
167 Mot inconnu : button =>     Main.panel._rightBox.remove_child(button); | button

170 Guillemets typographiques ouvrants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | '' => suggestions : ['«\xa0', '“']
170 Mot inconnu : enable => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | enable
170 Guillemets typographiques fermants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | '' => suggestions : ['\xa0»', '”']
170 Guillemets typographiques ouvrants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | '' => suggestions : ['«\xa0', '“']
170 Mot inconnu : disable => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | disable
170 Guillemets typographiques fermants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension. | '' => suggestions : ['\xa0»', '”']

174 Mot inconnu : function => function _showHello() { | function
174 Mot inconnu : _showHello => function _showHello() { | _showhello

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if (!text) { |      => suggestions : ['']
175 Il manque un espace. =>     if (!text) { | text => suggestions : [' text']
175 Mot inconnu : text =>     if (!text) { | text

176 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); |          => suggestions : ['']
176 Mot inconnu : text =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | text
176 Il manque un espace. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | label => suggestions : [' Label']
176 Il manque un espace avant la parenthèse. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | ( => suggestions : [' (']
176 Mot inconnu : style_class =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | style_class
176 Guillemets typographiques ouvrants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | ' => suggestions : ['“', '‘', '‹']
176 Mot inconnu : helloworld-label =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | helloworld-label
176 Mot inconnu : text =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | text
176 Guillemets typographiques ouvrants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | " => suggestions : ['«\xa0', '“']
176 Mot inconnu : world =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | world
176 Guillemets typographiques fermants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" }); | " => suggestions : ['\xa0»', '”']

177 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         Main.uiGroup.add_actor(text); |          => suggestions : ['']
177 Il manque un espace avant la parenthèse. =>         Main.uiGroup.add_actor(text); | ( => suggestions : [' (']
177 Mot inconnu : text =>         Main.uiGroup.add_actor(text); | text

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     } |      => suggestions : ['']

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text.opacity = 255; |      => suggestions : ['']
179 Mot inconnu : text =>     text.opacity = 255; | text
179 Mot inconnu : opacity =>     text.opacity = 255; | opacity

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     let monitor = Main.layoutManager.primaryMonitor; |      => suggestions : ['']

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); |      => suggestions : ['']
181 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | text
181 Mot inconnu : set_position =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | set_position
181 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | ( => suggestions : [' (']
181 Mot inconnu : floor =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | floor
181 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | ( => suggestions : [' (']
181 Mot inconnu : width =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | width
181 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); |  -  => suggestions : [' – ', ' — ', ' − ']
181 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | text
181 Mot inconnu : width =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | width
181 Mot inconnu : floor =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | floor
181 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | ( => suggestions : [' (']
181 Mot inconnu : height =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | height
181 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); |  -  => suggestions : [' – ', ' — ', ' − ']
181 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | text
181 Mot inconnu : height =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2)); | height

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); |      => suggestions : ['']
182 Mot inconnu : Tweener =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | tweener
182 Mot inconnu : addTween =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | addtween
182 Il manque un espace avant la parenthèse. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | ( => suggestions : [' (']
182 Mot inconnu : text =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | text
182 Mot inconnu : opacity =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | opacity
182 Mot inconnu : time =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | time
182 Guillemets typographiques ouvrants. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | ' => suggestions : ['“', '‘', '‹']
182 Mot inconnu : easeOutQuad =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | easeoutquad
182 Mot inconnu : onComplete =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | oncomplete
182 Mot inconnu : _hideHello =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello }); | _hidehello
185 Mot inconnu : Clutter => Ici, on a plusieurs concepts intéressants : celui d'acteur, qui est lié à [[https://fr.wikipedia.org/wiki/Clutter|la bibliothèque Clutter]]. | clutter

187 Guillemets typographiques ouvrants. => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note> | " => suggestions : ['«\xa0', '“']
187 Guillemets typographiques fermants. => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note> | " => suggestions : ['\xa0»', '”']
187 Mot inconnu : Clutter => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note> | clutter

189 Mot inconnu : Clutter => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | clutter
189 Nombre ordinal. Second : 2ᵈ. Seconde : 2ᵈᵉ. Seconds : 2ᵈˢ. Secondes : 2ᵈᵉˢ. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | 2d => suggestions : ['2ᵈ']
189 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['«\xa0', '“']
189 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['\xa0»', '”']
189 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['«\xa0', '“']
189 Mot inconnu : ClutterActor => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | clutteractor
189 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['\xa0»', '”']
189 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['«\xa0', '“']
189 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['\xa0»', '”']
189 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['«\xa0', '“']
189 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails. | " => suggestions : ['\xa0»', '”']

191 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['«\xa0', '“']
191 Mot inconnu : text => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | text
191 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['\xa0»', '”']
191 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['«\xa0', '“']
191 Mot inconnu : helloworld-label => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | helloworld-label
191 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['\xa0»', '”']
191 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['«\xa0', '“']
191 Mot inconnu : stylesheet => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | stylesheet
191 Mot inconnu : css => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | css
191 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css'' | '' => suggestions : ['\xa0»', '”']

196 Mot inconnu : function => function _hideHello() { | function
196 Mot inconnu : _hideHello => function _hideHello() { | _hidehello

197 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.uiGroup.remove_actor(text); |      => suggestions : ['']
197 Il manque un espace avant la parenthèse. =>     Main.uiGroup.remove_actor(text); | ( => suggestions : [' (']
197 Mot inconnu : text =>     Main.uiGroup.remove_actor(text); | text

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = null; |      => suggestions : ['']
198 Mot inconnu : text =>     text = null; | text
198 Mot inconnu : null =>     text = null; | null

202 Guillemets typographiques ouvrants. => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile. | " => suggestions : ['«\xa0', '“']
202 Mot inconnu : World => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile. | world
202 Guillemets typographiques fermants. => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile. | " => suggestions : ['\xa0»', '”']

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator |    => suggestions : ['']
211 Mot inconnu : Clipboard =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator | clipboard
211 Mot inconnu : Indicator =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator | indicator

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie d'utiliser la recherche ni de parcourir la liste des applications ? -> des extensions proposant des menus avec les applications par catégories (Arc Menu, Gno-menu, etc.) |    => suggestions : ['']
212 Mot inconnu : Gno-menu =>   * Pas envie d'utiliser la recherche ni de parcourir la liste des applications ? -> des extensions proposant des menus avec les applications par catégories (Arc Menu, Gno-menu, etc.) | gno-menu

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension |    => suggestions : ['']
213 Mot inconnu : appfolders =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension | appfolders
213 Mot inconnu : Appfolders =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension | appfolders

217 Guillemets typographiques ouvrants. => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale). | " => suggestions : ['«\xa0', '“']
217 Guillemets typographiques fermants. => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale). | " => suggestions : ['\xa0»', '”']
217 Mot inconnu : Quan => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale). | quan
217 Mot inconnu : Zhi => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale). | zhi
217 Mot inconnu : Gao => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale). | gao
219 Guillemets typographiques ouvrants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | '' => suggestions : ['«\xa0', '“']
219 Mot inconnu : osdWindow => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | osdwindow
219 Mot inconnu : js => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | js
219 Guillemets typographiques fermants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | '' => suggestions : ['\xa0»', '”']
219 Guillemets typographiques ouvrants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | " => suggestions : ['«\xa0', '“']
219 Guillemets typographiques fermants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées. | " => suggestions : ['\xa0»', '”']

221 Guillemets typographiques ouvrants. => Notre identifiant unique pour cet exemple sera ''move-osd-windows@maestrochan.fr'' | '' => suggestions : ['«\xa0', '“']
221 Mot inconnu : move-osd-windows => Notre identifiant unique pour cet exemple sera ''move-osd-windows@maestrochan.fr'' | move-osd-windows

222 S’il s’agit d’une action à accomplir, le verbe devrait être à l’infinitif. => <note tip>Le code final complet est installable sur le [[https://extensions.gnome.org/extension/1220/move-osd-windows/|site officiel]] des extensions GNOME Shell si vous désirez disposez des vrais fichiers complets.</note> | disposez => suggestions : ['disposer']

224 Mot inconnu : metadata => Voici son fichier metadata.json : | metadata
224 Mot inconnu : json => Voici son fichier metadata.json : | json

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "_generated": "Generated by SweetTooth, do not edit",  |    => suggestions : ['']
227 Guillemets typographiques ouvrants. =>   "_generated": "Generated by SweetTooth, do not edit",  | " => suggestions : ['«\xa0', '“']
227 Mot inconnu : _generated =>   "_generated": "Generated by SweetTooth, do not edit",  | _generated
227 Guillemets typographiques fermants. =>   "_generated": "Generated by SweetTooth, do not edit",  | " => suggestions : ['\xa0»', '”']
227 Guillemets typographiques ouvrants. =>   "_generated": "Generated by SweetTooth, do not edit",  | " => suggestions : ['«\xa0', '“']
227 Mot inconnu : Generated =>   "_generated": "Generated by SweetTooth, do not edit",  | generated
227 Mot inconnu : by =>   "_generated": "Generated by SweetTooth, do not edit",  | by
227 Mot inconnu : SweetTooth =>   "_generated": "Generated by SweetTooth, do not edit",  | sweettooth
227 Mot inconnu : not =>   "_generated": "Generated by SweetTooth, do not edit",  | not
227 Mot inconnu : edit =>   "_generated": "Generated by SweetTooth, do not edit",  | edit
227 Guillemets typographiques fermants. =>   "_generated": "Generated by SweetTooth, do not edit",  | " => suggestions : ['\xa0»', '”']
227 Espace(s) en fin de ligne à supprimer. =>   "_generated": "Generated by SweetTooth, do not edit",  |   => suggestions : ['']

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  |    => suggestions : ['']
228 Guillemets typographiques ouvrants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | " => suggestions : ['«\xa0', '“']
228 Mot inconnu : the =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | the
228 Mot inconnu : of =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | of
228 Mot inconnu : OSD =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | osd
228 Mot inconnu : sound =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | sound
228 Mot inconnu : luminosity =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | luminosity
228 Guillemets typographiques fermants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  | " => suggestions : ['\xa0»', '”']
228 Espace(s) en fin de ligne à supprimer. =>   "description": "Change the position of OSD windows (sound & luminosity popups).",  |   => suggestions : ['']

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "gettext-domain": "move-osd-windows",  |    => suggestions : ['']
229 Guillemets typographiques ouvrants. =>   "gettext-domain": "move-osd-windows",  | " => suggestions : ['«\xa0', '“']
229 Mot inconnu : gettext-domain =>   "gettext-domain": "move-osd-windows",  | gettext-domain
229 Guillemets typographiques fermants. =>   "gettext-domain": "move-osd-windows",  | " => suggestions : ['\xa0»', '”']
229 Guillemets typographiques ouvrants. =>   "gettext-domain": "move-osd-windows",  | " => suggestions : ['«\xa0', '“']
229 Mot inconnu : move-osd-windows =>   "gettext-domain": "move-osd-windows",  | move-osd-windows
229 Guillemets typographiques fermants. =>   "gettext-domain": "move-osd-windows",  | " => suggestions : ['\xa0»', '”']
229 Espace(s) en fin de ligne à supprimer. =>   "gettext-domain": "move-osd-windows",  |   => suggestions : ['']

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "name": "Move OSD Windows",  |    => suggestions : ['']
230 Guillemets typographiques ouvrants. =>   "name": "Move OSD Windows",  | " => suggestions : ['«\xa0', '“']
230 Mot inconnu : name =>   "name": "Move OSD Windows",  | name
230 Guillemets typographiques fermants. =>   "name": "Move OSD Windows",  | " => suggestions : ['\xa0»', '”']
230 Guillemets typographiques ouvrants. =>   "name": "Move OSD Windows",  | " => suggestions : ['«\xa0', '“']
230 Mot inconnu : Move =>   "name": "Move OSD Windows",  | move
230 Mot inconnu : OSD =>   "name": "Move OSD Windows",  | osd
230 Guillemets typographiques fermants. =>   "name": "Move OSD Windows",  | " => suggestions : ['\xa0»', '”']
230 Espace(s) en fin de ligne à supprimer. =>   "name": "Move OSD Windows",  |   => suggestions : ['']

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "shell-version": [ |    => suggestions : ['']
231 Guillemets typographiques ouvrants. =>   "shell-version": [ | " => suggestions : ['«\xa0', '“']
231 Guillemets typographiques fermants. =>   "shell-version": [ | " => suggestions : ['\xa0»', '”']

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.18",  |      => suggestions : ['']
232 Guillemets typographiques ouvrants. =>     "3.18",  | " => suggestions : ['«\xa0', '“']
232 Guillemets typographiques fermants. =>     "3.18",  | " => suggestions : ['\xa0»', '”']
232 Espace(s) en fin de ligne à supprimer. =>     "3.18",  |   => suggestions : ['']

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.20", |      => suggestions : ['']
233 Guillemets typographiques ouvrants. =>     "3.20", | " => suggestions : ['«\xa0', '“']
233 Guillemets typographiques fermants. =>     "3.20", | " => suggestions : ['\xa0»', '”']

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.22",  |      => suggestions : ['']
234 Guillemets typographiques ouvrants. =>     "3.22",  | " => suggestions : ['«\xa0', '“']
234 Guillemets typographiques fermants. =>     "3.22",  | " => suggestions : ['\xa0»', '”']
234 Espace(s) en fin de ligne à supprimer. =>     "3.22",  |   => suggestions : ['']

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.24", |      => suggestions : ['']
235 Guillemets typographiques ouvrants. =>     "3.24", | " => suggestions : ['«\xa0', '“']
235 Guillemets typographiques fermants. =>     "3.24", | " => suggestions : ['\xa0»', '”']

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.26" |      => suggestions : ['']
236 Guillemets typographiques ouvrants. =>     "3.26" | " => suggestions : ['«\xa0', '“']
236 Guillemets typographiques fermants. =>     "3.26" | " => suggestions : ['\xa0»', '”']

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ],  |    => suggestions : ['']
237 Pas d’espace avant ce signe. =>   ],  |  ] => suggestions : [']']
237 Espace(s) en fin de ligne à supprimer. =>   ],  |   => suggestions : ['']

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  |    => suggestions : ['']
238 Guillemets typographiques ouvrants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  | " => suggestions : ['«\xa0', '“']
238 Mot inconnu : url =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  | url
238 Guillemets typographiques fermants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  | " => suggestions : ['\xa0»', '”']
238 Guillemets typographiques ouvrants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  | " => suggestions : ['«\xa0', '“']
238 Espace(s) en fin de ligne à supprimer. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension",  |   => suggestions : ['']

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "uuid": "move-osd-windows@maestroschan.fr",  |    => suggestions : ['']
239 Guillemets typographiques ouvrants. =>   "uuid": "move-osd-windows@maestroschan.fr",  | " => suggestions : ['«\xa0', '“']
239 Mot inconnu : uuid =>   "uuid": "move-osd-windows@maestroschan.fr",  | uuid
239 Guillemets typographiques fermants. =>   "uuid": "move-osd-windows@maestroschan.fr",  | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. =>   "uuid": "move-osd-windows@maestroschan.fr",  | " => suggestions : ['«\xa0', '“']
239 Mot inconnu : move-osd-windows =>   "uuid": "move-osd-windows@maestroschan.fr",  | move-osd-windows
239 Espace(s) en fin de ligne à supprimer. =>   "uuid": "move-osd-windows@maestroschan.fr",  |   => suggestions : ['']

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "version": 1 |    => suggestions : ['']
240 Guillemets typographiques ouvrants. =>   "version": 1 | " => suggestions : ['«\xa0', '“']
240 Guillemets typographiques fermants. =>   "version": 1 | " => suggestions : ['\xa0»', '”']

248 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Commençons avec une 1ère ébauche du code d'extension.js \\ | 1ère => suggestions : ['1ʳᵉ']
248 Mot inconnu : js => Commençons avec une 1ère ébauche du code d'extension.js \\ | js

251 Mot inconnu : const => const Main = imports.ui.main; | const

252 Mot inconnu : const => const OsdWindow = imports.ui.osdWindow; | const
252 Mot inconnu : OsdWindow => const OsdWindow = imports.ui.osdWindow; | osdwindow
254 Guillemets typographiques ouvrants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | '' => suggestions : ['«\xa0', '“']
254 Mot inconnu : osdWindow => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | osdwindow
254 Mot inconnu : js => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | js
254 Guillemets typographiques fermants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | '' => suggestions : ['\xa0»', '”']
254 Guillemets typographiques ouvrants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | '' => suggestions : ['«\xa0', '“']
254 Mot inconnu : js => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | js
254 Guillemets typographiques fermants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés. | '' => suggestions : ['\xa0»', '”']

256 Mot inconnu : function => function init() { } | function
256 Mot inconnu : init => function init() { } | init

258 Guillemets typographiques ouvrants. => La fonction d'initialisation est vide, on fera tout dans le "enable". | " => suggestions : ['«\xa0', '“']
258 Mot inconnu : enable => La fonction d'initialisation est vide, on fera tout dans le "enable". | enable
258 Guillemets typographiques fermants. => La fonction d'initialisation est vide, on fera tout dans le "enable". | " => suggestions : ['\xa0»', '”']

260 Mot inconnu : array => Avant tout, on va définir un //array// vide et deux fonctions : | array

264 Mot inconnu : function => function injectToFunction(parent, name, func) { | function
264 Mot inconnu : injectToFunction => function injectToFunction(parent, name, func) { | injecttofunction
264 Il manque un espace avant la parenthèse. => function injectToFunction(parent, name, func) { | ( => suggestions : [' (']
264 Mot inconnu : name => function injectToFunction(parent, name, func) { | name
264 Mot inconnu : func => function injectToFunction(parent, name, func) { | func

265 Mot inconnu : origin => 	let origin = parent[name]; | origin
265 Mot inconnu : name => 	let origin = parent[name]; | name

266 Mot inconnu : name => 	parent[name] = function() { | name
266 Mot inconnu : function => 	parent[name] = function() { | function

267 Mot inconnu : ret => 		let ret; | ret

268 Mot inconnu : ret => 		ret = origin.apply(this, arguments); | ret
268 Mot inconnu : origin => 		ret = origin.apply(this, arguments); | origin
268 Mot inconnu : apply => 		ret = origin.apply(this, arguments); | apply
268 Il manque un espace avant la parenthèse. => 		ret = origin.apply(this, arguments); | ( => suggestions : [' (']
268 Mot inconnu : this => 		ret = origin.apply(this, arguments); | this

269 Mot inconnu : ret => 			if (ret === undefined) | ret
269 Mot inconnu : undefined => 			if (ret === undefined) | undefined

270 Mot inconnu : ret => 				ret = func.apply(this, arguments); | ret
270 Mot inconnu : func => 				ret = func.apply(this, arguments); | func
270 Mot inconnu : apply => 				ret = func.apply(this, arguments); | apply
270 Il manque un espace avant la parenthèse. => 				ret = func.apply(this, arguments); | ( => suggestions : [' (']
270 Mot inconnu : this => 				ret = func.apply(this, arguments); | this

271 Mot inconnu : return => 			return ret; | return
271 Mot inconnu : ret => 			return ret; | ret

273 Mot inconnu : return => 	return origin; | return
273 Mot inconnu : origin => 	return origin; | origin

276 Mot inconnu : function => function removeInjection(object, injection, name) { | function
276 Mot inconnu : removeInjection => function removeInjection(object, injection, name) { | removeinjection
276 Il manque un espace avant la parenthèse. => function removeInjection(object, injection, name) { | ( => suggestions : [' (']
276 Mot inconnu : object => function removeInjection(object, injection, name) { | object
276 Mot inconnu : name => function removeInjection(object, injection, name) { | name

277 Mot inconnu : name => 	if (injection[name] === undefined) | name
277 Mot inconnu : undefined => 	if (injection[name] === undefined) | undefined

278 Mot inconnu : delete => 		delete object[name]; | delete
278 Mot inconnu : object => 		delete object[name]; | object
278 Mot inconnu : name => 		delete object[name]; | name

279 Mot inconnu : else => 	else | else

280 Mot inconnu : object => 		object[name] = injection[name]; | object
280 Mot inconnu : name => 		object[name] = injection[name]; | name
280 Mot inconnu : name => 		object[name] = injection[name]; | name

285 Guillemets typographiques ouvrants. => L'injection sera faite lors de l'exécution de la fonction ''enable'' : | '' => suggestions : ['«\xa0', '“']
285 Mot inconnu : enable => L'injection sera faite lors de l'exécution de la fonction ''enable'' : | enable
285 Guillemets typographiques fermants. => L'injection sera faite lors de l'exécution de la fonction ''enable'' : | '' => suggestions : ['\xa0»', '”']

287 Mot inconnu : function => function enable() { | function
287 Mot inconnu : enable => function enable() { | enable

288 Mot inconnu : injectToFunction => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){ | injecttofunction
288 Il manque un espace avant la parenthèse. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){ | ( => suggestions : [' (']
288 Guillemets typographiques ouvrants. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){ | ' => suggestions : ['“', '‘', '‹']
288 Espace(s) surnuméraire(s) à supprimer. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){ |    => suggestions : [' ']
288 Mot inconnu : function => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){ | function

289 Mot inconnu : this => 		let monitor = Main.layoutManager.monitors[this._monitorIndex]; | this
289 Mot inconnu : _monitorIndex => 		let monitor = Main.layoutManager.monitors[this._monitorIndex]; | _monitorindex

290 Mot inconnu : h_percent => 		let h_percent = 40; | h_percent

291 Mot inconnu : v_percent => 		let v_percent = -30; | v_percent
291 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 		let v_percent = -30; | -30 => suggestions : ['−30', '– 30', '— 30']

293 Mot inconnu : h_percent => 		this._box.translation_x = h_percent * monitor.width / 100; | h_percent
293 Mot inconnu : width => 		this._box.translation_x = h_percent * monitor.width / 100; | width

294 Mot inconnu : v_percent => 		this._box.translation_y = v_percent * monitor.height / 100; | v_percent
294 Mot inconnu : height => 		this._box.translation_y = v_percent * monitor.height / 100; | height
298 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['«\xa0', '“']
298 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | osdwindow
298 Mot inconnu : js => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | js
298 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['\xa0»', '”']
298 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['«\xa0', '“']
298 Mot inconnu : OsdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | osdwindow
298 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['\xa0»', '”']
298 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['«\xa0', '“']
298 Mot inconnu : OsdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | osdwindow
298 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['\xa0»', '”']
298 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['«\xa0', '“']
298 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['\xa0»', '”']
298 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | osdwindow
298 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['«\xa0', '“']
298 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | '' => suggestions : ['\xa0»', '”']
298 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow. | osdwindow

300 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['«\xa0', '“']
300 Mot inconnu : _relayout => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | _relayout
300 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['\xa0»', '”']
300 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['«\xa0', '“']
300 Mot inconnu : OsdWindow => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | osdwindow
300 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['\xa0»', '”']
300 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['«\xa0', '“']
300 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['\xa0»', '”']
300 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['«\xa0', '“']
300 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['\xa0»', '”']
300 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['«\xa0', '“']
300 Mot inconnu : this => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | this
300 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | '' => suggestions : ['\xa0»', '”']
300 Mot inconnu : osdWindow => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables. | osdwindow

302 Guillemets typographiques ouvrants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | '' => suggestions : ['«\xa0', '“']
302 Mot inconnu : h_percent => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | h_percent
302 Guillemets typographiques fermants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | '' => suggestions : ['\xa0»', '”']
302 Guillemets typographiques ouvrants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | '' => suggestions : ['«\xa0', '“']
302 Mot inconnu : v_percent => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | v_percent
302 Guillemets typographiques fermants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | '' => suggestions : ['\xa0»', '”']
302 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit. | -30 => suggestions : ['−30', '– 30', '— 30']

306 Mot inconnu : function => function disable() { | function
306 Mot inconnu : disable => function disable() { | disable

307 Mot inconnu : arrayOSD => 	let arrayOSD = Main.osdWindowManager._osdWindows; | arrayosd
308 Mot inconnu : arrayOSD => 	for (let i = 0; i < arrayOSD.length; i++) { | arrayosd
308 Mot inconnu : length => 	for (let i = 0; i < arrayOSD.length; i++) { | length

309 Mot inconnu : arrayOSD => 		arrayOSD[i]._relayout(); | arrayosd
309 Mot inconnu : _relayout => 		arrayOSD[i]._relayout(); | _relayout

310 Mot inconnu : arrayOSD => 		arrayOSD[i]._box.translation_x = 0; | arrayosd
310 Mot inconnu : _box => 		arrayOSD[i]._box.translation_x = 0; | _box
310 Mot inconnu : translation_x => 		arrayOSD[i]._box.translation_x = 0; | translation_x

313 Mot inconnu : removeInjection => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show'); | removeinjection
313 Il manque un espace avant la parenthèse. => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show'); | ( => suggestions : [' (']
313 Guillemets typographiques ouvrants. => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show'); | ' => suggestions : ['“', '‘', '‹']

316 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | " => suggestions : ['«\xa0', '“']
316 Mot inconnu : osd => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | osd
316 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | " => suggestions : ['\xa0»', '”']
316 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['«\xa0', '“']
316 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['\xa0»', '”']
316 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['«\xa0', '“']
316 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['\xa0»', '”']
316 Mot inconnu : _relayout => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | _relayout
316 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['«\xa0', '“']
316 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y''). | '' => suggestions : ['\xa0»', '”']

326 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Cette 1ère ébauche ne fait que déplacer le problème : l'utilisateur préférerait sans doute, quitte à s'encombrer d'une extension pour bouger la fenêtre, pouvoir choisir où il la bouge ! | 1ère => suggestions : ['1ʳᵉ']

332 Mot inconnu : convenience => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | convenience
332 Mot inconnu : js => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | js
332 Guillemets typographiques ouvrants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | " => suggestions : ['«\xa0', '“']
332 Guillemets typographiques fermants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | " => suggestions : ['\xa0»', '”']
332 Guillemets typographiques ouvrants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | " => suggestions : ['«\xa0', '“']
332 Guillemets typographiques fermants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation". | " => suggestions : ['\xa0»', '”']

336 Guillemets typographiques ouvrants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | '' => suggestions : ['«\xa0', '“']
336 Mot inconnu : schemas => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | schemas
336 Guillemets typographiques fermants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | '' => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | '' => suggestions : ['«\xa0', '“']
336 Il manque un espace. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | gnome => suggestions : [' gnome']
336 Guillemets typographiques fermants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension). | '' => suggestions : ['\xa0»', '”']
338 Mot inconnu : TODO => Ce fichier contient les lignes suivantes : TODO | todo

342 Guillemets typographiques ouvrants. => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande | '' => suggestions : ['«\xa0', '“']
342 Mot inconnu : schemas => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande | schemas
342 Guillemets typographiques fermants. => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande | '' => suggestions : ['\xa0»', '”']
347 Mot inconnu : FIXME => <note>Les types possibles pour les clés de paramètres sont : FIXME | fixme

348 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "s", une chaîne de caractères  |    => suggestions : ['']
348 Guillemets typographiques ouvrants. =>   * "s", une chaîne de caractères  | " => suggestions : ['«\xa0', '“']
348 Guillemets typographiques fermants. =>   * "s", une chaîne de caractères  | " => suggestions : ['\xa0»', '”']
348 Espace(s) en fin de ligne à supprimer. =>   * "s", une chaîne de caractères  |   => suggestions : ['']

349 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "as", un tableau de chaînes de caractères |    => suggestions : ['']
349 Guillemets typographiques ouvrants. =>   * "as", un tableau de chaînes de caractères | " => suggestions : ['«\xa0', '“']
349 Guillemets typographiques fermants. =>   * "as", un tableau de chaînes de caractères | " => suggestions : ['\xa0»', '”']

350 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "b", un booléen (true/false) |    => suggestions : ['']
350 Guillemets typographiques ouvrants. =>   * "b", un booléen (true/false) | " => suggestions : ['«\xa0', '“']
350 Guillemets typographiques fermants. =>   * "b", un booléen (true/false) | " => suggestions : ['\xa0»', '”']
350 Mot inconnu : true =>   * "b", un booléen (true/false) | true
350 Mot inconnu : false =>   * "b", un booléen (true/false) | false

351 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "i", un entier |    => suggestions : ['']
351 Guillemets typographiques ouvrants. =>   * "i", un entier | " => suggestions : ['«\xa0', '“']
351 Guillemets typographiques fermants. =>   * "i", un entier | " => suggestions : ['\xa0»', '”']

352 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "ai", un tableau d'entiers |    => suggestions : ['']
352 Guillemets typographiques ouvrants. =>   * "ai", un tableau d'entiers | " => suggestions : ['«\xa0', '“']
352 S’il s’agit d’un impératif, écrivez “aie”. =>   * "ai", un tableau d'entiers | ai => suggestions : ['aie']
352 Guillemets typographiques fermants. =>   * "ai", un tableau d'entiers | " => suggestions : ['\xa0»', '”']

353 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ... |    => suggestions : ['']
353 Typographie : points de suspension. Utilisez le caractère dédié. =>   * ... | ... => suggestions : ['…']

359 Guillemets typographiques ouvrants. => <note help>"Je suis nul en anglais, pourquoi ne pas avoir fait directement en français ?", direz-vous. Même si vous n'êtes pas polyglotte, je suggère quand même de faire l'extension en anglais puis de traduire en français, pour que des contributeurs débutants puissent ensuite traduire dans leur propre langue en prenant appui sur les fichiers adéquats proposés pour le français.</note> | " => suggestions : ['«\xa0', '“']
359 Guillemets typographiques fermants. => <note help>"Je suis nul en anglais, pourquoi ne pas avoir fait directement en français ?", direz-vous. Même si vous n'êtes pas polyglotte, je suggère quand même de faire l'extension en anglais puis de traduire en français, pour que des contributeurs débutants puissent ensuite traduire dans leur propre langue en prenant appui sur les fichiers adéquats proposés pour le français.</note> | " => suggestions : ['\xa0»', '”']

367 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Pour gérer facilement les langues et les clés dconf, on va modifier le code ainsi : |   => suggestions : ['']
367 Mot inconnu : dconf =>  Pour gérer facilement les langues et les clés dconf, on va modifier le code ainsi : | dconf

368 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * le ''_'' |    => suggestions : ['']
368 Guillemets typographiques ouvrants. =>   * le ''_'' | '' => suggestions : ['«\xa0', '“']
368 Guillemets typographiques fermants. =>   * le ''_'' | '' => suggestions : ['\xa0»', '”']

369 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * le get truc |    => suggestions : ['']
369 Mot inconnu : get =>   * le get truc | get

370 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * lien vers la version finale du code |    => suggestions : ['']

371 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * +gros warning sa race à ce stade parce que c'est risqué hein |    => suggestions : ['']

373 Mot inconnu : prefs => ==== prefs.js ==== | prefs
373 Mot inconnu : js => ==== prefs.js ==== | js

375 Mot inconnu : Javascript => Jusqu'à présent, notre code Javascript modifiait GNOME Shell, les erreurs ou avertissements apparaissaient dans la console si besoin, et il fallait tout recharger pour voir les modifications. | javascript
377 Guillemets typographiques ouvrants. => Ici, nous allons faire une fenêtre avec des éléments graphiques GTK+ 3, dont le code sera rechargé à chaque fois que vous cliquerez sur le petit "engrenage" en face du nom de l'extension dans l'Outil de personnalisation GNOME. Les seules erreurs qu'on verra sont celles qui bloqueront le chargement initial de la fenêtre, et on ne les verra pas dans la console, mais à la place du contenu de la fenêtre. | " => suggestions : ['«\xa0', '“']
377 Guillemets typographiques fermants. => Ici, nous allons faire une fenêtre avec des éléments graphiques GTK+ 3, dont le code sera rechargé à chaque fois que vous cliquerez sur le petit "engrenage" en face du nom de l'extension dans l'Outil de personnalisation GNOME. Les seules erreurs qu'on verra sont celles qui bloqueront le chargement initial de la fenêtre, et on ne les verra pas dans la console, mais à la place du contenu de la fenêtre. | " => suggestions : ['\xa0»', '”']

389 Il manque un espace avant la parenthèse. => N'hésitez pas à lire les codes d'autres extensions, pour les comprendre, s'en inspirer, voire copier ou adapter des petits bouts de code (citez leurs auteurs quand même hein) si la licence utilisée le permet((pas de souci normalement, les extensions de extensions.gnome.org sont toutes compatibles GPLv2)). \\ | ( => suggestions : [' (']
389 Mot inconnu : GPLv2 => N'hésitez pas à lire les codes d'autres extensions, pour les comprendre, s'en inspirer, voire copier ou adapter des petits bouts de code (citez leurs auteurs quand même hein) si la licence utilisée le permet((pas de souci normalement, les extensions de extensions.gnome.org sont toutes compatibles GPLv2)). \\ | gplv2

396 Il manque un trait d’union. => Parce que je préfère ne parler que de ce que je comprends, j'ai très peu abordé certains aspects du développement d'extensions pourtant très puissants. En voici quelques uns : | quelques uns => suggestions : ['quelques-uns']

397 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  TODO |   => suggestions : ['']
397 Mot inconnu : TODO =>  TODO | todo

398 Mot inconnu : Clutter => ==== Clutter ==== | clutter

399 Mot inconnu : Tweener => ==== Tweener ==== | tweener

400 Mot inconnu : DBus => ==== DBus ==== | dbus

401 Mot inconnu : Bash => ==== Bash ==== | bash
407 Mot inconnu : BitBucket => Il est conseillé de publier le code sur une plateforme comme [[https://github.com|GitHub]] ou BitBucket, afin que d'autres personnes puissent collaborer au code source. | bitbucket

409 Mot inconnu : GitHub => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation. | github
409 Guillemets typographiques ouvrants. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation. | " => suggestions : ['«\xa0', '“']
409 Accord de genre erroné entre “onglet” et “Issues”. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation. | issues => suggestions : ['Issu']
409 Guillemets typographiques fermants. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation. | " => suggestions : ['\xa0»', '”']
409 Mot inconnu : requests => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation. | requests

413 Mot inconnu : GitHub => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | github
413 Il faut élider “si” et l’accoler au pronom. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | si  => suggestions : ['s’']
413 Guillemets typographiques ouvrants. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | " => suggestions : ['«\xa0', '“']
413 Mot inconnu : Add => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | add
413 Mot inconnu : yours => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | yours
413 Guillemets typographiques fermants. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours". | " => suggestions : ['\xa0»', '”']

415 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['«\xa0', '“']
415 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['«\xa0', '“']
415 Mot inconnu : js => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | js
415 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['\xa0»', '”']
415 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['«\xa0', '“']
415 Mot inconnu : metadata => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | metadata
415 Mot inconnu : json => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | json
415 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['\xa0»', '”']
415 Accord de genre erroné : « icône » est féminin. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | un => suggestions : ['une']
415 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['«\xa0', '“']
415 Mot inconnu : metadata => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | metadata
415 Mot inconnu : json => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | json
415 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais. | '' => suggestions : ['\xa0»', '”']

417 Guillemets typographiques ouvrants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | '' => suggestions : ['«\xa0', '“']
417 Mot inconnu : metadata => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | metadata
417 Mot inconnu : json => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | json
417 Guillemets typographiques fermants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | '' => suggestions : ['\xa0»', '”']
417 Mot inconnu : ré-uploader => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | ré-uploader
417 Guillemets typographiques ouvrants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs. | '' => suggestions : ['«\xa0', '“']

420 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://wiki.gnome.org/Projects/GnomeShell/Extensions/StepByStepTutorial |    => suggestions : ['']

421 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/clutter/ |    => suggestions : ['']

422 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/st/stable/ |    => suggestions : ['']

423 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://wiki.gnome.org/Projects/GnomeShell/DebuggingJavaScript |    => suggestions : ['']

424 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * http://hosted.zeh.com.br/tweener/docs/en-us/ |    => suggestions : ['']

426 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/gnome-devel-demos/stable/beginner.js.html.fr |    => suggestions : ['']

427 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/gnome-devel-demos/stable/js.html.fr |    => suggestions : ['']
