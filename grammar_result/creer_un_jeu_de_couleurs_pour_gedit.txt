
5 Mot inconnu : Gedit => ====== Créer un jeu de couleurs pour Gedit ====== | gedit

6 Mot inconnu : Gedit => Cette page indique comment créer un jeu de couleurs pour Gedit. | gedit
8 Mot inconnu : iable => Lorsque vous écrivez un code source, vous avez plusieurs styles de texte : les variables, les types de fonction/variable... | iable
8 Typographie : points de suspension. Utilisez le caractère dédié. => Lorsque vous écrivez un code source, vous avez plusieurs styles de texte : les variables, les types de fonction/variable... | ... => suggestions : ['…']

9 Mot inconnu : Gedit => Gedit peut colorer ces styles de texte, pour le plus grand plaisir de nos yeux délicats. | gedit

10 Mot inconnu : xml => Un jeu de couleur prend la forme d'un fichier xml, attribuant des effets de texte à un style de texte déjà défini. | xml
12 Espace(s) en fin de ligne à supprimer. => Un programme existe, [[http://www.dabj01.co.cc/page4.php|badschemer]], pour créer des jeux de couleurs de façon plus confortable. Il est aussi possible d'y aller à la main pour faire quelque chose de plus personnalisé, et c'est ce que nous allons voir. ;-)  |   => suggestions : ['']
16 Espace(s) en fin de ligne à supprimer. => Voici un exemple de contenu d'un jeu de couleurs vide :  |   => suggestions : ['']

29 Mot inconnu : xml => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   | xml
29 Mot inconnu : xml => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   | xml
29 Mot inconnu : utf-8 => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   | utf-8
29 Espace(s) en fin de ligne à supprimer. => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   |    => suggestions : ['']

42 Mot inconnu : style-scheme => Toutes vos prochaines balises seront à placer entre </_description> et </style-scheme>. | style-scheme
46 Espace(s) en fin de ligne à supprimer. => Vous pouvez appliquer différents effets à du texte, notamment le colorer. Lorsque vous voulez afficher une couleur, vous pouvez seulement indiquer une valeur hexadécimale, par exemple :  |   => suggestions : ['']
53 Espace(s) en fin de ligne à supprimer. => Voici un exemple de couleurs que vous pouvez définir :  |   => suggestions : ['']

58 Espace(s) en fin de ligne à supprimer. => Ainsi vous définissez vos propres valeurs de gris, de blanc, et ainsi de suite. Si vous trouvez qu'une certaine valeur de jaune est mal appropriée par rapport aux autres couleurs, vous avez juste à la modifier :-)  |   => suggestions : ['']
62 Espace(s) en fin de ligne à supprimer. => Si vous en utilisez, votre fichier de style ressemblera alors à ça :  |   => suggestions : ['']
79 Espace(s) en fin de ligne à supprimer. => Certaines parties de votre code seront reconnues comme étant un style particulier. Comment ça peut se faire ? On ne le sait pas et on s'en moque : on veut juste formater ces bouts de texte. :-)   |    => suggestions : ['']
80 Espace(s) en fin de ligne à supprimer. => Un style se définit comme tel :  |   => suggestions : ['']

82 Mot inconnu : name => Dans name on met le nom du style, et pour les paramètres on met les divers effets de texte à appliquer au style. | name
87 Espace(s) en fin de ligne à supprimer. => Voici la liste des paramètres disponibles :  |   => suggestions : ['']
92 Mot inconnu : true => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. | true
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. | false
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. | false
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. | false
97 Formatage des grands nombres. => Ces trois derniers paramètres demandent une couleur. Vous pouvez indiquer une valeur hexadécimale du genre : #000000 , ou bien un nom donné à une couleur (voir ci-dessus la balise couleur). | 000000 => suggestions : ['000\xa0000', '00\xa00000']
97 Pas d’espace avant une virgule. => Ces trois derniers paramètres demandent une couleur. Vous pouvez indiquer une valeur hexadécimale du genre : #000000 , ou bien un nom donné à une couleur (voir ci-dessus la balise couleur). |  , => suggestions : [',']
99 Espace(s) en fin de ligne à supprimer. => Souvenez-vous de cette fameuse ligne :  |   => suggestions : ['']

101 Mot inconnu : name => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. | name
101 Écriture invariable. Utilisez un point médian. => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. | quel(s) => suggestions : ['quel·s']
101 Écriture invariable. Utilisez un point médian. => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. | paramètre(s) => suggestions : ['paramètre·s']

102 Mot inconnu : Gedit => Certaines options de Gedit ont besoin d'un style pour eux. La colonne affichant les numéros de ligne par exemple. Si vous ne l'avez pas activée, allez dans le menu Édition -> Préférences -> onglet Affichage. Cochez la case Afficher les numéros de ligne. Hop, une colonne apparait sur la gauche ! | gedit

104 Mot inconnu : Gedit => Si cette colonne, disponible de base sous Gedit, a des jolies couleurs, c'est parce qu'elle a un style de base. | gedit
106 Espace(s) en fin de ligne à supprimer. => Voici la liste des styles de base :  |   => suggestions : ['']
118 Mot inconnu : Gedit => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. | gedit
118 Mot inconnu : xml => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. | xml
118 Mot inconnu : Gedit => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. | gedit
120 Espace(s) en fin de ligne à supprimer. => Maintenant que vous savez ça, vous pouvez tester ces premiers styles de base pour vous mettre à l'aide avec tout ce que nous avons vu. Voici à quoi pourrait ressemble votre jeu de couleurs à ce stade :  |   => suggestions : ['']

148 Mot inconnu : Gedit => Bon, c'est bien beau mais Gedit est fait pour programmer. Il doit bien y avoir quelques styles secrets ! | gedit

151 Mot inconnu : Gedit => Gedit est un éditeur de texte avant tout destiné à programmer, de ce fait il peut formater du code, et ça passe aussi par les styles. | gedit

152 Guillemets typographiques ouvrants. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  | " => suggestions : ['«\xa0', '“']
152 Guillemets typographiques fermants. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  | " => suggestions : ['\xa0»', '”']
152 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  | -2 => suggestions : ['−2', '– 2', '— 2']
152 Pas d’espace avant une virgule. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  |  , => suggestions : [',']
152 Espace(s) en fin de ligne à supprimer. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  |   => suggestions : ['']

154 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. |  . => suggestions : ['. ', '.']
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | lang
154 Mot inconnu : def => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | def
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | lang
154 Mot inconnu : __le__ => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | __le__
154 Mot inconnu : def => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | def
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. | lang
156 Espace(s) en fin de ligne à supprimer. => Pour utiliser le style d'un langage, il faut indiquer son style et son fichier. Un style par défaut est défini comme ceci :  |   => suggestions : ['']

158 Mot inconnu : def => Parce que les styles par défaut sont dans le fichier def.lang ;-)  | def
158 Mot inconnu : lang => Parce que les styles par défaut sont dans le fichier def.lang ;-)  | lang
158 Espace(s) en fin de ligne à supprimer. => Parce que les styles par défaut sont dans le fichier def.lang ;-)  |   => suggestions : ['']

159 Mot inconnu : lang => Mais si vous voulez définir un style pour le C uniquement, il faut d'abord voir quels styles sont définis dans le fichier c.lang : ouvrez-le et cherchez les lignes du genre :  | lang
159 Espace(s) en fin de ligne à supprimer. => Mais si vous voulez définir un style pour le C uniquement, il faut d'abord voir quels styles sont définis dans le fichier c.lang : ouvrez-le et cherchez les lignes du genre :  |   => suggestions : ['']
165 Espace(s) en fin de ligne à supprimer. => Les noms des styles sont dans le paramètre id: si vous voulez formater le style comment (voir plus bas), il vous faudra l'appeler ainsi :  |   => suggestions : ['']

167 Mot inconnu : _name => Le paramètre _name indique un nom plus complet pour le style. | _name

168 Mot inconnu : map-to => Le paramètre map-to dit quel style appeler pour le formatage si aucun style n'a été précisé. Si vous ne précisez pas de style pour comment, on ira prendre le style comment par défaut. | map-to

169 Mot inconnu : Gedit => Autre information, l'organisation des styles pourrait changer lors du passage à la version 3 de Gedit. Ce qui n'est pas pour tout de suite ;-)  | gedit
169 Espace(s) en fin de ligne à supprimer. => Autre information, l'organisation des styles pourrait changer lors du passage à la version 3 de Gedit. Ce qui n'est pas pour tout de suite ;-)  |   => suggestions : ['']

172 Mot inconnu : def => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ | def
172 Pas d’espace avant une virgule. => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ |  , => suggestions : [',']
172 Copier-coller pour la verbe ou l’action, copié-collé (et ses variantes) pour ce qui est copié-collé. => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ | copier/coller => suggestions : ['copier-coller', 'copié-collé', 'copiée-collée', 'copiés-collés', 'copiées-collées']

173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang
173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | comment => suggestions : [' comment']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | shebang
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | comment => suggestions : [' comment']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | comment => suggestions : [' comment']
173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. | comment => suggestions : [' comment']
209 Espace(s) en fin de ligne à supprimer. => Petit rappel de comment définir un de ces styles :  |   => suggestions : ['']
212 Espace(s) en fin de ligne à supprimer. => Votre fichier doit être plein de belles lignes :  |   => suggestions : ['']
264 Espace(s) en fin de ligne à supprimer. => Ici vous avez juste à mettre tous les paramètres que vous voulez. Je n'ai pas mis tous les styles possibles, c'est à vous de voir ce que vous voulez de coloré ;-)  |   => suggestions : ['']

272 Écriture invariable. Utilisez un point médian. => Si vous cherchez des indications supplémentaires sur la coloration du texte ou si ce tuto vous semble flou, n'oubliez pas de contacter le(s) contributeur(s). | contributeur(s) => suggestions : ['contributeur·s']

280 Mot inconnu : introducion => == introducion == | introducion
282 Il manque un trait d’union si “même” se rapporte à “vous”. => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. | vous même => suggestions : ['vous-même']
282 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. |  . => suggestions : ['. ', '.']
282 Mot inconnu : lang => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. | lang
282 Mot inconnu : bbcode => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. | bbcode
282 Mot inconnu : bbcode => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. | bbcode

284 Mot inconnu : bbcode => Voilà un petit aperçu de bbcode | bbcode

295 Guillemets typographiques ouvrants. => J'ai décidé les "conventions" suivantes: | " => suggestions : ['«\xa0', '“']
295 Guillemets typographiques fermants. => J'ai décidé les "conventions" suivantes: | " => suggestions : ['\xa0»', '”']

297 Mot inconnu : quote => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). | quote
297 Mot inconnu : quote => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). | quote
297 Mot inconnu : url => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). | url
297 Mot inconnu : url => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). | url

299 Mot inconnu : quote => Quand on peut rajouter une valeur, comme dans [quote=doc ubuntu], la valeur doit être colorié. | quote
299 Accord erroné : “valeur” et “colorié” ne sont pas accordés. => Quand on peut rajouter une valeur, comme dans [quote=doc ubuntu], la valeur doit être colorié. | colorié => suggestions : ['coloriée']

301 Mot inconnu : bbcode => le bbcode n'a pas de caractère pour les commentaires, donc je choisi le # | bbcode
301 Conjugaison erronée. Accord avec “je”. Le verbe devrait être à la 1ʳᵉ personne du singulier. => le bbcode n'a pas de caractère pour les commentaires, donc je choisi le # | choisi => suggestions : ['choisissais', 'choisis']

303 Mot inconnu : bbcode => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ | bbcode
303 Mot inconnu : lang => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ | lang
303 Pas d’espace avant un point. => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ |  . => suggestions : ['.']
303 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ | -2 => suggestions : ['−2', '– 2', '— 2']

306 Mot inconnu : gedit => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. | gedit
306 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. |  . => suggestions : ['. ', '.']
306 Mot inconnu : bbc => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. | bbc
306 Mot inconnu : bbcode => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. | bbcode
306 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. |  . => suggestions : ['. ', '.']
306 Mot inconnu : bbc => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. | bbc
306 Mot inconnu : gedit => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. | gedit
