
5 Mot inconnu : Gedit => ====== Créer un jeu de couleurs pour Gedit ====== <|> gedit

6 Mot inconnu : Gedit => Cette page indique comment créer un jeu de couleurs pour Gedit. <|> gedit
8 Mot inconnu : iable => Lorsque vous écrivez un code source, vous avez plusieurs styles de texte : les variables, les types de fonction/variable... <|> iable
8 Typographie : points de suspension. Utilisez le caractère dédié. => Lorsque vous écrivez un code source, vous avez plusieurs styles de texte : les variables, les types de fonction/variable... <|> ... => suggestions : ['…']

9 Mot inconnu : Gedit => Gedit peut colorer ces styles de texte, pour le plus grand plaisir de nos yeux délicats. <|> gedit

10 Mot inconnu : xml => Un jeu de couleur prend la forme d'un fichier xml, attribuant des effets de texte à un style de texte déjà défini. <|> xml

29 Mot inconnu : xml => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   <|> xml
29 Mot inconnu : xml => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   <|> xml
29 Mot inconnu : utf-8 => Cette ligne est la première ligne de quasiment tous les fichiers en xml. Elle indique qu'on utilise la version 1.0 du xml avec un encodage de caractères en utf-8.   <|> utf-8
32 Mot inconnu : _name =>   * _name est le nom du jeu de couleurs que Gedit affichera dans l'onglet Police et Couleurs, dans les Préférences. <|> _name
32 Mot inconnu : Gedit =>   * _name est le nom du jeu de couleurs que Gedit affichera dans l'onglet Police et Couleurs, dans les Préférences. <|> gedit
33 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * version est la version des styles de texte que vous utilisez. Pour l'instant on n'a qu'une seule version, la 1.0, donc autant la laisser telle quelle. <|> version => suggestions : ['Version']

42 Mot inconnu : style-scheme => Toutes vos prochaines balises seront à placer entre </_description> et </style-scheme>. <|> style-scheme


82 Mot inconnu : name => Dans name on met le nom du style, et pour les paramètres on met les divers effets de texte à appliquer au style. <|> name
88 Mot inconnu : bold =>   *bold : afficher du texte en gras. <|> bold
89 Mot inconnu : italic =>   *italic : afficher du texte en italique. <|> italic
90 Mot inconnu : underline =>   *underline : afficher du texte en souligné. <|> underline
91 Mot inconnu : strikethrough =>   *strikethrough : barrer du texte. <|> strikethrough
92 Mot inconnu : true => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. <|> true
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. <|> false
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. <|> false
92 Mot inconnu : false => Pour ces quatre paramètres, il faut donner une valeur booléenne : true pour afficher cet effet, false dans le cas contraire. Par définition, ces paramètres sont réglés sur false. Cependant, il se peut que deux styles se chevauchent, et qu'un texte s'affiche en gras alors que vous le voulez sans l'effet de gras quoi qu'il arrive. Dans ce cas-là, annoncez explicitement le paramètre en false. <|> false
93 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   *use-style : utiliser un style déjà défini. Voir plus bas la liste de style définissables. <|> use-style => suggestions : ['Use-style']
94 Mot inconnu : foreground =>   *foreground : définir la couleur du texte du style. <|> foreground
96 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   *line-background : Si le texte du style que vous désignez occupe au moins le premier caractère d'une ligne, alors line-background colorera le fond de tout ce qui se trouve sur la ligne à droite du style en question. Dans ce cas, et si un autre style doit s'appliquer sur la ligne sur la droite, la propriété background prendra le dessus sur la line-background à cet endroit-là. Ce paramètre est difficile à bien placer, il peut être utilisé pour les commentaires par exemple ou pour le style bracket-match (voir plus bas). <|> line-background => suggestions : ['Line-background']
96 Mot inconnu : line-background =>   *line-background : Si le texte du style que vous désignez occupe au moins le premier caractère d'une ligne, alors line-background colorera le fond de tout ce qui se trouve sur la ligne à droite du style en question. Dans ce cas, et si un autre style doit s'appliquer sur la ligne sur la droite, la propriété background prendra le dessus sur la line-background à cet endroit-là. Ce paramètre est difficile à bien placer, il peut être utilisé pour les commentaires par exemple ou pour le style bracket-match (voir plus bas). <|> line-background
96 Mot inconnu : line-background =>   *line-background : Si le texte du style que vous désignez occupe au moins le premier caractère d'une ligne, alors line-background colorera le fond de tout ce qui se trouve sur la ligne à droite du style en question. Dans ce cas, et si un autre style doit s'appliquer sur la ligne sur la droite, la propriété background prendra le dessus sur la line-background à cet endroit-là. Ce paramètre est difficile à bien placer, il peut être utilisé pour les commentaires par exemple ou pour le style bracket-match (voir plus bas). <|> line-background
96 Mot inconnu : line-background =>   *line-background : Si le texte du style que vous désignez occupe au moins le premier caractère d'une ligne, alors line-background colorera le fond de tout ce qui se trouve sur la ligne à droite du style en question. Dans ce cas, et si un autre style doit s'appliquer sur la ligne sur la droite, la propriété background prendra le dessus sur la line-background à cet endroit-là. Ce paramètre est difficile à bien placer, il peut être utilisé pour les commentaires par exemple ou pour le style bracket-match (voir plus bas). <|> line-background
96 Mot inconnu : bracket-match =>   *line-background : Si le texte du style que vous désignez occupe au moins le premier caractère d'une ligne, alors line-background colorera le fond de tout ce qui se trouve sur la ligne à droite du style en question. Dans ce cas, et si un autre style doit s'appliquer sur la ligne sur la droite, la propriété background prendra le dessus sur la line-background à cet endroit-là. Ce paramètre est difficile à bien placer, il peut être utilisé pour les commentaires par exemple ou pour le style bracket-match (voir plus bas). <|> bracket-match
97 Formatage des grands nombres. => Ces trois derniers paramètres demandent une couleur. Vous pouvez indiquer une valeur hexadécimale du genre : #000000 , ou bien un nom donné à une couleur (voir ci-dessus la balise couleur). <|> 000000 => suggestions : ['000\xa0000', '00\xa00000']
97 Pas d’espace avant une virgule. => Ces trois derniers paramètres demandent une couleur. Vous pouvez indiquer une valeur hexadécimale du genre : #000000 , ou bien un nom donné à une couleur (voir ci-dessus la balise couleur). <|>  , => suggestions : [',']

101 Mot inconnu : name => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. <|> name
101 Écriture invariable. Utilisez un point médian. => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. <|> quel(s) => suggestions : ['quel·s']
101 Écriture invariable. Utilisez un point médian. => Un style est défini au paramètre name. On sait quel(s) paramètre(s) mettre, maintenant c'est au tour des styles. <|> paramètre(s) => suggestions : ['paramètre·s']

102 Mot inconnu : Gedit => Certaines options de Gedit ont besoin d'un style pour eux. La colonne affichant les numéros de ligne par exemple. Si vous ne l'avez pas activée, allez dans le menu Édition -> Préférences -> onglet Affichage. Cochez la case Afficher les numéros de ligne. Hop, une colonne apparait sur la gauche ! <|> gedit

104 Mot inconnu : Gedit => Si cette colonne, disponible de base sous Gedit, a des jolies couleurs, c'est parce qu'elle a un style de base. <|> gedit
107 Mot inconnu : text =>   * text : Pour le texte en général. <|> text
108 Mot inconnu : selection =>   * selection : Pour le texte sélectioné (surligné avec le curseur) <|> selection
108 Mot inconnu : sélectioné =>   * selection : Pour le texte sélectioné (surligné avec le curseur) <|> sélectioné
109 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> selection-unfocused => suggestions : ['Selection-unfocused']
109 Mot inconnu : selection-unfocused =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> selection-unfocused
109 Mot inconnu : Gedit =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> gedit
109 Mot inconnu : Gedit =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> gedit
109 Mot inconnu : Gedit =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> gedit
109 Mot inconnu : Gedit =>   * selection-unfocused : Imaginez que vous avez sélectionné un bout de texte sous Gedit. Tout à coup, vous voulez regarder vos mails, vous allez donc sur un autre programme que Gedit. Si vous regardez la fenêtre de Gedit (sans la sélectionner), grâce à ce style vous verrez votre sélection d'une autre couleur jusqu'à ce que vous reveniez sur Gedit. <|> gedit
110 Mot inconnu : current-line =>   * current-line : Gedit propose de mettre en valeur la ligne où se trouve le curseur (voir les Préférences). current-line définit les effets appliqués sur cette ligne. <|> current-line
110 Mot inconnu : Gedit =>   * current-line : Gedit propose de mettre en valeur la ligne où se trouve le curseur (voir les Préférences). current-line définit les effets appliqués sur cette ligne. <|> gedit
110 Mot inconnu : current-line =>   * current-line : Gedit propose de mettre en valeur la ligne où se trouve le curseur (voir les Préférences). current-line définit les effets appliqués sur cette ligne. <|> current-line
111 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> line-numbers => suggestions : ['Line-numbers']
111 Mot inconnu : line-numbers =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> line-numbers
111 Mot inconnu : Gedit =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> gedit
111 Mot inconnu : line-number =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> line-number
111 Mot inconnu : bold =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> bold
111 Mot inconnu : underline =>   * line-numbers : Gedit propose d'afficher une colonne indiquant les numéros de ligne comme expliqué juste au-dessus. line-number définit les effets appliqués à cette colonne. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> underline
112 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * cursor : Définit les propriétés du curseur. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> cursor => suggestions : ['Cursor']
112 Mot inconnu : cursor =>   * cursor : Définit les propriétés du curseur. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> cursor
112 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. =>   * cursor : Définit les propriétés du curseur. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> définit => suggestions : ['Définis']
112 Mot inconnu : bold =>   * cursor : Définit les propriétés du curseur. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> bold
112 Mot inconnu : underline =>   * cursor : Définit les propriétés du curseur. Les effets de texte tels bold ou underline ne fonctionnent pas. <|> underline
113 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> secondary-cursor => suggestions : ['Secondary-cursor']
113 Mot inconnu : secondary-cursor =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> secondary-cursor
113 Mot inconnu : préédition =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> préédition
113 Mot inconnu : secondary-cursor =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> secondary-cursor
113 Mot inconnu : cursor =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> cursor
113 Mot inconnu : bold =>   * secondary-cursor : Apparemment pour certaines langues, par exemple pendant qu'on écrit en chinois, une zone de préédition apparait en créant un deuxième curseur. Vous pouvez colorer ce second curseur avec le style secondary-cursor d'une couleur différente de cursor, les propriétés des deux styles étant les mêmes (donc bold ne fonctionne pas non plus). <|> bold
114 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * bracket-match : Gedit propose, lorsque vous avez un duo de parenthèse et que vous mettez votre curseur sur une des parenthèses, de mettre en valeur l'autre parenthèse. Regardez dans vos Préférences et faites le test : pour une parenthèse ouvrante choisie on peut voir la seconde différemment. <|> bracket-match => suggestions : ['Bracket-match']
114 Mot inconnu : bracket-match =>   * bracket-match : Gedit propose, lorsque vous avez un duo de parenthèse et que vous mettez votre curseur sur une des parenthèses, de mettre en valeur l'autre parenthèse. Regardez dans vos Préférences et faites le test : pour une parenthèse ouvrante choisie on peut voir la seconde différemment. <|> bracket-match
114 Mot inconnu : Gedit =>   * bracket-match : Gedit propose, lorsque vous avez un duo de parenthèse et que vous mettez votre curseur sur une des parenthèses, de mettre en valeur l'autre parenthèse. Regardez dans vos Préférences et faites le test : pour une parenthèse ouvrante choisie on peut voir la seconde différemment. <|> gedit
115 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * bracket-mismatch : Cette fonctionnalité n'a pas encore été implanté dans Gedit. Le principe étant de montrer les erreurs de parenthésage, par exemple (] où le crochet prend la place d'une parenthèse fermée. <|> bracket-mismatch => suggestions : ['Bracket-mismatch']
115 Mot inconnu : bracket-mismatch =>   * bracket-mismatch : Cette fonctionnalité n'a pas encore été implanté dans Gedit. Le principe étant de montrer les erreurs de parenthésage, par exemple (] où le crochet prend la place d'une parenthèse fermée. <|> bracket-mismatch
115 Accord erroné : “fonctionnalité” et “implanté” ne sont pas accordés. =>   * bracket-mismatch : Cette fonctionnalité n'a pas encore été implanté dans Gedit. Le principe étant de montrer les erreurs de parenthésage, par exemple (] où le crochet prend la place d'une parenthèse fermée. <|> implanté => suggestions : ['implantée']
115 Mot inconnu : Gedit =>   * bracket-mismatch : Cette fonctionnalité n'a pas encore été implanté dans Gedit. Le principe étant de montrer les erreurs de parenthésage, par exemple (] où le crochet prend la place d'une parenthèse fermée. <|> gedit
116 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * search-match : Lors d'une recherche, plusieurs termes sont colorées : un qui est sélectionné, les autres qui ne le sont pas. search-match vous permet d'appliquer des effets sur ces termes. <|> search-match => suggestions : ['Search-match']
116 Mot inconnu : search-match =>   * search-match : Lors d'une recherche, plusieurs termes sont colorées : un qui est sélectionné, les autres qui ne le sont pas. search-match vous permet d'appliquer des effets sur ces termes. <|> search-match
116 Accord erroné : “termes” et “colorées” ne sont pas accordés. Mettez au masculin pluriel. =>   * search-match : Lors d'une recherche, plusieurs termes sont colorées : un qui est sélectionné, les autres qui ne le sont pas. search-match vous permet d'appliquer des effets sur ces termes. <|> colorées => suggestions : ['colorés']
116 Mot inconnu : search-match =>   * search-match : Lors d'une recherche, plusieurs termes sont colorées : un qui est sélectionné, les autres qui ne le sont pas. search-match vous permet d'appliquer des effets sur ces termes. <|> search-match
118 Mot inconnu : Gedit => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. <|> gedit
118 Mot inconnu : xml => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. <|> xml
118 Mot inconnu : Gedit => Détail important : pour tester votre jeu de couleurs, il faut le (ré)importer dans Gedit. Allez dans Édition -> Préférences -> onglet Police et Couleurs, et faites Ajouter en choisissant votre petit fichier xml. Si le jeu de couleurs était déjà en marche dans Gedit, choisissez un autre style et revenez au style que vous élaborez. <|> gedit

148 Mot inconnu : Gedit => Bon, c'est bien beau mais Gedit est fait pour programmer. Il doit bien y avoir quelques styles secrets ! <|> gedit

151 Mot inconnu : Gedit => Gedit est un éditeur de texte avant tout destiné à programmer, de ce fait il peut formater du code, et ça passe aussi par les styles. <|> gedit

152 Guillemets typographiques ouvrants. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  <|> " => suggestions : ['«\xa0', '“']
152 Guillemets typographiques fermants. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  <|> " => suggestions : ['\xa0»', '”']
152 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  <|> -2 => suggestions : ['−2', '– 2', '— 2']
152 Pas d’espace avant une virgule. => Les styles que vous allez utiliser ont été créés, nommés, détaillés dans des fichiers bien spéciaux appelés "définitions de langage". Ces fichiers sont localisés normalement dans le dossier : /usr/share/gtksourceview-2.0/language-specs/ , sinon entrez :  <|>  , => suggestions : [',']

154 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|>  . => suggestions : ['. ', '.']
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> lang
154 Mot inconnu : def => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> def
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> lang
154 Mot inconnu : __le__ => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> __le__
154 Mot inconnu : def => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> def
154 Mot inconnu : lang => Ce dossier contient des définitions de langage pour de nombreux langages, vous devez sûrement voir dans le dossier de nombreux fichiers .lang. Tous ces langages font appel à des styles qui ont été définis dans le fichier def.lang de ce dossier, ce qui en fait __le__ fichier le plus important d'entre tous les autres. Ensuite, chaque langage définit ses propres styles en indiquant à quelle partie du texte appliquer quel style de def.lang. <|> lang

158 Mot inconnu : def => Parce que les styles par défaut sont dans le fichier def.lang ;-)  <|> def
158 Mot inconnu : lang => Parce que les styles par défaut sont dans le fichier def.lang ;-)  <|> lang

159 Mot inconnu : lang => Mais si vous voulez définir un style pour le C uniquement, il faut d'abord voir quels styles sont définis dans le fichier c.lang : ouvrez-le et cherchez les lignes du genre :  <|> lang

167 Mot inconnu : _name => Le paramètre _name indique un nom plus complet pour le style. <|> _name

168 Mot inconnu : map-to => Le paramètre map-to dit quel style appeler pour le formatage si aucun style n'a été précisé. Si vous ne précisez pas de style pour comment, on ira prendre le style comment par défaut. <|> map-to

169 Mot inconnu : Gedit => Autre information, l'organisation des styles pourrait changer lors du passage à la version 3 de Gedit. Ce qui n'est pas pour tout de suite ;-)  <|> gedit

172 Mot inconnu : def => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ <|> def
172 Pas d’espace avant une virgule. => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ <|>  , => suggestions : [',']
172 Copier-coller pour la verbe ou l’action, copié-collé (et ses variantes) pour ce qui est copié-collé. => Vous trouverez ci-dessous tous les noms des styles, tous précédés du préfixe def: , comme ça ceux qui lisent la doc un peu vite peuvent tout de suite copier/coller les noms des styles ^_^ <|> copier/coller => suggestions : ['copier-coller', 'copié-collé', 'copiée-collée', 'copiés-collés', 'copiées-collées']

173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang
173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> comment => suggestions : [' comment']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang => suggestions : [' shebang']
173 Mot inconnu : shebang => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> shebang
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> comment => suggestions : [' comment']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> comment => suggestions : [' comment']
173 Guillemets typographiques ouvrants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['«\xa0', '“']
173 Guillemets typographiques fermants. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> " => suggestions : ['\xa0»', '”']
173 Mot inconnu : def => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> def
173 Il manque un espace. => Certains styles, s'ils ne sont pas définis, adoptent les mêmes propriétés qu'un autre style. On peut former ainsi des "familles de styles" qui sont ici représentées par des décalages sur la droite. À titre d'exemple, si le style def:shebang n'est pas défini, comme on peut dire que def:shebang est le "style fils" de def:comment, alors le style def:shebang sera identique à def:comment. Si par contre def:comment n'est pas défini, n'ayant pas de "style parent" alors def:comment s'affichera comme du texte. <|> comment => suggestions : [' comment']
176 Mot inconnu : def =>   * def:comment : Pour désigner les commentaires . <|> def
176 Il manque un espace. =>   * def:comment : Pour désigner les commentaires . <|> comment => suggestions : [' comment']
181 Mot inconnu : def =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> def
181 Il manque un espace. =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> special-char => suggestions : [' special-char']
181 Mot inconnu : special-char =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> special-char
181 Guillemets typographiques ouvrants. =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> " => suggestions : ['«\xa0', '“']
181 Guillemets typographiques fermants. =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> " => suggestions : ['\xa0»', '”']
181 Il manque un espace. =>   * def:special-char : Pour désigner des "caractères spéciaux" : par exemple en C, on peut utiliser des caractères comme %s ou \n. <|> s => suggestions : [' s']
182 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> def => suggestions : ['Def']
182 Mot inconnu : def =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> def
182 Il manque un espace. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> constant => suggestions : [' constant']
182 Guillemets typographiques ouvrants. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> " => suggestions : ['«\xa0', '“']
182 Guillemets typographiques fermants. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> " => suggestions : ['\xa0»', '”']
182 Après un point, une majuscule est généralement requise. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|> variable => suggestions : ['Variable']
182 Pas d’espace avant ce signe. =>   * def:constant : Pour désigner des valeurs constantes. Lorsque vous écrivez "variable=123", 123 est une valeur qui ne changera jamais. variable par contre, elle, variera (c'est le but aussi :-o ). Les styles qui suivent correspondent à différentes catégories de constantes :  <|>  ) => suggestions : [')']
193 Mot inconnu : def =>   * def:identifier : pour des identifiants de variable. <|> def
193 Il manque un espace. =>   * def:identifier : pour des identifiants de variable. <|> identifier => suggestions : [' identifier']
197 Mot inconnu : def =>   * def:statement : Le terme général pour désigner les deux styles qui suivent. <|> def
197 Il manque un espace. =>   * def:statement : Le terme général pour désigner les deux styles qui suivent. <|> statement => suggestions : [' statement']
197 Mot inconnu : statement =>   * def:statement : Le terme général pour désigner les deux styles qui suivent. <|> statement
201 Mot inconnu : def =>   * def:type : Pour les types de données : int, double, char... <|> def
201 Il manque un espace. =>   * def:type : Pour les types de données : int, double, char... <|> type => suggestions : [' type']
201 Mot inconnu : int =>   * def:type : Pour les types de données : int, double, char... <|> int
201 Typographie : points de suspension. Utilisez le caractère dédié. =>   * def:type : Pour les types de données : int, double, char... <|> ... => suggestions : ['…']
204 Mot inconnu : def =>   * def:error : Pour des erreurs d'écriture. <|> def
204 Il manque un espace. =>   * def:error : Pour des erreurs d'écriture. <|> error => suggestions : [' error']
204 Mot inconnu : error =>   * def:error : Pour des erreurs d'écriture. <|> error
206 Mot inconnu : def =>   * def:note : Des notes destinées au programmeur, par exemple TODO... <|> def
206 Il manque un espace. =>   * def:note : Des notes destinées au programmeur, par exemple TODO... <|> note => suggestions : [' note']
206 Mot inconnu : TODO =>   * def:note : Des notes destinées au programmeur, par exemple TODO... <|> todo
206 Typographie : points de suspension. Utilisez le caractère dédié. =>   * def:note : Des notes destinées au programmeur, par exemple TODO... <|> ... => suggestions : ['…']
207 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * def:underlined : Tout ce qui doit être souligné, par exemple en HTML les liens, ou les adresses mail. Si vous voulez un peu de folklore, vous pouvez décider que ces textes soient affichés en italique, mais pensez un peu aux autres, par pitié appliquez seulement un soulignement à ce style si vous le définissez. <|> def => suggestions : ['Def']
207 Mot inconnu : def =>   * def:underlined : Tout ce qui doit être souligné, par exemple en HTML les liens, ou les adresses mail. Si vous voulez un peu de folklore, vous pouvez décider que ces textes soient affichés en italique, mais pensez un peu aux autres, par pitié appliquez seulement un soulignement à ce style si vous le définissez. <|> def
207 Il manque un espace. =>   * def:underlined : Tout ce qui doit être souligné, par exemple en HTML les liens, ou les adresses mail. Si vous voulez un peu de folklore, vous pouvez décider que ces textes soient affichés en italique, mais pensez un peu aux autres, par pitié appliquez seulement un soulignement à ce style si vous le définissez. <|> underlined => suggestions : [' underlined']
207 Mot inconnu : underlined =>   * def:underlined : Tout ce qui doit être souligné, par exemple en HTML les liens, ou les adresses mail. Si vous voulez un peu de folklore, vous pouvez décider que ces textes soient affichés en italique, mais pensez un peu aux autres, par pitié appliquez seulement un soulignement à ce style si vous le définissez. <|> underlined

272 Écriture invariable. Utilisez un point médian. => Si vous cherchez des indications supplémentaires sur la coloration du texte ou si ce tuto vous semble flou, n'oubliez pas de contacter le(s) contributeur(s). <|> contributeur(s) => suggestions : ['contributeur·s']

280 Mot inconnu : introducion => == introducion == <|> introducion
282 Il manque un trait d’union si “même” se rapporte à “vous”. => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. <|> vous même => suggestions : ['vous-même']
282 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. <|>  . => suggestions : ['. ', '.']
282 Mot inconnu : lang => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. <|> lang
282 Mot inconnu : bbcode => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. <|> bbcode
282 Mot inconnu : bbcode => Vous avez fait un nouveau langage ? Vous voulez faire vous même un fichier de style ? Nous allons voir ensemble comment faire ça en prenant comme exemple un fichier .lang de coloration syntaxique pour le langage bbcode (celui qu'on utilise dans les forums). Avant tout il faut voir un peu à quoi ressemble ce bbcode, sa syntaxe. <|> bbcode

284 Mot inconnu : bbcode => Voilà un petit aperçu de bbcode <|> bbcode

295 Guillemets typographiques ouvrants. => J'ai décidé les "conventions" suivantes: <|> " => suggestions : ['«\xa0', '“']
295 Guillemets typographiques fermants. => J'ai décidé les "conventions" suivantes: <|> " => suggestions : ['\xa0»', '”']

297 Mot inconnu : quote => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). <|> quote
297 Mot inconnu : quote => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). <|> quote
297 Mot inconnu : url => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). <|> url
297 Mot inconnu : url => Les mots clés des balises seront différents soit la liste suivante ([code][/code], [quote][/quote], [url][/url] etc). <|> url

299 Mot inconnu : quote => Quand on peut rajouter une valeur, comme dans [quote=doc ubuntu], la valeur doit être colorié. <|> quote
299 Accord erroné : “valeur” et “colorié” ne sont pas accordés. => Quand on peut rajouter une valeur, comme dans [quote=doc ubuntu], la valeur doit être colorié. <|> colorié => suggestions : ['coloriée']

301 Mot inconnu : bbcode => le bbcode n'a pas de caractère pour les commentaires, donc je choisi le # <|> bbcode
301 Conjugaison erronée. Accord avec “je”. Le verbe devrait être à la 1ʳᵉ personne du singulier. => le bbcode n'a pas de caractère pour les commentaires, donc je choisi le # <|> choisi => suggestions : ['choisis', 'choisissais']

303 Mot inconnu : bbcode => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ <|> bbcode
303 Mot inconnu : lang => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ <|> lang
303 Pas d’espace avant un point. => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ <|>  . => suggestions : ['.']
303 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Pour commencer il va falloir créer un fichier bbcode.lang . Vous devrez placer ce fichier dans le dossier /usr/share/gtksourceview-2.0/language-specs/ <|> -2 => suggestions : ['−2', '– 2', '— 2']

306 Mot inconnu : gedit => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|> gedit
306 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|>  . => suggestions : ['. ', '.']
306 Mot inconnu : bbc => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|> bbc
306 Mot inconnu : bbcode => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|> bbcode
306 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|>  . => suggestions : ['. ', '.']
306 Mot inconnu : bbc => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|> bbc
306 Mot inconnu : gedit => Pour voir s'il y a des erreurs, il suffit de lancer gedit en console et d'ouvrir un fichier .bbc (pour bbcode) (c'est l'extension que nous allons choisir et à chaque fois que vous ferez un fichier .bbc, gedit utilisera la coloration syntaxique que nous allons faire. <|> gedit
317 Mot inconnu : lang =>   * [[http://developer.gnome.org/gtksourceview/stable/lang-reference.html|Documentation pour créer un fichier lang (en)]] <|> lang
318 Mot inconnu : lang =>   * [[http://developer.gnome.org/gtksourceview/stable/lang-tutorial.html|Un tutoriel pour créer un fichier lang (en)]] <|> lang
