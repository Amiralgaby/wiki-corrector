
6 Mot inconnu : Glade [[7:12]] => ====== Glade : la ligne de code ouvre les fenêtres ====== <|> glade

8 Mot inconnu : Glade [[0:5]] => Glade est un outil interactif de conception d'interface graphique GTK+. \\ <|> glade

11 Mot inconnu : Glade [[2:7]] => **Glade** enregistre les interfaces graphiques en générant des fichiers XML. \\ **GtkBuilder** permet de lire ces fichiers dynamiquement, entendez à l'exécution de l'application. <|> glade
11 Mot inconnu : GtkBuilder [[82:92]] => **Glade** enregistre les interfaces graphiques en générant des fichiers XML. \\ **GtkBuilder** permet de lire ces fichiers dynamiquement, entendez à l'exécution de l'application. <|> gtkbuilder

14 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). [[0:1]] =>   <|>   => suggestions : ['']

25 Espace(s) surnuméraire(s) à supprimer. [[112:114]] => Pour gagner du temps, nous allons utiliser directement une boîte de dialogue qui comporte déjà 2 parties utiles.  \\ A savoir : <|>    => suggestions : [' ']
25 S’il s’agit de la préposition « à », il faut accentuer la majuscule. [[117:118]] => Pour gagner du temps, nous allons utiliser directement une boîte de dialogue qui comporte déjà 2 parties utiles.  \\ A savoir : <|> a => suggestions : ['À']
26 Espace(s) en fin de ligne à supprimer. [[24:25]] =>   * une partie vide puis  <|>   => suggestions : ['']
27 Espace(s) en fin de ligne à supprimer. [[48:49]] =>   * une autre dédiée spécifiquement aux boutons.  <|>   => suggestions : ['']
31 Mot inconnu : checkboxes [[228:238]] => Une fois l’interface réalisée, il faut maintenant l’exploiter avec le code Java et lui faire réaliser les actions que l’on souhaite. \\ Tout d’abord, qu’est-ce que l’on voit sur cette interface GTK+ ? \\ On remarque qu’il y a 4 checkboxes correspondant à l’utilisation (case cochée, par défaut) ou non (case décochée) des types de caractères. \\ On voit aussi une barre pour choisir la taille du mot de passe (valeur par défaut 8). On sait tous qu’un vrai mot de passe se compose d’au moins 8 caractères avec alternance majuscules, minuscules, chiffres et caractères spéciaux. Enfin, il y a 3 boutons, un bouton Quitter (qui veut tout dire), un Actualiser qui va permettre de générer le mot de passe (qui se situera dans la champ de texte) et un bouton Copier pour copier le mot de passe dans le presse-papier. Tous ces boutons sont des boutons “basiques” dont l’icône, le label et le mnemonic sont déjà définis. Nous allons donc voir seulement les actions associées à ses boutons. Pour le reste il vous suffira de voir le code. Ce n’est pas très complexe et il y a des commentaires. <|> checkboxes
31 Conjugaison erronée. Accord avec “un…”. Le verbe devrait être à la 3ᵉ personne du singulier. [[645:655]] => Une fois l’interface réalisée, il faut maintenant l’exploiter avec le code Java et lui faire réaliser les actions que l’on souhaite. \\ Tout d’abord, qu’est-ce que l’on voit sur cette interface GTK+ ? \\ On remarque qu’il y a 4 checkboxes correspondant à l’utilisation (case cochée, par défaut) ou non (case décochée) des types de caractères. \\ On voit aussi une barre pour choisir la taille du mot de passe (valeur par défaut 8). On sait tous qu’un vrai mot de passe se compose d’au moins 8 caractères avec alternance majuscules, minuscules, chiffres et caractères spéciaux. Enfin, il y a 3 boutons, un bouton Quitter (qui veut tout dire), un Actualiser qui va permettre de générer le mot de passe (qui se situera dans la champ de texte) et un bouton Copier pour copier le mot de passe dans le presse-papier. Tous ces boutons sont des boutons “basiques” dont l’icône, le label et le mnemonic sont déjà définis. Nous allons donc voir seulement les actions associées à ses boutons. Pour le reste il vous suffira de voir le code. Ce n’est pas très complexe et il y a des commentaires. <|> actualiser => suggestions : ['Actualisait', 'Actualisa', 'Actualise']
31 Accord de genre erroné : « champ » est masculin. [[721:723]] => Une fois l’interface réalisée, il faut maintenant l’exploiter avec le code Java et lui faire réaliser les actions que l’on souhaite. \\ Tout d’abord, qu’est-ce que l’on voit sur cette interface GTK+ ? \\ On remarque qu’il y a 4 checkboxes correspondant à l’utilisation (case cochée, par défaut) ou non (case décochée) des types de caractères. \\ On voit aussi une barre pour choisir la taille du mot de passe (valeur par défaut 8). On sait tous qu’un vrai mot de passe se compose d’au moins 8 caractères avec alternance majuscules, minuscules, chiffres et caractères spéciaux. Enfin, il y a 3 boutons, un bouton Quitter (qui veut tout dire), un Actualiser qui va permettre de générer le mot de passe (qui se situera dans la champ de texte) et un bouton Copier pour copier le mot de passe dans le presse-papier. Tous ces boutons sont des boutons “basiques” dont l’icône, le label et le mnemonic sont déjà définis. Nous allons donc voir seulement les actions associées à ses boutons. Pour le reste il vous suffira de voir le code. Ce n’est pas très complexe et il y a des commentaires. <|> la => suggestions : ['le']
31 Mot inconnu : mnemonic [[885:893]] => Une fois l’interface réalisée, il faut maintenant l’exploiter avec le code Java et lui faire réaliser les actions que l’on souhaite. \\ Tout d’abord, qu’est-ce que l’on voit sur cette interface GTK+ ? \\ On remarque qu’il y a 4 checkboxes correspondant à l’utilisation (case cochée, par défaut) ou non (case décochée) des types de caractères. \\ On voit aussi une barre pour choisir la taille du mot de passe (valeur par défaut 8). On sait tous qu’un vrai mot de passe se compose d’au moins 8 caractères avec alternance majuscules, minuscules, chiffres et caractères spéciaux. Enfin, il y a 3 boutons, un bouton Quitter (qui veut tout dire), un Actualiser qui va permettre de générer le mot de passe (qui se situera dans la champ de texte) et un bouton Copier pour copier le mot de passe dans le presse-papier. Tous ces boutons sont des boutons “basiques” dont l’icône, le label et le mnemonic sont déjà définis. Nous allons donc voir seulement les actions associées à ses boutons. Pour le reste il vous suffira de voir le code. Ce n’est pas très complexe et il y a des commentaires. <|> mnemonic
46 Mot inconnu : mainQuit [[79:87]] => On récupère l’élément bouton et au clic sur ce bouton on applique l’action Gtk.mainQuit() qui termine la boucle lancée par Gtk.main(). <|> mainquit
46 Il manque un espace. [[127:131]] => On récupère l’élément bouton et au clic sur ce bouton on applique l’action Gtk.mainQuit() qui termine la boucle lancée par Gtk.main(). <|> main => suggestions : [' main']

61 Mot inconnu : generatePassword [[17:33]] => C'est La méthode generatePassword() qui va vraiment se charger de récupérer un mot de passe et d’actualiser le champ de texte de l’interface. <|> generatepassword

76 Mot inconnu : errorDialog [[176:187]] => On récupère la longueur du mot de passe. Et là un test, si on a décoché toutes les cases, on signale une erreur à l’utilisateur via une fenêtre spéciale appelée par la méthode errorDialog(String title, String text). <|> errordialog
76 Il manque un espace avant la parenthèse. [[187:188]] => On récupère la longueur du mot de passe. Et là un test, si on a décoché toutes les cases, on signale une erreur à l’utilisateur via une fenêtre spéciale appelée par la méthode errorDialog(String title, String text). <|> ( => suggestions : [' (']
76 Mot inconnu : title [[195:200]] => On récupère la longueur du mot de passe. Et là un test, si on a décoché toutes les cases, on signale une erreur à l’utilisateur via une fenêtre spéciale appelée par la méthode errorDialog(String title, String text). <|> title
76 Mot inconnu : text [[209:213]] => On récupère la longueur du mot de passe. Et là un test, si on a décoché toutes les cases, on signale une erreur à l’utilisateur via une fenêtre spéciale appelée par la méthode errorDialog(String title, String text). <|> text

89 Mot inconnu : copyToClipboard [[17:32]] => C’est la méthode copyToClipboard(String text) qui va copier le contenu du champ texte dans le presse-papier si bien entendu l’environnement le supporte. Mais ça ne devrait pas poser de problème. Voici le contenu de cette méthode. <|> copytoclipboard
89 Il manque un espace avant la parenthèse. [[32:33]] => C’est la méthode copyToClipboard(String text) qui va copier le contenu du champ texte dans le presse-papier si bien entendu l’environnement le supporte. Mais ça ne devrait pas poser de problème. Voici le contenu de cette méthode. <|> ( => suggestions : [' (']
89 Mot inconnu : text [[40:44]] => C’est la méthode copyToClipboard(String text) qui va copier le contenu du champ texte dans le presse-papier si bien entendu l’environnement le supporte. Mais ça ne devrait pas poser de problème. Voici le contenu de cette méthode. <|> text

90 Mot inconnu : private [[14:21]] => <file C++>    private void copyToClipboard(String password) { <|> private
90 Mot inconnu : void [[22:26]] => <file C++>    private void copyToClipboard(String password) { <|> void
90 Mot inconnu : copyToClipboard [[27:42]] => <file C++>    private void copyToClipboard(String password) { <|> copytoclipboard
90 Il manque un espace avant la parenthèse. [[42:43]] => <file C++>    private void copyToClipboard(String password) { <|> ( => suggestions : [' (']
90 Mot inconnu : password [[50:58]] => <file C++>    private void copyToClipboard(String password) { <|> password

102 Mot inconnu : Ant [[164:167]] => N’oubliez pas surtout de regarder tous les autres fichiers pour comprendre le code et tous les appels de méthodes. Et normalement, après compilation (via le script Ant), Il ne reste qu’à dézipper le fichier .zip généré, donner les droits d’exécution au script shell et le lancer (on peut aussi utiliser le Run de Eclipse). Après tout ceci, on obtient notre joli générateur de mot de passe sans aucun problème. <|> ant
102 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[206:208]] => N’oubliez pas surtout de regarder tous les autres fichiers pour comprendre le code et tous les appels de méthodes. Et normalement, après compilation (via le script Ant), Il ne reste qu’à dézipper le fichier .zip généré, donner les droits d’exécution au script shell et le lancer (on peut aussi utiliser le Run de Eclipse). Après tout ceci, on obtient notre joli générateur de mot de passe sans aucun problème. <|>  . => suggestions : ['. ', '.']
102 Mot inconnu : Run [[306:309]] => N’oubliez pas surtout de regarder tous les autres fichiers pour comprendre le code et tous les appels de méthodes. Et normalement, après compilation (via le script Ant), Il ne reste qu’à dézipper le fichier .zip généré, donner les droits d’exécution au script shell et le lancer (on peut aussi utiliser le Run de Eclipse). Après tout ceci, on obtient notre joli générateur de mot de passe sans aucun problème. <|> run
