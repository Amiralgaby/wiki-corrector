
4 Mot inconnu : sudo => ====== Configuration avancée de l'utilitaire sudo ====== <|> sudo

15 Mot inconnu : README => Confer le fichier ///etc/sudoers.d/**README**// <|> readme

18 Il manque les traits d’union. => C'est à dire pour toutes les versions d'Ubuntu supportées. <|> c'est à dire => suggestions : ['C’est-à-dire']

27 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|> vous => suggestions : ['Vous']
27 Mot inconnu : monfichier => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|> monfichier
27 Pas d’espace avant une virgule. => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|>  , => suggestions : [',']
27 Mot inconnu : sysctl => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|> sysctl
27 Pas d’espace avant une virgule. => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|>  , => suggestions : [',']
27 Mot inconnu : userX => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|> userx
27 Pas d’espace avant une virgule. => vous pouvez définir autant de fichiers que de modifications (voir le §2). Le nom est libre et peut donc faire référence à l'élément personnalisé. Exemples : **monfichier** , **10-sysctl** , **20-userX** , **30-apt**. <|>  , => suggestions : [',']

42 Il faut élider “si” et l’accoler au pronom. => Si il est toujours préférable de privilégier d'écrire ses modifications locales dans [[#etcsudoersd|/etc/sudoers.d]] il est toujours possible de surcharger directement le fichier /etc/sudoers. <|> si  => suggestions : ['S’']

48 Mot inconnu : visudo => À la fermeture du fichier // /etc/sudoers // ouvert par son outil d'édition **visudo**, la nouvelle configuration est automatiquement chargée. <|> visudo

49 Mot inconnu : visudo => ==== Choisir l'éditeur utilisé par visudo ==== <|> visudo

50 Confusion probable : “a” est une forme conjuguée du verbe “avoir”. Pour la préposition, écrivez “à”. => === A chaque fois === <|> a => suggestions : ['À']

66 Mot inconnu : __ => À __**la fin du fichier**__, ajoutez une ligne d'instruction... <|> __
66 Mot inconnu : __ => À __**la fin du fichier**__, ajoutez une ligne d'instruction... <|> __
66 Typographie : points de suspension. Utilisez le caractère dédié. => À __**la fin du fichier**__, ajoutez une ligne d'instruction... <|> ... => suggestions : ['…']

67 Mot inconnu : sudoers => <note important>En cas de litige entre ligne, ce sera la dernière dans le fichier sudoers qui sera comptée ! <|> sudoers

68 Pas d’espace avant une virgule. => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|>  , => suggestions : [',']
68 Mot inconnu : jérome => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> jérome
68 Mot inconnu : jérome => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> jérome
68 Mot inconnu : executer => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> executer
68 Mot inconnu : ls => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> ls
68 Mot inconnu : executer => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> executer
68 Mot inconnu : ls => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> ls
68 Mot inconnu : jérome => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> jérome
68 Mot inconnu : executer => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> executer
68 Mot inconnu : ls => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> ls
68 Mot inconnu : sudo => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> sudo
68 Mot inconnu : execution => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> execution
68 Mot inconnu : ls => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> ls
68 Mot inconnu : __ => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> __
68 Mot inconnu : __ => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> __
68 Mot inconnu : sudo => Si par exemple , //jérome// fait partie du groupe //paris// et que vous mettez que //jérome// peut executer la commande //ls//, puis que plus loin vous mettez que le groupe //paris// ne peut pas executer la commande //ls//, //jérome// ne pourra pas executer la commande //ls// (du moins pas avec sudo) car la dernière ligne qui le concerne refuse l'execution de ls ! D'où l'importance de __**bien situer la ligne que vous souhaitez inclure**__, notamment **par rapport aux lignes déjà pré-définies pour les groupes admin et sudo** !</note> <|> sudo

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  ...telle que la suivante : <|>   => suggestions : ['']
69 Typographie : points de suspension. Utilisez le caractère dédié. =>  ...telle que la suivante : <|> ... => suggestions : ['…']

70 Mot inconnu : ALL => <file>identifiant	ALL = (user) /chemin/complet/commande,/chemin/complet/autrecommande <|> all
70 Mot inconnu : autrecommande => <file>identifiant	ALL = (user) /chemin/complet/commande,/chemin/complet/autrecommande <|> autrecommande

71 Il manque un espace. => %groupe	ALL = (user) /chemin/complet/commande,!/chemin/complet/autrecommande</file> <|> groupe => suggestions : [' groupe']
71 Mot inconnu : ALL => %groupe	ALL = (user) /chemin/complet/commande,!/chemin/complet/autrecommande</file> <|> all
71 Une de ces ponctuations est superflue. => %groupe	ALL = (user) /chemin/complet/commande,!/chemin/complet/autrecommande</file> <|> ,! => suggestions : [',', '!']
71 Mot inconnu : autrecommande => %groupe	ALL = (user) /chemin/complet/commande,!/chemin/complet/autrecommande</file> <|> autrecommande

82 Mot inconnu : ALL => <file>identifiant	ALL = (ALL) /chemin/complet/commande, NOPASSWD: /chemin/complet/autrecommande <|> all
82 Mot inconnu : ALL => <file>identifiant	ALL = (ALL) /chemin/complet/commande, NOPASSWD: /chemin/complet/autrecommande <|> all
82 Mot inconnu : NOPASSWD => <file>identifiant	ALL = (ALL) /chemin/complet/commande, NOPASSWD: /chemin/complet/autrecommande <|> nopasswd
82 Mot inconnu : autrecommande => <file>identifiant	ALL = (ALL) /chemin/complet/commande, NOPASSWD: /chemin/complet/autrecommande <|> autrecommande

83 Il manque un espace. => %groupe	ALL = (ALL) NOPASSWD: /chemin/complet/commande,/chemin/complet/autrecommande</file> <|> groupe => suggestions : [' groupe']
83 Mot inconnu : ALL => %groupe	ALL = (ALL) NOPASSWD: /chemin/complet/commande,/chemin/complet/autrecommande</file> <|> all
83 Mot inconnu : ALL => %groupe	ALL = (ALL) NOPASSWD: /chemin/complet/commande,/chemin/complet/autrecommande</file> <|> all
83 Mot inconnu : NOPASSWD => %groupe	ALL = (ALL) NOPASSWD: /chemin/complet/commande,/chemin/complet/autrecommande</file> <|> nopasswd
83 Mot inconnu : autrecommande => %groupe	ALL = (ALL) NOPASSWD: /chemin/complet/commande,/chemin/complet/autrecommande</file> <|> autrecommande
88 Guillemets typographiques ouvrants. => Attention : il ne faut pas mettre juste la commande, mais tout le chemin vers le fichier. Par exemple il ne faut pas mettre "ls" mais "/bin/ls". <|> " => suggestions : ['«\xa0', '“']
88 Mot inconnu : ls => Attention : il ne faut pas mettre juste la commande, mais tout le chemin vers le fichier. Par exemple il ne faut pas mettre "ls" mais "/bin/ls". <|> ls
88 Guillemets typographiques fermants. => Attention : il ne faut pas mettre juste la commande, mais tout le chemin vers le fichier. Par exemple il ne faut pas mettre "ls" mais "/bin/ls". <|> " => suggestions : ['\xa0»', '”']

93 Mot inconnu : newgrp => Pensez à utiliser newgrp pour basculer votre groupe actif avant de faire appel à la commande autorisée par le sudo.\\ <|> newgrp
93 Mot inconnu : sudo => Pensez à utiliser newgrp pour basculer votre groupe actif avant de faire appel à la commande autorisée par le sudo.\\ <|> sudo

95 Mot inconnu : codeclavier => Après avoir créé le groupe codeclavier, pensez à utiliser un numéro spécial pour éviter les conflits avec les groupes utilisateurs, vous ajoutez cette ligne dans le fichier /etc/sudoers. <|> codeclavier

111 Guillemets typographiques ouvrants. => ====Exécuter un programme en tant qu'un autre 'user'==== <|> ' => suggestions : ['“', '‘', '‹']

112 Mot inconnu : sudo => La commande sudo permet d'exécuter un programme en tant qu'un autre utilisateur. <|> sudo

114 Mot inconnu : foo => <file>foo      ALL=(bar) NOPASSWD: /chemin/complet/program</file> <|> foo
114 Mot inconnu : ALL => <file>foo      ALL=(bar) NOPASSWD: /chemin/complet/program</file> <|> all
114 Mot inconnu : NOPASSWD => <file>foo      ALL=(bar) NOPASSWD: /chemin/complet/program</file> <|> nopasswd
114 Mot inconnu : program => <file>foo      ALL=(bar) NOPASSWD: /chemin/complet/program</file> <|> program

115 Mot inconnu : foo => permet à foo d'utiliser program en tant que bar sans qu'on ne lui demande son mot de passe. <|> foo
115 Mot inconnu : program => permet à foo d'utiliser program en tant que bar sans qu'on ne lui demande son mot de passe. <|> program
117 Mot inconnu : sudo => //**Note**// : Après il faut quand même utiliser **sudo** pour le lancement de **program**. Comme ceci : <|> sudo
117 Mot inconnu : program => //**Note**// : Après il faut quand même utiliser **sudo** pour le lancement de **program**. Comme ceci : <|> program

118 Mot inconnu : sudo => <file>sudo program</file> <|> sudo
118 Mot inconnu : program => <file>sudo program</file> <|> program

126 Mot inconnu : Defaults => <file>Defaults	env_reset</file> <|> defaults
126 Mot inconnu : env_reset => <file>Defaults	env_reset</file> <|> env_reset

127 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => devient <|> devient => suggestions : ['deviens']

128 Mot inconnu : Defaults => <file>Defaults	env_reset,timestamp_timeout=X</file> <|> defaults
128 Mot inconnu : env_reset => <file>Defaults	env_reset,timestamp_timeout=X</file> <|> env_reset
128 Il manque un espace. => <file>Defaults	env_reset,timestamp_timeout=X</file> <|> timestamp_timeout => suggestions : [' timestamp_timeout']
128 Mot inconnu : timestamp_timeout => <file>Defaults	env_reset,timestamp_timeout=X</file> <|> timestamp_timeout

136 Mot inconnu : Defaults => <file>Defaults	env_reset</file> <|> defaults
136 Mot inconnu : env_reset => <file>Defaults	env_reset</file> <|> env_reset

137 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => devient <|> devient => suggestions : ['deviens']

138 Mot inconnu : Defaults => <file>Defaults	env_reset,pwfeedback</file> <|> defaults
138 Mot inconnu : env_reset => <file>Defaults	env_reset,pwfeedback</file> <|> env_reset
138 Il manque un espace. => <file>Defaults	env_reset,pwfeedback</file> <|> pwfeedback => suggestions : [' pwfeedback']
138 Mot inconnu : pwfeedback => <file>Defaults	env_reset,pwfeedback</file> <|> pwfeedback

143 Mot inconnu : badpass_message => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> badpass_message
143 Guillemets typographiques ouvrants. => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> " => suggestions : ['«\xa0', '“']
143 Guillemets typographiques fermants. => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> " => suggestions : ['\xa0»', '”']
143 Guillemets typographiques ouvrants. => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> " => suggestions : ['«\xa0', '“']
143 Mot inconnu : Defaults => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> defaults
143 Guillemets typographiques fermants. => Ajoutez l'option badpass_message="texte à afficher" à la fin de la ligne débutant par "Defaults". <|> " => suggestions : ['\xa0»', '”']

144 Mot inconnu : Defaults => <file>Defaults	env_reset</file> <|> defaults
144 Mot inconnu : env_reset => <file>Defaults	env_reset</file> <|> env_reset

145 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => devient <|> devient => suggestions : ['deviens']

146 Mot inconnu : Defaults => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> defaults
146 Mot inconnu : env_reset => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> env_reset
146 Il manque un espace. => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> badpass_message => suggestions : [' badpass_message']
146 Mot inconnu : badpass_message => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> badpass_message
146 Guillemets typographiques ouvrants. => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> " => suggestions : ['«\xa0', '“']
146 Guillemets typographiques fermants. => <file>Defaults	env_reset,badpass_message="texte à afficher"</file> <|> " => suggestions : ['\xa0»', '”']

150 Mot inconnu : Defaults => <file>Defaults	env_reset</file> <|> defaults
150 Mot inconnu : env_reset => <file>Defaults	env_reset</file> <|> env_reset

151 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. => devient <|> devient => suggestions : ['deviens']

152 Mot inconnu : Defaults => <file>Defaults	env_reset,insults</file> <|> defaults
152 Mot inconnu : env_reset => <file>Defaults	env_reset,insults</file> <|> env_reset
152 Il manque un espace. => <file>Defaults	env_reset,insults</file> <|> insults => suggestions : [' insults']
152 Mot inconnu : insults => <file>Defaults	env_reset,insults</file> <|> insults

158 Mot inconnu : sudo => Si, en tentant d’exécuter une commande sudo, vous obtenez une erreur comme ci-dessous, c'est que votre fichier sudoers est corrompu. <|> sudo
158 Mot inconnu : sudoers => Si, en tentant d’exécuter une commande sudo, vous obtenez une erreur comme ci-dessous, c'est que votre fichier sudoers est corrompu. <|> sudoers

159 Mot inconnu : sudo => Comme il est corrompu, vous ne pouvez plus exécuter sudo, et donc plus modifier le fichier ... cercle vicieux <|> sudo
159 Typographie : points de suspension. Utilisez le caractère dédié. => Comme il est corrompu, vous ne pouvez plus exécuter sudo, et donc plus modifier le fichier ... cercle vicieux <|> ... => suggestions : ['…']

165 Mot inconnu : pkexec => <file>pkexec visudo</file> <|> pkexec
165 Mot inconnu : visudo => <file>pkexec visudo</file> <|> visudo

169 Mot inconnu : recovery => ==== Redémarrer en mode recovery ==== <|> recovery

172 Guillemets typographiques ouvrants. => ==== Choisir l'option "root" ==== <|> " => suggestions : ['«\xa0', '“']
172 Mot inconnu : root => ==== Choisir l'option "root" ==== <|> root
172 Guillemets typographiques fermants. => ==== Choisir l'option "root" ==== <|> " => suggestions : ['\xa0»', '”']

178 Mot inconnu : Editer => ==== Editer / corriger le fichier 'sudoers'  ==== <|> editer
178 Guillemets typographiques ouvrants. => ==== Editer / corriger le fichier 'sudoers'  ==== <|> ' => suggestions : ['“', '‘', '‹']
178 Mot inconnu : sudoers => ==== Editer / corriger le fichier 'sudoers'  ==== <|> sudoers
178 Guillemets typographiques fermants. => ==== Editer / corriger le fichier 'sudoers'  ==== <|> ' => suggestions : ['”', '’', '›']

186 Typographie : points de suspension. Utilisez le caractère dédié. => ===== Aller plus loin... ===== <|> ... => suggestions : ['…']

187 Mot inconnu : sudoers => Consultez la page de manuel officiel du fichier ///etc/**sudoers**// : <|> sudoers
188 Mot inconnu : Sudoers =>   * En ligne : [[http://www.sudo.ws/sudo/sudoers.man.html|Sudoers Manual]] ; <|> sudoers
188 Mot inconnu : Manual =>   * En ligne : [[http://www.sudo.ws/sudo/sudoers.man.html|Sudoers Manual]] ; <|> manual
190 Mot inconnu : root =>   * **(fr)** [[http://guide.andesi.org/html/ksudo.html|Comment donner certains droits root à un utilisateur (Sudo)]] <|> root
190 Mot inconnu : Sudo =>   * **(fr)** [[http://guide.andesi.org/html/ksudo.html|Comment donner certains droits root à un utilisateur (Sudo)]] <|> sudo
