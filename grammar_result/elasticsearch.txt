
5 Mot inconnu : Elasticsearch => ====== Elasticsearch ====== | elasticsearch

10 Mot inconnu : Elasticsearch => Ce tutoriel a pour but de montrer comment installer basiquement le service Elasticsearch et réaliser des requêtes simples. | elasticsearch

11 Conjugaison erronée. Accord avec “Les paramètres…”. Le verbe devrait être à la 3ᵉ personne du pluriel. => Les paramètres techniques détaillées et les concepts d'architecture ou de modèle documentaire ne seront pas abordés ici.\\ | détaillées => suggestions : ['détaillent', 'détaillaient', 'détaillèrent']

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le requêtage HTTP : [[http://www.zem.fr/curl-15-commandes-pratiques-avec-curl/|Tutoriel FR]] ou  [[http://www.slashroot.in/curl-command-tutorial-linux-example-usage/|Tutoriel EN]] |    => suggestions : ['']
22 Mot inconnu : requêtage =>   * Le requêtage HTTP : [[http://www.zem.fr/curl-15-commandes-pratiques-avec-curl/|Tutoriel FR]] ou  [[http://www.slashroot.in/curl-command-tutorial-linux-example-usage/|Tutoriel EN]] | requêtage
22 Espace(s) surnuméraire(s) à supprimer. =>   * Le requêtage HTTP : [[http://www.zem.fr/curl-15-commandes-pratiques-avec-curl/|Tutoriel FR]] ou  [[http://www.slashroot.in/curl-command-tutorial-linux-example-usage/|Tutoriel EN]] |    => suggestions : [' ']

30 Mot inconnu : elasticsearch => Vous devriez voir une ligne **elasticsearch** : | elasticsearch

31 Pas d’espace après ce signe. => <code bash> [ - ]  elasticsearch</code> | [  => suggestions : ['[']
31 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => <code bash> [ - ]  elasticsearch</code> |  -  => suggestions : [' – ', ' — ', ' − ']
31 Pas d’espace avant ce signe. => <code bash> [ - ]  elasticsearch</code> |  ] => suggestions : [']']

37 Mot inconnu : FIXME => FIXME Après 16.04 c'est réglé ou c'est 16.04 et Supérieur qu'il faut indiquer? Lien vers un bug? | fixme

45 Accord de genre erroné : « active » est féminin. => Alors vous devriez voir un **active (exited)** qui indique que la commande de lancement a été exécutée mais qu'on n'est pas sûr de l'état du service :  | un => suggestions : ['une']
45 Accord de genre erroné : « un » est un déterminant masculin. => Alors vous devriez voir un **active (exited)** qui indique que la commande de lancement a été exécutée mais qu'on n'est pas sûr de l'état du service :  | active => suggestions : ['activé', 'actif']
45 Mot inconnu : exited => Alors vous devriez voir un **active (exited)** qui indique que la commande de lancement a été exécutée mais qu'on n'est pas sûr de l'état du service :  | exited
45 Espace(s) en fin de ligne à supprimer. => Alors vous devriez voir un **active (exited)** qui indique que la commande de lancement a été exécutée mais qu'on n'est pas sûr de l'état du service :  |   => suggestions : ['']

52 Mot inconnu : lubuntu-DEV => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | lubuntu-dev
52 Mot inconnu : systemd => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | systemd
52 Mot inconnu : Started => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | started
52 Mot inconnu : LSB => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | lsb
52 Mot inconnu : Starts => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | starts
52 Mot inconnu : elasticsearch => sept. 18 12:57:38 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch</code> | elasticsearch

57 Mot inconnu : START_DAEMON => <file bash>test "$START_DAEMON" = true || exit 0</file> | start_daemon
57 Guillemets typographiques fermants. => <file bash>test "$START_DAEMON" = true || exit 0</file> | " => suggestions : ['\xa0»', '”']
57 Mot inconnu : true => <file bash>test "$START_DAEMON" = true || exit 0</file> | true

59 Mot inconnu : START_DAEMON => <file bash>#test "$START_DAEMON" = true || exit 0</file> | start_daemon
59 Guillemets typographiques fermants. => <file bash>#test "$START_DAEMON" = true || exit 0</file> | " => suggestions : ['\xa0»', '”']
59 Mot inconnu : true => <file bash>#test "$START_DAEMON" = true || exit 0</file> | true

62 Mot inconnu : start-stop-daemon => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | start-stop-daemon
62 Mot inconnu : start => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | start
62 Mot inconnu : ES_USER => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | es_user
62 Guillemets typographiques fermants. => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | " => suggestions : ['\xa0»', '”']
62 Mot inconnu : ES_USER => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | es_user
62 Guillemets typographiques fermants. => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | " => suggestions : ['\xa0»', '”']
62 Mot inconnu : pidfile => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | pidfile
62 Mot inconnu : PID_FILE => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | pid_file
62 Guillemets typographiques fermants. => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | " => suggestions : ['\xa0»', '”']
62 Mot inconnu : exec => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | exec
62 Mot inconnu : DAEMON => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | daemon
62 Mot inconnu : DAEMON_OPTS => <file bash>start-stop-daemon --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | daemon_opts

64 Mot inconnu : start-stop-daemon => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | start-stop-daemon
64 Mot inconnu : start => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | start
64 Mot inconnu : ES_USER => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | es_user
64 Guillemets typographiques fermants. => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | " => suggestions : ['\xa0»', '”']
64 Mot inconnu : pidfile => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | pidfile
64 Mot inconnu : PID_FILE => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | pid_file
64 Guillemets typographiques fermants. => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | " => suggestions : ['\xa0»', '”']
64 Mot inconnu : exec => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | exec
64 Mot inconnu : DAEMON => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | daemon
64 Mot inconnu : DAEMON_OPTS => <file bash>start-stop-daemon --start -b --user "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS</file> | daemon_opts

68 Mot inconnu : FIXME => <note help> FIXME A quoi servent réellement ces commandes ? | fixme

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * D'un côté la variable //START_DAEMON// n'est pas utilisée dans la suite du script. Donc pourquoi forcer l'arrêt du script si elle n'existe pas ? |    => suggestions : ['']
69 Mot inconnu : START_DAEMON =>   * D'un côté la variable //START_DAEMON// n'est pas utilisée dans la suite du script. Donc pourquoi forcer l'arrêt du script si elle n'existe pas ? | start_daemon

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Ensuite, le groupe défini par la variable //ES_USER// ne semble pas avoir le droit de lancer le démon alors que l'utilisateur référencé par la même variable lui le peut.  |    => suggestions : ['']
70 Mot inconnu : ES_USER =>   * Ensuite, le groupe défini par la variable //ES_USER// ne semble pas avoir le droit de lancer le démon alors que l'utilisateur référencé par la même variable lui le peut.  | es_user
70 Espace(s) en fin de ligne à supprimer. =>   * Ensuite, le groupe défini par la variable //ES_USER// ne semble pas avoir le droit de lancer le démon alors que l'utilisateur référencé par la même variable lui le peut.  |   => suggestions : ['']

79 Mot inconnu : elasticsearch => service elasticsearch status</code> | elasticsearch

80 Mot inconnu : FIXME => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | fixme
80 Guillemets typographiques ouvrants. => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | '' => suggestions : ['«\xa0', '“']
80 Mot inconnu : sudo => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | sudo
80 Mot inconnu : elasticsearch => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | elasticsearch
80 Guillemets typographiques fermants. => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | '' => suggestions : ['\xa0»', '”']
80 Mot inconnu : sudo => FIXME pourquoi dans le bug il y a ''sudo service elasticsearch status'' et là pas de sudo? | sudo

82 Accord de genre erroné : « active » est féminin. => Ce qui doit donner un **active (running)** qui indique que la commande de lancement a été exécutée et qu'on a eu un retour positif : | un => suggestions : ['une']
82 Accord de genre erroné : « un » est un déterminant masculin. => Ce qui doit donner un **active (running)** qui indique que la commande de lancement a été exécutée et qu'on a eu un retour positif : | active => suggestions : ['activé', 'actif']

96 Mot inconnu : lubuntu-DEV => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | lubuntu-dev
96 Mot inconnu : systemd => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | systemd
96 Mot inconnu : Started => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | started
96 Mot inconnu : LSB => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | lsb
96 Mot inconnu : Starts => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | starts
96 Mot inconnu : elasticsearch => sept. 18 13:42:40 lubuntu-DEV systemd[1]: Started LSB: Starts elasticsearch.</code> | elasticsearch

100 Mot inconnu : GET => Il est maintenant possible d'interroger le serveur via la requête HTTP GET : | get
101 Il manque un espace à côté du tiret. => <code bash>curl -X GET 'http://localhost:9200'</code> |  - => suggestions : [' – ', ' — ']
101 Guillemets typographiques ouvrants. => <code bash>curl -X GET 'http://localhost:9200'</code> | ' => suggestions : ['“', '‘', '‹']

116 Mot inconnu : Elasticsearch => <note tip>Le port par défaut d'Elasticsearch est 9200</note> | elasticsearch

124 Mot inconnu : name => <file bash>cluster.name: elasticsearch</file> | name
124 Mot inconnu : elasticsearch => <file bash>cluster.name: elasticsearch</file> | elasticsearch

126 Mot inconnu : Node => Dans la section **Node**, choisissez un nom pour le nœud. Par exemple : | node

127 Mot inconnu : node => <file bash>node.name: "development"</file> | node
127 Mot inconnu : name => <file bash>node.name: "development"</file> | name
127 Guillemets typographiques ouvrants. => <file bash>node.name: "development"</file> | " => suggestions : ['«\xa0', '“']
127 Mot inconnu : development => <file bash>node.name: "development"</file> | development
127 Guillemets typographiques fermants. => <file bash>node.name: "development"</file> | " => suggestions : ['\xa0»', '”']

130 Mot inconnu : number_of_shards => <file bash>index.number_of_shards: 1 | number_of_shards

131 Mot inconnu : number_of_replicas => index.number_of_replicas: 0</file> | number_of_replicas

133 Mot inconnu : Network => Dans la section **Network And HTTP**, indiquez quelle plage du réseau est à écouter. Par exemple, pour tout écouter sans aucune restriction : | network
133 Mot inconnu : And => Dans la section **Network And HTTP**, indiquez quelle plage du réseau est à écouter. Par exemple, pour tout écouter sans aucune restriction : | and

134 Mot inconnu : network => <file bash>network.host: 0.0.0.0</file> | network
134 Mot inconnu : host => <file bash>network.host: 0.0.0.0</file> | host

139 Mot inconnu : Requêtage => =====Requêtage===== | requêtage

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **C**reate : création d'une donnée |    => suggestions : ['']
144 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **C**reate : création d'une donnée |  -  => suggestions : [' – ', ' — ', ' − ']
144 Mot inconnu : reate =>   - **C**reate : création d'une donnée | reate

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **D**elete : supression d'une donnée |    => suggestions : ['']
145 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **D**elete : supression d'une donnée |  -  => suggestions : [' – ', ' — ', ' − ']
145 Mot inconnu : elete =>   - **D**elete : supression d'une donnée | elete
145 Mot inconnu : supression =>   - **D**elete : supression d'une donnée | supression

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **R**ead : lecture d'une donnée |    => suggestions : ['']
146 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **R**ead : lecture d'une donnée |  -  => suggestions : [' – ', ' — ', ' − ']
146 Mot inconnu : ead =>   - **R**ead : lecture d'une donnée | ead

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **U**pdate : mise-à-jour d'une donnée |    => suggestions : ['']
147 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **U**pdate : mise-à-jour d'une donnée |  -  => suggestions : [' – ', ' — ', ' − ']
147 Mot inconnu : pdate =>   - **U**pdate : mise-à-jour d'une donnée | pdate

150 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **G**ET : accession à une ressource |    => suggestions : ['']
150 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **G**ET : accession à une ressource |  -  => suggestions : [' – ', ' — ', ' − ']

151 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **P**OST : publication d'une nouvelle ressource |    => suggestions : ['']
151 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **P**OST : publication d'une nouvelle ressource |  -  => suggestions : [' – ', ' — ', ' − ']

152 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **P**UT : mise-à-jour d'une ressource existante (création si elle n'existe pas) |    => suggestions : ['']
152 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **P**UT : mise-à-jour d'une ressource existante (création si elle n'existe pas) |  -  => suggestions : [' – ', ' — ', ' − ']

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - **D**ELETE : suppression d'une donnée |    => suggestions : ['']
153 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - **D**ELETE : suppression d'une donnée |  -  => suggestions : [' – ', ' — ', ' − ']
153 Mot inconnu : ELETE =>   - **D**ELETE : suppression d'une donnée | elete

155 Mot inconnu : Elasticsearch => Dans le cadre d'Elasticsearch, on peut donc faire le rapprochement : | elasticsearch

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Create ↔ POST |    => suggestions : ['']
156 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Create ↔ POST |  -  => suggestions : [' – ', ' — ', ' − ']
156 Mot inconnu : Create =>   - Create ↔ POST | create

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Delete ↔ DELETE |    => suggestions : ['']
157 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Delete ↔ DELETE |  -  => suggestions : [' – ', ' — ', ' − ']
157 Mot inconnu : Delete =>   - Delete ↔ DELETE | delete
157 Mot inconnu : DELETE =>   - Delete ↔ DELETE | delete

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Read ↔ GET |    => suggestions : ['']
158 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Read ↔ GET |  -  => suggestions : [' – ', ' — ', ' − ']
158 Mot inconnu : Read =>   - Read ↔ GET | read
158 Mot inconnu : GET =>   - Read ↔ GET | get

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Update ↔ PUT |    => suggestions : ['']
159 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Update ↔ PUT |  -  => suggestions : [' – ', ' — ', ' − ']
159 Mot inconnu : Update =>   - Update ↔ PUT | update

163 Mot inconnu : Elastic => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | elastic
163 Guillemets typographiques ouvrants. => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | " => suggestions : ['«\xa0', '“']
163 Mot inconnu : Create => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | create
163 Guillemets typographiques fermants. => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | " => suggestions : ['\xa0»', '”']
163 Guillemets typographiques ouvrants. => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | " => suggestions : ['«\xa0', '“']
163 Mot inconnu : Update => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | update
163 Guillemets typographiques fermants. => <note tip>Elastic ne fait pas de différence fondamental entre "Create ↔ POST" et "Update ↔ PUT". Ces 2 opérations se confondent en une seule : l'indexation.</note> | " => suggestions : ['\xa0»', '”']

165 Mot inconnu : Elasticsearch => Pour ajouter un enregistrement dans Elasticsearch, on peut prendre comme exemple un méthode PUT : | elasticsearch
165 Accord de genre erroné : « méthode » est féminin. => Pour ajouter un enregistrement dans Elasticsearch, on peut prendre comme exemple un méthode PUT : | un => suggestions : ['une']

173 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * L'index ''movies'' : Espace ou notre enregistrement sera stocké dans lequel sera  (obligatoire) |    => suggestions : ['']
173 Guillemets typographiques ouvrants. =>   * L'index ''movies'' : Espace ou notre enregistrement sera stocké dans lequel sera  (obligatoire) | '' => suggestions : ['«\xa0', '“']
173 Mot inconnu : movies =>   * L'index ''movies'' : Espace ou notre enregistrement sera stocké dans lequel sera  (obligatoire) | movies
173 Guillemets typographiques fermants. =>   * L'index ''movies'' : Espace ou notre enregistrement sera stocké dans lequel sera  (obligatoire) | '' => suggestions : ['\xa0»', '”']
173 Espace(s) surnuméraire(s) à supprimer. =>   * L'index ''movies'' : Espace ou notre enregistrement sera stocké dans lequel sera  (obligatoire) |    => suggestions : [' ']

174 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''movie'' : Pour affiner l'index (obligatoire). On pourra par exemple ajouter des réalisateurs à notre base de films |    => suggestions : ['']
174 Guillemets typographiques ouvrants. =>   * Le type ''movie'' : Pour affiner l'index (obligatoire). On pourra par exemple ajouter des réalisateurs à notre base de films | '' => suggestions : ['«\xa0', '“']
174 Mot inconnu : movie =>   * Le type ''movie'' : Pour affiner l'index (obligatoire). On pourra par exemple ajouter des réalisateurs à notre base de films | movie
174 Guillemets typographiques fermants. =>   * Le type ''movie'' : Pour affiner l'index (obligatoire). On pourra par exemple ajouter des réalisateurs à notre base de films | '' => suggestions : ['\xa0»', '”']

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * L'identifiant (ID) ''1'' : une étiquette unique associée à l'enregistrement (optionnel) |    => suggestions : ['']
175 Guillemets typographiques ouvrants. =>   * L'identifiant (ID) ''1'' : une étiquette unique associée à l'enregistrement (optionnel) | '' => suggestions : ['«\xa0', '“']
175 Guillemets typographiques fermants. =>   * L'identifiant (ID) ''1'' : une étiquette unique associée à l'enregistrement (optionnel) | '' => suggestions : ['\xa0»', '”']

176 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les données à stocker : au format JSON, entre les balises ''{}'' |    => suggestions : ['']

178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
178 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
178 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Un rappel de l'index |    => suggestions : ['']

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Un rappel du type |    => suggestions : ['']

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Un rappel de l'ID (si vous en avez donné un, sinon généré aléatoirement) |    => suggestions : ['']

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le numéro de version (toujours 1 pour une création) |    => suggestions : ['']

184 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''créé'' à VRAI (évident pour une création) |    => suggestions : ['']
184 Guillemets typographiques ouvrants. =>   * Le type ''créé'' à VRAI (évident pour une création) | '' => suggestions : ['«\xa0', '“']
184 Guillemets typographiques fermants. =>   * Le type ''créé'' à VRAI (évident pour une création) | '' => suggestions : ['\xa0»', '”']

194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
194 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']

203 Guillemets typographiques ouvrants. => On reçoit donc un ID aléatoire (ici ''AVc-Cf49qZYpQV_XCKMq'') : | '' => suggestions : ['«\xa0', '“']
203 Mot inconnu : AVc-Cf49qZYpQV_XCKMq => On reçoit donc un ID aléatoire (ici ''AVc-Cf49qZYpQV_XCKMq'') : | avc-cf49qzypqv_xckmq
203 Guillemets typographiques fermants. => On reçoit donc un ID aléatoire (ici ''AVc-Cf49qZYpQV_XCKMq'') : | '' => suggestions : ['\xa0»', '”']

204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
204 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
204 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']

206 Guillemets typographiques ouvrants. => <note important>La méthode ''PUT'' doit **obligatoirement** avoir un ID. En effet, cette requête : | '' => suggestions : ['«\xa0', '“']
206 Guillemets typographiques fermants. => <note important>La méthode ''PUT'' doit **obligatoirement** avoir un ID. En effet, cette requête : | '' => suggestions : ['\xa0»', '”']

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le numéro de version a été incrémenté d'un cran (donc passe à 2) |    => suggestions : ['']

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''créé'' à FAUX (l'enregistrement existé déjà) |    => suggestions : ['']
227 Guillemets typographiques ouvrants. =>   * Le type ''créé'' à FAUX (l'enregistrement existé déjà) | '' => suggestions : ['«\xa0', '“']
227 Guillemets typographiques fermants. =>   * Le type ''créé'' à FAUX (l'enregistrement existé déjà) | '' => suggestions : ['\xa0»', '”']

228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
228 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
228 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"1","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']

239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']
239 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['«\xa0', '“']
239 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"AVc-Cf49qZYpQV_XCKMq","_version":2,"created":false}</code> | " => suggestions : ['\xa0»', '”']

243 Guillemets typographiques ouvrants. => Maintenant que nous avons créé et modifié des enregistrements, il est facilement possible de les récupérer via la méthode ''GET'' en utilisant uniquement les IDs. Par exemple, pour récupérer notre premier film : | '' => suggestions : ['«\xa0', '“']
243 Mot inconnu : GET => Maintenant que nous avons créé et modifié des enregistrements, il est facilement possible de les récupérer via la méthode ''GET'' en utilisant uniquement les IDs. Par exemple, pour récupérer notre premier film : | get
243 Guillemets typographiques fermants. => Maintenant que nous avons créé et modifié des enregistrements, il est facilement possible de les récupérer via la méthode ''GET'' en utilisant uniquement les IDs. Par exemple, pour récupérer notre premier film : | '' => suggestions : ['\xa0»', '”']
243 Mot inconnu : IDs => Maintenant que nous avons créé et modifié des enregistrements, il est facilement possible de les récupérer via la méthode ''GET'' en utilisant uniquement les IDs. Par exemple, pour récupérer notre premier film : | ids
244 Il manque un espace à côté du tiret. => <code bash>curl -XGET "http://localhost:9200/movies/movie/1"</code> |  - => suggestions : [' – ', ' — ']
244 Guillemets typographiques ouvrants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/1"</code> | " => suggestions : ['«\xa0', '“']
244 Guillemets typographiques fermants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/1"</code> | " => suggestions : ['\xa0»', '”']

246 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le dernier numéro de version |    => suggestions : ['']

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''found'' à VRAI (l'enregistrement existe) |    => suggestions : ['']
247 Guillemets typographiques ouvrants. =>   * Le type ''found'' à VRAI (l'enregistrement existe) | '' => suggestions : ['«\xa0', '“']
247 Mot inconnu : found =>   * Le type ''found'' à VRAI (l'enregistrement existe) | found
247 Guillemets typographiques fermants. =>   * Le type ''found'' à VRAI (l'enregistrement existe) | '' => suggestions : ['\xa0»', '”']

248 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les donnée sources indexées en JSON sont retournées telles qu'elles |    => suggestions : ['']
248 Accord de nombre erroné : « donnée » devrait être au pluriel. =>   * Les donnée sources indexées en JSON sont retournées telles qu'elles | donnée => suggestions : ['données']
258 Il manque un espace à côté du tiret. => <code bash>curl -XGET "http://localhost:9200/movies/movie/19"</code> |  - => suggestions : [' – ', ' — ']
258 Guillemets typographiques ouvrants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/19"</code> | " => suggestions : ['«\xa0', '“']
258 Guillemets typographiques fermants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/19"</code> | " => suggestions : ['\xa0»', '”']

260 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) |    => suggestions : ['']
260 Guillemets typographiques ouvrants. =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | '' => suggestions : ['«\xa0', '“']
260 Mot inconnu : found =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | found
260 Guillemets typographiques fermants. =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | '' => suggestions : ['\xa0»', '”']

261 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Aucune données source JSON n'est renvoyée |    => suggestions : ['']
261 Accord de nombre erroné : « données » devrait être au singulier. =>   * Aucune données source JSON n'est renvoyée | données => suggestions : ['donnée']

262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']
262 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['«\xa0', '“']
262 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"19","found":false}</code> | " => suggestions : ['\xa0»', '”']

264 Mot inconnu : Supression => ===Supression=== | supression

266 Mot inconnu : DELETE => Pour effacer un enregistrement, il suffit de connaitre son ID et d'utiliser la méthode DELETE. On a donc une commande assez proche de la lecture: | delete
267 Il manque un espace à côté du tiret. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> |  - => suggestions : [' – ', ' — ']
267 Guillemets typographiques ouvrants. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['«\xa0', '“']
267 Guillemets typographiques fermants. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['\xa0»', '”']

269 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''found'' à VRAI (l'enregistrement existe) |    => suggestions : ['']
269 Guillemets typographiques ouvrants. =>   * Le type ''found'' à VRAI (l'enregistrement existe) | '' => suggestions : ['«\xa0', '“']
269 Mot inconnu : found =>   * Le type ''found'' à VRAI (l'enregistrement existe) | found
269 Guillemets typographiques fermants. =>   * Le type ''found'' à VRAI (l'enregistrement existe) | '' => suggestions : ['\xa0»', '”']

270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
270 Guillemets typographiques ouvrants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['«\xa0', '“']
270 Guillemets typographiques fermants. => <code bash>{"found":true,"_index":"movies","_type":"movie","_id":"2","_version":2}</code> | " => suggestions : ['\xa0»', '”']
273 Il manque un espace à côté du tiret. => <code bash>curl -XGET "http://localhost:9200/movies/movie/2"</code> |  - => suggestions : [' – ', ' — ']
273 Guillemets typographiques ouvrants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['«\xa0', '“']
273 Guillemets typographiques fermants. => <code bash>curl -XGET "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['\xa0»', '”']

275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']
275 Guillemets typographiques ouvrants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['«\xa0', '“']
275 Guillemets typographiques fermants. => <code bash>{"_index":"movies","_type":"movie","_id":"2","found":false}</code> | " => suggestions : ['\xa0»', '”']

277 Accord de genre erroné : « enregistrement » est masculin. => Donc, si on redemande à supprimer cette enregistrement une 2nd foix: | cette => suggestions : ['cet']
277 Nombre ordinal. Second : 2ᵈ. Seconde : 2ᵈᵉ. Seconds : 2ᵈˢ. Secondes : 2ᵈᵉˢ. => Donc, si on redemande à supprimer cette enregistrement une 2nd foix: | 2nd => suggestions : ['2ᵈ']
277 Mot inconnu : foix => Donc, si on redemande à supprimer cette enregistrement une 2nd foix: | foix
278 Il manque un espace à côté du tiret. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> |  - => suggestions : [' – ', ' — ']
278 Guillemets typographiques ouvrants. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['«\xa0', '“']
278 Guillemets typographiques fermants. => <code bash>curl -XDELETE "http://localhost:9200/movies/movie/2"</code> | " => suggestions : ['\xa0»', '”']

279 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => On reçoit en réponse quelque chose de similaire à la 1ère suppression, mais : | 1ère => suggestions : ['1ʳᵉ']

280 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) |    => suggestions : ['']
280 Guillemets typographiques ouvrants. =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | '' => suggestions : ['«\xa0', '“']
280 Mot inconnu : found =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | found
280 Guillemets typographiques fermants. =>   * Le type ''found'' à FAUX (l'enregistrement n'existe pas) | '' => suggestions : ['\xa0»', '”']

281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']
281 Guillemets typographiques ouvrants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['«\xa0', '“']
281 Guillemets typographiques fermants. => <code bash>{"found":false,"_index":"movies","_type":"movie","_id":"2","_version":3}</code> | " => suggestions : ['\xa0»', '”']

336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : _index => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | _index
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : movies => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | movies
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : _type => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | _type
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : movie => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | movie
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : _id => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | _id
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : _version => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | _version
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Guillemets typographiques ouvrants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['«\xa0', '“']
336 Mot inconnu : created => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | created
336 Guillemets typographiques fermants. => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | " => suggestions : ['\xa0»', '”']
336 Mot inconnu : true => {"_index":"movies","_type":"movie","_id":"6","_version":1,"created":true}</code> | true

340 Mot inconnu : _search => Le mot clé **_search** se place à la fin d'un chemin pour rechercher tous les enregistrements au niveau du chemin. | _search

342 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les indexes et types confondus : <code bash>curl -XGET "http://localhost:9200/_search"</code> |    => suggestions : ['']
342 Incohérence. Ceci est un verbe à la 2ᵉ personne du singulier. Sujet (“tu” ou “toi qui”) introuvable. =>   * Les indexes et types confondus : <code bash>curl -XGET "http://localhost:9200/_search"</code> | indexes => suggestions : ['indexe']
342 Il manque un espace à côté du tiret. =>   * Les indexes et types confondus : <code bash>curl -XGET "http://localhost:9200/_search"</code> |  - => suggestions : [' – ', ' — ']
342 Guillemets typographiques ouvrants. =>   * Les indexes et types confondus : <code bash>curl -XGET "http://localhost:9200/_search"</code> | " => suggestions : ['«\xa0', '“']
342 Guillemets typographiques fermants. =>   * Les indexes et types confondus : <code bash>curl -XGET "http://localhost:9200/_search"</code> | " => suggestions : ['\xa0»', '”']

343 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les types d'un index précis : <code bash>curl -XGET "http://localhost:9200/movies/_search"</code> |    => suggestions : ['']
343 Il manque un espace à côté du tiret. =>   * Les types d'un index précis : <code bash>curl -XGET "http://localhost:9200/movies/_search"</code> |  - => suggestions : [' – ', ' — ']
343 Guillemets typographiques ouvrants. =>   * Les types d'un index précis : <code bash>curl -XGET "http://localhost:9200/movies/_search"</code> | " => suggestions : ['«\xa0', '“']
343 Guillemets typographiques fermants. =>   * Les types d'un index précis : <code bash>curl -XGET "http://localhost:9200/movies/_search"</code> | " => suggestions : ['\xa0»', '”']

344 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les ID liés à un coupleindexe/type précis : <code bash>curl -XGET "http://localhost:9200/movies/movie/_search"</code> |    => suggestions : ['']
344 Mot inconnu : coupleindexe =>   * Les ID liés à un coupleindexe/type précis : <code bash>curl -XGET "http://localhost:9200/movies/movie/_search"</code> | coupleindexe
344 Il manque un espace à côté du tiret. =>   * Les ID liés à un coupleindexe/type précis : <code bash>curl -XGET "http://localhost:9200/movies/movie/_search"</code> |  - => suggestions : [' – ', ' — ']
344 Guillemets typographiques ouvrants. =>   * Les ID liés à un coupleindexe/type précis : <code bash>curl -XGET "http://localhost:9200/movies/movie/_search"</code> | " => suggestions : ['«\xa0', '“']
344 Guillemets typographiques fermants. =>   * Les ID liés à un coupleindexe/type précis : <code bash>curl -XGET "http://localhost:9200/movies/movie/_search"</code> | " => suggestions : ['\xa0»', '”']

345 Accord de nombre erroné : « seuls » devrait être au singulier. => Comme nous n'avons qu'un seuls type et un seul index, le résultat sera sensiblement le même : | seuls => suggestions : ['seul']

392 Mot inconnu : requète => Il est possible d'adjoindre une requète au format JSON après le mot-clé _search pour affiner les résultats. Il faut placer dans la requète les mots clés : | requète
392 Mot inconnu : _search => Il est possible d'adjoindre une requète au format JSON après le mot-clé _search pour affiner les résultats. Il faut placer dans la requète les mots clés : | _search
392 Mot inconnu : requète => Il est possible d'adjoindre une requète au format JSON après le mot-clé _search pour affiner les résultats. Il faut placer dans la requète les mots clés : | requète

393 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''query'' pour indiquer que l'on passe une requète |    => suggestions : ['']
393 Guillemets typographiques ouvrants. =>   * ''query'' pour indiquer que l'on passe une requète | '' => suggestions : ['«\xa0', '“']
393 Mot inconnu : query =>   * ''query'' pour indiquer que l'on passe une requète | query
393 Guillemets typographiques fermants. =>   * ''query'' pour indiquer que l'on passe une requète | '' => suggestions : ['\xa0»', '”']
393 Mot inconnu : requète =>   * ''query'' pour indiquer que l'on passe une requète | requète

394 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''query_string'' pour indiquer que l'on recherche du texte |    => suggestions : ['']
394 Guillemets typographiques ouvrants. =>   * ''query_string'' pour indiquer que l'on recherche du texte | '' => suggestions : ['«\xa0', '“']
394 Mot inconnu : query_string =>   * ''query_string'' pour indiquer que l'on recherche du texte | query_string
394 Guillemets typographiques fermants. =>   * ''query_string'' pour indiquer que l'on recherche du texte | '' => suggestions : ['\xa0»', '”']

395 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''query : <MOTS CLES>'' pour indiquer que l'on recherche tout les textes contenant les mots clés |    => suggestions : ['']
395 Guillemets typographiques ouvrants. =>   * ''query : <MOTS CLES>'' pour indiquer que l'on recherche tout les textes contenant les mots clés | '' => suggestions : ['«\xa0', '“']
395 Mot inconnu : query =>   * ''query : <MOTS CLES>'' pour indiquer que l'on recherche tout les textes contenant les mots clés | query
395 Erreur d’accord probable avec « les textes ». =>   * ''query : <MOTS CLES>'' pour indiquer que l'on recherche tout les textes contenant les mots clés | tout => suggestions : ['tous']

397 Guillemets typographiques ouvrants. => Par exemple, pour rechercher tous les films contenant le mot "kill", il faut faire : | " => suggestions : ['«\xa0', '“']
397 Mot inconnu : kill => Par exemple, pour rechercher tous les films contenant le mot "kill", il faut faire : | kill
397 Guillemets typographiques fermants. => Par exemple, pour rechercher tous les films contenant le mot "kill", il faut faire : | " => suggestions : ['\xa0»', '”']

422 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> |    => suggestions : ['']
422 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> |  -  => suggestions : [' – ', ' — ', ' − ']
422 Guillemets typographiques ouvrants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['«\xa0', '“']
422 Guillemets typographiques fermants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['\xa0»', '”']
422 Guillemets typographiques ouvrants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['«\xa0', '“']
422 Guillemets typographiques fermants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['\xa0»', '”']
422 Guillemets typographiques ouvrants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['«\xa0', '“']
422 Guillemets typographiques fermants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['\xa0»', '”']
422 Guillemets typographiques ouvrants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['«\xa0', '“']
422 Guillemets typographiques fermants. =>   - Les informations sur l'exécution de la requête. <code bash>"_shards":{"total":1,"successful":1,"failed":0}</code> | " => suggestions : ['\xa0»', '”']

423 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> |    => suggestions : ['']
423 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> |  -  => suggestions : [' – ', ' — ', ' − ']
423 Guillemets typographiques ouvrants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['«\xa0', '“']
423 Guillemets typographiques fermants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['\xa0»', '”']
423 Guillemets typographiques ouvrants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['«\xa0', '“']
423 Guillemets typographiques fermants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['\xa0»', '”']
423 Guillemets typographiques ouvrants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['«\xa0', '“']
423 Guillemets typographiques fermants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['\xa0»', '”']
423 Guillemets typographiques ouvrants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['«\xa0', '“']
423 Guillemets typographiques fermants. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | " => suggestions : ['\xa0»', '”']
423 Typographie : points de suspension. Utilisez le caractère dédié. =>   - Les informations générales sur les résultats. <code bash>"hits":{"total":2,"max_score":0.5772806,"hits":[...]</code> | ... => suggestions : ['…']

434 Guillemets typographiques ouvrants. => En ajoutant la balise ''fields : <NOM DU CHAMP>'', il est possible d'avoir tout le texte mais venant d'un champ précis. | '' => suggestions : ['«\xa0', '“']
434 Mot inconnu : fields => En ajoutant la balise ''fields : <NOM DU CHAMP>'', il est possible d'avoir tout le texte mais venant d'un champ précis. | fields

436 Guillemets typographiques ouvrants. => Ainsi, pour avoir tous les titres contenant le mot "ford" : | " => suggestions : ['«\xa0', '“']
436 Mot inconnu : ford => Ainsi, pour avoir tous les titres contenant le mot "ford" : | ford
436 Guillemets typographiques fermants. => Ainsi, pour avoir tous les titres contenant le mot "ford" : | " => suggestions : ['\xa0»', '”']

458 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''filter'' pour indiquer un filtre |    => suggestions : ['']
458 Guillemets typographiques ouvrants. =>   * ''filter'' pour indiquer un filtre | '' => suggestions : ['«\xa0', '“']
458 Mot inconnu : filter =>   * ''filter'' pour indiquer un filtre | filter
458 Guillemets typographiques fermants. =>   * ''filter'' pour indiquer un filtre | '' => suggestions : ['\xa0»', '”']

459 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''term'' pour indiquer les termes des conditions |    => suggestions : ['']
459 Guillemets typographiques ouvrants. =>   * ''term'' pour indiquer les termes des conditions | '' => suggestions : ['«\xa0', '“']
459 Mot inconnu : term =>   * ''term'' pour indiquer les termes des conditions | term
459 Guillemets typographiques fermants. =>   * ''term'' pour indiquer les termes des conditions | '' => suggestions : ['\xa0»', '”']

460 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Au moins un couple ''"<CHAMP>" : <VALEUR>'' pour indiquer les valeurs des champs à filtrer |    => suggestions : ['']

462 Accord de nombre erroné : « film » devrait être au pluriel. => Ainsi, pour avoir tous les film marqués comme des drames sortis en 1962, on aura : | film => suggestions : ['films']

530 Mot inconnu : query => <note>La différence entre query et filter est assez subtile : | query
530 Mot inconnu : filter => <note>La différence entre query et filter est assez subtile : | filter

531 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **query** fait une recherche élargie : tout enregistrement correspondant partiellement à la requête sera retourné. Ce genre de recherche est donc plus lent. Il est utile pour faire les recherches à partir de champs saisis par un utilisateurs. |    => suggestions : ['']
531 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * **query** fait une recherche élargie : tout enregistrement correspondant partiellement à la requête sera retourné. Ce genre de recherche est donc plus lent. Il est utile pour faire les recherches à partir de champs saisis par un utilisateurs. | query => suggestions : ['Query']
531 Mot inconnu : query =>   * **query** fait une recherche élargie : tout enregistrement correspondant partiellement à la requête sera retourné. Ce genre de recherche est donc plus lent. Il est utile pour faire les recherches à partir de champs saisis par un utilisateurs. | query
531 Accord de nombre erroné avec « utilisateurs ». =>   * **query** fait une recherche élargie : tout enregistrement correspondant partiellement à la requête sera retourné. Ce genre de recherche est donc plus lent. Il est utile pour faire les recherches à partir de champs saisis par un utilisateurs. | un => suggestions : ['uns']
531 Accord de nombre erroné avec « un ». =>   * **query** fait une recherche élargie : tout enregistrement correspondant partiellement à la requête sera retourné. Ce genre de recherche est donc plus lent. Il est utile pour faire les recherches à partir de champs saisis par un utilisateurs. | utilisateurs => suggestions : ['utilisateur']

532 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **filter** fait une recherche stricte : un document ne ressortira que s'il correspond rigoureusement à tous les critères. Ce genre de recherche est donc plus rapide. Il est utile pour rajouter des contraintes qui seront fixés par le système plus que par l'utilisateur. |    => suggestions : ['']
532 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * **filter** fait une recherche stricte : un document ne ressortira que s'il correspond rigoureusement à tous les critères. Ce genre de recherche est donc plus rapide. Il est utile pour rajouter des contraintes qui seront fixés par le système plus que par l'utilisateur. | filter => suggestions : ['Filter']
532 Mot inconnu : filter =>   * **filter** fait une recherche stricte : un document ne ressortira que s'il correspond rigoureusement à tous les critères. Ce genre de recherche est donc plus rapide. Il est utile pour rajouter des contraintes qui seront fixés par le système plus que par l'utilisateur. | filter

533 Accord de genre erroné entre « requêtes » et « adaptés ». => Il faut donc bien réfléchir à la façon dont seront faites les recherches et concevoir les requêtes les plus adaptés au contexte. | adaptés => suggestions : ['adaptées']

537 Mot inconnu : Mapping => ===Mapping=== | mapping

539 Mot inconnu : Coppola => Si l'on tente de rechercher tous les films de Francis Ford Coppola : | coppola

551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']
551 Guillemets typographiques ouvrants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['«\xa0', '“']
551 Guillemets typographiques fermants. => <code bash>{"took":2,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</code> | " => suggestions : ['\xa0»', '”']

553 Mot inconnu : Elasticsearch => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | elasticsearch
553 Mot inconnu : Lucene => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | lucene
553 Mot inconnu : Lucene => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | lucene
553 Guillemets typographiques ouvrants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['«\xa0', '“']
553 Mot inconnu : francis => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | francis
553 Guillemets typographiques fermants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['\xa0»', '”']
553 Guillemets typographiques ouvrants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['«\xa0', '“']
553 Mot inconnu : ford => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | ford
553 Guillemets typographiques fermants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['\xa0»', '”']
553 Guillemets typographiques ouvrants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['«\xa0', '“']
553 Mot inconnu : coppola => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | coppola
553 Guillemets typographiques fermants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['\xa0»', '”']
553 Guillemets typographiques ouvrants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['«\xa0', '“']
553 Mot inconnu : Coppola => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | coppola
553 Guillemets typographiques fermants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | " => suggestions : ['\xa0»', '”']
553 Guillemets typographiques ouvrants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | '' => suggestions : ['«\xa0', '“']
553 Mot inconnu : _source => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | _source
553 Guillemets typographiques fermants. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | '' => suggestions : ['\xa0»', '”']
553 Accord de nombre erroné avec « les données » : « indexée » devrait être au pluriel. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | indexée => suggestions : ['indexées']
553 Accord avec la forme verbale “sont” : “recherchée” devrait être au pluriel. => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | recherchée => suggestions : ['recherchées']
553 Mot inconnu : Elasticsearch => En effet, Elasticsearch indexe les champs en utilisant le service Apache Lucene. Lucene décompose le champ en une série de mots. Ici, on a les 3 mots "francis", "ford" et "coppola". Le champ original "Francis Ford Coppola" est conservée sous la forme d'une ''_source'' mais qui n'est pas indexée. Or, comme seules les données indexée sont recherchée par Elasticsearch, il faudrait avoir la requête : | elasticsearch

580 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * La méthode ''POST'' |    => suggestions : ['']
580 Guillemets typographiques ouvrants. =>   * La méthode ''POST'' | '' => suggestions : ['«\xa0', '“']
580 Guillemets typographiques fermants. =>   * La méthode ''POST'' | '' => suggestions : ['\xa0»', '”']

581 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le mot clé''_mapping'' une nouvelle forme d'indexation |    => suggestions : ['']
581 Mot inconnu : _mapping =>   * Le mot clé''_mapping'' une nouvelle forme d'indexation | _mapping
581 Guillemets typographiques fermants. =>   * Le mot clé''_mapping'' une nouvelle forme d'indexation | '' => suggestions : ['\xa0»', '”']

582 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le champ à réindexer |    => suggestions : ['']
582 Mot inconnu : réindexer =>   * Le champ à réindexer | réindexer

583 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source |    => suggestions : ['']
583 Mot inconnu : pararamètre =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source | pararamètre
583 Guillemets typographiques ouvrants. =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source | '' => suggestions : ['«\xa0', '“']
583 Mot inconnu : not_analyzed =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source | not_analyzed
583 Guillemets typographiques fermants. =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source | '' => suggestions : ['\xa0»', '”']
583 Accord de genre erroné : « champ » est masculin. =>   * Le pararamètre ''not_analyzed'' : pour indiquer une champ source | une => suggestions : ['un']

597 Mot inconnu : Elasticsearch => Toutefois, Elasticsearch supporte mal la modification des indexes créés par défaut : | elasticsearch
597 Incohérence avec « des » : « indexes » est un verbe. => Toutefois, Elasticsearch supporte mal la modification des indexes créés par défaut : | indexes => suggestions : ['indexé', 'indexés', 'indexée', 'indexées']

599 Mot inconnu : mapping => # new mapping creation</code></note> | mapping
599 Mot inconnu : creation => # new mapping creation</code></note> | creation

602 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Un ''type'' d'extension (ici multi-field) |    => suggestions : ['']
602 Guillemets typographiques ouvrants. =>   * Un ''type'' d'extension (ici multi-field) | '' => suggestions : ['«\xa0', '“']
602 Guillemets typographiques fermants. =>   * Un ''type'' d'extension (ici multi-field) | '' => suggestions : ['\xa0»', '”']
602 Mot inconnu : multi-field =>   * Un ''type'' d'extension (ici multi-field) | multi-field

603 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Une extension de nom pour l'index (ici ''original'') |    => suggestions : ['']
603 Guillemets typographiques ouvrants. =>   * Une extension de nom pour l'index (ici ''original'') | '' => suggestions : ['«\xa0', '“']
603 Guillemets typographiques fermants. =>   * Une extension de nom pour l'index (ici ''original'') | '' => suggestions : ['\xa0»', '”']

621 Guillemets typographiques ouvrants. => <code bash>{"acknowledged":true}</code> | " => suggestions : ['«\xa0', '“']
621 Guillemets typographiques fermants. => <code bash>{"acknowledged":true}</code> | " => suggestions : ['\xa0»', '”']

651 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://www.elastic.co/fr/products/elasticsearch|Site du projet]] sur [[https://www.elastic.co/fr|Elastic.co]] |    => suggestions : ['']
651 Mot inconnu : Elastic =>   * [[https://www.elastic.co/fr/products/elasticsearch|Site du projet]] sur [[https://www.elastic.co/fr|Elastic.co]] | elastic
651 Mot inconnu : co =>   * [[https://www.elastic.co/fr/products/elasticsearch|Site du projet]] sur [[https://www.elastic.co/fr|Elastic.co]] | co

652 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> |    => suggestions : ['']
652 Mot inconnu : How =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> | how
652 Mot inconnu : to =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> | to
652 Mot inconnu : install =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> | install
652 Mot inconnu : Elasticsearch =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> | elasticsearch
652 Incohérence avec “on” : “Ubuntu” devrait être un verbe, un pronom objet, un adverbe de négation, etc. =>   * [[https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-elasticsearch-on-ubuntu-16-04|How to install Elasticsearch on Ubuntu 16.04]]<sup>(en)</sup> | ubuntu => suggestions : []

653 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://hub.docker.com/_/elasticsearch]] image docker officielle |    => suggestions : ['']

654 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://grafikart.fr/tutoriels/elastic-search-626]]<sup>(fr)</sup> tutoriel (2015), 43mn |    => suggestions : ['']
654 Mot inconnu : mn =>   * [[https://grafikart.fr/tutoriels/elastic-search-626]]<sup>(fr)</sup> tutoriel (2015), 43mn | mn

655 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://joelabrahamsson.com/elasticsearch-101/|How to install Elasticsearch]]<sup>(en)</sup> |    => suggestions : ['']
655 Mot inconnu : How =>   * [[http://joelabrahamsson.com/elasticsearch-101/|How to install Elasticsearch]]<sup>(en)</sup> | how
655 Mot inconnu : to =>   * [[http://joelabrahamsson.com/elasticsearch-101/|How to install Elasticsearch]]<sup>(en)</sup> | to
655 Mot inconnu : install =>   * [[http://joelabrahamsson.com/elasticsearch-101/|How to install Elasticsearch]]<sup>(en)</sup> | install
655 Mot inconnu : Elasticsearch =>   * [[http://joelabrahamsson.com/elasticsearch-101/|How to install Elasticsearch]]<sup>(en)</sup> | elasticsearch
