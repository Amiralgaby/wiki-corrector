
5 Mot inconnu : MIPS => ======Ubuntu pour processeur MIPS====== <|> mips

7 Mot inconnu : MIPS => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : microprocessor => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> microprocessor
7 Mot inconnu : without => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> without
7 Mot inconnu : interlocked => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> interlocked
7 Mot inconnu : Reduced => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> reduced
7 Mot inconnu : RISC => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> risc
7 Mot inconnu : MIPS => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : MIPS => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : Systems => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> systems
7 Mot inconnu : Mountain => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mountain
7 Mot inconnu : View => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> view

9 Mot inconnu : MIPS => Les architectures MIPS sont 32-bit, et les versions contemporaines en 64-bit. <|> mips
11 Mot inconnu : Beryl => Voir en vidéo : [[https://www.youtube.com/watch?v=36TS5VSZzfY|Debian avec Beryl (compiz) sur un Loongson 2C ( ancienne version : 2007 )]] <|> beryl
11 Mot inconnu : compiz => Voir en vidéo : [[https://www.youtube.com/watch?v=36TS5VSZzfY|Debian avec Beryl (compiz) sur un Loongson 2C ( ancienne version : 2007 )]] <|> compiz
11 Mot inconnu : Loongson => Voir en vidéo : [[https://www.youtube.com/watch?v=36TS5VSZzfY|Debian avec Beryl (compiz) sur un Loongson 2C ( ancienne version : 2007 )]] <|> loongson
11 Pas d’espace après ce signe. => Voir en vidéo : [[https://www.youtube.com/watch?v=36TS5VSZzfY|Debian avec Beryl (compiz) sur un Loongson 2C ( ancienne version : 2007 )]] <|> (  => suggestions : ['(']
11 Pas d’espace avant ce signe. => Voir en vidéo : [[https://www.youtube.com/watch?v=36TS5VSZzfY|Debian avec Beryl (compiz) sur un Loongson 2C ( ancienne version : 2007 )]] <|>  ) => suggestions : [')']

13 Mot inconnu : Hennessy => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> hennessy
13 Mot inconnu : MIPS => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> mips
13 Mot inconnu : UMM => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> umm

15 Mot inconnu : MIPS => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|> mips
15 Accord avec la forme verbale “a” : “influents” devrait être au singulier. => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|> influents => suggestions : ['influent']
15 Espace(s) en fin de ligne à supprimer. => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|>   => suggestions : ['']

17 S’il s’agit d’une interrogation, il manque un trait d’union. => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> est ce => suggestions : ['Est-ce']
17 Mot inconnu : RISC => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> risc
17 Mot inconnu : MIPS => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> mips
17 Mot inconnu : X86 => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> x86

19 Mot inconnu : mips => Parmi les processeurs mips attendu :  <|> mips
19 Espace(s) en fin de ligne à supprimer. => Parmi les processeurs mips attendu :  <|>   => suggestions : ['']
20 Mot inconnu : mips =>   * Le processeur chinois [[https://en.wikipedia.org/wiki/Loongson|loogson]] (mips) basse consommation et performant. [[http://nextbigfuture.com/2010/08/china-will-make-godson-3b-128-gigaflop.html|Les prochaines versions du processeurs sont pour bientôt]] et sont **TRÈS puissant, économe en watt, et économique**.( 128 gigaflops a 8 cœurs, et 256 a 16 cœurs) <|> mips
20 Accord de nombre erroné : « processeurs » devrait être au singulier. =>   * Le processeur chinois [[https://en.wikipedia.org/wiki/Loongson|loogson]] (mips) basse consommation et performant. [[http://nextbigfuture.com/2010/08/china-will-make-godson-3b-128-gigaflop.html|Les prochaines versions du processeurs sont pour bientôt]] et sont **TRÈS puissant, économe en watt, et économique**.( 128 gigaflops a 8 cœurs, et 256 a 16 cœurs) <|> processeurs => suggestions : ['processeur']
20 Pas d’espace après ce signe. =>   * Le processeur chinois [[https://en.wikipedia.org/wiki/Loongson|loogson]] (mips) basse consommation et performant. [[http://nextbigfuture.com/2010/08/china-will-make-godson-3b-128-gigaflop.html|Les prochaines versions du processeurs sont pour bientôt]] et sont **TRÈS puissant, économe en watt, et économique**.( 128 gigaflops a 8 cœurs, et 256 a 16 cœurs) <|> (  => suggestions : ['(']
20 Mot inconnu : gigaflops =>   * Le processeur chinois [[https://en.wikipedia.org/wiki/Loongson|loogson]] (mips) basse consommation et performant. [[http://nextbigfuture.com/2010/08/china-will-make-godson-3b-128-gigaflop.html|Les prochaines versions du processeurs sont pour bientôt]] et sont **TRÈS puissant, économe en watt, et économique**.( 128 gigaflops a 8 cœurs, et 256 a 16 cœurs) <|> gigaflops

27 Mot inconnu : debian => Indisponible pour le moment, télécharger debian mips. <|> debian
27 Mot inconnu : mips => Indisponible pour le moment, télécharger debian mips. <|> mips
32 Mot inconnu : MIPS =>   * (en) [[https://en.wikipedia.org/wiki/MIPS_architecture|MIPS architecture]] <|> mips
36 Mot inconnu : MIPS =>   * [[https://www.debian.org/ports/mips/|Debian sur l'architecture MIPS]] / [[http://raphaelhertzog.com/2010/11/22/how-ubuntu-builds-up-on-debian/|How Ubuntu builds up on Debian]] <|> mips
36 Mot inconnu : How =>   * [[https://www.debian.org/ports/mips/|Debian sur l'architecture MIPS]] / [[http://raphaelhertzog.com/2010/11/22/how-ubuntu-builds-up-on-debian/|How Ubuntu builds up on Debian]] <|> how
36 Mot inconnu : up =>   * [[https://www.debian.org/ports/mips/|Debian sur l'architecture MIPS]] / [[http://raphaelhertzog.com/2010/11/22/how-ubuntu-builds-up-on-debian/|How Ubuntu builds up on Debian]] <|> up
36 Incohérence avec “on” : “Debian” devrait être un verbe, un pronom objet, un adverbe de négation, etc. =>   * [[https://www.debian.org/ports/mips/|Debian sur l'architecture MIPS]] / [[http://raphaelhertzog.com/2010/11/22/how-ubuntu-builds-up-on-debian/|How Ubuntu builds up on Debian]] <|> debian => suggestions : []
37 Mot inconnu : ubuntu-toolchain =>   * [[https://launchpad.net/~ubuntu-toolchain|Ubuntu Toolchain Hackers]] <|> ubuntu-toolchain
37 Mot inconnu : Toolchain =>   * [[https://launchpad.net/~ubuntu-toolchain|Ubuntu Toolchain Hackers]] <|> toolchain

39 Mot inconnu : GCC => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> gcc
39 Mot inconnu : Loongson => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson
39 Mot inconnu : Loongson => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson
39 Mot inconnu : GCC => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> gcc
39 Il manque un espace à côté du tiret. => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|>  - => suggestions : [' – ', ' — ']
39 Mot inconnu : march => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> march
39 Mot inconnu : loongson2f => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson2f
39 Il manque un espace à côté du tiret. => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|>  - => suggestions : [' – ', ' — ']
39 Mot inconnu : mtune => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> mtune
39 Mot inconnu : loongson2f => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson2f

41 Mot inconnu : MPlayer => Les applications Open source sur plate-forme Linux peuvent être portées simplement. Les applications open source les plus communes (comme OpenOffice.org, Mozilla Firefox, Pidgin, et MPlayer) et les applications écrites en Java sont supportées. <|> mplayer
