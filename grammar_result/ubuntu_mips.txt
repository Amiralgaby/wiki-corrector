
5 Mot inconnu : MIPS [[29:33]] => ======Ubuntu pour processeur MIPS====== <|> mips

7 Mot inconnu : MIPS [[15:19]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : microprocessor [[36:50]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> microprocessor
7 Mot inconnu : without [[51:58]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> without
7 Mot inconnu : interlocked [[59:70]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> interlocked
7 Mot inconnu : Reduced [[131:138]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> reduced
7 Mot inconnu : RISC [[165:169]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> risc
7 Mot inconnu : MIPS [[197:201]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : MIPS [[230:234]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mips
7 Mot inconnu : Systems [[244:251]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> systems
7 Mot inconnu : Mountain [[262:270]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> mountain
7 Mot inconnu : View [[271:275]] => L'architecture MIPS (de l'anglais : microprocessor without interlocked pipeline stages) est une architecture de processeur de type Reduced instruction set computer (RISC) développée par la société MIPS Technologies (alors appelée MIPS Computer Systems), basée à Mountain View en Californie. <|> view

9 Mot inconnu : MIPS [[18:22]] => Les architectures MIPS sont 32-bit, et les versions contemporaines en 64-bit. <|> mips

13 Mot inconnu : Hennessy [[40:48]] => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> hennessy
13 Mot inconnu : MIPS [[145:149]] => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> mips
13 Mot inconnu : UMM [[506:509]] => En 1981, une équipe dirigée par John L. Hennessy à l'Université Stanford a commencé à travailler sur ce qui allait devenir le premier processeur MIPS. Le concept de base était d'augmenter les performances grâce à l'utilisation des pipelines instruction profonde. Pipeline comme une technique de base était bien connue avant (voir IBM 801 par exemple), mais non développés dans son plein potentiel. CPU sont construits à partir d'un certain nombre de sous-unités dédiées tels que les décodeurs instruction, UMM (calcul en entiers et la logique), la charge / unités magasin (gestion de la mémoire), et ainsi de suite. Dans une conception traditionnelle de non-optimisé, une instruction particulière dans une séquence de programme doit être (presque) terminée avant la prochaine peut être émis pour l'exécution; dans une architecture pipeline, les instructions successives peuvent se chevauchent au lieu de l'exécution. Par exemple, à la fois un enseignement des mathématiques est introduit dans l'unité de virgule flottante, l'unité de chargement / stockage peut aller chercher la prochaine instruction. <|> umm

15 Mot inconnu : MIPS [[30:34]] => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|> mips
15 Accord avec la forme verbale “a” : “influents” devrait être au singulier. [[46:55]] => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|> influents => suggestions : ['influent']
15 Espace(s) en fin de ligne à supprimer. [[164:165]] => Depuis ce temps, le paradigme MIPS a été TRÈS influents, et presque chaque famille de processeur moderne fait un usage des concepts issus de la recherche originale.  <|>   => suggestions : ['']

17 S’il s’agit d’une interrogation, il manque un trait d’union. [[0:6]] => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> est ce => suggestions : ['Est-ce']
17 Mot inconnu : RISC [[14:18]] => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> risc
17 Mot inconnu : MIPS [[21:25]] => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> mips
17 Mot inconnu : X86 [[65:68]] => Est ce que le RISC / MIPS s'avérera au final plus puissant que l'X86 ? <|> x86

19 Mot inconnu : mips [[22:26]] => Parmi les processeurs mips attendu :  <|> mips
19 Espace(s) en fin de ligne à supprimer. [[36:37]] => Parmi les processeurs mips attendu :  <|>   => suggestions : ['']

27 Mot inconnu : debian [[41:47]] => Indisponible pour le moment, télécharger debian mips. <|> debian
27 Mot inconnu : mips [[48:52]] => Indisponible pour le moment, télécharger debian mips. <|> mips

39 Mot inconnu : GCC [[25:28]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> gcc
39 Mot inconnu : Loongson [[115:123]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson
39 Mot inconnu : Loongson [[160:168]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson
39 Mot inconnu : GCC [[188:191]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> gcc
39 Il manque un espace à côté du tiret. [[211:213]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|>  - => suggestions : [' – ', ' — ']
39 Mot inconnu : march [[213:218]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> march
39 Mot inconnu : loongson2f [[219:229]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson2f
39 Il manque un espace à côté du tiret. [[232:234]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|>  - => suggestions : [' – ', ' — ']
39 Mot inconnu : mtune [[234:239]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> mtune
39 Mot inconnu : loongson2f [[240:250]] => GNU Compiler Collection (GCC) est le principal compilateur utilisé dans le développement logiciel pour plate-forme Loongson. Des optimisations spécifiques pour Loongson ont été ajoutées à GCC 4.4;[8] les options -march=loongson2f et -mtune=loongson2f peuvent être utilisées pour bénéficier de l'optimisation. <|> loongson2f

41 Mot inconnu : MPlayer [[182:189]] => Les applications Open source sur plate-forme Linux peuvent être portées simplement. Les applications open source les plus communes (comme OpenOffice.org, Mozilla Firefox, Pidgin, et MPlayer) et les applications écrites en Java sont supportées. <|> mplayer
