
3 Mot inconnu : Unity => ====== Créer une loupe Unity ====== | unity

4 Mot inconnu : Quickly => <note warning>Quickly étant abandonné cette page est obsolète, il serait utile tout de même de la recycler pour proposer une autre methode pour créer des loupes</note> | quickly
4 Mot inconnu : methode => <note warning>Quickly étant abandonné cette page est obsolète, il serait utile tout de même de la recycler pour proposer une autre methode pour créer des loupes</note> | methode

5 Mot inconnu : Dash => Le Dash Unity propose une manière simple et conviviale de visionner du contenu intéressant. À l'aide des Loupes, il est désormais possible de rechercher une information en local et sur le Web. Dans cet article, nous apprendrons à construire facilement une loupe permettant de chercher confortablement un article de Wikipédia, directement depuis votre Bureau. | dash
5 Mot inconnu : Unity => Le Dash Unity propose une manière simple et conviviale de visionner du contenu intéressant. À l'aide des Loupes, il est désormais possible de rechercher une information en local et sur le Web. Dans cet article, nous apprendrons à construire facilement une loupe permettant de chercher confortablement un article de Wikipédia, directement depuis votre Bureau. | unity

12 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[precise|Ubuntu 12.04]] (ou version ultérieure: 12.10,13.04,...) |    => suggestions : ['']
12 Mot inconnu : precise =>   * [[precise|Ubuntu 12.04]] (ou version ultérieure: 12.10,13.04,...) | precise
12 Erreur de numérisation ? Virgules au lieu de points ? =>   * [[precise|Ubuntu 12.04]] (ou version ultérieure: 12.10,13.04,...) | ,... => suggestions : ['….']
12 Typographie : points de suspension. Utilisez le caractère dédié. =>   * [[precise|Ubuntu 12.04]] (ou version ultérieure: 12.10,13.04,...) | ... => suggestions : ['…']

18 Mot inconnu : quickly => quickly edit</code> | quickly
18 Mot inconnu : edit => quickly edit</code> | edit

19 Mot inconnu : Gedit => La dernière ligne de code ouvre Gedit avec trois fichiers. Nous ne nous occuperons que de ''<nowiki>__init__</nowiki>.py'', fermez les deux autres. | gedit
19 Mot inconnu : __init__ => La dernière ligne de code ouvre Gedit avec trois fichiers. Nous ne nous occuperons que de ''<nowiki>__init__</nowiki>.py'', fermez les deux autres. | __init__
19 Mot inconnu : py => La dernière ligne de code ouvre Gedit avec trois fichiers. Nous ne nous occuperons que de ''<nowiki>__init__</nowiki>.py'', fermez les deux autres. | py
19 Guillemets typographiques fermants. => La dernière ligne de code ouvre Gedit avec trois fichiers. Nous ne nous occuperons que de ''<nowiki>__init__</nowiki>.py'', fermez les deux autres. | '' => suggestions : ['\xa0»', '”']

21 Il manque un trait d’union. => Si vous préférez éditer votre projet avec votre éditeur préféré ou un IDE il vous suffit de remplacer les lignes ci dessus par les suivantes : | ci dessus => suggestions : ['ci-dessus']

25 Mot inconnu : emacs => emacs __init__.py</code> | emacs
25 Mot inconnu : __init__ => emacs __init__.py</code> | __init__
25 Mot inconnu : py => emacs __init__.py</code> | py

27 Mot inconnu : emacs => en remplaçant emacs par votre éditeur préféré . | emacs

29 Mot inconnu : Meta => La première chose que nous verrons est la classe Meta. Elle définit le comportement de la loupe : | meta

40 Guillemets typographiques ouvrants. => Une loupe doit faire partie d'une ou plusieurs catégories, qui sera utilisée ensuite pour séparer les différents résultats. Dans le cas de Wikipédia, nous aurons besoin d'une seule catégorie. Appelons-la "Articles". | " => suggestions : ['«\xa0', '“']
40 Guillemets typographiques fermants. => Une loupe doit faire partie d'une ou plusieurs catégories, qui sera utilisée ensuite pour séparer les différents résultats. Dans le cas de Wikipédia, nous aurons besoin d'une seule catégorie. Appelons-la "Articles". | " => suggestions : ['\xa0»', '”']

42 Pas de trait d’union. => En-dessous de la classe Meta, vous pouvez voir ceci : | en-dessous => suggestions : ['En dessous']
42 Mot inconnu : Meta => En-dessous de la classe Meta, vous pouvez voir ceci : | meta

47 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Renommez la variable en ''articles_category'', pour plus de clarté dans le code |    => suggestions : ['']
47 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Renommez la variable en ''articles_category'', pour plus de clarté dans le code |  -  => suggestions : [' – ', ' — ', ' − ']
47 Guillemets typographiques ouvrants. =>   - Renommez la variable en ''articles_category'', pour plus de clarté dans le code | '' => suggestions : ['«\xa0', '“']
47 Mot inconnu : articles_category =>   - Renommez la variable en ''articles_category'', pour plus de clarté dans le code | articles_category
47 Guillemets typographiques fermants. =>   - Renommez la variable en ''articles_category'', pour plus de clarté dans le code | '' => suggestions : ['\xa0»', '”']

48 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. |    => suggestions : ['']
48 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. |  -  => suggestions : [' – ', ' — ', ' − ']
48 Guillemets typographiques ouvrants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['«\xa0', '“']
48 Mot inconnu : ListView =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | listview
48 Guillemets typographiques fermants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['\xa0»', '”']
48 Guillemets typographiques ouvrants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['«\xa0', '“']
48 Mot inconnu : IconView =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | iconview
48 Guillemets typographiques fermants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['\xa0»', '”']
48 Accord de nombre erroné avec « deux manières » : « différente » devrait être au pluriel. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | différente => suggestions : ['différentes']
48 Guillemets typographiques ouvrants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['«\xa0', '“']
48 Mot inconnu : ListView =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | listview
48 Guillemets typographiques fermants. =>   - Nous devons choisir entre ''ListView'' et ''IconView'', qui sont deux manières différente de présenter les résultats. La première est une vue en liste, la deuxième une vue en icône. Nous garderons la vue par défaut : ''ListView''. | '' => suggestions : ['\xa0»', '”']

49 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Nous devons donner à notre catégorie un nom d'affichage. Ce sera ''Articles''. |    => suggestions : ['']
49 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Nous devons donner à notre catégorie un nom d'affichage. Ce sera ''Articles''. |  -  => suggestions : [' – ', ' — ', ' − ']
49 Guillemets typographiques ouvrants. =>   - Nous devons donner à notre catégorie un nom d'affichage. Ce sera ''Articles''. | '' => suggestions : ['«\xa0', '“']
49 Guillemets typographiques fermants. =>   - Nous devons donner à notre catégorie un nom d'affichage. Ce sera ''Articles''. | '' => suggestions : ['\xa0»', '”']

50 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' |    => suggestions : ['']
50 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' |  -  => suggestions : [' – ', ' — ', ' − ']
50 Mot inconnu : system =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' | system
50 Guillemets typographiques ouvrants. =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' | '' => suggestions : ['«\xa0', '“']
50 Mot inconnu : dialog-information-symbolic =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' | dialog-information-symbolic
50 Guillemets typographiques fermants. =>   - Pour finir, il faudra une icône pour l'en-tête, nous allons utiliser une icône déjà existante sur votre system : ''dialog-information-symbolic'' | '' => suggestions : ['\xa0»', '”']
56 Typographie : points de suspension. Utilisez le caractère dédié. => Maintenant que l'architecture de la loupe est prête, nous allons ajouter la fonction qu'elle est supposée remplir : la recherche. Le code par défaut illustre comment faire cela... | ... => suggestions : ['…']

69 Typographie : points de suspension. Utilisez le caractère dédié. => ...sauf que nous, on veut des résultats provenant de Wikipédia ! | ... => suggestions : ['…']

73 Mot inconnu : nomerons => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | nomerons
73 Guillemets typographiques ouvrants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['«\xa0', '“']
73 Mot inconnu : wikipedia_query => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | wikipedia_query
73 Guillemets typographiques fermants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['\xa0»', '”']
73 Mot inconnu : Dash => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | dash
73 Guillemets typographiques ouvrants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['«\xa0', '“']
73 Mot inconnu : urllib2 => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | urllib2
73 Guillemets typographiques fermants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['\xa0»', '”']
73 Guillemets typographiques ouvrants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['«\xa0', '“']
73 Mot inconnu : simplejson => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | simplejson
73 Guillemets typographiques fermants. => Nous la nomerons ''wikipedia_query'', ce qui semble approprié dans notre cas. Elle prendra en argument la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons également besoin de modules Python pour la recherche : ''urllib2'' pour la requête HTTP et ''simplejson'' pour parser les données renvoyées par Wikipédia. | '' => suggestions : ['\xa0»', '”']

80 Guillemets typographiques ouvrants. => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | '' => suggestions : ['«\xa0', '“']
80 Mot inconnu : WikipediaLens => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | wikipedialens
80 Il manque un espace avant la parenthèse. => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | ( => suggestions : [' (']
80 Mot inconnu : SingleScopeLens => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | singlescopelens
80 Guillemets typographiques ouvrants. => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | '' => suggestions : ['«\xa0', '“']
80 Guillemets typographiques fermants. => Ensuite, dans la classe ''WikipediaLens(SingleScopeLens)'', créez une variable ''wiki'', qui permettra de simplifier le code : | '' => suggestions : ['\xa0»', '”']

88 Guillemets typographiques ouvrants. => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | '' => suggestions : ['«\xa0', '“']
88 Mot inconnu : search => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | search
88 Guillemets typographiques fermants. => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | '' => suggestions : ['\xa0»', '”']
88 Mot inconnu : Dash => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | dash
88 Guillemets typographiques fermants. => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | '' => suggestions : ['\xa0»', '”']
88 Guillemets typographiques fermants. => L'argument ''search'' est la chaîne tapée par l'utilisateur dans la barre de recherche du Dash. Nous aurons besoin de la changer un peu avant de l'envoyer à Wikipédia, en remplaçant les espaces par le caractère ''|'' (barre verticale, en **''Alt Gr + 6''** sur un AZERTY et en **''Alt Gr + B''** sur un BÉPO), afin que Wikipédia comprenne la requête. | '' => suggestions : ['\xa0»', '”']

92 Mot inconnu : Opensearch => Créons maintenant la requête en utilisant l'API Opensearch de Wikipédia : | opensearch

96 Guillemets typographiques ouvrants. => Et stockons les résultats renvoyés dans une variable ''results''. Ces résultats sont envoyés en JSON, nous utiliserons doncle module simplejson pour le transformer en liste. | '' => suggestions : ['«\xa0', '“']
96 Mot inconnu : results => Et stockons les résultats renvoyés dans une variable ''results''. Ces résultats sont envoyés en JSON, nous utiliserons doncle module simplejson pour le transformer en liste. | results
96 Guillemets typographiques fermants. => Et stockons les résultats renvoyés dans une variable ''results''. Ces résultats sont envoyés en JSON, nous utiliserons doncle module simplejson pour le transformer en liste. | '' => suggestions : ['\xa0»', '”']
96 Mot inconnu : doncle => Et stockons les résultats renvoyés dans une variable ''results''. Ces résultats sont envoyés en JSON, nous utiliserons doncle module simplejson pour le transformer en liste. | doncle
96 Mot inconnu : simplejson => Et stockons les résultats renvoyés dans une variable ''results''. Ces résultats sont envoyés en JSON, nous utiliserons doncle module simplejson pour le transformer en liste. | simplejson

100 Mot inconnu : debug => Insérons une ligne de debug. Il s'agit d'un texte qui sera lisible si le script est ouvert dans une console. | debug

107 Guillemets typographiques ouvrants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['«\xa0', '“']
107 Mot inconnu : wikipedia_query => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | wikipedia_query
107 Guillemets typographiques fermants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['\xa0»', '”']
107 Guillemets typographiques ouvrants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['«\xa0', '“']
107 Mot inconnu : try => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | try
107 Guillemets typographiques fermants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['\xa0»', '”']
107 Guillemets typographiques ouvrants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['«\xa0', '“']
107 Mot inconnu : except => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | except
107 Guillemets typographiques fermants. => Notre fonction ''wikipedia_query'' devrait ressembler au code ci-dessous. On a ici ajouté un ''try'' et un ''except'' afin de prendre en compte des éventuelles erreurs qui pourraient survenir (erreur de réseau, erreur de transmission des résultats, etc.). S'il y a une erreur, un message s'affichera dans la console et une liste de résultats vide sera renvoyée: | '' => suggestions : ['\xa0»', '”']

117 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         return []</code> |          => suggestions : ['']
117 Mot inconnu : return =>         return []</code> | return

119 Guillemets typographiques ouvrants. => **Dès lors, tout ce que nous aurons à faire est de « brancher » cette nouvelle fonction à la fonction ''search'' définie plus haut.** | '' => suggestions : ['«\xa0', '“']
119 Mot inconnu : search => **Dès lors, tout ce que nous aurons à faire est de « brancher » cette nouvelle fonction à la fonction ''search'' définie plus haut.** | search
119 Guillemets typographiques fermants. => **Dès lors, tout ce que nous aurons à faire est de « brancher » cette nouvelle fonction à la fonction ''search'' définie plus haut.** | '' => suggestions : ['\xa0»', '”']
132 Guillemets typographiques ouvrants. => On pourrait traduire ce code par : « À chaque résultat renvoyé par la fonction ''wikipedia_query'', ajouter un article à la loupe ». | '' => suggestions : ['«\xa0', '“']
132 Mot inconnu : wikipedia_query => On pourrait traduire ce code par : « À chaque résultat renvoyé par la fonction ''wikipedia_query'', ajouter un article à la loupe ». | wikipedia_query
132 Guillemets typographiques fermants. => On pourrait traduire ce code par : « À chaque résultat renvoyé par la fonction ''wikipedia_query'', ajouter un article à la loupe ». | '' => suggestions : ['\xa0»', '”']

133 Guillemets typographiques ouvrants. => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | '' => suggestions : ['«\xa0', '“']
133 Mot inconnu : results => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | results
133 Il manque un espace. => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | append => suggestions : [' append']
133 Guillemets typographiques fermants. => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | '' => suggestions : ['\xa0»', '”']
133 Mot inconnu : comprende => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | comprende
133 Mot inconnu : Unity => Ce qui se passe dans ''results.append'' est très important pour comprende ce que nous pourront afficher dans une loupe. Voici ce dont nous avons besoin pour passer les résultats à Unity (**ne copiez pas ce code, il ne fonctionnera pas !**) : | unity

146 Mot inconnu : Dash => Vous pouvez maintenant faire apparaître votre loupe dans le Dash en tapant la commande suivante dans le Terminal : | dash

148 Typographie : points de suspension. Utilisez le caractère dédié. => ...et le démarrer en tapant : | ... => suggestions : ['…']

150 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   File "bin/wikipedia", line 30, in <module> |    => suggestions : ['']
150 Guillemets typographiques ouvrants. =>   File "bin/wikipedia", line 30, in <module> | " => suggestions : ['«\xa0', '“']
150 Mot inconnu : bin =>   File "bin/wikipedia", line 30, in <module> | bin
150 Mot inconnu : wikipedia =>   File "bin/wikipedia", line 30, in <module> | wikipedia
150 Guillemets typographiques fermants. =>   File "bin/wikipedia", line 30, in <module> | " => suggestions : ['\xa0»', '”']
150 Mot inconnu : line =>   File "bin/wikipedia", line 30, in <module> | line

151 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     from wikipedia import WikipediaLens |      => suggestions : ['']
151 Mot inconnu : from =>     from wikipedia import WikipediaLens | from
151 Mot inconnu : wikipedia =>     from wikipedia import WikipediaLens | wikipedia
151 Mot inconnu : WikipediaLens =>     from wikipedia import WikipediaLens | wikipedialens

152 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   File "/home/user/wikipedia/wikipedia/__init__.py", line 41 |    => suggestions : ['']
152 Mot inconnu : line =>   File "/home/user/wikipedia/wikipedia/__init__.py", line 41 | line

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Allez dans le répertoire contenant votre loupe et tapez  : |    => suggestions : ['']
159 Espace(s) surnuméraire(s) à supprimer. =>   * Allez dans le répertoire contenant votre loupe et tapez  : |    => suggestions : [' ']

174 Guillemets typographiques ouvrants. => Il vous suffit de retirer tous les fichiers (ici "fichier.ext") de votre répertoire . | " => suggestions : ['«\xa0', '“']
174 Mot inconnu : ext => Il vous suffit de retirer tous les fichiers (ici "fichier.ext") de votre répertoire . | ext
174 Guillemets typographiques fermants. => Il vous suffit de retirer tous les fichiers (ici "fichier.ext") de votre répertoire . | " => suggestions : ['\xa0»', '”']

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   *La seconde étape est d'installer votre projet . |    => suggestions : ['']

176 Guillemets typographiques ouvrants. => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | " => suggestions : ['«\xa0', '“']
176 Guillemets typographiques fermants. => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | " => suggestions : ['\xa0»', '”']
176 Mot inconnu : repertoire => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | repertoire
176 Après “être”, le verbe ne devrait pas être à l’infinitif. => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | situer => suggestions : ['situé', 'situés', 'située', 'situées']
176 Guillemets typographiques ouvrants. => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | " => suggestions : ['«\xa0', '“']
176 Guillemets typographiques fermants. => L'étape précédente créer un package "wikipedia_0.1_all.deb" pour l'installer il suffit de se placer dans le repertoire ou est situer "wikipedia_0.1_all.deb" et de taper la commande : | " => suggestions : ['\xa0»', '”']

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   |   => suggestions : ['']

179 Après “être”, le verbe ne devrait pas être à l’infinitif. => Et voila votre loupe est installer dans le dash unity. | installer => suggestions : ['installé', 'installée', 'installées', 'installés']
179 Mot inconnu : dash => Et voila votre loupe est installer dans le dash unity. | dash
179 Mot inconnu : unity => Et voila votre loupe est installer dans le dash unity. | unity

184 Espace(s) surnuméraire(s) à supprimer. => D'abord, la manière d'afficher les résultats n'est pas appropriée pour des résultats Wiki, nous n'avons pas besoin de voir  « Article Wikipédia » sur chaque résultat. Changeons la catégorie en ''IconView'' : |    => suggestions : [' ']
184 Guillemets typographiques ouvrants. => D'abord, la manière d'afficher les résultats n'est pas appropriée pour des résultats Wiki, nous n'avons pas besoin de voir  « Article Wikipédia » sur chaque résultat. Changeons la catégorie en ''IconView'' : | '' => suggestions : ['«\xa0', '“']
184 Mot inconnu : IconView => D'abord, la manière d'afficher les résultats n'est pas appropriée pour des résultats Wiki, nous n'avons pas besoin de voir  « Article Wikipédia » sur chaque résultat. Changeons la catégorie en ''IconView'' : | iconview
184 Guillemets typographiques fermants. => D'abord, la manière d'afficher les résultats n'est pas appropriée pour des résultats Wiki, nous n'avons pas besoin de voir  « Article Wikipédia » sur chaque résultat. Changeons la catégorie en ''IconView'' : | '' => suggestions : ['\xa0»', '”']

189 Écriture épicène. Utilisez un point médian. => Ensuite, vous aurez remarqué que seuls les résultats francophones sont affichés (du moins si ce tutoriel a été correctement adapté :P), ce qui est bien… si vous êtes sûr(e) que tous les utilisateurs de votre loupe parlent français ! Essayons de corriger cela en récupérant la langue de la session de l'utilisateur et demandons à Wikipédia à avoir des résultats dans cette langue uniquement.\\ | sûr(e) => suggestions : ['sûr·e']

194 Guillemets typographiques ouvrants. => Ensuite, dans la classe main, au-dessus de la variable ''wiki'', nous avons besoin de trouver la langue de l'utilisateur : | '' => suggestions : ['«\xa0', '“']
194 Guillemets typographiques fermants. => Ensuite, dans la classe main, au-dessus de la variable ''wiki'', nous avons besoin de trouver la langue de l'utilisateur : | '' => suggestions : ['\xa0»', '”']

199 Guillemets typographiques ouvrants. => ''loc'' est maintenant une variable contenant une chaîne comme « en », « fr », « de », etc. | '' => suggestions : ['«\xa0', '“']
199 Mot inconnu : loc => ''loc'' est maintenant une variable contenant une chaîne comme « en », « fr », « de », etc. | loc
199 Guillemets typographiques fermants. => ''loc'' est maintenant une variable contenant une chaîne comme « en », « fr », « de », etc. | '' => suggestions : ['\xa0»', '”']

200 Guillemets typographiques ouvrants. => Modifions notre variable ''wiki'' pour qu'elle utilise ''loc''. | '' => suggestions : ['«\xa0', '“']
200 Guillemets typographiques fermants. => Modifions notre variable ''wiki'' pour qu'elle utilise ''loc''. | '' => suggestions : ['\xa0»', '”']
200 Guillemets typographiques ouvrants. => Modifions notre variable ''wiki'' pour qu'elle utilise ''loc''. | '' => suggestions : ['«\xa0', '“']
200 Mot inconnu : loc => Modifions notre variable ''wiki'' pour qu'elle utilise ''loc''. | loc
200 Guillemets typographiques fermants. => Modifions notre variable ''wiki'' pour qu'elle utilise ''loc''. | '' => suggestions : ['\xa0»', '”']

204 Typographie : points de suspension. Utilisez le caractère dédié. => Et si nous redémarrons notre loupe... | ... => suggestions : ['…']

210 Mot inconnu : Dash => Ce tutoriel a permis de montrer la facilité avec laquelle on peut créer une loupe pour le Dash Unity, enrichissant ainsi l'expérience utilisateur d'Ubuntu et proposant une possibilité de chercher un article sur Wikipédia, depuis le Bureau ! | dash
210 Mot inconnu : Unity => Ce tutoriel a permis de montrer la facilité avec laquelle on peut créer une loupe pour le Dash Unity, enrichissant ainsi l'expérience utilisateur d'Ubuntu et proposant une possibilité de chercher un article sur Wikipédia, depuis le Bureau ! | unity

213 Mot inconnu : How => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | how
213 Mot inconnu : to => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | to
213 Mot inconnu : create => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | create
213 Mot inconnu : Wikipedia => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | wikipedia
213 Mot inconnu : Unity => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | unity
213 Mot inconnu : lens => Ce tutoriel est traduit et adapté de l'anglais depuis la page [[http://developer.ubuntu.com/2012/04/how-to-create-a-wikipedia-unity-lens-for-ubuntu/|How to create a Wikipedia Unity lens for Ubuntu]] du site [[http://www.ubuntu.com|ubuntu.com]]. | lens

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[unity|Unity : la nouvelle interface de bureau d'Ubuntu]] |    => suggestions : ['']
218 Mot inconnu : unity =>   * [[unity|Unity : la nouvelle interface de bureau d'Ubuntu]] | unity
218 Mot inconnu : Unity =>   * [[unity|Unity : la nouvelle interface de bureau d'Ubuntu]] | unity

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[unity-lens|Unity lens : les loupes (ou lentilles) de Unity]] |    => suggestions : ['']
219 Mot inconnu : unity-lens =>   * [[unity-lens|Unity lens : les loupes (ou lentilles) de Unity]] | unity-lens
219 Mot inconnu : Unity =>   * [[unity-lens|Unity lens : les loupes (ou lentilles) de Unity]] | unity
219 Mot inconnu : lens =>   * [[unity-lens|Unity lens : les loupes (ou lentilles) de Unity]] | lens
219 Mot inconnu : Unity =>   * [[unity-lens|Unity lens : les loupes (ou lentilles) de Unity]] | unity
