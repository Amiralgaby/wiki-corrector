
3 Mot inconnu : ADA [[21:24]] => ====== Programmer en ADA avec Ubuntu ====== <|> ada

8 Mot inconnu : GNAT [[34:38]] => ===== Installation du compilateur GNAT ==== <|> gnat

11 Mot inconnu : ADA [[86:89]] => Une fois ceci terminé, vous pouvez d'ores et déjà commencer à compiler vos programmes ADA de la façon suivante : <|> ada
19 Mot inconnu : ADA [[33:36]] => Exemple : j'ai mis mon programme ADA dans //Documents/IUT/ada//, donc je vais taper //cd Documents/IUT/ada//. <|> ada
19 Mot inconnu : ada [[103:106]] => Exemple : j'ai mis mon programme ADA dans //Documents/IUT/ada//, donc je vais taper //cd Documents/IUT/ada//. <|> ada

21 Mot inconnu : ADA [[42:45]] => La deuxième ligne compile votre programme ADA. <|> ada

23 Mot inconnu : GNAT [[103:107]] => La troisième ligne lance le résultat de la commande précédente, qui est le fichier exécutable créé par GNAT. Il a le même nom que votre fichier source sans le .adb . <|> gnat
23 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[158:160]] => La troisième ligne lance le résultat de la commande précédente, qui est le fichier exécutable créé par GNAT. Il a le même nom que votre fichier source sans le .adb . <|>  . => suggestions : .. 
23 Mot inconnu : adb [[160:163]] => La troisième ligne lance le résultat de la commande précédente, qui est le fichier exécutable créé par GNAT. Il a le même nom que votre fichier source sans le .adb . <|> adb

28 Mot inconnu : Editer [[4:10]] => === Editer un fichier dans Emacs === <|> editer
31 S’il s’agit de la préposition « à », il faut accentuer la majuscule. [[190:191]] => //Note : Si vous souhaitez ouvrir plusieurs fichiers à la fois il est conseillé d'utiliser le menu //File → Open File// dans Emacs plutôt que de lancer plusieurs fois la commande ci-dessus. A chaque fois que vous éxecutez cette commande le systéme va créer un nouveau processus ce qui nécessite pas mal de ressources s'il y a beaucoup de fichiers ouverts. Il convient mieux d'avoir un seul processus Emacs avec plusieurs fichiers ouverts à l'interieur.// <|> a => suggestions : À
31 Mot inconnu : éxecutez [[213:221]] => //Note : Si vous souhaitez ouvrir plusieurs fichiers à la fois il est conseillé d'utiliser le menu //File → Open File// dans Emacs plutôt que de lancer plusieurs fois la commande ci-dessus. A chaque fois que vous éxecutez cette commande le systéme va créer un nouveau processus ce qui nécessite pas mal de ressources s'il y a beaucoup de fichiers ouverts. Il convient mieux d'avoir un seul processus Emacs avec plusieurs fichiers ouverts à l'interieur.// <|> éxecutez
31 Mot inconnu : systéme [[240:247]] => //Note : Si vous souhaitez ouvrir plusieurs fichiers à la fois il est conseillé d'utiliser le menu //File → Open File// dans Emacs plutôt que de lancer plusieurs fois la commande ci-dessus. A chaque fois que vous éxecutez cette commande le systéme va créer un nouveau processus ce qui nécessite pas mal de ressources s'il y a beaucoup de fichiers ouverts. Il convient mieux d'avoir un seul processus Emacs avec plusieurs fichiers ouverts à l'interieur.// <|> systéme
31 Mot inconnu : interieur [[442:451]] => //Note : Si vous souhaitez ouvrir plusieurs fichiers à la fois il est conseillé d'utiliser le menu //File → Open File// dans Emacs plutôt que de lancer plusieurs fois la commande ci-dessus. A chaque fois que vous éxecutez cette commande le systéme va créer un nouveau processus ce qui nécessite pas mal de ressources s'il y a beaucoup de fichiers ouverts. Il convient mieux d'avoir un seul processus Emacs avec plusieurs fichiers ouverts à l'interieur.// <|> interieur
33 Mot inconnu : Tools [[60:65]] => Pour compiler avec Emacs, choisissez Compile dans le menu //Tools → Compile//. <|> tools

34 Mot inconnu : fenétre [[28:35]] => Dans le prompt en bas de la fenétre, tapez : <|> fenétre
38 Mot inconnu : ADA [[80:83]] => L'éditeur de texte par défaut de Ubuntu, Gedit reconnaît directement la syntaxe ADA. Pour le lancer Accessoires → Éditeur de texte. <|> ada
38 Accord de nombre erroné avec « le lancer » : « Accessoires » devrait être au singulier. [[100:111]] => L'éditeur de texte par défaut de Ubuntu, Gedit reconnaît directement la syntaxe ADA. Pour le lancer Accessoires → Éditeur de texte. <|> accessoires => suggestions : Accessoire
41 Mot inconnu : Adagide [[136:143]] => On va maintenant personnaliser un peu Gedit pour pouvoir compiler et lancer nos programmes directement depuis l'éditeur de texte (façon Adagide ;-) ). <|> adagide
41 Pas d’espace avant ce signe. [[147:149]] => On va maintenant personnaliser un peu Gedit pour pouvoir compiler et lancer nos programmes directement depuis l'éditeur de texte (façon Adagide ;-) ). <|>  ) => suggestions : )

45 Guillemets typographiques ouvrants. [[186:187]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> " => suggestions : « “
45 Mot inconnu : ADA [[199:202]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> ada
45 Guillemets typographiques fermants. [[202:203]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> " => suggestions :  »”
45 Guillemets typographiques ouvrants. [[243:244]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> " => suggestions : « “
45 Mot inconnu : ADA [[255:258]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> ada
45 Guillemets typographiques fermants. [[258:259]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> " => suggestions :  »”
45 Mot inconnu : Shortcut [[264:272]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> shortcut
45 Mot inconnu : Key [[273:276]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> key
45 Mot inconnu : F3 [[312:314]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> f3
45 Mot inconnu : Command [[327:334]] => Une fenêtre s'ouvre avec à droite la liste des commandes et à gauche leur descriptif. Créez tout d'abord une nouvelle commande en cliquant sur //Nouveau//, et appelez-la (à votre guise) "Compiler en ADA". Complétez les champs //Description// ("Compile en ADA"), //Shortcut Key// (Raccourci clavier, moi j'ai mis F3), et dans //Command//, collez ça : <|> command

47 Mot inconnu : GNAT [[48:52]] => Vous l'aurez compris, cette commande transmet à GNAT le document courant à compiler, avec le fichier exécutable (-o) dans executable. <|> gnat
47 Mot inconnu : executable [[122:132]] => Vous l'aurez compris, cette commande transmet à GNAT le document courant à compiler, avec le fichier exécutable (-o) dans executable. <|> executable

49 Mot inconnu : ADA [[93:96]] => Créez ensuite une seconde commande, remplissez les champs précédents (moi j'ai //Exécuter en ADA//, raccourci F4), et dans le champ //Command//: <|> ada
49 Mot inconnu : F4 [[110:112]] => Créez ensuite une seconde commande, remplissez les champs précédents (moi j'ai //Exécuter en ADA//, raccourci F4), et dans le champ //Command//: <|> f4
49 Mot inconnu : Command [[134:141]] => Créez ensuite une seconde commande, remplissez les champs précédents (moi j'ai //Exécuter en ADA//, raccourci F4), et dans le champ //Command//: <|> command

53 Mot inconnu : executable [[59:69]] => Cette commande envoie à //gnome-terminal// la commande //./executable//, notre programme ADA compilé précédemment, puis //read x// qui attend une action de l'utilisateur pour fermer le terminal. <|> executable
53 Mot inconnu : ADA [[89:92]] => Cette commande envoie à //gnome-terminal// la commande //./executable//, notre programme ADA compilé précédemment, puis //read x// qui attend une action de l'utilisateur pour fermer le terminal. <|> ada
53 Mot inconnu : read [[122:126]] => Cette commande envoie à //gnome-terminal// la commande //./executable//, notre programme ADA compilé précédemment, puis //read x// qui attend une action de l'utilisateur pour fermer le terminal. <|> read

55 Mot inconnu : F3 [[28:30]] => Vous n'avez plus qu'à taper F3 pour compiler, et F4 pour exécuter. <|> f3
55 Mot inconnu : F4 [[49:51]] => Vous n'avez plus qu'à taper F3 pour compiler, et F4 pour exécuter. <|> f4

57 Mot inconnu : Gnat [[10:14]] => ==== GPS (Gnat Programming Studio) ==== <|> gnat
57 Mot inconnu : Programming [[15:26]] => ==== GPS (Gnat Programming Studio) ==== <|> programming

58 Mot inconnu : AdaCore [[29:36]] => GPS est un IDE développé par AdaCore. Il permet notamment l'auto-complétion et le débogage. Il supporte nativement le langage ADA, mais également C, JavaScript, Pascal et Python. <|> adacore
58 Mot inconnu : ADA [[126:129]] => GPS est un IDE développé par AdaCore. Il permet notamment l'auto-complétion et le débogage. Il supporte nativement le langage ADA, mais également C, JavaScript, Pascal et Python. <|> ada

64 Avant « etc. », il faut mettre une virgule. [[142:147]] => Le gros intérêt de travailler avec GPS est qu'il s'agit d'un environnement intégré, genre Eclipse, qui donne directement les classes, méthodes etc.. par de l'auto-completion, en clair, il propose au terminaliste les différentes méthodes possibles. <|>  etc. => suggestions : , etc.
64 Typographie : un ou trois points ? [[146:148]] => Le gros intérêt de travailler avec GPS est qu'il s'agit d'un environnement intégré, genre Eclipse, qui donne directement les classes, méthodes etc.. par de l'auto-completion, en clair, il propose au terminaliste les différentes méthodes possibles. <|> .. => suggestions : .…
64 Mot inconnu : auto-completion [[158:173]] => Le gros intérêt de travailler avec GPS est qu'il s'agit d'un environnement intégré, genre Eclipse, qui donne directement les classes, méthodes etc.. par de l'auto-completion, en clair, il propose au terminaliste les différentes méthodes possibles. <|> auto-completion
64 Mot inconnu : terminaliste [[199:211]] => Le gros intérêt de travailler avec GPS est qu'il s'agit d'un environnement intégré, genre Eclipse, qui donne directement les classes, méthodes etc.. par de l'auto-completion, en clair, il propose au terminaliste les différentes méthodes possibles. <|> terminaliste

71 Mot inconnu : GNAT [[24:28]] => Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez : <|> gnat
71 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[46:48]] => Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez : <|>  . => suggestions : .. 
71 Mot inconnu : ali [[48:51]] => Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez : <|> ali
71 Une de ces ponctuations est superflue. [[51:54]] => Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez : <|> , . => suggestions : ,.
71 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). [[52:54]] => Lors de la compilation, GNAT crée des fichiers .ali, .o et un fichier exécutable. Si vous désirez nettoyer votre répertoire, tapez : <|>  . => suggestions : .. 

75 Mot inconnu : GNAT [[41:45]] => dans le répertoire de vos programmes, et GNAT supprimera tous les fichiers à l'exception de vos sources (.adb). <|> gnat
75 Mot inconnu : adb [[106:109]] => dans le répertoire de vos programmes, et GNAT supprimera tous les fichiers à l'exception de vos sources (.adb). <|> adb

78 Mot inconnu : APIs [[19:23]] => ===== Utiliser des APIs, IHM et autres ===== <|> apis

79 Mot inconnu : tasking [[172:179]] => Le langage est extrêmement riche et la dernière norme 2012 (à venir 2022) embarque nativement de nombreuses fonctionnalités comme la généricité, la programmation objet, le tasking et le temps réel, la garantie de précision des calculs, la possibilité de manipuler de façon sure différents alphabets et codages, la manipulation de très grandes chaînes de caractères et aussi des containers qui fournissent tout un tas de choses utiles au programmeur, comme des listes doublement chaînées avec index par ex. Tout ceci est natif au langage qui garantit sa norme, ce qui veut dire qu'une implémentation qui s'appelle "ada" doit garantir sa norme et rien que sa norme, la norme interdisant d'y ajouter quoique ce soit de sa propre initiative. <|> tasking
79 Guillemets typographiques ouvrants. [[613:614]] => Le langage est extrêmement riche et la dernière norme 2012 (à venir 2022) embarque nativement de nombreuses fonctionnalités comme la généricité, la programmation objet, le tasking et le temps réel, la garantie de précision des calculs, la possibilité de manipuler de façon sure différents alphabets et codages, la manipulation de très grandes chaînes de caractères et aussi des containers qui fournissent tout un tas de choses utiles au programmeur, comme des listes doublement chaînées avec index par ex. Tout ceci est natif au langage qui garantit sa norme, ce qui veut dire qu'une implémentation qui s'appelle "ada" doit garantir sa norme et rien que sa norme, la norme interdisant d'y ajouter quoique ce soit de sa propre initiative. <|> " => suggestions : « “
79 Mot inconnu : ada [[614:617]] => Le langage est extrêmement riche et la dernière norme 2012 (à venir 2022) embarque nativement de nombreuses fonctionnalités comme la généricité, la programmation objet, le tasking et le temps réel, la garantie de précision des calculs, la possibilité de manipuler de façon sure différents alphabets et codages, la manipulation de très grandes chaînes de caractères et aussi des containers qui fournissent tout un tas de choses utiles au programmeur, comme des listes doublement chaînées avec index par ex. Tout ceci est natif au langage qui garantit sa norme, ce qui veut dire qu'une implémentation qui s'appelle "ada" doit garantir sa norme et rien que sa norme, la norme interdisant d'y ajouter quoique ce soit de sa propre initiative. <|> ada
79 Guillemets typographiques fermants. [[617:618]] => Le langage est extrêmement riche et la dernière norme 2012 (à venir 2022) embarque nativement de nombreuses fonctionnalités comme la généricité, la programmation objet, le tasking et le temps réel, la garantie de précision des calculs, la possibilité de manipuler de façon sure différents alphabets et codages, la manipulation de très grandes chaînes de caractères et aussi des containers qui fournissent tout un tas de choses utiles au programmeur, comme des listes doublement chaînées avec index par ex. Tout ceci est natif au langage qui garantit sa norme, ce qui veut dire qu'une implémentation qui s'appelle "ada" doit garantir sa norme et rien que sa norme, la norme interdisant d'y ajouter quoique ce soit de sa propre initiative. <|> " => suggestions :  »”

80 Il manque un trait d’union si “même” se rapporte à “lui”. [[18:26]] => A coté du langage lui même, il existe d'autres sources pour se procurer des fonctions. <|> lui même => suggestions : lui-même

85 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… [[3:8]] => La 2ième source est la communauté qui fournit des fonctions de manipulation des APIs, de la logique client/serveur HTTP et des IHM avec HTML5. <|> 2ième => suggestions : 2ᵉ
85 Mot inconnu : APIs [[80:84]] => La 2ième source est la communauté qui fournit des fonctions de manipulation des APIs, de la logique client/serveur HTTP et des IHM avec HTML5. <|> apis
