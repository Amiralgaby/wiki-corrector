2 Mot inconnu : SFML => ====== SFML : Simple and Fast Multimedia Library====== | sfml
2 Mot inconnu : and => ====== SFML : Simple and Fast Multimedia Library====== | and
2 Mot inconnu : Fast => ====== SFML : Simple and Fast Multimedia Library====== | fast
2 Mot inconnu : Multimedia => ====== SFML : Simple and Fast Multimedia Library====== | multimedia
2 Mot inconnu : Library => ====== SFML : Simple and Fast Multimedia Library====== | library

3 Mot inconnu : SFML => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | sfml
3 Mot inconnu : and => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | and
3 Mot inconnu : Fast => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | fast
3 Mot inconnu : Multimedia => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | multimedia
3 Mot inconnu : Library => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | library
3 Mot inconnu : Multimedia => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | multimedia
3 Nombre ordinal. Second : 2ᵈ. Seconde : 2ᵈᵉ. Seconds : 2ᵈˢ. Secondes : 2ᵈᵉˢ. => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | 2d => suggestions : ['2ᵈ']
3 Mot inconnu : bindings => **SFML** (Simple and Fast Multimedia Library) est une API Multimedia 2D, créée à l’origine en C++, et maintenant également disponible en C, Ruby, Python – voir également les [[https://www.sfml-dev.org/download/bindings.php|autres bindings]]. Elle est apparue en juillet 2007. | bindings

7 Mot inconnu : sfml-dev => Site web officiel, en français et en anglais : [[https://www.sfml-dev.org/index-fr.php|sfml-dev.org]] (lien visité le 24/01/2022). | sfml-dev

12 Mot inconnu : SFML => La SFML est divisée en 5 modules : | sfml

13 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **System** : base de la bibliothèque, et multi-threading |    => suggestions : ['']
13 Mot inconnu : System =>   * **System** : base de la bibliothèque, et multi-threading | system
13 Mot inconnu : multi-threading =>   * **System** : base de la bibliothèque, et multi-threading | multi-threading

14 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **Window** : fenêtrage |    => suggestions : ['']
14 Mot inconnu : Window =>   * **Window** : fenêtrage | window

15 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **Graphics** : gestion de la 2D (sprites, chaînes de caractères affichables, effets…) |    => suggestions : ['']
15 Mot inconnu : Graphics =>   * **Graphics** : gestion de la 2D (sprites, chaînes de caractères affichables, effets…) | graphics
15 Nombre ordinal. Second : 2ᵈ. Seconde : 2ᵈᵉ. Seconds : 2ᵈˢ. Secondes : 2ᵈᵉˢ. =>   * **Graphics** : gestion de la 2D (sprites, chaînes de caractères affichables, effets…) | 2d => suggestions : ['2ᵈ']
15 Mot inconnu : sprites =>   * **Graphics** : gestion de la 2D (sprites, chaînes de caractères affichables, effets…) | sprites

16 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **Audio** : gestion du son |    => suggestions : ['']

17 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **Network** : gestion du réseau. |    => suggestions : ['']
17 Mot inconnu : Network =>   * **Network** : gestion du réseau. | network

23 Mot inconnu : SFML => ===== Installation de la SFML ===== | sfml

26 Mot inconnu : SFML => SFML est disponible dans les dépôts Ubuntu dans sa version 2.5.1, dans les paquets libsfml-*. | sfml
26 Mot inconnu : libsfml => SFML est disponible dans les dépôts Ubuntu dans sa version 2.5.1, dans les paquets libsfml-*. | libsfml
28 Mot inconnu : libsfml-dev => Installez le paquet **[[apt>libsfml-dev]]** ou tapez dans un terminal la commande suivante : | libsfml-dev

34 Mot inconnu : SFML => Pour compiler et installer SFML depuis le code source, on peut suivre le tutoriel de Laurent Gomila à l'adresse suivante : [[http://sfml-dev.org/tutorials/2.5/compile-with-cmake-fr.php|Compiler SFML avec CMake]]. Je vais suivre ce tutoriel et vous indiquer ce qu'il faut faire pour Ubuntu. | sfml
34 Mot inconnu : Gomila => Pour compiler et installer SFML depuis le code source, on peut suivre le tutoriel de Laurent Gomila à l'adresse suivante : [[http://sfml-dev.org/tutorials/2.5/compile-with-cmake-fr.php|Compiler SFML avec CMake]]. Je vais suivre ce tutoriel et vous indiquer ce qu'il faut faire pour Ubuntu. | gomila
34 Mot inconnu : SFML => Pour compiler et installer SFML depuis le code source, on peut suivre le tutoriel de Laurent Gomila à l'adresse suivante : [[http://sfml-dev.org/tutorials/2.5/compile-with-cmake-fr.php|Compiler SFML avec CMake]]. Je vais suivre ce tutoriel et vous indiquer ce qu'il faut faire pour Ubuntu. | sfml
34 Mot inconnu : CMake => Pour compiler et installer SFML depuis le code source, on peut suivre le tutoriel de Laurent Gomila à l'adresse suivante : [[http://sfml-dev.org/tutorials/2.5/compile-with-cmake-fr.php|Compiler SFML avec CMake]]. Je vais suivre ce tutoriel et vous indiquer ce qu'il faut faire pour Ubuntu. | cmake

36 Mot inconnu : SFML => Tout d'abord, il vous faudra certains paquets, car SFML dépend de certaines bibliothèques. | sfml

40 Mot inconnu : SFML => Ensuite, téléchargez les sources depuis la page de téléchargements de SFML, voici le lien direct vers les sources de la version 2.5.1 : | sfml

41 Mot inconnu : SFML => [[https://www.sfml-dev.org/download/sfml/2.5.1/index-fr.php|Sources de SFML 2.5.1]] | sfml
45 Mot inconnu : CMakeLists => Une fois le code source téléchargé, dézippez l'archive dans votre dossier home (chemin : **/home/votreNom/**) par exemple. Vous devez avoir un fichier CMakeLists.txt accessible via le chemin **/home/votreNom/SFML-x.x/CMakeLists.txt** avec SFMLx.x votre version de SFML. | cmakelists
45 Mot inconnu : txt => Une fois le code source téléchargé, dézippez l'archive dans votre dossier home (chemin : **/home/votreNom/**) par exemple. Vous devez avoir un fichier CMakeLists.txt accessible via le chemin **/home/votreNom/SFML-x.x/CMakeLists.txt** avec SFMLx.x votre version de SFML. | txt
45 Mot inconnu : SFMLx => Une fois le code source téléchargé, dézippez l'archive dans votre dossier home (chemin : **/home/votreNom/**) par exemple. Vous devez avoir un fichier CMakeLists.txt accessible via le chemin **/home/votreNom/SFML-x.x/CMakeLists.txt** avec SFMLx.x votre version de SFML. | sfmlx
45 Mot inconnu : SFML => Une fois le code source téléchargé, dézippez l'archive dans votre dossier home (chemin : **/home/votreNom/**) par exemple. Vous devez avoir un fichier CMakeLists.txt accessible via le chemin **/home/votreNom/SFML-x.x/CMakeLists.txt** avec SFMLx.x votre version de SFML. | sfml

50 Mot inconnu : cmake-gui => Maintenant, lancez cmake-gui depuis un terminal ou de façon graphique, une fenêtre s'affiche : | cmake-gui

54 Mot inconnu : makefile => Comme sur la capture d'écran, vous devez indiquer le chemin du dossier où sont les sources dans le premier champ, et vous devez indiquer le chemin vers un dossier dans lequel les sources seront compilées et les makefile générés (dans mon cas le dossier sfml-dev). Cliquez ensuite sur "Configure" en bas à gauche de la fenêtre. | makefile
54 Mot inconnu : sfml-dev => Comme sur la capture d'écran, vous devez indiquer le chemin du dossier où sont les sources dans le premier champ, et vous devez indiquer le chemin vers un dossier dans lequel les sources seront compilées et les makefile générés (dans mon cas le dossier sfml-dev). Cliquez ensuite sur "Configure" en bas à gauche de la fenêtre. | sfml-dev
54 Guillemets typographiques ouvrants. => Comme sur la capture d'écran, vous devez indiquer le chemin du dossier où sont les sources dans le premier champ, et vous devez indiquer le chemin vers un dossier dans lequel les sources seront compilées et les makefile générés (dans mon cas le dossier sfml-dev). Cliquez ensuite sur "Configure" en bas à gauche de la fenêtre. | " => suggestions : ['«\xa0', '“']
54 Guillemets typographiques fermants. => Comme sur la capture d'écran, vous devez indiquer le chemin du dossier où sont les sources dans le premier champ, et vous devez indiquer le chemin vers un dossier dans lequel les sources seront compilées et les makefile générés (dans mon cas le dossier sfml-dev). Cliquez ensuite sur "Configure" en bas à gauche de la fenêtre. | " => suggestions : ['\xa0»', '”']

58 Mot inconnu : Cmake => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | cmake
58 Mot inconnu : SFML => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | sfml
58 Guillemets typographiques ouvrants. => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | " => suggestions : ['«\xa0', '“']
58 Mot inconnu : Configuratig => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | configuratig
58 Mot inconnu : done => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | done
58 Guillemets typographiques fermants. => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  | " => suggestions : ['\xa0»', '”']
58 Espace(s) en fin de ligne à supprimer. => Sur la fenêtre qui apparaît, laissez les options par défaut et cliquez sur Finish. Cmake vérifie que vous avez toutes les dépendances nécessaires à la compilation de SFML. Si tout se passe bien, le message "Configuratig done." s'affiche en bas de la fenêtre, et des lignes apparaissent sur fond rouge comme dans la capture d'écran ci-dessous.  |   => suggestions : ['']

60 Mot inconnu : SFML => <note important>Si quelque chose s'est mal passé, c'est qu'il vous manque quelque chose, réinstallez les librairies (commande plus haut) ou référez-vous au [[https://www.sfml-dev.org/tutorials/2.5/compile-with-cmake-fr.php|tutoriel officiel]] du site SFML.</note> | sfml

64 Mot inconnu : SFML => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | sfml
64 Mot inconnu : Recliquez => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | recliquez
64 Guillemets typographiques ouvrants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['«\xa0', '“']
64 Guillemets typographiques fermants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['\xa0»', '”']
64 Mot inconnu : makefile => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | makefile
64 Guillemets typographiques ouvrants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['«\xa0', '“']
64 Mot inconnu : Generate => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | generate
64 Guillemets typographiques fermants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['\xa0»', '”']
64 Guillemets typographiques ouvrants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['«\xa0', '“']
64 Mot inconnu : Generating => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | generating
64 Mot inconnu : done => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | done
64 Guillemets typographiques fermants. => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | " => suggestions : ['\xa0»', '”']
64 Mot inconnu : cmake-gui => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | cmake-gui
64 Mot inconnu : makefile => Pour ma part, j'ai laissé les options par défaut, vous avez les détails de ces options sur le tutoriel officiel du site SFML. Recliquez sur "Configure", le fond des lignes passe alors en blanc. Pour générer les makefile, cliquez maintenant sur "Generate". Une fois que le message "Generating done" apparaît, vous pouvez fermer cmake-gui : les makefile sont générés. | makefile

70 Mot inconnu : sudo => sudo make install</code> | sudo
70 Mot inconnu : make => sudo make install</code> | make
70 Mot inconnu : install => sudo make install</code> | install

72 Mot inconnu : SFML => Et voilà, la SFML est normalement installée !  | sfml
72 Espace(s) en fin de ligne à supprimer. => Et voilà, la SFML est normalement installée !  |   => suggestions : ['']

74 Mot inconnu : SFML => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | sfml
74 Guillemets typographiques ouvrants. => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | " => suggestions : ['«\xa0', '“']
74 Mot inconnu : error => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | error
74 Mot inconnu : while => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | while
74 Mot inconnu : loading => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | loading
74 Mot inconnu : shared => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | shared
74 Mot inconnu : libraries => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | libraries
74 Mot inconnu : libsfml-graphics => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | libsfml-graphics
74 Mot inconnu : so => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | so
74 Mot inconnu : cannot => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | cannot
74 Mot inconnu : shared => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | shared
74 Mot inconnu : object => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | object
74 Mot inconnu : such => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | such
74 Mot inconnu : directory => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | directory
74 Guillemets typographiques fermants. => <note important>Mais il reste encore une chose à faire dans certains cas. En effet, après avoir compilé mon programme SFML (ou essayé d'exécuter les exemples), j'ai eu l'erreur suivante : "error while loading shared libraries: libsfml-graphics.so.2: cannot open shared object file: No such file or directory" que ce soit sur système 32 ou 64 bits. | " => suggestions : ['\xa0»', '”']

75 Mot inconnu : root => Pour résoudre ce problème (pour toute architecture 32 ou 64), il faut (en utilisateur root) éditer le fichier /etc/ld.so.conf et rajouter la ligne : "/usr/local/lib" (sans les guillemets). Enregistrez puis exécutez la commande "sudo ldconfig". Maintenant, votre programme devrait tourner ! | root
75 Guillemets typographiques ouvrants. => Pour résoudre ce problème (pour toute architecture 32 ou 64), il faut (en utilisateur root) éditer le fichier /etc/ld.so.conf et rajouter la ligne : "/usr/local/lib" (sans les guillemets). Enregistrez puis exécutez la commande "sudo ldconfig". Maintenant, votre programme devrait tourner ! | " => suggestions : ['«\xa0', '“']
75 Mot inconnu : sudo => Pour résoudre ce problème (pour toute architecture 32 ou 64), il faut (en utilisateur root) éditer le fichier /etc/ld.so.conf et rajouter la ligne : "/usr/local/lib" (sans les guillemets). Enregistrez puis exécutez la commande "sudo ldconfig". Maintenant, votre programme devrait tourner ! | sudo
75 Mot inconnu : ldconfig => Pour résoudre ce problème (pour toute architecture 32 ou 64), il faut (en utilisateur root) éditer le fichier /etc/ld.so.conf et rajouter la ligne : "/usr/local/lib" (sans les guillemets). Enregistrez puis exécutez la commande "sudo ldconfig". Maintenant, votre programme devrait tourner ! | ldconfig
75 Guillemets typographiques fermants. => Pour résoudre ce problème (pour toute architecture 32 ou 64), il faut (en utilisateur root) éditer le fichier /etc/ld.so.conf et rajouter la ligne : "/usr/local/lib" (sans les guillemets). Enregistrez puis exécutez la commande "sudo ldconfig". Maintenant, votre programme devrait tourner ! | " => suggestions : ['\xa0»', '”']

80 Mot inconnu : ldconfig => ldconfig</code></note> | ldconfig

82 Mot inconnu : Binding => ==== Installez le Binding Python ==== | binding

86 Espace(s) en fin de ligne à supprimer. => Voyez pour cela [[https://www.sfml-dev.org/tutorials/1.6/start-python.php|le tutoriel]] (un peu dépassé)\\  |   => suggestions : ['']

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sudo apt-get install libxcb-image0 libxcb-image0-dev |    => suggestions : ['']
88 Mot inconnu : sudo =>   sudo apt-get install libxcb-image0 libxcb-image0-dev | sudo
88 Mot inconnu : apt-get =>   sudo apt-get install libxcb-image0 libxcb-image0-dev | apt-get
88 Mot inconnu : install =>   sudo apt-get install libxcb-image0 libxcb-image0-dev | install
88 Mot inconnu : libxcb-image0 =>   sudo apt-get install libxcb-image0 libxcb-image0-dev | libxcb-image0
88 Mot inconnu : libxcb-image0-dev =>   sudo apt-get install libxcb-image0 libxcb-image0-dev | libxcb-image0-dev

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sudo apt-get install libudev-dev |    => suggestions : ['']
89 Mot inconnu : sudo =>   sudo apt-get install libudev-dev | sudo
89 Mot inconnu : apt-get =>   sudo apt-get install libudev-dev | apt-get
89 Mot inconnu : install =>   sudo apt-get install libudev-dev | install
89 Mot inconnu : libudev-dev =>   sudo apt-get install libudev-dev | libudev-dev

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

91 Mot inconnu : cmake => Ces deux entrées vous seront utiles pour que cmake parviennent a s'installer sans soucis. FIXME (à vérifier) | cmake
91 Confusion : “a” est une conjugaison du verbe “avoir”. Pour la préposition, écrivez “à”. => Ces deux entrées vous seront utiles pour que cmake parviennent a s'installer sans soucis. FIXME (à vérifier) | a => suggestions : ['à']
91 Mot inconnu : FIXME => Ces deux entrées vous seront utiles pour que cmake parviennent a s'installer sans soucis. FIXME (à vérifier) | fixme

95 Accord de genre erroné : « la page » est féminin, « officiel » est masculin. => Un cours [[https://www.sfml-dev.org/tutorials/2.5/start-linux.php|tutoriel sur la page officiel]]  pour débuter, à traduire. | officiel => suggestions : ['officielle']

100 Il manque un espace. => [[tutoriel:comment_supprimer_un_paquet|Comment supprimer un paquet ?]] | comment_supprimer_un_paquet => suggestions : [' comment_supprimer_un_paquet']
100 Mot inconnu : comment_supprimer_un_paquet => [[tutoriel:comment_supprimer_un_paquet|Comment supprimer un paquet ?]] | comment_supprimer_un_paquet
