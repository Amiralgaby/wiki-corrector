
14 Accord avec le sujet “ils” : “propriétaire” devrait être au masculin pluriel. => Les droits d'accès définissent la possession d'un fichier ou d'un répertoire à un utilisateur et à un groupe d'utilisateurs. Ils gèrent aussi quelles actions les utilisateurs ont le droit d'effectuer sur les fichiers (lecture, écriture et exécution), selon qu'ils sont propriétaire du fichier, membre du groupe propriétaire du fichier ou ni l'un ni l'autre. La possession et la gestion des permissions associées s'effectue individuellement avec chaque fichier. | propriétaire => suggestions : ['propriétaires']

23 Mot inconnu : Nautilus => Sous [[Nautilus]] (Ubuntu), faites un clic droit sur un fichier ou répertoire puis choisissez **propriétés**. Rendez-vous dans l'onglet **permissions**. | nautilus

42 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ls -l |    => suggestions : ['']
42 Mot inconnu : ls =>   ls -l | ls
42 Il manque un espace à côté du tiret. =>   ls -l |  - => suggestions : [' – ', ' — ']

47 Mot inconnu : drwxr-xr-x => drwxr-xr-x | drwxr-xr-x

51 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **-** : fichier classique |    => suggestions : ['']

52 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **d** : répertoire |    => suggestions : ['']

53 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **l** : lien symbolique |    => suggestions : ['']

54 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **c** : périphérique de type caractère |    => suggestions : ['']

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **b** : périphérique de type bloc |    => suggestions : ['']

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français |    => suggestions : ['']
56 Mot inconnu : FIFO =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français | fifo
56 Guillemets typographiques ouvrants. =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français | " => suggestions : ['«\xa0', '“']
56 Guillemets typographiques fermants. =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français | " => suggestions : ['\xa0»', '”']
56 Guillemets typographiques ouvrants. =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français | " => suggestions : ['«\xa0', '“']
56 Guillemets typographiques fermants. =>   * **p** : pipe (FIFO) "tube" ou "tuyau" en anglais ou pipeline aussi en français | " => suggestions : ['\xa0»', '”']

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **s** : socket |    => suggestions : ['']
59 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Suivent ensuite 3 groupes de 3 symboles chacun, indiquant si le fichier (ou répertoire) est autorisé en lecture, écriture ou exécution. Les 3 groupes correspondent, dans cet ordre, aux droits du propriétaire, du groupe puis du reste des utilisateurs. Dans le paragraphe introductif, vous aurez remarqué des lettres en gras dans les termes anglais. Ce sont ces lettres qui sont utilisées pour symboliser lesdites permissions. Si la permission n'est pas accordée, la lettre en question est remplacé par « - ». |  -  => suggestions : [' – ', ' — ', ' − ']

60 Mot inconnu : ead => Si l'on reprend les lettres données pour lecture/écriture/exécution (**r**ead/**w**rite/e**x**ecute), nous obtenons : **rwx**. | ead
60 Mot inconnu : ecute => Si l'on reprend les lettres données pour lecture/écriture/exécution (**r**ead/**w**rite/e**x**ecute), nous obtenons : **rwx**. | ecute
60 Mot inconnu : rwx => Si l'on reprend les lettres données pour lecture/écriture/exécution (**r**ead/**w**rite/e**x**ecute), nous obtenons : **rwx**. | rwx

72 Mot inconnu : drwxr-xr-x => drwxr-xr-x | drwxr-xr-x
75 Espace(s) en fin de ligne à supprimer. => Il se traduit de la manière suivante :  |   => suggestions : ['']

77 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **d** : c'est un répertoire. |    => suggestions : ['']

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **rwx** pour le 1er groupe de 3 symboles : son propriétaire peut lire, écrire et exécuter. |    => suggestions : ['']
78 Mot inconnu : rwx =>   * **rwx** pour le 1er groupe de 3 symboles : son propriétaire peut lire, écrire et exécuter. | rwx
78 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>   * **rwx** pour le 1er groupe de 3 symboles : son propriétaire peut lire, écrire et exécuter. | 1er => suggestions : ['1ᵉʳ']

79 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **r-x** pour le 2e groupe de 3 symboles : le groupe peut uniquement lire et exécuter le fichier, sans pouvoir le modifier. |    => suggestions : ['']
79 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>   * **r-x** pour le 2e groupe de 3 symboles : le groupe peut uniquement lire et exécuter le fichier, sans pouvoir le modifier. | 2e => suggestions : ['2ᵉ']

80 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **r-x** pour le 3ème groupe de 3 symboles : le reste du monde peut uniquement lire et exécuter le fichier, sans pouvoir le modifier. |    => suggestions : ['']
80 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>   * **r-x** pour le 3ème groupe de 3 symboles : le reste du monde peut uniquement lire et exécuter le fichier, sans pouvoir le modifier. | 3ème => suggestions : ['3ᵉ']

87 Mot inconnu : drwxr-xr-x => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau | drwxr-xr-x
87 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau |     => suggestions : [' ']
87 Mot inconnu : cyrille => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau | cyrille
87 Doublon. => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau | cyrille cyrille => suggestions : ['cyrille']
87 Mot inconnu : cyrille => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau | cyrille
87 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   6 cyrille cyrille     4096 2008-10-29 23:09 Bureau |       => suggestions : [' ']

88 Mot inconnu : drwxr-x => drwxr-x---   2 cyrille cyrille     4096 2008-10-22 22:46 Documents | drwxr-x
88 Mot inconnu : cyrille => drwxr-x---   2 cyrille cyrille     4096 2008-10-22 22:46 Documents | cyrille
88 Doublon. => drwxr-x---   2 cyrille cyrille     4096 2008-10-22 22:46 Documents | cyrille cyrille => suggestions : ['cyrille']
88 Mot inconnu : cyrille => drwxr-x---   2 cyrille cyrille     4096 2008-10-22 22:46 Documents | cyrille
88 Espace(s) surnuméraire(s) à supprimer. => drwxr-x---   2 cyrille cyrille     4096 2008-10-22 22:46 Documents |       => suggestions : [' ']

89 Mot inconnu : lrwxrwxrwx => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content | lrwxrwxrwx
89 Espace(s) surnuméraire(s) à supprimer. => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content |     => suggestions : [' ']
89 Mot inconnu : cyrille => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content | cyrille
89 Doublon. => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content | cyrille cyrille => suggestions : ['cyrille']
89 Mot inconnu : cyrille => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content | cyrille
89 Espace(s) surnuméraire(s) à supprimer. => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content |         => suggestions : [' ']
89 Mot inconnu : Examples => lrwxrwxrwx   1 cyrille cyrille       26 2008-09-22 22:30 Examples -> /usr/share/example-content | examples

90 Dialogues et énumérations : il faut tiret cadratin [1] ou demi-cadratin [2] suivi d’un espace insécable. => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | - => suggestions : ['—\xa0', '–\xa0']
90 Mot inconnu : rw-r => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | rw-r
90 Mot inconnu : cyrille => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | cyrille
90 Doublon. => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | cyrille cyrille => suggestions : ['cyrille']
90 Mot inconnu : cyrille => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | cyrille
90 Espace(s) surnuméraire(s) à supprimer. => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf |    => suggestions : [' ']
90 Formatage des grands nombres. => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | 1544881 => suggestions : ['1\xa0544\xa0881']
90 Mot inconnu : xcf => -rw-r--r--   1 cyrille cyrille  1544881 2008-10-18 15:37 forum.xcf | xcf

91 Mot inconnu : drwxr-xr-x => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images | drwxr-xr-x
91 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images |     => suggestions : [' ']
91 Mot inconnu : cyrille => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images | cyrille
91 Doublon. => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images | cyrille cyrille => suggestions : ['cyrille']
91 Mot inconnu : cyrille => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images | cyrille
91 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   7 cyrille cyrille     4096 2008-09-23 18:16 Images |       => suggestions : [' ']

92 Mot inconnu : drwxr-xr-x => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles | drwxr-xr-x
92 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles |     => suggestions : [' ']
92 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles | cyrille
92 Doublon. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles | cyrille cyrille => suggestions : ['cyrille']
92 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles | cyrille
92 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Modèles |       => suggestions : [' ']

93 Mot inconnu : drwxr-xr-x => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique | drwxr-xr-x
93 Mot inconnu : cyrille => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique | cyrille
93 Doublon. => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique | cyrille cyrille => suggestions : ['cyrille']
93 Mot inconnu : cyrille => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique | cyrille
93 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique |      => suggestions : [' ']
93 Formatage des grands nombres. => drwxr-xr-x 267 cyrille cyrille    20480 2008-10-27 22:17 Musique | 20480 => suggestions : ['20\xa0480']

94 Mot inconnu : drwxr-xr-x => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public | drwxr-xr-x
94 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public |     => suggestions : [' ']
94 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public | cyrille
94 Doublon. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public | cyrille cyrille => suggestions : ['cyrille']
94 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public | cyrille
94 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-09-22 22:45 Public |       => suggestions : [' ']

95 Mot inconnu : drwxr-xr-x => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos | drwxr-xr-x
95 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos |     => suggestions : [' ']
95 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos | cyrille
95 Doublon. => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos | cyrille cyrille => suggestions : ['cyrille']
95 Mot inconnu : cyrille => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos | cyrille
95 Espace(s) surnuméraire(s) à supprimer. => drwxr-xr-x   2 cyrille cyrille     4096 2008-10-26 13:14 Vidéos |       => suggestions : [' ']

100 Guillemets typographiques ouvrants. => Ainsi, pour le fichier ''forum.xcf'', on a : | '' => suggestions : ['«\xa0', '“']
100 Mot inconnu : xcf => Ainsi, pour le fichier ''forum.xcf'', on a : | xcf
100 Guillemets typographiques fermants. => Ainsi, pour le fichier ''forum.xcf'', on a : | '' => suggestions : ['\xa0»', '”']

101 Mot inconnu : rw-r => <file>-rw-r--r--</file> | rw-r

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le 1er caractère est **-** => c'est un fichier. |    => suggestions : ['']
102 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>   * Le 1er caractère est **-** => c'est un fichier. | 1er => suggestions : ['1ᵉʳ']

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Le premier groupe de 3 caractères est **rw-** => le propriétaire a le droit de lecture et écriture (mais pas d'exécution) sur le fichier. |    => suggestions : ['']
103 Mot inconnu : rw =>   * Le premier groupe de 3 caractères est **rw-** => le propriétaire a le droit de lecture et écriture (mais pas d'exécution) sur le fichier. | rw

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les 2 groupes suivants sont **r%%--%%** => Les utilisateurs du groupe et les autres n'ont que le droit de lecture (pas d'écriture, ni d'exécution) . |    => suggestions : ['']
108 Mot inconnu : CHMOD => <note tip>Les informations ci-dessous sont très importantes pour la compréhension et la maîtrise des permissions. Cependant, si vous voulez calculer rapidement la valeur d'une permission des outils le font pour nous. Ex : [[https://www.onlineconversion.com/html_chmod_calculator.htm| CHMOD calculator]]</note> | chmod
108 Mot inconnu : calculator => <note tip>Les informations ci-dessous sont très importantes pour la compréhension et la maîtrise des permissions. Cependant, si vous voulez calculer rapidement la valeur d'une permission des outils le font pour nous. Ex : [[https://www.onlineconversion.com/html_chmod_calculator.htm| CHMOD calculator]]</note> | calculator

112 Mot inconnu : Nautilus => Dans Nautilus, il vous suffit de changer les valeurs des menus déroulants dans l'onglet permissions (cf. ci-dessus) ou pas. | nautilus

118 Mot inconnu : chown => === chown, pour changer le propriétaire === | chown

119 Guillemets typographiques ouvrants. => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | '' => suggestions : ['«\xa0', '“']
119 Mot inconnu : chown => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | chown
119 Guillemets typographiques fermants. => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | '' => suggestions : ['\xa0»', '”']
119 Mot inconnu : own => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | own
119 Mot inconnu : er => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | er
119 Guillemets typographiques ouvrants. => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | '' => suggestions : ['«\xa0', '“']
119 Mot inconnu : chown => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | chown
119 Guillemets typographiques fermants. => La commande ''chown'' (//**ch**ange **own**er//, changer le propriétaire) permet de changer le propriétaire du fichier. Seuls le super-utilisateur ou le propriétaire actuel d'un fichier peut utiliser ''chown''. La commande s'utilise de la façon suivante : | '' => suggestions : ['\xa0»', '”']

121 Guillemets typographiques ouvrants. => Le fichier ''fichier1'' appartient maintenant à l'utilisateur ''toto''. | '' => suggestions : ['«\xa0', '“']
121 Mot inconnu : fichier1 => Le fichier ''fichier1'' appartient maintenant à l'utilisateur ''toto''. | fichier1
121 Guillemets typographiques fermants. => Le fichier ''fichier1'' appartient maintenant à l'utilisateur ''toto''. | '' => suggestions : ['\xa0»', '”']
121 Guillemets typographiques ouvrants. => Le fichier ''fichier1'' appartient maintenant à l'utilisateur ''toto''. | '' => suggestions : ['«\xa0', '“']
121 Guillemets typographiques fermants. => Le fichier ''fichier1'' appartient maintenant à l'utilisateur ''toto''. | '' => suggestions : ['\xa0»', '”']

123 Mot inconnu : chgrp => === chgrp, pour changer le groupe === | chgrp

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    |    => suggestions : ['']

125 Mot inconnu : chgrp => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | chgrp
125 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | 2ème => suggestions : ['2ᵉ']
125 Mot inconnu : rwx => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | rwx
125 Mot inconnu : __le => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | __le
125 Mot inconnu : actuel__ => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | actuel__
125 Guillemets typographiques ouvrants. => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | '' => suggestions : ['«\xa0', '“']
125 Mot inconnu : chgrp => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | chgrp
125 Guillemets typographiques fermants. => La commande **chgrp** (pour **ch**ange **gr**ou**p**) permet de changer le groupe auquel appartient le fichier. Tous les membres de ce groupe seront concernés par les permissions du groupe de la 2ème série de **rwx**. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chgrp'' (un membre du groupe ne peut pas changer le groupe propriétaire). La commande s'utilise de la façon suivante : | '' => suggestions : ['\xa0»', '”']

127 Guillemets typographiques ouvrants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['«\xa0', '“']
127 Mot inconnu : fichier2 => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | fichier2
127 Guillemets typographiques fermants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['\xa0»', '”']
127 Guillemets typographiques ouvrants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['«\xa0', '“']
127 Mot inconnu : mesPotes => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | mespotes
127 Guillemets typographiques fermants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['\xa0»', '”']
127 Guillemets typographiques ouvrants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['«\xa0', '“']
127 Mot inconnu : mesPotes => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | mespotes
127 Guillemets typographiques fermants. => Le fichier ''fichier2'' appartient maintenant au groupe ''mesPotes''. Tous les membres du groupe ''mesPotes'' auront accès à ce fichier selon les permissions du groupe. | '' => suggestions : ['\xa0»', '”']

130 Mot inconnu : chown => === chown, pour changer simultanément le propriétaire et le groupe === | chown

131 Guillemets typographiques ouvrants. => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | '' => suggestions : ['«\xa0', '“']
131 Mot inconnu : chown => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | chown
131 Guillemets typographiques fermants. => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | '' => suggestions : ['\xa0»', '”']
131 Mot inconnu : __le => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | __le
131 Mot inconnu : actuel__ => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | actuel__
131 Guillemets typographiques ouvrants. => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | '' => suggestions : ['«\xa0', '“']
131 Mot inconnu : chown => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | chown
131 Guillemets typographiques fermants. => Pour changer à la fois le propriétaire //et// le groupe propriétaire, une syntaxe particulière de la commande ''chown'' peut être utilisée. Encore une fois, seuls le super-utilisateur ou __le propriétaire actuel__ d'un fichier peut utiliser ''chown'' (un membre du groupe ne peut pas effectuer de changement de propriété). La commande s'utilise de la façon suivante : | '' => suggestions : ['\xa0»', '”']

135 Guillemets typographiques ouvrants. => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | '' => suggestions : ['«\xa0', '“']
135 Mot inconnu : foo => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | foo
135 Mot inconnu : txt => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | txt
135 Guillemets typographiques fermants. => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | '' => suggestions : ['\xa0»', '”']
135 Mot inconnu : utilisateur1 => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | utilisateur1
135 Mot inconnu : groupe1 => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | groupe1
135 Mot inconnu : utilisateur2 => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | utilisateur2
135 Mot inconnu : groupe2 => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | groupe2
135 Mot inconnu : utilisateur1 => Imaginons le même fichier ''foo.txt'' possédé par //utilisateur1// et appartenant au groupe propriétaire //groupe1//. Le propriétaire doit devenir //utilisateur2// et la propriété de groupe de ce fichier doit passer au groupe //groupe2//. En étant connecté au compte //utilisateur1//, l'exécution de cette commande effectuera l'opération demandée : | utilisateur1

138 Mot inconnu : chmod => === chmod, pour changer les droits === | chmod

140 Guillemets typographiques ouvrants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['«\xa0', '“']
140 Mot inconnu : chmod => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | chmod
140 Guillemets typographiques fermants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['\xa0»', '”']
140 Mot inconnu : mod => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | mod
140 Il manque un espace avant la parenthèse. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | ( => suggestions : [' (']
140 Guillemets typographiques ouvrants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['«\xa0', '“']
140 Mot inconnu : chmod => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | chmod
140 Guillemets typographiques fermants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['\xa0»', '”']
140 Guillemets typographiques ouvrants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['«\xa0', '“']
140 Guillemets typographiques fermants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | '' => suggestions : ['\xa0»', '”']
140 Guillemets typographiques ouvrants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | " => suggestions : ['«\xa0', '“']
140 Guillemets typographiques fermants. => L'outil ''chmod'' (//**ch**ange **mod**e//, changer les permissions) permet de modifier les permissions sur un fichier. Il peut s'employer de deux façons : soit en précisant les permissions de manière octale, à l'aide de chiffres((Quand on vous propose d'effectuer un ''chmod 777'' sur un fichier, cette représentation des permissions est la manière octale. Chaque chiffre correspond à l'ensemble des permissions attribuées à chacune des catégories d'utilisateurs. Cette manière chiffrée est sans doute moins intuitive pour les néophytes.)) ; soit en ajoutant ou en retirant des permissions à une ou plusieurs catégories d'utilisateurs à l'aide des symboles ''r w et x'', que nous avons présentés plus haut. Nous préférerons présenter cette seconde façon ("ajout ou retrait de permissions à l'aide des symboles"), car elle est probablement plus intuitive pour les néophytes. Sachez seulement que les deux méthodes sont équivalentes, c'est-à-dire qu'elles affectent toutes deux les permissions de la même manière. | " => suggestions : ['\xa0»', '”']

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - À qui s'applique le changement |    => suggestions : ['']
145 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - À qui s'applique le changement |  -  => suggestions : [' – ', ' — ', ' − ']

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **u** (**u**ser, utilisateur) représente la catégorie "propriétaire" ; |      => suggestions : ['']
146 Mot inconnu : ser =>     * **u** (**u**ser, utilisateur) représente la catégorie "propriétaire" ; | ser
146 Guillemets typographiques ouvrants. =>     * **u** (**u**ser, utilisateur) représente la catégorie "propriétaire" ; | " => suggestions : ['«\xa0', '“']
146 Guillemets typographiques fermants. =>     * **u** (**u**ser, utilisateur) représente la catégorie "propriétaire" ; | " => suggestions : ['\xa0»', '”']

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **g** (**g**roup, groupe) représente la catégorie "groupe propriétaire" ; |      => suggestions : ['']
147 Mot inconnu : roup =>     * **g** (**g**roup, groupe) représente la catégorie "groupe propriétaire" ; | roup
147 Guillemets typographiques ouvrants. =>     * **g** (**g**roup, groupe) représente la catégorie "groupe propriétaire" ; | " => suggestions : ['«\xa0', '“']
147 Guillemets typographiques fermants. =>     * **g** (**g**roup, groupe) représente la catégorie "groupe propriétaire" ; | " => suggestions : ['\xa0»', '”']

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **o** (**o**thers, autres) représente la catégorie "reste du monde" ; |      => suggestions : ['']
148 Mot inconnu : thers =>     * **o** (**o**thers, autres) représente la catégorie "reste du monde" ; | thers
148 Guillemets typographiques ouvrants. =>     * **o** (**o**thers, autres) représente la catégorie "reste du monde" ; | " => suggestions : ['«\xa0', '“']
148 Guillemets typographiques fermants. =>     * **o** (**o**thers, autres) représente la catégorie "reste du monde" ; | " => suggestions : ['\xa0»', '”']

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **a** (**a**ll, tous) représente l'ensemble des trois catégories. |      => suggestions : ['']
149 Mot inconnu : ll =>     * **a** (**a**ll, tous) représente l'ensemble des trois catégories. | ll

150 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - La modification que l'on veut faire |    => suggestions : ['']
150 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - La modification que l'on veut faire |  -  => suggestions : [' – ', ' — ', ' − ']

151 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **+** : ajouter |      => suggestions : ['']

152 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **-** : supprimer |      => suggestions : ['']

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **=** : affectation |      => suggestions : ['']

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - Le droit que l'on veut modifier |    => suggestions : ['']
154 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - Le droit que l'on veut modifier |  -  => suggestions : [' – ', ' — ', ' − ']

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **r** : **r**ead => lecture |      => suggestions : ['']
155 Mot inconnu : ead =>     * **r** : **r**ead => lecture | ead

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **w** : **w**rite => écriture |      => suggestions : ['']

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **x** : e**x**ecute => exécution |      => suggestions : ['']
157 Mot inconnu : ecute =>     * **x** : e**x**ecute => exécution | ecute

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * **X** : e**X**ecute => exécution, concerne uniquement les répertoires (qu'ils aient déjà une autorisation d'exécution ou pas) et les fichiers qui ont déjà une autorisation d'exécution pour l'une des catégories d'utilisateurs. Nous allons voir plus bas dans la partie des traitements récursifs l'intérêt du X. |      => suggestions : ['']
158 Mot inconnu : ecute =>     * **X** : e**X**ecute => exécution, concerne uniquement les répertoires (qu'ils aient déjà une autorisation d'exécution ou pas) et les fichiers qui ont déjà une autorisation d'exécution pour l'une des catégories d'utilisateurs. Nous allons voir plus bas dans la partie des traitements récursifs l'intérêt du X. | ecute

167 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * On ajoute la permission de lecture, d'écriture et d'exécution sur le fichier ''fichier3'' pour le **propriétaire** ; |    => suggestions : ['']
167 Guillemets typographiques ouvrants. =>   * On ajoute la permission de lecture, d'écriture et d'exécution sur le fichier ''fichier3'' pour le **propriétaire** ; | '' => suggestions : ['«\xa0', '“']
167 Mot inconnu : fichier3 =>   * On ajoute la permission de lecture, d'écriture et d'exécution sur le fichier ''fichier3'' pour le **propriétaire** ; | fichier3
167 Guillemets typographiques fermants. =>   * On ajoute la permission de lecture, d'écriture et d'exécution sur le fichier ''fichier3'' pour le **propriétaire** ; | '' => suggestions : ['\xa0»', '”']

168 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * On ajoute la permission de lecture et d'exécution au **groupe propriétaire**, on retire la permission d'écriture ; |    => suggestions : ['']

169 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * On ajoute la permission de lecture aux **autres**, on retire la permission d'écriture et d'exécution. |    => suggestions : ['']

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * r (read) = 4 |    => suggestions : ['']
178 Mot inconnu : read =>   * r (read) = 4 | read

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * w (write) = 2 |    => suggestions : ['']
179 Mot inconnu : write =>   * w (write) = 2 | write

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * x (execute) = 1 |    => suggestions : ['']
180 Mot inconnu : execute =>   * x (execute) = 1 | execute

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * - = 0 |    => suggestions : ['']
181 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * - = 0 |  -  => suggestions : [' – ', ' — ', ' − ']

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour **rwx**, on aura : 4+2+1 = 7 |    => suggestions : ['']
183 Mot inconnu : rwx =>   * Pour **rwx**, on aura : 4+2+1 = 7 | rwx

184 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour **rw-**, on aura : 4+2+0 = 6 |    => suggestions : ['']
184 Mot inconnu : rw =>   * Pour **rw-**, on aura : 4+2+0 = 6 | rw

185 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour **r%%--%%**, on aura : 4+0+0 = 4 |    => suggestions : ['']

188 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 0 : **''- - -''** (aucun droit) |    => suggestions : ['']
188 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * 0 : **''- - -''** (aucun droit) |  -  => suggestions : [' – ', ' — ', ' − ']

189 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 1 : **''- - x''** (exécution) |    => suggestions : ['']
189 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * 1 : **''- - x''** (exécution) |  -  => suggestions : [' – ', ' — ', ' − ']
189 Guillemets typographiques fermants. =>   * 1 : **''- - x''** (exécution) | '' => suggestions : ['\xa0»', '”']

190 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 2 : **''- w -''** (écriture) |    => suggestions : ['']

191 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 3 : **''- w x''** (écriture et exécution) |    => suggestions : ['']
191 Guillemets typographiques fermants. =>   * 3 : **''- w x''** (écriture et exécution) | '' => suggestions : ['\xa0»', '”']

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 4 : **''r - -''** (lecture seule) |    => suggestions : ['']
192 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * 4 : **''r - -''** (lecture seule) |  -  => suggestions : [' – ', ' — ', ' − ']

193 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 5 : **''r - x''** (lecture et exécution) |    => suggestions : ['']
193 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * 5 : **''r - x''** (lecture et exécution) |  -  => suggestions : [' – ', ' — ', ' − ']
193 Guillemets typographiques fermants. =>   * 5 : **''r - x''** (lecture et exécution) | '' => suggestions : ['\xa0»', '”']

194 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 6 : **''r w -''** (lecture et écriture) |    => suggestions : ['']

195 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * 7 : **''r w x''** (lecture, écriture et exécution) |    => suggestions : ['']
195 Guillemets typographiques fermants. =>   * 7 : **''r w x''** (lecture, écriture et exécution) | '' => suggestions : ['\xa0»', '”']

197 Guillemets typographiques ouvrants. => Reprenons le répertoire ''Documents''. Ses permissions sont : | '' => suggestions : ['«\xa0', '“']
197 Guillemets typographiques fermants. => Reprenons le répertoire ''Documents''. Ses permissions sont : | '' => suggestions : ['\xa0»', '”']

198 Mot inconnu : drwxr-x => <file>drwxr-x---</file> | drwxr-x

200 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      rwx        r-x        --- |       => suggestions : ['']
200 Mot inconnu : rwx =>      rwx        r-x        --- | rwx
200 Espace(s) surnuméraire(s) à supprimer. =>      rwx        r-x        --- |          => suggestions : [' ']
200 Espace(s) surnuméraire(s) à supprimer. =>      rwx        r-x        --- |          => suggestions : [' ']

201 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    7(4+2+1)   5(4+0+1)   0(0+0+0) |     => suggestions : ['']
201 Il manque un espace avant la parenthèse. =>    7(4+2+1)   5(4+0+1)   0(0+0+0) | ( => suggestions : [' (']
201 Il manque un espace avant la parenthèse. =>    7(4+2+1)   5(4+0+1)   0(0+0+0) | ( => suggestions : [' (']
201 Il manque un espace avant la parenthèse. =>    7(4+2+1)   5(4+0+1)   0(0+0+0) | ( => suggestions : [' (']

208 Il manque les traits d’union. => Pour chacune de ces commandes, on peut les lancer récursivement sur un répertoire. C'est à dire que l'action sera effectuée sur le répertoire désigné et sur tous les fichiers ou répertoires qu'il contient. Ceci se fait en ajoutant l'option **-R** . | c'est à dire => suggestions : ['C’est-à-dire']
210 Guillemets typographiques ouvrants. => <note warning>Attention! Un ''chmod -R'' mal employé peut rendre votre système définitivement inutilisable. | '' => suggestions : ['«\xa0', '“']
210 Mot inconnu : chmod => <note warning>Attention! Un ''chmod -R'' mal employé peut rendre votre système définitivement inutilisable. | chmod
210 Il manque un espace à côté du tiret. => <note warning>Attention! Un ''chmod -R'' mal employé peut rendre votre système définitivement inutilisable. |  - => suggestions : [' – ', ' — ']
210 Guillemets typographiques fermants. => <note warning>Attention! Un ''chmod -R'' mal employé peut rendre votre système définitivement inutilisable. | '' => suggestions : ['\xa0»', '”']

215 Typographie : points de suspension. Utilisez le caractère dédié. => donnera tous les droits au propriétaire, les droits de lecture et exécution au groupe et aucuns droits aux autres... | ... => suggestions : ['…']

219 Mot inconnu : txt => En effet, si les répertoires doivent obligatoirement avoir la permission x pour pouvoir être ouverts, la permission x est inutile pour les fichiers non exécutables et peut être gênante pour les fichiers textes (txt, html...) car dans ce cas lorsqu'on les ouvre on aura à chaque fois un message demandant si on veut les ouvrir ou les lancer (comme exécutable). Bref  le droit x est à réserver aux seuls fichiers qui sont vraiment des exécutables. | txt
219 Mot inconnu : html => En effet, si les répertoires doivent obligatoirement avoir la permission x pour pouvoir être ouverts, la permission x est inutile pour les fichiers non exécutables et peut être gênante pour les fichiers textes (txt, html...) car dans ce cas lorsqu'on les ouvre on aura à chaque fois un message demandant si on veut les ouvrir ou les lancer (comme exécutable). Bref  le droit x est à réserver aux seuls fichiers qui sont vraiment des exécutables. | html
219 Typographie : points de suspension. Utilisez le caractère dédié. => En effet, si les répertoires doivent obligatoirement avoir la permission x pour pouvoir être ouverts, la permission x est inutile pour les fichiers non exécutables et peut être gênante pour les fichiers textes (txt, html...) car dans ce cas lorsqu'on les ouvre on aura à chaque fois un message demandant si on veut les ouvrir ou les lancer (comme exécutable). Bref  le droit x est à réserver aux seuls fichiers qui sont vraiment des exécutables. | ... => suggestions : ['…']
219 Espace(s) surnuméraire(s) à supprimer. => En effet, si les répertoires doivent obligatoirement avoir la permission x pour pouvoir être ouverts, la permission x est inutile pour les fichiers non exécutables et peut être gênante pour les fichiers textes (txt, html...) car dans ce cas lorsqu'on les ouvre on aura à chaque fois un message demandant si on veut les ouvrir ou les lancer (comme exécutable). Bref  le droit x est à réserver aux seuls fichiers qui sont vraiment des exécutables. |    => suggestions : [' ']

223 Mot inconnu : monrep => Soit un répertoire monrep, contenant des sous-répertoires et des fichiers. Les droits sont drwx------ (700) pour les répertoires et -rw------- (600) pour les fichiers. | monrep
223 Mot inconnu : drwx => Soit un répertoire monrep, contenant des sous-répertoires et des fichiers. Les droits sont drwx------ (700) pour les répertoires et -rw------- (600) pour les fichiers. | drwx
223 Il manque un espace à côté du tiret. => Soit un répertoire monrep, contenant des sous-répertoires et des fichiers. Les droits sont drwx------ (700) pour les répertoires et -rw------- (600) pour les fichiers. |  - => suggestions : [' – ', ' — ']
223 Mot inconnu : rw => Soit un répertoire monrep, contenant des sous-répertoires et des fichiers. Les droits sont drwx------ (700) pour les répertoires et -rw------- (600) pour les fichiers. | rw

225 Mot inconnu : resp => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | resp
225 Mot inconnu : rwx => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | rwx
225 Mot inconnu : rw => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | rw
225 Il manque les traits d’union. => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | c'est à dire => suggestions : ['C’est-à-dire']
225 Mot inconnu : drwxrwx => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | drwxrwx
225 Il manque un espace à côté du tiret. => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. |  - => suggestions : [' – ', ' — ']
225 Mot inconnu : rw-rw => On veut ajouter récursivement les mêmes droits (resp. rwx et rw) pour le groupe. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | rw-rw

227 Mot inconnu : chmod => Si on lance chmod -R 770 monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( | chmod
227 Il manque un espace à côté du tiret. => Si on lance chmod -R 770 monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( |  - => suggestions : [' – ', ' — ']
227 Mot inconnu : monrep => Si on lance chmod -R 770 monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( | monrep

229 Mot inconnu : chmod => Si on lance chmod -R 660 monrep : les répertoires n'auront plus les droits d'exécution -> catastrophique m( | chmod
229 Il manque un espace à côté du tiret. => Si on lance chmod -R 660 monrep : les répertoires n'auront plus les droits d'exécution -> catastrophique m( |  - => suggestions : [' – ', ' — ']
229 Mot inconnu : monrep => Si on lance chmod -R 660 monrep : les répertoires n'auront plus les droits d'exécution -> catastrophique m( | monrep

231 Mot inconnu : chmod => Si on lance chmod -R g+rwx monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( | chmod
231 Il manque un espace à côté du tiret. => Si on lance chmod -R g+rwx monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( |  - => suggestions : [' – ', ' — ']
231 Mot inconnu : rwx => Si on lance chmod -R g+rwx monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( | rwx
231 Mot inconnu : monrep => Si on lance chmod -R g+rwx monrep : les fichiers vont avoir les droits d'exécution -> mauvais :-( | monrep

233 Mot inconnu : chmod => Si on lance **chmod -R g+rwX monrep** : seuls les répertoires (et les fichiers déjà exécutables) auront les droits d'exécution -> bon :-) | chmod
233 Il manque un espace à côté du tiret. => Si on lance **chmod -R g+rwX monrep** : seuls les répertoires (et les fichiers déjà exécutables) auront les droits d'exécution -> bon :-) |  - => suggestions : [' – ', ' — ']
233 Mot inconnu : rwX => Si on lance **chmod -R g+rwX monrep** : seuls les répertoires (et les fichiers déjà exécutables) auront les droits d'exécution -> bon :-) | rwx
233 Mot inconnu : monrep => Si on lance **chmod -R g+rwX monrep** : seuls les répertoires (et les fichiers déjà exécutables) auront les droits d'exécution -> bon :-) | monrep

237 Mot inconnu : chmod => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. | chmod
237 Il manque un espace à côté du tiret. => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. |  - => suggestions : [' – ', ' — ']
237 Mot inconnu : monrep => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. | monrep
237 Mot inconnu : drwxrwx => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. | drwxrwx
237 Il manque un espace à côté du tiret. => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. |  - => suggestions : [' – ', ' — ']
237 Mot inconnu : rwxrwx => Imaginons que précédemment on ait lancé la commande chmod -R 770 monrep. La situation est la suivante : les droits sont drwxrwx--- (770) pour les répertoires et -rwxrwx---- (770) pour les fichiers. | rwxrwx

239 Il manque les traits d’union. => On désire supprimer les droits d'exécution uniquement sur les fichiers. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | c'est à dire => suggestions : ['C’est-à-dire']
239 Mot inconnu : drwxrwx => On désire supprimer les droits d'exécution uniquement sur les fichiers. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | drwxrwx
239 Il manque un espace à côté du tiret. => On désire supprimer les droits d'exécution uniquement sur les fichiers. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. |  - => suggestions : [' – ', ' — ']
239 Mot inconnu : rw-rw => On désire supprimer les droits d'exécution uniquement sur les fichiers. C'est à dire qu'on veut aboutir à la situation suivante : drwxrwx--- (770) pour les répertoires et -rw-rw---- (660) pour les fichiers. | rw-rw

241 Mot inconnu : chmod => Comme chmod s'applique à la fois aux fichiers et répertoires, nous allons jongler avec x et X. Il faut enlever x puis ajouter X. | chmod

243 Mot inconnu : chmod => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). | chmod
243 Il manque un espace à côté du tiret. => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). |  - => suggestions : [' – ', ' — ']
243 Il manque un espace. => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). | g-x => suggestions : [' g-x']
243 Mot inconnu : monrep => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). | monrep
243 Il manque un espace à côté du tiret. => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). |  - => suggestions : [' – ', ' — ']
243 Mot inconnu : rw-rwx => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). | rw-rwx
243 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => Si on lance chmod -R u-x+X,g-x+X monrep cela n'aura aucun effet car X concerne à la fois les répertoires ET les fichiers qui ont un x quelque part. Donc si u-x enlève le premier x (ce qui donne -rw-rwx---), la suite +X va aussitôt remettre un x car il reste un x (celui du groupe !). |  car => suggestions : [', car']
245 Il manque un espace. => Donc il faut d'abord enlever tous les x : u-x,g-x avant de les remettre (sera fait uniquement pour les répertoires cette fois) | g-x => suggestions : [' g-x']

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   chmod -R u-x,g-x,u+X,g+X monrep |    => suggestions : ['']
247 Mot inconnu : chmod =>   chmod -R u-x,g-x,u+X,g+X monrep | chmod
247 Il manque un espace à côté du tiret. =>   chmod -R u-x,g-x,u+X,g+X monrep |  - => suggestions : [' – ', ' — ']
247 Il manque un espace. =>   chmod -R u-x,g-x,u+X,g+X monrep | g-x => suggestions : [' g-x']
247 Il manque un espace. =>   chmod -R u-x,g-x,u+X,g+X monrep | g => suggestions : [' g']
247 Mot inconnu : monrep =>   chmod -R u-x,g-x,u+X,g+X monrep | monrep

249 Guillemets typographiques ouvrants. => <note tip>Il est à noter que seuls le propriétaire du fichier ainsi que le super-utilisateur ont la possibilité de modifier les permissions sur un fichier. (Un membre du groupe propriétaire ne peut pas changer les permissions sur un fichier.) Quand l'utilisateur actuel n'est pas le propriétaire actuel du fichier, il sera nécessaire de faire précéder la commande par ''sudo'', puisqu'elle devra être effectuée avec les droits d'administration.</note> | '' => suggestions : ['«\xa0', '“']
249 Mot inconnu : sudo => <note tip>Il est à noter que seuls le propriétaire du fichier ainsi que le super-utilisateur ont la possibilité de modifier les permissions sur un fichier. (Un membre du groupe propriétaire ne peut pas changer les permissions sur un fichier.) Quand l'utilisateur actuel n'est pas le propriétaire actuel du fichier, il sera nécessaire de faire précéder la commande par ''sudo'', puisqu'elle devra être effectuée avec les droits d'administration.</note> | sudo
249 Guillemets typographiques fermants. => <note tip>Il est à noter que seuls le propriétaire du fichier ainsi que le super-utilisateur ont la possibilité de modifier les permissions sur un fichier. (Un membre du groupe propriétaire ne peut pas changer les permissions sur un fichier.) Quand l'utilisateur actuel n'est pas le propriétaire actuel du fichier, il sera nécessaire de faire précéder la commande par ''sudo'', puisqu'elle devra être effectuée avec les droits d'administration.</note> | '' => suggestions : ['\xa0»', '”']

254 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour afficher un message si et seulement si les permissions ont changé :  |    => suggestions : ['']
254 Espace(s) en fin de ligne à supprimer. =>   * Pour afficher un message si et seulement si les permissions ont changé :  |   => suggestions : ['']

256 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour travailler récursivement sur tous les fichiers d'un répertoire et de ses sous-répertoires :  |    => suggestions : ['']
256 Espace(s) en fin de ligne à supprimer. =>   * Pour travailler récursivement sur tous les fichiers d'un répertoire et de ses sous-répertoires :  |   => suggestions : ['']

262 Mot inconnu : file_mode => Les droits sont parfois spécifiés avec 4 chiffres, comme file_mode=0777. Ce premier chiffre ajouté devant peut permettre de définir : | file_mode

265 Mot inconnu : special => Vous devez voir dans la liste des noms de fichiers sur fond rouge ou jaune et des droits du type ci-dessous ou //s// (special((https://www.gnu.org/software/coreutils/manual/html_node/Numeric-Modes.html))) vient remplacer le //x// | special
265 Il manque un espace avant la parenthèse. => Vous devez voir dans la liste des noms de fichiers sur fond rouge ou jaune et des droits du type ci-dessous ou //s// (special((https://www.gnu.org/software/coreutils/manual/html_node/Numeric-Modes.html))) vient remplacer le //x// | ( => suggestions : [' (']

267 Dialogues et énumérations : il faut tiret cadratin [1] ou demi-cadratin [2] suivi d’un espace insécable. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | - => suggestions : ['—\xa0', '–\xa0']
267 Mot inconnu : rwxr-sr-x => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | rwxr-sr-x
267 Espace(s) surnuméraire(s) à supprimer. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> |    => suggestions : [' ']
267 Mot inconnu : root => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | root
267 Espace(s) surnuméraire(s) à supprimer. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> |     => suggestions : [' ']
267 Mot inconnu : ssh => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | ssh
267 Espace(s) surnuméraire(s) à supprimer. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> |        => suggestions : [' ']
267 Formatage des grands nombres. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | 284784 => suggestions : ['284\xa0784']
267 Espace(s) surnuméraire(s) à supprimer. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> |     => suggestions : [' ']
267 Espace(s) surnuméraire(s) à supprimer. => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> |    => suggestions : [' ']
267 Mot inconnu : ssh-agent => -rwxr-sr-x  1 root   ssh      284784 mai   12  2014 ssh-agent*</code> | ssh-agent

269 Mot inconnu : sudo => le bit Set-User-ID permet à un utilisateur d'exécuter le programme avec les droits du propriétaire, c'est ainsi que sudo nous permet d'exécuter des commandes en "//root//"  | sudo
269 Espace(s) en fin de ligne à supprimer. => le bit Set-User-ID permet à un utilisateur d'exécuter le programme avec les droits du propriétaire, c'est ainsi que sudo nous permet d'exécuter des commandes en "//root//"  |   => suggestions : ['']

271 Mot inconnu : Set-Group-ID => le bit Set-Group-ID idem que le User-ID mais par rapport au groupe | set-group-id

273 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => le bit restriction de suppression ou Sticky permet quant à lui de restreindre la suppression d'un fichier ou répertoire à son seul propriétaire. C'est le cas du répertoire /tmp : | le => suggestions : ['Le']
273 Mot inconnu : Sticky => le bit restriction de suppression ou Sticky permet quant à lui de restreindre la suppression d'un fichier ou répertoire à son seul propriétaire. C'est le cas du répertoire /tmp : | sticky

275 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | drwxrwxrwt => suggestions : ['Drwxrwxrwt']
275 Mot inconnu : drwxrwxrwt => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | drwxrwxrwt
275 Espace(s) surnuméraire(s) à supprimer. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> |     => suggestions : [' ']
275 Mot inconnu : root => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | root
275 Doublon. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | root root => suggestions : ['root']
275 Mot inconnu : root => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | root
275 Espace(s) surnuméraire(s) à supprimer. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> |    => suggestions : [' ']
275 Espace(s) surnuméraire(s) à supprimer. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> |    => suggestions : [' ']
275 Si “tmp/” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | 17 tmp/ => suggestions : ['17\xa0tmp/']
275 Mot inconnu : tmp => drwxrwxrwt   2 root root  4096 nov.  28 13:17 tmp/</code> | tmp

276 Mot inconnu : root => le //t// au lieu du //x// pour les autres utilisateurs nous informe que ce répertoire ne peut être supprimé que par l'utilisateur root | root

277 Mot inconnu : sticky => Comme pour les autres permissions, vous pouvez cumuler les activations en additionnant le code pour chacun, ainsi pour activer le sticky bit et le GroupID sur votre script renomme_mes_photos.sh, vous réalisez un : | sticky
277 Mot inconnu : GroupID => Comme pour les autres permissions, vous pouvez cumuler les activations en additionnant le code pour chacun, ainsi pour activer le sticky bit et le GroupID sur votre script renomme_mes_photos.sh, vous réalisez un : | groupid
277 Mot inconnu : renomme_mes_photos => Comme pour les autres permissions, vous pouvez cumuler les activations en additionnant le code pour chacun, ainsi pour activer le sticky bit et le GroupID sur votre script renomme_mes_photos.sh, vous réalisez un : | renomme_mes_photos
277 Mot inconnu : sh => Comme pour les autres permissions, vous pouvez cumuler les activations en additionnant le code pour chacun, ainsi pour activer le sticky bit et le GroupID sur votre script renomme_mes_photos.sh, vous réalisez un : | sh

283 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.math-linux.com/spip.php?article23|Droit et permission d'accès aux fichiers]] |    => suggestions : ['']

284 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.it-connect.fr/la-commande-chmod/|Gestion des droits avec CHMOD]] **(fr)** |    => suggestions : ['']
284 Mot inconnu : CHMOD =>   * [[http://www.it-connect.fr/la-commande-chmod/|Gestion des droits avec CHMOD]] **(fr)** | chmod

285 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://www.onlineconversion.com/html_chmod_calculator.htm| Outils de calcul des permissions : chmod calculator]] |    => suggestions : ['']
285 Mot inconnu : chmod =>   * [[https://www.onlineconversion.com/html_chmod_calculator.htm| Outils de calcul des permissions : chmod calculator]] | chmod
285 Mot inconnu : calculator =>   * [[https://www.onlineconversion.com/html_chmod_calculator.htm| Outils de calcul des permissions : chmod calculator]] | calculator

286 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.it-connect.fr/la-gestion-des-groupes-sous-linux%ef%bb%bf/|Gestion des groupes]] **(fr)** |    => suggestions : ['']

287 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.it-connect.fr/la-commande-chown/|Gestion des propriétaires avec CHOWN]] **(fr)** |    => suggestions : ['']
287 Mot inconnu : CHOWN =>   * [[http://www.it-connect.fr/la-commande-chown/|Gestion des propriétaires avec CHOWN]] **(fr)** | chown

288 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://www.it-connect.fr/gestion-de-lumask-sous-linux/|Gestion de l'UMASK sous Linux]] **(fr)** |    => suggestions : ['']
288 Mot inconnu : UMASK =>   * [[https://www.it-connect.fr/gestion-de-lumask-sous-linux/|Gestion de l'UMASK sous Linux]] **(fr)** | umask
