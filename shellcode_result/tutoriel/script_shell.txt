
In /tmp/shellcheck_file line 15:
let i=0
^-----^ SC2219: Instead of 'let expr', prefer (( expr )) .


In /tmp/shellcheck_file line 16:
while test $i -lt $numframes
           ^-- SC2086: Double quote to prevent globbing and word splitting.
                  ^--------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
while test "$i" -lt "$numframes"


In /tmp/shellcheck_file line 18:
    rem=$(( $i % 2 ))
            ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 22:
        gifsicle "$2" --delete "#"$(($i/2)) -o "$2"
                                     ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 25:
    let i=i+1 
    ^--------^ SC2219: Instead of 'let expr', prefer (( expr )) .

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2004 -- $/${} is unnecessary on arithmeti...
  https://www.shellcheck.net/wiki/SC2219 -- Instead of 'let expr', prefer (( ...



In /tmp/shellcheck_file line 3:
echo "Les arguments sont ... :  "$*
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo "Les arguments sont ... :  ""$*"


In /tmp/shellcheck_file line 4:
echo "Le second argument est :  "$2
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo "Le second argument est :  ""$2"

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...



In /tmp/shellcheck_file line 2:
echo $3
     ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo "$3"


In /tmp/shellcheck_file line 3:
echo $2
     ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo "$2"

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...



In /tmp/shellcheck_file line 5:
  echo -n "Taper l'option suivante : "
       ^-- SC2039: In POSIX sh, echo flags are undefined.


In /tmp/shellcheck_file line 6:
  read Reslt
  ^--^ SC2162: read without -r will mangle backslashes.

For more information:
  https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, echo flags are undef...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...



In /tmp/shellcheck_file line 3:
echo -n "Entrez un nom de fichier: "
     ^-- SC2039: In POSIX sh, echo flags are undefined.


In /tmp/shellcheck_file line 4:
read file
^--^ SC2162: read without -r will mangle backslashes.

For more information:
  https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, echo flags are undef...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...



In /tmp/shellcheck_file line 2:
echo -n "Voulez-vous voir la liste des fichiers Y/N : "
     ^-- SC2039: In POSIX sh, echo flags are undefined.


In /tmp/shellcheck_file line 3:
read ouinon
^--^ SC2162: read without -r will mangle backslashes.

For more information:
  https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, echo flags are undef...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...



In /tmp/shellcheck_file line 5:
echo -n "Mot de passe : "
     ^-- SC2039: In POSIX sh, echo flags are undefined.


In /tmp/shellcheck_file line 6:
read mdp
^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 10:
     echo -n "Mauvais mot de passe, plus que "$cm" chance(s): "
          ^-- SC2039: In POSIX sh, echo flags are undefined.
                                              ^-^ SC2027: The surrounding quotes actually unquote this. Remove or escape them.


In /tmp/shellcheck_file line 11:
     read mdp
     ^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 12:
     cmpt=$(($cmpt+1))
             ^---^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 13:
     cm=$(($cm-1))
           ^-^ SC2004: $/${} is unnecessary on arithmetic variables.

For more information:
  https://www.shellcheck.net/wiki/SC2027 -- The surrounding quotes actually u...
  https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, echo flags are undef...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...



In /tmp/shellcheck_file line 6:
xmessage "Session loaded" -buttons "Continue":0,"That all":1;
                                             ^-^ SC2140: Word is of the form "A"B"C" (B indicated). Did you mean "ABC" or "A\"B\"C"?


In /tmp/shellcheck_file line 7:
[ $? -eq 0 ] && xmessage "Load more..."
  ^-- SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.

For more information:
  https://www.shellcheck.net/wiki/SC2140 -- Word is of the form "A"B"C" (B in...
  https://www.shellcheck.net/wiki/SC2181 -- Check exit code directly with e.g...



In /tmp/shellcheck_file line 2:
while [ -z $(pidof wmaker) ]
           ^-------------^ SC2046: Quote this to prevent word splitting.

For more information:
  https://www.shellcheck.net/wiki/SC2046 -- Quote this to prevent word splitt...



In /tmp/shellcheck_file line 3:
echo -n "Êtes-vous fatigué ? "
     ^-- SC2039: In POSIX sh, echo flags are undefined.


In /tmp/shellcheck_file line 4:
read on
^--^ SC2162: read without -r will mangle backslashes.

For more information:
  https://www.shellcheck.net/wiki/SC2039 -- In POSIX sh, echo flags are undef...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...



In /tmp/shellcheck_file line 9:
read login
^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 11:
read hote
^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 16:
while [ 1 ]; do                                 # permet une boucle infinie
        ^-- SC2161: Instead of '[ 1 ]', use 'true'.


In /tmp/shellcheck_file line 17:
echo -n ""$login"@"$hote"$ "                    # qui s'arrête avec break
          ^----^ SC2027: The surrounding quotes actually unquote this. Remove or escape them.
          ^----^ SC2086: Double quote to prevent globbing and word splitting.
                   ^---^ SC2027: The surrounding quotes actually unquote this. Remove or escape them.
                   ^---^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo -n """$login""@""$hote""$ "                    # qui s'arrête avec break


In /tmp/shellcheck_file line 18:
read reps
^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 32:
     read eff
     ^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 33:
     rm -f $eff;;
           ^--^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
     rm -f "$eff";;


In /tmp/shellcheck_file line 36:
     read eff
     ^--^ SC2162: read without -r will mangle backslashes.


In /tmp/shellcheck_file line 37:
     rm -r $eff;;
           ^--^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
     rm -r "$eff";;

For more information:
  https://www.shellcheck.net/wiki/SC2027 -- The surrounding quotes actually u...
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...











In /tmp/shellcheck_file line 7:
test -z $(echo "$1" | grep -e "^[0-9]*$") && info "'$1' est un mauvais argument"
        ^-- SC2046: Quote this to prevent word splitting.


In /tmp/shellcheck_file line 8:
test $1 -gt 0 || info "Je ne prends que les entiers > 0"
     ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
test "$1" -gt 0 || info "Je ne prends que les entiers > 0"


In /tmp/shellcheck_file line 11:
         while [ -d /proc/$1 ]; do
                          ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
         while [ -d /proc/"$1" ]; do


In /tmp/shellcheck_file line 13:
                  test $(($COUNT%$2)) -eq 0 && echo -n "*"
                          ^----^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 14:
                  COUNT=$(($COUNT+1))
                           ^----^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 17:
sleep $1 & print_until_sleep $! $PRINT
      ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
sleep "$1" & print_until_sleep $! $PRINT

For more information:
  https://www.shellcheck.net/wiki/SC2046 -- Quote this to prevent word splitt...
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2004 -- $/${} is unnecessary on arithmeti...



In /tmp/shellcheck_file line 3:
if [ ${LANG:0:2} = "fr" ]; then
     ^---------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
if [ "${LANG:0:2}" = "fr" ]; then


In /tmp/shellcheck_file line 5:
elif [ ${LANG:0:2} = "en" ]; then
       ^---------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
elif [ "${LANG:0:2}" = "en" ]; then


In /tmp/shellcheck_file line 7:
elif [ ${LANG:0:2} = "es" ]; then
       ^---------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
elif [ "${LANG:0:2}" = "es" ]; then

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...



In /tmp/shellcheck_file line 3:
echo ${1:$2}
     ^-----^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
echo "${1:$2}"

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...




