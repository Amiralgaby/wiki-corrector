


In /tmp/shellcheck_file line 13:
    curr=`dcop amarok player trackCurrentTime`
         ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.

Did you mean: 
    curr=$(dcop amarok player trackCurrentTime)


In /tmp/shellcheck_file line 14:
    tot=`dcop amarok player trackTotalTime`
        ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.

Did you mean: 
    tot=$(dcop amarok player trackTotalTime)


In /tmp/shellcheck_file line 15:
    if (( $tot )); then
          ^--^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 16:
        expr $curr \* 100  / $tot
        ^--^ SC2003: expr is antiquated. Consider rewriting this using $((..)), ${} or [[ ]].
             ^---^ SC2086: Double quote to prevent globbing and word splitting.
                             ^--^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
        expr "$curr" \* 100  / "$tot"

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2003 -- expr is antiquated. Consider rewr...
  https://www.shellcheck.net/wiki/SC2004 -- $/${} is unnecessary on arithmeti...



In /tmp/shellcheck_file line 5:
NOWPLAYING=`qdbus org.kde.amarok /Player org.freedesktop.MediaPlayer.GetMetadata`
           ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.

Did you mean: 
NOWPLAYING=$(qdbus org.kde.amarok /Player org.freedesktop.MediaPlayer.GetMetadata)


In /tmp/shellcheck_file line 7:
if [ $? = 0 ] && [ -n "$NOWPLAYING" ]; then
     ^-- SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.


In /tmp/shellcheck_file line 17:
		    curr=`qdbus org.kde.amarok /Player org.freedesktop.MediaPlayer.PositionGet`
                         ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.

Did you mean: 
		    curr=$(qdbus org.kde.amarok /Player org.freedesktop.MediaPlayer.PositionGet)


In /tmp/shellcheck_file line 18:
		    tot=`echo "$NOWPLAYING" | sed -ne 's/^mtime: \(.*\)$/\1/p'`
                        ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.

Did you mean: 
		    tot=$(echo "$NOWPLAYING" | sed -ne 's/^mtime: \(.*\)$/\1/p')


In /tmp/shellcheck_file line 19:
		    echo `expr $curr \* 100  / $tot`
                         ^-------------------------^ SC2046: Quote this to prevent word splitting.
                         ^-------------------------^ SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.
                         ^-------------------------^ SC2006: Use $(...) notation instead of legacy backticked `...`.
                          ^--^ SC2003: expr is antiquated. Consider rewriting this using $((..)), ${} or [[ ]].
                               ^---^ SC2086: Double quote to prevent globbing and word splitting.
                                               ^--^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
		    echo $(expr "$curr" \* 100  / "$tot")

For more information:
  https://www.shellcheck.net/wiki/SC2046 -- Quote this to prevent word splitt...
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2003 -- expr is antiquated. Consider rewr...



In /tmp/shellcheck_file line 4:
image=$(ls -1 $coverPath | grep '\.\(jpg\|jpeg\)' | grep -m 1 '.*')
        ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.
              ^--------^ SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
image=$(ls -1 "$coverPath" | grep '\.\(jpg\|jpeg\)' | grep -m 1 '.*')

For more information:
  https://www.shellcheck.net/wiki/SC2010 -- Don't use ls | grep. Use a glob o...
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...



In /tmp/shellcheck_file line 2:
temps_sec=`banshee --query-$1 | cut -d ":" -f 2 | cut -d "." -f 1`
          ^-- SC2006: Use $(...) notation instead of legacy backticked `...`.
                           ^-- SC2086: Double quote to prevent globbing and word splitting.

Did you mean: 
temps_sec=$(banshee --query-"$1" | cut -d ":" -f 2 | cut -d "." -f 1)


In /tmp/shellcheck_file line 3:
temps_min=$(($temps_sec/60))
             ^--------^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 4:
temps_sec=$(($temps_sec-$temps_min*60))
             ^--------^ SC2004: $/${} is unnecessary on arithmetic variables.
                        ^--------^ SC2004: $/${} is unnecessary on arithmetic variables.


In /tmp/shellcheck_file line 7:
	temps_sec=`echo "$vartmp$temps_sec"`
                  ^------------------------^ SC2006: Use $(...) notation instead of legacy backticked `...`.
                  ^------------------------^ SC2116: Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.

Did you mean: 
	temps_sec=$(echo "$vartmp$temps_sec")

For more information:
  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...
  https://www.shellcheck.net/wiki/SC2004 -- $/${} is unnecessary on arithmeti...
  https://www.shellcheck.net/wiki/SC2006 -- Use $(...) notation instead of le...


