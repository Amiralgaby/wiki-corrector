{{tag>console terminal shell tutoriel}}
----

====== Console : ligne de commande ======

===== Introduction =====

Ce //How To// est fait pour les débutants qui ne connaissent pas **GNU/Linux** et n'a pas la prétention de faire de vous des champions de la console.

Après tout, la distribution Ubuntu vise à simplifier l'utilisation d'un OS basé sur Debian en limitant l'usage des commandes //bash// dans un [[:terminal]] lors de l'utilisation de base de votre ordinateur au quotidien. Ainsi Ubuntu est ici pour vous aider dans vos tâches les plus complexes et en toute sécurité.

<note>Cette page vient en complément des pages "[[:terminal]]", "[[:commande_shell]]" et "[[:tutoriel:console_commandes_de_base|Les commandes de base en console]]" dans laquelle vous trouverez une liste des commandes importantes avec un rappel des options les plus fréquentes.
</note>

==== Convention ====

  * Cette page vous donnera des commandes GNU/Linux basiques à utiliser dans un terminal.
  * Tous les noms de commande seront en **GRAS**.
  * Les commandes devront être tapées en respectant **la casse** selon l'exemple encadré.
  * Pour un complément d'information, lisez le **man** de chaque commande.

<note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\
**retour à la ligne** pour clarifier une ligne de commande un peu longue, il peut-être utile d'utiliser le ** \** puis retour charriot pour continuer à saisir la ligne de commande sur plusieurs lignes d'affichage.
</note>


===== Syntaxe générale =====

Le 1er mot tapé est une commande. Les lettres tapées après un tiret, et les mots tapés après 2 tirets, sont des options.

Le reste ce sont des paramètres.

Notez qu'il existe des commandes sans paramètres, d'autres sans options, et même certaines qui prennent une commande en paramètres !

<code>nom-de-la-commande -options --options-longues parametre1 parametre2</code>



===== Commandes basiques=====

Certains utilitaires servent à en documenter d'autres : par exemple l'utilitaire info et l'utilitaire man.

<code>info man</code>
donne des infos sur la commande man



<code>man info</code>
donne le manuel de la commande info.


On peut également avoir une aide rapide sur la plupart des commandes par l'option **''​%%--%%help''** (ou parfois **''-h''**)
<code>
man --help
man -h
</code>

==== ls ====
 La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t)
<code>
ls                ### ceci vous donnera la liste de vos fichiers et dossiers.
</code>
Pour obtenir plus d'information, utilisez l'option **-l** (pour version **l**ongue) :
<code>
ls -l
</code>
Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) 
utilisez l'option **-A** (pour **A**ll) :
<code>
ls -A
</code>
On peut bien sûr mélanger les deux options :
<code>
ls -Al           ### Vous affichera tous les fichiers, même cachés, avec
 les détails
</code>

<note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>

==== cd ====

 La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur).

Pour changer de répertoire on utilise donc la commande ''cd'' suivi du [[:chemins|chemin]] auquel on veut accéder :

  cd /home/utilisateur/dossier      ### vous déplacera à votre répertoire (/home/utilisateur/dossier)

Contrairement à la version Windows la commande ''cd'' utilisée seule ramène au répertoire par défaut de l'utilisateur (ou du root).

  cd

Pour afficher le répertoire courant, il faut utiliser ''pwd'' (voir plus bas).

Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
  cd ..

<note tip>La touche //Tab// permet de compléter le nom du répertoire que vous êtes en train de taper.</note>
==== id ====
La commande **id** affiche les informations utilisateur et de groupe pour un utilisateur spécifié, ou si aucun utilisateur n'est spécifié, elle affiche les informations sur l'utilisateur courant
<code>
  id ubuntu-user
uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
</code>

==== mkdir ====
 La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
<code>
mkdir musique       ### crée un répertoire musique 

man mkdir         ### pour avoir les options de mkdir
</code>

==== pwd ====
 La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
<code>
pwd               ### suivant nos exemples ci-dessus nous sommes dans ~/Desktop ou /home/utilisateur/Desktop
</code>

==== mv ====
 La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :

<code>
mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"

mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer

mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
                             bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 
                             demandera la confirmation pour écraser l'ancien fichier)

man mv            ### pour avoir les options de mv
</code>

==== cp ====
 La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :

<code>
cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
                     Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
                     se dédouble sans être supprimé.

man cp            ### pour avoir les options de cp
</code>

==== less ====
 La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple :

<code>
less /etc/apt/sources.list   ###affiche par exemple le contenu de votre fichier sources pour apt

.....
 deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse

 deb http://archive.ubuntu.com/ubuntu xenial-security main restricted

 deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
.....

man less                     ### pour avoir les options de less
</code>

Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]].

il y a aussi la commande cat <nom_du_fichier>

==== rm ====
Remarque : cette commande ne demande jamais autorisation. 

 La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 

<note warning>
Attention cette commande est irréversible donc soyez vigilant quand vous l'utilisez. 

Cette commande peut se révéler [[:commandes_dangereuses|dangereuse]]
</note>

Exemple :
<code>
rm nom_fichier              ### supprime le fichier nom_fichier du répertoire courant

rm /home/documents/nom_fichier ### supprime le fichier nom_fichier du répertoire /home/documents
                                

rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant
</code>
__**ATTENTION**__

Si vous tapez :
<code>
rm / home/documents/nom_fichier ###il y a un espace entre / et home/documents/nom_fichier donc le système commence par 
                                faire un rm / puis fait un rm home/documents/nom_fichier

                                Bien sûr, le rm / efface complètement votre système de fichiers donc attention aux espaces 
                                qui se glissent dans la frappe quand vous utilisez la commande "rm".

man rm                          ### pour avoir les options de "rm"

</code>

==== chown ====
La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation.

Exemple :
<code>
chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt

man chown                           ### pour avoir les options de "chown"
</code>

[[:permissions|... plus d'informations sur la gestion des droits d'accès sous Linux]]

==== chmod ====
La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation.

Il existe 2 méthodes : symbolique ou octale.

__**Méthode symbolique**__

**chmod ugoa|+/-/=|rwxugo fichier***

Les paramètres de chmod se décomposent là en trois parties :

    * la 1ère indique à qui s'applique la modification des droits d'accès :
      * u pour l'utilisateur, le propriétaire du fichier (u pour //user//)
      * g pour le groupe (g pour //group//)
      * o pour le reste du monde (o pour //others//)
      * a pour tous (a pour //all//)
          
    * la 2ème est un caractère +, - ou = :
      * + signifie l'ajout de nouveaux droits d'accès
      * - signifie la suppression de droits d'accès
      * = signifie l'autorisation exclusive des droits d'accès spécifiés 
          
    * la 3ème indique le(s) droit(s) concerné(s) : 
      * r pour lecture (r pour Read)
      * w pour écriture (w pour Write)
      * x pour exécution (x pour eXecute)
      * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs
    
Quelques précisions valables dans le cas d'un répertoire :
    * r signifie lecture totale du répertoire (la commande ls liste ainsi par exemple tous les fichiers contenus dans le répertoire). Mais en l'absence de ce droit, il est toujours possible de lire un fichier contenu dans ce répertoire (en connaissant son chemin).
    * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever. 

Exemples :
<code>
chmod g+r fichier 	  	### permet au groupe de lire le Fichier
chmod u+rw,go+r fichier       ### permet à l'utilisateur de lire et écrire le fichier, et aux autres de le lire
chmod g=u fichier             ### permet de donner au groupe les mêmes droits que l'utilisateur
</code>

__**Méthode octale**__

**chmod XXX fichier**, où XXX = Utilisateur | Groupe | Autres (X représente un entier compris entre 1 et 7)

Valeur du chiffre X :

   * 0 : aucun droit en lecture, écriture, exécution
   * 1 : droit d'exécution
   * 2 : droit d'écriture
   * 4 : droit de lecture

On peut cumuler différents droits : X = 7 (soit 1+2+4) signifie donc que l'on donne tous les droits sur le fichier.

en résumé X = Lecture (4) + Écriture (2) + Exécution (1)

   * Le 1er chiffre X spécifie les droits pour //le propriétaire// du fichier.
   * Le 2ème chiffre X spécifie les droits pour //le groupe propriétaire// du fichier.
   * Le 3ème chiffre X spécifie les droits pour //tous les autres utilisateurs// sur le fichier.

Ainsi, chmod 777 fichier donne tous les droits à tout le monde.

Un calculateur de chmod est disponible sur [[http://pages.infinit.net/glopglop/local/chmod.htm]]

Exemple :

<code>
chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
                                               propriétaire peut écrire et les autres seulement lire

man chmod                                  ### pour avoir toutes les options sur "chmod"
</code>

[[:permissions|... plus d'informations sur la gestion des droits d'accès sous Linux]]

==== apt ====

La commande **[[:apt-cli|apt]]** permet de gérer les paquets Debian de votre Ubuntu. Exemple :

<code>
sudo apt update                      ### permet de mettre à jour la liste des paquets disponibles, commande à taper en premier
                                         avant toute installation pour être sûr d'avoir les mises à jour.

sudo apt upgrade                     ### permet de mettre à jour les paquets déjà installés, à taper pour faire les mises à 
                                         jour de sécurité.

sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
                                         demande peut être d'installer d'autres paquets en complément.

sudo apt remove soft                 ### désinstalle le paquet "soft".

sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.

apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.

man apt                              ### pour avoir les options de "apt".
</code>


