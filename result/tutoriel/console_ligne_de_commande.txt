5 Il manque un espace insécable. => ====== Console : ligne de commande ======

9 Mot inconnu : How => Ce //How To// est fait pour les débutants qui ne connaissent pas **GNU/Linux** et n'a pas la prétention de faire de vous des champions de la console.

11 Mot inconnu : bash => Après tout, la distribution Ubuntu vise à simplifier l'utilisation d'un OS basé sur Debian en limitant l'usage des commandes //bash// dans un [[:terminal]] lors de l'utilisation de base de votre ordinateur au quotidien. Ainsi Ubuntu est ici pour vous aider dans vos tâches les plus complexes et en toute sécurité.
13 Il manque un espace. => <note>Cette page vient en complément des pages "[[:terminal]]", "[[:commande_shell]]" et "[[:tutoriel:console_commandes_de_base|Les commandes de base en console]]" dans laquelle vous trouverez une liste des commandes importantes avec un rappel des options les plus fréquentes.

18 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Cette page vous donnera des commandes GNU/Linux basiques à utiliser dans un terminal.

19 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Tous les noms de commande seront en **GRAS**.

20 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Les commandes devront être tapées en respectant **la casse** selon l'exemple encadré.

21 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pour un complément d'information, lisez le **man** de chaque commande.

23 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\
23 Il manque un espace insécable. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\
23 Mot inconnu : tab => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\
23 Confusion probable. Pour dire “possiblement”, écrivez “peut-être”. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\
23 Il manque un espace insécable. => <note tip>**auto-complétion** : après avoir tapé 2 ou 3 caractères, il est possible d'appuyer sur la touche //tab// qui permet d'ajouter la suite de la commande, du nom du répertoire ou du fichier. Cela évite les erreurs de frappe et est très appréciable pour éviter de saisir le nom de fichier parfois long et complexe comme le nom de certains paquets. Peut être utilisé plusieurs fois si plusieurs noms ont une partie commune. Attention, c'est sensible à la casse !\\

24 Incohérence avec “il” : “peut-être” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => **retour à la ligne** pour clarifier une ligne de commande un peu longue, il peut-être utile d'utiliser le ** \** puis retour charriot pour continuer à saisir la ligne de commande sur plusieurs lignes d'affichage.

30 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Le 1er mot tapé est une commande. Les lettres tapées après un tiret, et les mots tapés après 2 tirets, sont des options.

34 Il manque un espace insécable. => Notez qu'il existe des commandes sans paramètres, d'autres sans options, et même certaines qui prennent une commande en paramètres !

36 Il manque un espace à côté du tiret. => <code>nom-de-la-commande -options --options-longues parametre1 parametre2</code>

42 Il manque un espace insécable. => Certains utilitaires servent à en documenter d'autres : par exemple l'utilitaire info et l'utilitaire man.

53 Mot inconnu : help => On peut également avoir une aide rapide sur la plupart des commandes par l'option **''--help''** (ou parfois **''-h''**)
53 Guillemets typographiques fermants. => On peut également avoir une aide rapide sur la plupart des commandes par l'option **''--help''** (ou parfois **''-h''**)
53 Guillemets typographiques fermants. => On peut également avoir une aide rapide sur la plupart des commandes par l'option **''--help''** (ou parfois **''-h''**)

55 Mot inconnu : help => man --help

56 Il manque un espace à côté du tiret. => man -h

59 Mot inconnu : ls => ==== ls ====

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t)
60 Mot inconnu : ls =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t)
60 Mot inconnu : ls =>  La commande **ls** liste les fichiers et les sous-dossiers. (**ls** = **l**i**s**t)

62 Mot inconnu : ls => ls                ### ceci vous donnera la liste de vos fichiers et dossiers.
62 Espace(s) surnuméraire(s) à supprimer. => ls                ### ceci vous donnera la liste de vos fichiers et dossiers.

64 Mot inconnu : ongue => Pour obtenir plus d'information, utilisez l'option **-l** (pour version **l**ongue) :
64 Il manque un espace insécable. => Pour obtenir plus d'information, utilisez l'option **-l** (pour version **l**ongue) :

66 Mot inconnu : ls => ls -l
66 Il manque un espace à côté du tiret. => ls -l

68 Guillemets typographiques ouvrants. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) 
68 Guillemets typographiques fermants. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) 
68 Espace(s) en fin de ligne à supprimer. => Pour afficher aussi les fichiers "cachés" (en fait ceux qui commencent par un point) 

69 Mot inconnu : ll => utilisez l'option **-A** (pour **A**ll) :
69 Il manque un espace insécable. => utilisez l'option **-A** (pour **A**ll) :

71 Mot inconnu : ls => ls -A
71 Il manque un espace à côté du tiret. => ls -A

73 Il manque un espace insécable. => On peut bien sûr mélanger les deux options :

75 Mot inconnu : ls => ls -Al           ### Vous affichera tous les fichiers, même cachés, avec
75 Il manque un espace à côté du tiret. => ls -Al           ### Vous affichera tous les fichiers, même cachés, avec
75 Espace(s) surnuméraire(s) à supprimer. => ls -Al           ### Vous affichera tous les fichiers, même cachés, avec

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  les détails

79 Mot inconnu : ls => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Il manque un espace à côté du tiret. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Mot inconnu : all => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Pas d’espace avant un point. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Typographie : un ou trois points ? => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Mot inconnu : ls => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Il manque un espace à côté du tiret. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Mot inconnu : almost-all => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Pas d’espace avant un point. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Typographie : un ou trois points ? => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Il manque les traits d’union. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques ouvrants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>
79 Guillemets typographiques fermants. => <note>Les options d'une commande sont sensibles à la casse. Ainsi, ls -a (ou --all), qui affiche les "dossiers" . et .., n'est pas tout à fait identique à ls -A (--almost-all), qui elle n'affiche pas . et .. (c'est à dire, "dossier actuel" et "dossier parent").</note>

83 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur).
83 Mot inconnu : directory =>  La commande **cd** vous permet de changer de répertoire (cd = change directory). Quand vous ouvrez un //terminal// en mode utilisateur vous êtes dans votre répertoire personnel (/home/utilisateur).

85 Guillemets typographiques ouvrants. => Pour changer de répertoire on utilise donc la commande ''cd'' suivi du [[:chemins|chemin]] auquel on veut accéder :
85 Guillemets typographiques fermants. => Pour changer de répertoire on utilise donc la commande ''cd'' suivi du [[:chemins|chemin]] auquel on veut accéder :
85 Il manque un espace insécable. => Pour changer de répertoire on utilise donc la commande ''cd'' suivi du [[:chemins|chemin]] auquel on veut accéder :

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd /home/utilisateur/dossier      ### vous déplacera à votre répertoire (/home/utilisateur/dossier)
87 Espace(s) surnuméraire(s) à supprimer. =>   cd /home/utilisateur/dossier      ### vous déplacera à votre répertoire (/home/utilisateur/dossier)

89 Guillemets typographiques ouvrants. => Contrairement à la version Windows la commande ''cd'' utilisée seule ramène au répertoire par défaut de l'utilisateur (ou du root).
89 Guillemets typographiques fermants. => Contrairement à la version Windows la commande ''cd'' utilisée seule ramène au répertoire par défaut de l'utilisateur (ou du root).
89 Mot inconnu : root => Contrairement à la version Windows la commande ''cd'' utilisée seule ramène au répertoire par défaut de l'utilisateur (ou du root).

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd

93 Guillemets typographiques ouvrants. => Pour afficher le répertoire courant, il faut utiliser ''pwd'' (voir plus bas).
93 Mot inconnu : pwd => Pour afficher le répertoire courant, il faut utiliser ''pwd'' (voir plus bas).
93 Guillemets typographiques fermants. => Pour afficher le répertoire courant, il faut utiliser ''pwd'' (voir plus bas).

95 Guillemets typographiques ouvrants. => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Guillemets typographiques fermants. => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Guillemets typographiques ouvrants. => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Typographie : un ou trois points ? => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Guillemets typographiques fermants. => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :
95 Il manque un espace insécable. => Pour "remonter" d'un répertoire (aller à son parent) on utilise la commande ''cd ..'' (voir [[:chemins#liens|ici]]) - n'oubliez pas l'espace, surtout si vous venez de Windows :

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   cd ..
96 Typographie : un ou trois points ? =>   cd ..

98 Mot inconnu : Tab => <note tip>La touche //Tab// permet de compléter le nom du répertoire que vous êtes en train de taper.</note>

100 Accord de genre erroné entre « informations » et « utilisateur ». => La commande **id** affiche les informations utilisateur et de groupe pour un utilisateur spécifié, ou si aucun utilisateur n'est spécifié, elle affiche les informations sur l'utilisateur courant

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   id ubuntu-user
102 Mot inconnu : ubuntu-user =>   id ubuntu-user

103 Mot inconnu : uid => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Il manque un espace avant la parenthèse. => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Mot inconnu : ubuntu-user => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Mot inconnu : gid => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Il manque un espace avant la parenthèse. => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Mot inconnu : ubuntu-user => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Il manque un espace avant la parenthèse. => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Mot inconnu : ubuntu-user => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)
103 Il manque un espace avant la parenthèse. => uid=1001(ubuntu-user) gid=1001(ubuntu-user) groupes=1001(ubuntu-user),29(audio)

106 Mot inconnu : mkdir => ==== mkdir ====

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
107 Mot inconnu : mkdir =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
107 Mot inconnu : mkdir =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
107 Mot inconnu : make =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
107 Mot inconnu : directory =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :
107 Il manque un espace insécable. =>  La commande **mkdir** vous permet de créer des répertoires. (mkdir = make directory)  Exemple :

109 Mot inconnu : mkdir => mkdir musique       ### crée un répertoire musique 
109 Espace(s) surnuméraire(s) à supprimer. => mkdir musique       ### crée un répertoire musique 
109 Espace(s) en fin de ligne à supprimer. => mkdir musique       ### crée un répertoire musique 

111 Mot inconnu : mkdir => man mkdir         ### pour avoir les options de mkdir
111 Espace(s) surnuméraire(s) à supprimer. => man mkdir         ### pour avoir les options de mkdir
111 Mot inconnu : mkdir => man mkdir         ### pour avoir les options de mkdir

114 Mot inconnu : pwd => ==== pwd ====

115 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
115 Mot inconnu : pwd =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
115 Mot inconnu : pwd =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
115 Mot inconnu : present =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
115 Mot inconnu : working =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple
115 Mot inconnu : directory =>  La commande **pwd** vous permet de savoir dans quel répertoire de l'arborescence vous êtes localisé. (pwd = present working directory) Exemple

117 Mot inconnu : pwd => pwd               ### suivant nos exemples ci-dessus nous sommes dans ~/Desktop ou /home/utilisateur/Desktop
117 Espace(s) surnuméraire(s) à supprimer. => pwd               ### suivant nos exemples ci-dessus nous sommes dans ~/Desktop ou /home/utilisateur/Desktop
117 Mot inconnu : Desktop => pwd               ### suivant nos exemples ci-dessus nous sommes dans ~/Desktop ou /home/utilisateur/Desktop

120 Mot inconnu : mv => ==== mv ====

121 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :
121 Mot inconnu : mv =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :
121 Mot inconnu : mv =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :
121 Mot inconnu : move =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :
121 Il manque un espace insécable. =>  La commande **mv** sert à déplacer un dossier (ou fichier) à un endroit différent ou à le renommer. (mv = move) Exemples :

124 Mot inconnu : mv => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"
124 Espace(s) surnuméraire(s) à supprimer. => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"
124 Guillemets typographiques ouvrants. => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"
124 Guillemets typographiques fermants. => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"
124 Guillemets typographiques ouvrants. => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"
124 Guillemets typographiques fermants. => mv bonjour bonsoir       ### pour renommer le fichier/répertoire "bonjour" en "bonsoir"

126 Mot inconnu : mv => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer
126 Mot inconnu : Desktop => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer
126 Espace(s) surnuméraire(s) à supprimer. => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer
126 Guillemets typographiques ouvrants. => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer
126 Guillemets typographiques fermants. => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer
126 Mot inconnu : Desktop => mv bonsoir ~/Desktop  ### déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop sans le renommer

128 Mot inconnu : mv => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Mot inconnu : Desktop => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Mot inconnu : bonnenuit => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Guillemets typographiques ouvrants. => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Guillemets typographiques fermants. => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Mot inconnu : Desktop => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 
128 Espace(s) en fin de ligne à supprimer. => mv bonsoir ~/Desktop/bonnenuit ###déplace le fichier "bonsoir" du répertoire courant vers le répertoire ~/Desktop et le renomme en 

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                              bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 
129 Mot inconnu : bonnenuit =>                              bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 
129 Mot inconnu : bonnenuit =>                              bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 
129 Mot inconnu : Desktop =>                              bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 
129 Espace(s) en fin de ligne à supprimer. =>                              bonnenuit (bien sûr bonnenuit n'existait pas dans le répertoire ~/Desktop sinon le système vous 

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                              demandera la confirmation pour écraser l'ancien fichier)

132 Mot inconnu : mv => man mv            ### pour avoir les options de mv
132 Espace(s) surnuméraire(s) à supprimer. => man mv            ### pour avoir les options de mv
132 Mot inconnu : mv => man mv            ### pour avoir les options de mv

135 Mot inconnu : cp => ==== cp ====

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :
136 Mot inconnu : cp =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :
136 Mot inconnu : cp =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :
136 Mot inconnu : copy =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :
136 Il manque un espace insécable. =>  La commande **cp** fait une copie d'un fichier. (cp = copy) Exemple :

139 Mot inconnu : cp => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Espace(s) surnuméraire(s) à supprimer. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques ouvrants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques fermants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques ouvrants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques fermants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques ouvrants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.
139 Guillemets typographiques fermants. => cp bonjour bonsoir       fait une copie exacte du fichier "bonjour" et l'appelle "bonsoir", mais le fichier "bonjour" est toujours là.

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Guillemets typographiques ouvrants. =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Mot inconnu : mv =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Guillemets typographiques fermants. =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Guillemets typographiques ouvrants. =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Mot inconnu : cp =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Guillemets typographiques fermants. =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 
140 Espace(s) en fin de ligne à supprimer. =>                      Quand vous employez "mv" le fichier source n'existe plus, alors que quand vous utiliserez "cp" le fichier 

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                      se dédouble sans être supprimé.

143 Mot inconnu : cp => man cp            ### pour avoir les options de cp
143 Espace(s) surnuméraire(s) à supprimer. => man cp            ### pour avoir les options de cp
143 Mot inconnu : cp => man cp            ### pour avoir les options de cp

146 Mot inconnu : less => ==== less ====

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple :
147 Mot inconnu : less =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple :
147 Il manque un espace insécable. =>  La commande **less** permet d'afficher le contenu d'un fichier directement dans le terminal. Exemple :

150 Mot inconnu : less => less /etc/apt/sources.list   ###affiche par exemple le contenu de votre fichier sources pour apt
150 Espace(s) surnuméraire(s) à supprimer. => less /etc/apt/sources.list   ###affiche par exemple le contenu de votre fichier sources pour apt

152 Typographie : points de suspension. Utilisez le caractère dédié. => .....

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse
153 Mot inconnu : deb =>  deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse
153 Mot inconnu : restricted =>  deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse
153 Mot inconnu : universe =>  deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse
153 Mot inconnu : multiverse =>  deb http://archive.ubuntu.com/ubuntu xenial main restricted universe multiverse

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  deb http://archive.ubuntu.com/ubuntu xenial-security main restricted
155 Mot inconnu : deb =>  deb http://archive.ubuntu.com/ubuntu xenial-security main restricted
155 Mot inconnu : xenial-security =>  deb http://archive.ubuntu.com/ubuntu xenial-security main restricted
155 Mot inconnu : restricted =>  deb http://archive.ubuntu.com/ubuntu xenial-security main restricted

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
157 Mot inconnu : deb =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
157 Mot inconnu : xenial-updates =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
157 Mot inconnu : restricted =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
157 Mot inconnu : universe =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse
157 Mot inconnu : multiverse =>  deb http://archive.ubuntu.com/ubuntu xenial-updates main restricted universe multiverse

158 Typographie : points de suspension. Utilisez le caractère dédié. => .....

160 Mot inconnu : less => man less                     ### pour avoir les options de less
160 Espace(s) surnuméraire(s) à supprimer. => man less                     ### pour avoir les options de less
160 Mot inconnu : less => man less                     ### pour avoir les options de less

163 Mot inconnu : cat => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]].
163 Mot inconnu : nano => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]].
163 Mot inconnu : vi => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]].
163 Typographie : points de suspension. Utilisez le caractère dédié. => Bien sûr il en existe beaucoup d'autres (cat, nano, vi...) et la syntaxe est la même mais les fonctionnalités sont bien différentes. Dans tous les cas informez-vous avec la commande man ou sur [[https://duckduckgo.com]].

165 Mot inconnu : cat => il y a aussi la commande cat <nom_du_fichier>

167 Mot inconnu : rm => ==== rm ====

168 Il manque un espace insécable. => Remarque : cette commande ne demande jamais autorisation. 
168 Espace(s) en fin de ligne à supprimer. => Remarque : cette commande ne demande jamais autorisation. 

170 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 
170 Mot inconnu : rm =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 
170 Mot inconnu : rm =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 
170 Mot inconnu : remove =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 
170 Espace(s) en fin de ligne à supprimer. =>  La commande **rm** permet de supprimer un fichier ou répertoire. (rm = remove) 

173 Espace(s) en fin de ligne à supprimer. => Attention cette commande est irréversible donc soyez vigilant quand vous l'utilisez. 

178 Il manque un espace insécable. => Exemple :

180 Mot inconnu : rm => rm nom_fichier              ### supprime le fichier nom_fichier du répertoire courant
180 Mot inconnu : nom_fichier => rm nom_fichier              ### supprime le fichier nom_fichier du répertoire courant
180 Espace(s) surnuméraire(s) à supprimer. => rm nom_fichier              ### supprime le fichier nom_fichier du répertoire courant
180 Mot inconnu : nom_fichier => rm nom_fichier              ### supprime le fichier nom_fichier du répertoire courant

182 Mot inconnu : rm => rm /home/documents/nom_fichier ### supprime le fichier nom_fichier du répertoire /home/documents
182 Mot inconnu : nom_fichier => rm /home/documents/nom_fichier ### supprime le fichier nom_fichier du répertoire /home/documents

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                 

185 Mot inconnu : rm => rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant
185 Il manque un espace à côté du tiret. => rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant
185 Mot inconnu : rf => rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant
185 Mot inconnu : lenomdudossier => rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant
185 Mot inconnu : lenomdudossier => rm -rf lenomdudossier ### supprime le dossier lenomdudossier du répertoire courant

187 Mot inconnu : __ => __**ATTENTION**__
187 Mot inconnu : __ => __**ATTENTION**__

189 Il manque un espace insécable. => Si vous tapez :

191 Mot inconnu : rm => rm / home/documents/nom_fichier ###il y a un espace entre / et home/documents/nom_fichier donc le système commence par 
191 Espace(s) en fin de ligne à supprimer. => rm / home/documents/nom_fichier ###il y a un espace entre / et home/documents/nom_fichier donc le système commence par 

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                 faire un rm / puis fait un rm home/documents/nom_fichier
192 Mot inconnu : rm =>                                 faire un rm / puis fait un rm home/documents/nom_fichier
192 Mot inconnu : rm =>                                 faire un rm / puis fait un rm home/documents/nom_fichier

194 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                 Bien sûr, le rm / efface complètement votre système de fichiers donc attention aux espaces 
194 Mot inconnu : rm =>                                 Bien sûr, le rm / efface complètement votre système de fichiers donc attention aux espaces 
194 Espace(s) en fin de ligne à supprimer. =>                                 Bien sûr, le rm / efface complètement votre système de fichiers donc attention aux espaces 

195 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                 qui se glissent dans la frappe quand vous utilisez la commande "rm".
195 Guillemets typographiques ouvrants. =>                                 qui se glissent dans la frappe quand vous utilisez la commande "rm".
195 Mot inconnu : rm =>                                 qui se glissent dans la frappe quand vous utilisez la commande "rm".
195 Guillemets typographiques fermants. =>                                 qui se glissent dans la frappe quand vous utilisez la commande "rm".

197 Mot inconnu : rm => man rm                          ### pour avoir les options de "rm"
197 Espace(s) surnuméraire(s) à supprimer. => man rm                          ### pour avoir les options de "rm"
197 Guillemets typographiques ouvrants. => man rm                          ### pour avoir les options de "rm"
197 Mot inconnu : rm => man rm                          ### pour avoir les options de "rm"
197 Guillemets typographiques fermants. => man rm                          ### pour avoir les options de "rm"

201 Mot inconnu : chown => ==== chown ====

202 Mot inconnu : chown => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation.
202 Mot inconnu : chown => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation.
202 Mot inconnu : owner => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation.
202 Mot inconnu : root => La commande **chown** permet de changer le propriétaire d'un fichier ou répertoire (chown = change owner). Seul le propriétaire du fichier (ou root) peut faire cette manipulation.

204 Il manque un espace insécable. => Exemple :

206 Mot inconnu : chown => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Mot inconnu : utilisateur2 => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Espace(s) surnuméraire(s) à supprimer. => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Guillemets typographiques ouvrants. => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Mot inconnu : utilisateur2 => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Guillemets typographiques fermants. => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt
206 Mot inconnu : txt => chown utilisateur2 /home/utilisateur/doc.txt  ### "utilisateur2" devient propriétaire du fichier doc.txt

208 Mot inconnu : chown => man chown                           ### pour avoir les options de "chown"
208 Espace(s) surnuméraire(s) à supprimer. => man chown                           ### pour avoir les options de "chown"
208 Guillemets typographiques ouvrants. => man chown                           ### pour avoir les options de "chown"
208 Mot inconnu : chown => man chown                           ### pour avoir les options de "chown"
208 Guillemets typographiques fermants. => man chown                           ### pour avoir les options de "chown"

211 Typographie : points de suspension. Utilisez le caractère dédié. => [[:permissions|... plus d'informations sur la gestion des droits d'accès sous Linux]]

213 Mot inconnu : chmod => ==== chmod ====

214 Mot inconnu : chmod => La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation.
214 Mot inconnu : root => La commande **chmod** permet de modifier les droits d'accès sur les fichiers ou répertoires. Seul le propriétaire des fichiers ou répertoires (ou root) peut faire cette manipulation.

216 Il manque un espace insécable. => Il existe 2 méthodes : symbolique ou octale.

218 Mot inconnu : __ => __**Méthode symbolique**__
218 Mot inconnu : __ => __**Méthode symbolique**__

220 Mot inconnu : chmod => **chmod ugoa|+/-/=|rwxugo fichier***
220 Mot inconnu : ugoa => **chmod ugoa|+/-/=|rwxugo fichier***
220 Mot inconnu : rwxugo => **chmod ugoa|+/-/=|rwxugo fichier***

222 Mot inconnu : chmod => Les paramètres de chmod se décomposent là en trois parties :
222 Il manque un espace insécable. => Les paramètres de chmod se décomposent là en trois parties :

224 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 1ère indique à qui s'applique la modification des droits d'accès :
224 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>     * la 1ère indique à qui s'applique la modification des droits d'accès :
224 Il manque un espace insécable. =>     * la 1ère indique à qui s'applique la modification des droits d'accès :

225 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * u pour l'utilisateur, le propriétaire du fichier (u pour //user//)

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * g pour le groupe (g pour //group//)
226 Mot inconnu : group =>       * g pour le groupe (g pour //group//)

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * o pour le reste du monde (o pour //others//)
227 Mot inconnu : others =>       * o pour le reste du monde (o pour //others//)

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * a pour tous (a pour //all//)
228 Mot inconnu : all =>       * a pour tous (a pour //all//)

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 2ème est un caractère +, - ou = :
230 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>     * la 2ème est un caractère +, - ou = :
230 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     * la 2ème est un caractère +, - ou = :
230 Il manque un espace insécable. =>     * la 2ème est un caractère +, - ou = :

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * + signifie l'ajout de nouveaux droits d'accès

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * - signifie la suppression de droits d'accès
232 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>       * - signifie la suppression de droits d'accès

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * = signifie l'autorisation exclusive des droits d'accès spécifiés 
233 Espace(s) en fin de ligne à supprimer. =>       * = signifie l'autorisation exclusive des droits d'accès spécifiés 

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * la 3ème indique le(s) droit(s) concerné(s) : 
235 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>     * la 3ème indique le(s) droit(s) concerné(s) : 
235 Écriture invariable. Utilisez un point médian. =>     * la 3ème indique le(s) droit(s) concerné(s) : 
235 Écriture invariable. Utilisez un point médian. =>     * la 3ème indique le(s) droit(s) concerné(s) : 
235 Il manque un espace insécable. =>     * la 3ème indique le(s) droit(s) concerné(s) : 
235 Espace(s) en fin de ligne à supprimer. =>     * la 3ème indique le(s) droit(s) concerné(s) : 

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * r pour lecture (r pour Read)
236 Mot inconnu : Read =>       * r pour lecture (r pour Read)

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * w pour écriture (w pour Write)
237 Mot inconnu : Write =>       * w pour écriture (w pour Write)

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * x pour exécution (x pour eXecute)
238 Mot inconnu : eXecute =>       * x pour exécution (x pour eXecute)

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs
239 Il manque un espace. =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs
239 Il manque un espace. =>       * u,g,o pour reprendre les droits du propriétaire,groupe,autres utilisateurs

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

241 Il manque un espace insécable. => Quelques précisions valables dans le cas d'un répertoire :

242 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * r signifie lecture totale du répertoire (la commande ls liste ainsi par exemple tous les fichiers contenus dans le répertoire). Mais en l'absence de ce droit, il est toujours possible de lire un fichier contenu dans ce répertoire (en connaissant son chemin).
242 Mot inconnu : ls =>     * r signifie lecture totale du répertoire (la commande ls liste ainsi par exemple tous les fichiers contenus dans le répertoire). Mais en l'absence de ce droit, il est toujours possible de lire un fichier contenu dans ce répertoire (en connaissant son chemin).

243 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever. 
243 Guillemets typographiques ouvrants. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever. 
243 Guillemets typographiques fermants. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever. 
243 Espace(s) en fin de ligne à supprimer. =>     * x signifie droit d'ouverture du répertoire. Pour empêcher la "traversée" d'un répertoire, c'est ce droit qu'il faut enlever. 

245 Il manque un espace insécable. => Exemples :

247 Mot inconnu : chmod => chmod g+r fichier 	  	### permet au groupe de lire le Fichier
247 Incohérence : espace et tabulation. => chmod g+r fichier 	  	### permet au groupe de lire le Fichier
247 Incohérence : espace et tabulation. => chmod g+r fichier 	  	### permet au groupe de lire le Fichier

248 Mot inconnu : chmod => chmod u+rw,go+r fichier       ### permet à l'utilisateur de lire et écrire le fichier, et aux autres de le lire
248 Mot inconnu : rw => chmod u+rw,go+r fichier       ### permet à l'utilisateur de lire et écrire le fichier, et aux autres de le lire
248 Il manque un espace. => chmod u+rw,go+r fichier       ### permet à l'utilisateur de lire et écrire le fichier, et aux autres de le lire
248 Espace(s) surnuméraire(s) à supprimer. => chmod u+rw,go+r fichier       ### permet à l'utilisateur de lire et écrire le fichier, et aux autres de le lire

249 Mot inconnu : chmod => chmod g=u fichier             ### permet de donner au groupe les mêmes droits que l'utilisateur
249 Espace(s) surnuméraire(s) à supprimer. => chmod g=u fichier             ### permet de donner au groupe les mêmes droits que l'utilisateur

252 Mot inconnu : __ => __**Méthode octale**__
252 Mot inconnu : __ => __**Méthode octale**__

254 Mot inconnu : chmod => **chmod XXX fichier**, où XXX = Utilisateur | Groupe | Autres (X représente un entier compris entre 1 et 7)

256 Il manque un espace insécable. => Valeur du chiffre X :

258 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 0 : aucun droit en lecture, écriture, exécution
258 Il manque un espace insécable. =>    * 0 : aucun droit en lecture, écriture, exécution

259 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 1 : droit d'exécution
259 Il manque un espace insécable. =>    * 1 : droit d'exécution

260 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 2 : droit d'écriture
260 Il manque un espace insécable. =>    * 2 : droit d'écriture

261 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * 4 : droit de lecture
261 Il manque un espace insécable. =>    * 4 : droit de lecture

263 Il manque un espace insécable. => On peut cumuler différents droits : X = 7 (soit 1+2+4) signifie donc que l'on donne tous les droits sur le fichier.

267 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 1er chiffre X spécifie les droits pour //le propriétaire// du fichier.
267 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. =>    * Le 1er chiffre X spécifie les droits pour //le propriétaire// du fichier.

268 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 2ème chiffre X spécifie les droits pour //le groupe propriétaire// du fichier.
268 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>    * Le 2ème chiffre X spécifie les droits pour //le groupe propriétaire// du fichier.

269 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Le 3ème chiffre X spécifie les droits pour //tous les autres utilisateurs// sur le fichier.
269 Nombre ordinal singulier. Exemples : 2ᵉ, 3ᵉ, 4ᵉ… =>    * Le 3ème chiffre X spécifie les droits pour //tous les autres utilisateurs// sur le fichier.

271 Mot inconnu : chmod => Ainsi, chmod 777 fichier donne tous les droits à tout le monde.
271 Accord de nombre erroné avec « 777 » : « fichier » devrait être au pluriel. => Ainsi, chmod 777 fichier donne tous les droits à tout le monde.

273 Mot inconnu : chmod => Un calculateur de chmod est disponible sur [[http://pages.infinit.net/glopglop/local/chmod.htm]]

275 Il manque un espace insécable. => Exemple :

278 Mot inconnu : chmod => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Il manque un espace à côté du tiret. => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Espace(s) surnuméraire(s) à supprimer. => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Mot inconnu : rw-r => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Il manque un espace à côté du tiret. => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Mot inconnu : txt => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Il manque les traits d’union. => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 
278 Espace(s) en fin de ligne à supprimer. => chmod -c 644 /home/utilisateur/texte.txt   ### modifie les droits en rw-r--r-- pour le fichier texte.txt c'est à dire que seul le 

279 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                                propriétaire peut écrire et les autres seulement lire

281 Mot inconnu : chmod => man chmod                                  ### pour avoir toutes les options sur "chmod"
281 Espace(s) surnuméraire(s) à supprimer. => man chmod                                  ### pour avoir toutes les options sur "chmod"
281 Guillemets typographiques ouvrants. => man chmod                                  ### pour avoir toutes les options sur "chmod"
281 Mot inconnu : chmod => man chmod                                  ### pour avoir toutes les options sur "chmod"
281 Guillemets typographiques fermants. => man chmod                                  ### pour avoir toutes les options sur "chmod"

284 Typographie : points de suspension. Utilisez le caractère dédié. => [[:permissions|... plus d'informations sur la gestion des droits d'accès sous Linux]]
288 Il manque un espace insécable. => La commande **[[:apt-cli|apt]]** permet de gérer les paquets Debian de votre Ubuntu. Exemple :

291 Mot inconnu : sudo => sudo apt update                      ### permet de mettre à jour la liste des paquets disponibles, commande à taper en premier
291 Mot inconnu : update => sudo apt update                      ### permet de mettre à jour la liste des paquets disponibles, commande à taper en premier
291 Espace(s) surnuméraire(s) à supprimer. => sudo apt update                      ### permet de mettre à jour la liste des paquets disponibles, commande à taper en premier

292 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                          avant toute installation pour être sûr d'avoir les mises à jour.

294 Mot inconnu : sudo => sudo apt upgrade                     ### permet de mettre à jour les paquets déjà installés, à taper pour faire les mises à 
294 Espace(s) surnuméraire(s) à supprimer. => sudo apt upgrade                     ### permet de mettre à jour les paquets déjà installés, à taper pour faire les mises à 
294 Espace(s) en fin de ligne à supprimer. => sudo apt upgrade                     ### permet de mettre à jour les paquets déjà installés, à taper pour faire les mises à 

295 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                          jour de sécurité.

297 Mot inconnu : sudo => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Mot inconnu : install => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Espace(s) surnuméraire(s) à supprimer. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Guillemets typographiques ouvrants. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Guillemets typographiques fermants. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Guillemets typographiques ouvrants. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Guillemets typographiques fermants. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 
297 Espace(s) en fin de ligne à supprimer. => sudo apt install soft                ### Installe le logiciel "soft" en gérant les dépendances, donc "apt" vous 

298 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                                          demande peut être d'installer d'autres paquets en complément.

300 Mot inconnu : sudo => sudo apt remove soft                 ### désinstalle le paquet "soft".
300 Mot inconnu : remove => sudo apt remove soft                 ### désinstalle le paquet "soft".
300 Espace(s) surnuméraire(s) à supprimer. => sudo apt remove soft                 ### désinstalle le paquet "soft".
300 Guillemets typographiques ouvrants. => sudo apt remove soft                 ### désinstalle le paquet "soft".
300 Guillemets typographiques fermants. => sudo apt remove soft                 ### désinstalle le paquet "soft".

302 Mot inconnu : sudo => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Mot inconnu : autoremove => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Espace(s) surnuméraire(s) à supprimer. => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Guillemets typographiques ouvrants. => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Guillemets typographiques fermants. => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Guillemets typographiques ouvrants. => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
302 Guillemets typographiques fermants. => sudo apt autoremove soft             ### désinstalle "proprement" le paquet "soft" ainsi que ses dépendances.
304 Mot inconnu : search => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
304 Mot inconnu : supersoft => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
304 Espace(s) surnuméraire(s) à supprimer. => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
304 Guillemets typographiques ouvrants. => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
304 Mot inconnu : supersoft => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
304 Guillemets typographiques fermants. => apt search supersoft                 ### recherche le texte "supersoft" dans les descriptions des paquets.
306 Espace(s) surnuméraire(s) à supprimer. => man apt                              ### pour avoir les options de "apt".
306 Guillemets typographiques ouvrants. => man apt                              ### pour avoir les options de "apt".
306 Guillemets typographiques fermants. => man apt                              ### pour avoir les options de "apt".
