7 Il manque un espace insécable. => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main !
7 Il manque un espace insécable. => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main !
7 Typographie : points de suspension. Utilisez le caractère dédié. => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main !
7 Il manque un espace insécable. => La compilation croisée ou «cross-compilation» en anglais permet de créer des exécutables depuis une certaine architecture pour une autre (Linux 32bits / 64bits mais aussi windows...). Cela permet de créer des paquets pour des systèmes que nous n'avons pas sous la main !

9 Typographie : points de suspension. Utilisez le caractère dédié. => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque.
9 Il manque un espace insécable. => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque.
9 Mot inconnu : kernel => Pour cela, nous allons commencer par compiler... un compilateur ! Mais attention, il sera BRUT c'est-à-dire sans aucune bibliothèque. On pourra alors compiler le kernel Linux ou une bibliothèque.

11 Il manque un espace insécable. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Il manque un espace. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : mingw-w64 => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : linux => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Il manque un espace insécable. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : lib64 => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Il manque un espace après la parenthèse. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : gcc1 => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : libc6-dev-amd64 => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Il manque un espace avant la parenthèse. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Mot inconnu : i386 => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 
11 Espace(s) en fin de ligne à supprimer. => Exceptions : le compilateur pour Windows(r) existe en paquets, pas besoin de le re-compiler, [[:tutoriel:comment_installer_un_paquet|installez le paquet]] **[[apt>mingw-w64]]**. Pour linux 32 bits vers 64 et vice-versa, il existe aussi des paquets : lib64(32)gcc1 et libc6-dev-amd64(i386). Il suffit de les installer pour aboutir à l'équivalent de ce que nous allons faire ici à la main. 

13 Mot inconnu : arm => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]]
13 Mot inconnu : Xcompile_arm => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]]
13 Mot inconnu : ARM => Pour la compilation croisée vers une architecture arm un petit script vous est présenté dans l'article [[Xcompile_arm|Compilation croisée pour ARM]]

17 Mot inconnu : oeil => Avoir jeté un oeil sur la page traitant de la compilation standard : [[tutoriel:compilation]].
17 Il manque un espace insécable. => Avoir jeté un oeil sur la page traitant de la compilation standard : [[tutoriel:compilation]].
17 Il manque un espace. => Avoir jeté un oeil sur la page traitant de la compilation standard : [[tutoriel:compilation]].

19 Mot inconnu : vouler => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé, 
19 Accord de nombre erroné avec « 64 bits » : « croisé » devrait être au pluriel. => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé, 
19 Espace(s) en fin de ligne à supprimer. => Si vous vouler compiler pour Windows(r) ou pour un 32/64 bits croisé, 

20 Incohérence avec “sur”. Confusion probable : “à” est une préposition. Écrivez “a” pour la conjugaison de “avoir”. => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]]
20 Il manque un espace. => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]]
20 Mot inconnu : comment_utiliser_mingw32_pour_faire_des_executables_windows => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]]
20 Mot inconnu : MingW => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]]
20 Il manque un espace insécable. => rendez-vous à sur la page [[tutoriel:comment_utiliser_mingw32_pour_faire_des_executables_windows|Comment utiliser MingW[32|64] pour faire des exécutables Windows ?]]

26 Il manque un espace insécable. => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.
26 Mot inconnu : binutils => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.
26 Mot inconnu : gcc => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.
26 Mot inconnu : binutils => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.
26 Mot inconnu : ld => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.
26 Mot inconnu : ar => Le compilateur comporte deux parties : les binutils et gcc. On commence avec les binutils qui comportent les outils de gestion comme **ld** ou **ar**.

29 Mot inconnu : binutils => ==== Les binutils ====

35 Il manque un espace insécable. => Configurer la compilation avec la commande :

36 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ./configure --target=x86_64-pc-linux
36 Mot inconnu : target =>   ./configure --target=x86_64-pc-linux
36 Mot inconnu : x86_64-pc-linux =>   ./configure --target=x86_64-pc-linux

38 Guillemets typographiques ouvrants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
38 Mot inconnu : target => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
38 Guillemets typographiques fermants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
38 Mot inconnu : x86_64 => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.

40 Guillemets typographiques ouvrants. => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher.
40 Mot inconnu : prefix => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher.
40 Guillemets typographiques fermants. => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher.
40 Mot inconnu : PATH => On peut utiliser l'option "prefix" pour configurer le dossier de base de l'installation mais étant donné que les exécutables créés seront tous précédés de l'architecture voulue, on peut tranquillement les mettre avec les autres sinon il faudrait configurer le PATH pour savoir où les chercher.

44 Il manque un espace insécable. => Il suffit de lancer la commande :

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make all
45 Mot inconnu : make =>   make all
45 Mot inconnu : all =>   make all

49 Guillemets typographiques ouvrants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
49 Mot inconnu : prefix => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
49 Guillemets typographiques fermants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
49 Il manque un espace insécable. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :

50 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make install
50 Mot inconnu : make =>   make install
50 Mot inconnu : install =>   make install

53 Mot inconnu : gcc => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ====
53 Il manque un espace insécable. => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ====
53 Guillemets typographiques ouvrants. => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ====
53 Guillemets typographiques fermants. => ==== gcc : "GNU Compiler Collection", groupement de compilateurs GNU ====

59 Il manque un espace insécable. => Configurer la compilation avec la commande :

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : enable-languages =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : disable-threads =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : disable-shared =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : disable-checking =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : prefix =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : mandir =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : infodir =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : target =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux
60 Mot inconnu : x86_64-pc-linux =>   ./configure --enable-languages=c --disable-threads --disable-shared --disable-checking --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --target=x86_64-pc-linux

62 Guillemets typographiques ouvrants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
62 Mot inconnu : target => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
62 Guillemets typographiques fermants. => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.
62 Mot inconnu : x86_64 => L'option "target" permet de choisir l'architecture de destination. Ici on aura un compilateur pour l'architecture 64 bits. Remplacer le x86_64 par ce que l'on souhaite produire.

64 Il manque un espace insécable. => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++
64 Mot inconnu : enable-languages => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++
64 Il manque un espace. => Si on veut le C++, il faut le rajouter aux langages, après c : --enable-languages=c,c++

68 Il manque un espace insécable. => Il suffit de lancer la commande :

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make all-gcc
69 Mot inconnu : make =>   make all-gcc
69 Mot inconnu : all-gcc =>   make all-gcc

73 Guillemets typographiques ouvrants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
73 Mot inconnu : prefix => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
73 Guillemets typographiques fermants. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :
73 Il manque un espace insécable. => Avec les droits super-utilisateur si on veut installer dans les parties système (option "prefix") :

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   make install-gcc
74 Mot inconnu : make =>   make install-gcc
74 Mot inconnu : install-gcc =>   make install-gcc

79 Typographie : points de suspension. Utilisez le caractère dédié. => Voila, on devrait avoir un compilateur en état de marche...

83 Espace(s) surnuméraire(s) à supprimer. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"
83 Typographie : un ou trois points ? => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"
83 Mot inconnu : iables_d_environnement => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"
83 Guillemets typographiques ouvrants. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"
83 Mot inconnu : xxxxxx => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"
83 Guillemets typographiques fermants. => Donner  la [[../variables_d_environnement|variable d'environnement]] "CC=xxxxxx"

84 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut.
84 Mot inconnu : xxxxxx => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut.
84 Mot inconnu : make => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut.
84 Mot inconnu : target => où xxxxxx est le préfixe des commandes de compilateur que make devra utiliser. C'est ce qu'on a donné comme target plus haut.

86 Mot inconnu : m64 => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*".
86 Mot inconnu : gcc => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*".
86 Guillemets typographiques ouvrants. => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*".
86 Mot inconnu : lib64 => Pour les paquets installés Linux 32/64 croisé il faut rajouter l'argument "-m64(32)" à la ligne de gcc. De plus certaines bibliothèques existent en paquets, voir tous les paquets "lib64(32)*".

88 Mot inconnu : kernel => ==== Le kernel ====

90 Mot inconnu : kernel => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg :
90 Mot inconnu : make-kpkg => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg :
90 Il manque un espace insécable. => Exemple de ligne de commande pour compiler le kernel Linux où c'est plus compliqué si on veut utiliser make-kpkg :

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : sudo =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : make-kpkg =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : initrd =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : arch =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : amd64 =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : cross_compile =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : x86_64-pc-linux =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : revision =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : amd64noyaujojo =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : append-to-version =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : kernel_image =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : kernel_headers =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image
91 Mot inconnu : modules_image =>   sudo make-kpkg --initrd --arch=amd64 --cross_compile=x86_64-pc-linux --revision=amd64noyaujojo --append-to-version test kernel_image kernel_headers modules_image

92 Mot inconnu : arch => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Guillemets typographiques ouvrants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Mot inconnu : amd64 => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Guillemets typographiques ouvrants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Mot inconnu : arch => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".
92 Guillemets typographiques fermants. => En super-utilisateur pour créer le paquet (!). Ici on donne à arch la valeur "amd64" car ne compte que ce que les paquets acceptent comme architecture, non pas le préfixe des commandes à utiliser. On a pour cela recours à l'option "cross-compile" qui remplace l'habituelle "--arch".

94 Il manque un espace. => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]].
94 Mot inconnu : comment_compiler_un_kernel_de_kernel => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]].
94 Mot inconnu : kernel => Les autres options sont issues de la page [[tutoriel:comment_compiler_un_kernel_de_kernel.org|traitant de la compilation du kernel]].

98 Guillemets typographiques fermants. => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4".
98 Mot inconnu : make => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4".
98 Mot inconnu : bicore => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4".
98 Il manque un espace insécable. => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4".
98 Guillemets typographiques fermants. => Rajouter l'option "-j X" à make pour compiler sur plusieurs processus à la fois par ex. pour un bicore : "-j 4".

99 Mot inconnu : cores => X = (nombre de cores)x2
99 Il manque un espace après la parenthèse. => X = (nombre de cores)x2
99 Mot inconnu : x2 => X = (nombre de cores)x2

106 Il manque un espace insécable. => //Contributeurs: Créée par [[utilisateurs:Johndescs]].//
106 Il manque un espace. => //Contributeurs: Créée par [[utilisateurs:Johndescs]].//
