2 Mot inconnu : Trusty => {{tag>Trusty matériel audio asus}}
2 Mot inconnu : asus => {{tag>Trusty matériel audio asus}}

3 Il manque un espace insécable. => ====== Carte son : Xonar Xense ======
3 Mot inconnu : Xonar => ====== Carte son : Xonar Xense ======
3 Mot inconnu : Xense => ====== Carte son : Xonar Xense ======

5 Mot inconnu : Xonar => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Mot inconnu : Xense => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Il manque un trait d’union. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Il manque un trait d’union. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Mot inconnu : bundle => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 S’il s’agit d’un seul mot, il manque un trait d’union. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Mot inconnu : Sennheiser => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Avec une unité de mesure, mettez un espace insécable. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Avec une unité de mesure, mettez un espace insécable. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Mot inconnu : Alsa => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.
5 Il manque un trait d’union. => La carte son d'Asus, [[http://www.ldlc.com/fiche/PB00107269.html|Xonar Xense]], propose un équipement parfait pour tout audiophile polyvalent, amateur de musique en format sans perte ou qualité studio, comme cinéphile ou gamer, celle ci répond à toutes les attentes, néanmoins, son support a beaucoup tardé sous Linux, celle ci proposant un bundle carte son +  Micro Casque [[http://www.lesnumeriques.com/casque-audio/sennheiser-pc-350-p5987/test.html|Sennheiser PC 350]] pour un prix se situant entre 200€ et 250€ selon les boutiques, ce qui n'est guère facilement accessible aux développeurs d'Alsa, le casque pouvant en plus faire double emploi pour ceux ci.

10 Mot inconnu : DSP => **Chip / DSP** : ASUS AV100
10 Il manque un espace insécable. => **Chip / DSP** : ASUS AV100
10 Mot inconnu : AV100 => **Chip / DSP** : ASUS AV100

12 Mot inconnu : PCI => **Bus**	: PCI Express 1x

14 Il manque un espace insécable. => **Nombre de canaux audio** : 7,1

16 Il manque un espace insécable. => **Convertisseur N/A** : 24 bits / 192 kHz
16 Avec une unité de mesure, mettez un espace insécable. => **Convertisseur N/A** : 24 bits / 192 kHz

18 Il manque un espace insécable. => **Convertisseur A/N** : 24 bits / 192 kHz
18 Avec une unité de mesure, mettez un espace insécable. => **Convertisseur A/N** : 24 bits / 192 kHz

20 Il manque un espace insécable. => **Fréquence des tests** : 44.1 kHz (min.) - 192 kHz (maximum)
20 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => **Fréquence des tests** : 44.1 kHz (min.) - 192 kHz (maximum)
20 Avec une unité de mesure, mettez un espace insécable. => **Fréquence des tests** : 44.1 kHz (min.) - 192 kHz (maximum)

22 Il manque un espace insécable. => **Rapport signal / bruit** : 118 dB / 64 - 300 ohms
22 Avec une unité de mesure, mettez un espace insécable. => **Rapport signal / bruit** : 118 dB / 64 - 300 ohms
22 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => **Rapport signal / bruit** : 118 dB / 64 - 300 ohms

24 Il manque un espace insécable. => **Bande passante en réponse** : 10 - 46000 Hz
24 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) => **Bande passante en réponse** : 10 - 46000 Hz
24 Avec une unité de mesure, mettez un espace insécable. => **Bande passante en réponse** : 10 - 46000 Hz

26 Il manque un espace insécable. => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : ASIO2 => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Espace(s) surnuméraire(s) à supprimer. => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : EAX => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : EAX => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : OpenAL => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : Dolby => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : DirectSound3D => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : GX => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : DirectSound3D => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : GX => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : Definition => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : DirectSound3D => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0
26 Mot inconnu : GX => **Normes audio supportées** : ASIO2,  EAX 2.0, EAX 1.0, OpenAL, Dolby Digital Live, DirectSound3D GX 2.5, DirectSound3D GX 1.0, High Definition Audio, DirectSound3D GX 2.0

28 Il manque un espace insécable. => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Dolby => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Logic => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Dolby => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Dolby => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Virtual => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Normalizer => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : FlexBass => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Xear => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Virtual => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter
28 Mot inconnu : Shifter => **Caractéristiques** : Décodeur Dolby Pro Logic II intégré, technologie casque Dolby, technologie Dolby Virtual Speaker, Smart Volume Normalizer, FlexBass, Xear 3D Virtual Speaker Shifter

30 Il manque un espace insécable. => **Entrées externes** : Line IN / Micro (Jack 6.35mm)

32 Il manque un espace insécable. => **Sorties externes** : Sortie 7.1 (câble splitter DVI vers multi Jack 3.5mm), Casque (Jack 6.35mm), Audio numérique S/PDIF Coaxiale
32 Mot inconnu : DVI => **Sorties externes** : Sortie 7.1 (câble splitter DVI vers multi Jack 3.5mm), Casque (Jack 6.35mm), Audio numérique S/PDIF Coaxiale
32 Mot inconnu : PDIF => **Sorties externes** : Sortie 7.1 (câble splitter DVI vers multi Jack 3.5mm), Casque (Jack 6.35mm), Audio numérique S/PDIF Coaxiale

34 Il manque un espace insécable. => **Entrées et sorties internes** : Auxiliaire (pour boitier PC)

40 Mot inconnu : Xonar => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>
40 Mot inconnu : Xense => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>
40 Confusion : “à” est une préposition. Pour le verbe avoir, écrivez “a”. => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>
40 Accord de genre erroné : « stéréo » est féminin. => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>
40 Confusion probable : “a” est une conjugaison du verbe avoir. Pour la préposition, écrivez “à”. => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>
40 Incohérence probable avec “a” : “améliorer” n’est pas un participe passé. => <note tip>Depuis la sortie du Noyau Linux 3.18 fin 2014, le support de la carte son Asus Xonar Xense via ces pilotes à été intégré au noyau et ne nécessite plus aucune manipulation, par contre comme ici, le support se limite au stéréo pour l'instant, jusqu'à ce que quelqu'un contribue a améliorer le support de la carte</note>

42 Mot inconnu : MacOS => J'ai tenté à plusieurs reprises de contacter Asus à ce sujet, sans succès, la hotline se contentant de répondre à côté de la plaque, en évoquant à la limite, le support de MacOS pour la carte, mais ne mentionnant rien du tout pour le noyau Linux.

43 Mot inconnu : Alsa => De même j'ai fait chou blanc en tentant de rentrer en contact avec les développeurs d'Alsa et ai appris via un forum que le mainteneur principal du module "oxygen" prenant en charge les cartes d'ASUS, n'avait pas le temps de s'en occuper.
43 Guillemets typographiques ouvrants. => De même j'ai fait chou blanc en tentant de rentrer en contact avec les développeurs d'Alsa et ai appris via un forum que le mainteneur principal du module "oxygen" prenant en charge les cartes d'ASUS, n'avait pas le temps de s'en occuper.
43 Mot inconnu : oxygen => De même j'ai fait chou blanc en tentant de rentrer en contact avec les développeurs d'Alsa et ai appris via un forum que le mainteneur principal du module "oxygen" prenant en charge les cartes d'ASUS, n'avait pas le temps de s'en occuper.
43 Guillemets typographiques fermants. => De même j'ai fait chou blanc en tentant de rentrer en contact avec les développeurs d'Alsa et ai appris via un forum que le mainteneur principal du module "oxygen" prenant en charge les cartes d'ASUS, n'avait pas le temps de s'en occuper.

44 Mot inconnu : list => C'est là qu'en juillet 2013, ô surprise, je suis tombé un peu par hasard, sur une contribution incomplète sur mailing list du projet ALSA, du développeur Ian Dawes , que j'ai finit par contacter par mail, malgré mon anglais plus que douteux, et auprès duquel je me suis manifesté pour effectuer les divers tests de ses patchs.
44 Mot inconnu : ALSA => C'est là qu'en juillet 2013, ô surprise, je suis tombé un peu par hasard, sur une contribution incomplète sur mailing list du projet ALSA, du développeur Ian Dawes , que j'ai finit par contacter par mail, malgré mon anglais plus que douteux, et auprès duquel je me suis manifesté pour effectuer les divers tests de ses patchs.
44 Mot inconnu : Dawes => C'est là qu'en juillet 2013, ô surprise, je suis tombé un peu par hasard, sur une contribution incomplète sur mailing list du projet ALSA, du développeur Ian Dawes , que j'ai finit par contacter par mail, malgré mon anglais plus que douteux, et auprès duquel je me suis manifesté pour effectuer les divers tests de ses patchs.
44 Pas d’espace avant une virgule. => C'est là qu'en juillet 2013, ô surprise, je suis tombé un peu par hasard, sur une contribution incomplète sur mailing list du projet ALSA, du développeur Ian Dawes , que j'ai finit par contacter par mail, malgré mon anglais plus que douteux, et auprès duquel je me suis manifesté pour effectuer les divers tests de ses patchs.
44 Incohérence probable avec “ai” : “finit” n’est pas un participe passé. => C'est là qu'en juillet 2013, ô surprise, je suis tombé un peu par hasard, sur une contribution incomplète sur mailing list du projet ALSA, du développeur Ian Dawes , que j'ai finit par contacter par mail, malgré mon anglais plus que douteux, et auprès duquel je me suis manifesté pour effectuer les divers tests de ses patchs.

45 S’il s’agit d’un seul mot, il manque un trait d’union. => Le support préliminaire ne prenait en charge que la sortie 7.1 en stéréo, mais pas la sortie audio Jack 6.35mm proposée sur la carte, enfin en mi Aout 2013; ce dernier a apporté des modifications significatives à son patch, assez pour pouvoir être qualifié d'utilisable sans problèmes.
45 Pas de majuscule sur les mois. => Le support préliminaire ne prenait en charge que la sortie 7.1 en stéréo, mais pas la sortie audio Jack 6.35mm proposée sur la carte, enfin en mi Aout 2013; ce dernier a apporté des modifications significatives à son patch, assez pour pouvoir être qualifié d'utilisable sans problèmes.
45 Il manque un espace insécable. => Le support préliminaire ne prenait en charge que la sortie 7.1 en stéréo, mais pas la sortie audio Jack 6.35mm proposée sur la carte, enfin en mi Aout 2013; ce dernier a apporté des modifications significatives à son patch, assez pour pouvoir être qualifié d'utilisable sans problèmes.

47 Mot inconnu : DKMS => ===== Paquet prêt à l'emploi (dépend de DKMS) =====

49 Mot inconnu : linux => Un paquet recompilant automatiquement le module à chaque mise à jour du noyau linux, est [[http://vavar60.online.fr/share/oxygen-xense-dkms_0.1~git.b044dfe_all.deb|disponible au téléchargement]].

51 S’il s’agit d’un impératif, mettez un trait d’union. => Installez le, puis redémarrez votre système.

56 Mot inconnu : Signed-off-by => <code> Signed-off-by: Ian Dawes <madeallup.gen@gmail.com>
56 Il manque un espace insécable. => <code> Signed-off-by: Ian Dawes <madeallup.gen@gmail.com>
56 Mot inconnu : Dawes => <code> Signed-off-by: Ian Dawes <madeallup.gen@gmail.com>

58 Mot inconnu : diff => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Confusion probable : “a” est la conjugaison du verbe “avoir”. Pour la préposition, écrivez “à”. => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : sound => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : pci => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : oxygen => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : virtuoso => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : sound => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : pci => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : oxygen => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c
58 Mot inconnu : virtuoso => diff --git a/sound/pci/oxygen/virtuoso.c b/sound/pci/oxygen/virtuoso.c

59 Mot inconnu : b9fda => index 64b9fda..df99ec9 100644
59 Typographie : un ou trois points ? => index 64b9fda..df99ec9 100644
59 Mot inconnu : df99ec9 => index 64b9fda..df99ec9 100644
59 Formatage des grands nombres. => index 64b9fda..df99ec9 100644

60 Mot inconnu : sound => --- a/sound/pci/oxygen/virtuoso.c
60 Mot inconnu : pci => --- a/sound/pci/oxygen/virtuoso.c
60 Mot inconnu : oxygen => --- a/sound/pci/oxygen/virtuoso.c
60 Mot inconnu : virtuoso => --- a/sound/pci/oxygen/virtuoso.c

61 Mot inconnu : sound => +++ b/sound/pci/oxygen/virtuoso.c
61 Mot inconnu : pci => +++ b/sound/pci/oxygen/virtuoso.c
61 Mot inconnu : oxygen => +++ b/sound/pci/oxygen/virtuoso.c
61 Mot inconnu : virtuoso => +++ b/sound/pci/oxygen/virtuoso.c

62 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -52,6 +52,7 @@ static DEFINE_PCI_DEVICE_TABLE(xonar_ids) = {
62 Mot inconnu : static => @@ -52,6 +52,7 @@ static DEFINE_PCI_DEVICE_TABLE(xonar_ids) = {
62 Mot inconnu : DEFINE_PCI_DEVICE_TABLE => @@ -52,6 +52,7 @@ static DEFINE_PCI_DEVICE_TABLE(xonar_ids) = {
62 Il manque un espace avant la parenthèse. => @@ -52,6 +52,7 @@ static DEFINE_PCI_DEVICE_TABLE(xonar_ids) = {
62 Mot inconnu : xonar_ids => @@ -52,6 +52,7 @@ static DEFINE_PCI_DEVICE_TABLE(xonar_ids) = {

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { OXYGEN_PCI_SUBID(0x1043, 0x835d) },
63 Mot inconnu : OXYGEN_PCI_SUBID =>      { OXYGEN_PCI_SUBID(0x1043, 0x835d) },
63 Il manque un espace avant la parenthèse. =>      { OXYGEN_PCI_SUBID(0x1043, 0x835d) },
63 Mot inconnu : x1043 =>      { OXYGEN_PCI_SUBID(0x1043, 0x835d) },
63 Mot inconnu : x835d =>      { OXYGEN_PCI_SUBID(0x1043, 0x835d) },

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { OXYGEN_PCI_SUBID(0x1043, 0x835e) },
64 Mot inconnu : OXYGEN_PCI_SUBID =>      { OXYGEN_PCI_SUBID(0x1043, 0x835e) },
64 Il manque un espace avant la parenthèse. =>      { OXYGEN_PCI_SUBID(0x1043, 0x835e) },
64 Mot inconnu : x1043 =>      { OXYGEN_PCI_SUBID(0x1043, 0x835e) },
64 Mot inconnu : x835e =>      { OXYGEN_PCI_SUBID(0x1043, 0x835e) },

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { OXYGEN_PCI_SUBID(0x1043, 0x838e) },
65 Mot inconnu : OXYGEN_PCI_SUBID =>      { OXYGEN_PCI_SUBID(0x1043, 0x838e) },
65 Il manque un espace avant la parenthèse. =>      { OXYGEN_PCI_SUBID(0x1043, 0x838e) },
65 Mot inconnu : x1043 =>      { OXYGEN_PCI_SUBID(0x1043, 0x838e) },
65 Mot inconnu : x838e =>      { OXYGEN_PCI_SUBID(0x1043, 0x838e) },

66 Mot inconnu : OXYGEN_PCI_SUBID => +    { OXYGEN_PCI_SUBID(0x1043, 0x8428) },
66 Il manque un espace avant la parenthèse. => +    { OXYGEN_PCI_SUBID(0x1043, 0x8428) },
66 Mot inconnu : x1043 => +    { OXYGEN_PCI_SUBID(0x1043, 0x8428) },
66 Mot inconnu : x8428 => +    { OXYGEN_PCI_SUBID(0x1043, 0x8428) },

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { OXYGEN_PCI_SUBID(0x1043, 0x8522) },
67 Mot inconnu : OXYGEN_PCI_SUBID =>      { OXYGEN_PCI_SUBID(0x1043, 0x8522) },
67 Il manque un espace avant la parenthèse. =>      { OXYGEN_PCI_SUBID(0x1043, 0x8522) },
67 Mot inconnu : x1043 =>      { OXYGEN_PCI_SUBID(0x1043, 0x8522) },
67 Mot inconnu : x8522 =>      { OXYGEN_PCI_SUBID(0x1043, 0x8522) },

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { OXYGEN_PCI_SUBID_BROKEN_EEPROM },
68 Mot inconnu : OXYGEN_PCI_SUBID_BROKEN_EEPROM =>      { OXYGEN_PCI_SUBID_BROKEN_EEPROM },

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      { }

70 Mot inconnu : diff => diff --git a/sound/pci/oxygen/xonar_pcm179x.c
70 Confusion probable : “a” est la conjugaison du verbe “avoir”. Pour la préposition, écrivez “à”. => diff --git a/sound/pci/oxygen/xonar_pcm179x.c
70 Mot inconnu : sound => diff --git a/sound/pci/oxygen/xonar_pcm179x.c
70 Mot inconnu : pci => diff --git a/sound/pci/oxygen/xonar_pcm179x.c
70 Mot inconnu : oxygen => diff --git a/sound/pci/oxygen/xonar_pcm179x.c
70 Mot inconnu : xonar_pcm179x => diff --git a/sound/pci/oxygen/xonar_pcm179x.c

71 Mot inconnu : sound => b/sound/pci/oxygen/xonar_pcm179x.c
71 Mot inconnu : pci => b/sound/pci/oxygen/xonar_pcm179x.c
71 Mot inconnu : oxygen => b/sound/pci/oxygen/xonar_pcm179x.c
71 Mot inconnu : xonar_pcm179x => b/sound/pci/oxygen/xonar_pcm179x.c

72 Mot inconnu : c8c7f2c => index c8c7f2c..7f31df8 100644
72 Typographie : un ou trois points ? => index c8c7f2c..7f31df8 100644
72 Mot inconnu : f31df8 => index c8c7f2c..7f31df8 100644
72 Formatage des grands nombres. => index c8c7f2c..7f31df8 100644

73 Mot inconnu : sound => --- a/sound/pci/oxygen/xonar_pcm179x.c
73 Mot inconnu : pci => --- a/sound/pci/oxygen/xonar_pcm179x.c
73 Mot inconnu : oxygen => --- a/sound/pci/oxygen/xonar_pcm179x.c
73 Mot inconnu : xonar_pcm179x => --- a/sound/pci/oxygen/xonar_pcm179x.c

74 Mot inconnu : sound => +++ b/sound/pci/oxygen/xonar_pcm179x.c
74 Mot inconnu : pci => +++ b/sound/pci/oxygen/xonar_pcm179x.c
74 Mot inconnu : oxygen => +++ b/sound/pci/oxygen/xonar_pcm179x.c
74 Mot inconnu : xonar_pcm179x => +++ b/sound/pci/oxygen/xonar_pcm179x.c

75 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -212,6 +212,11 @@

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  #define GPIO_ST_MAGIC        0x0040
76 Mot inconnu : GPIO_ST_MAGIC =>  #define GPIO_ST_MAGIC        0x0040
76 Espace(s) surnuméraire(s) à supprimer. =>  #define GPIO_ST_MAGIC        0x0040
76 Mot inconnu : x0040 =>  #define GPIO_ST_MAGIC        0x0040

77 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  #define GPIO_ST_HP        0x0080
77 Mot inconnu : GPIO_ST_HP =>  #define GPIO_ST_HP        0x0080
77 Espace(s) surnuméraire(s) à supprimer. =>  #define GPIO_ST_HP        0x0080
77 Mot inconnu : x0080 =>  #define GPIO_ST_HP        0x0080

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

79 Mot inconnu : GPIO_XENSE_OUTPUT_ENABLE => +#define GPIO_XENSE_OUTPUT_ENABLE (0x0001 | 0x0010 | 0x0020)
79 Mot inconnu : x0001 => +#define GPIO_XENSE_OUTPUT_ENABLE (0x0001 | 0x0010 | 0x0020)
79 Mot inconnu : x0010 => +#define GPIO_XENSE_OUTPUT_ENABLE (0x0001 | 0x0010 | 0x0020)
79 Mot inconnu : x0020 => +#define GPIO_XENSE_OUTPUT_ENABLE (0x0001 | 0x0010 | 0x0020)

80 Mot inconnu : GPIO_XENSE_HP_REAR => +#define GPIO_XENSE_HP_REAR       0x0002
80 Espace(s) surnuméraire(s) à supprimer. => +#define GPIO_XENSE_HP_REAR       0x0002
80 Mot inconnu : x0002 => +#define GPIO_XENSE_HP_REAR       0x0002

81 Mot inconnu : GPIO_XENSE_MAGIC => +#define GPIO_XENSE_MAGIC         0x0040
81 Espace(s) surnuméraire(s) à supprimer. => +#define GPIO_XENSE_MAGIC         0x0040
81 Mot inconnu : x0040 => +#define GPIO_XENSE_MAGIC         0x0040

82 Mot inconnu : GPIO_XENSE_SPEAKERS => +#define GPIO_XENSE_SPEAKERS      0x0080
82 Espace(s) surnuméraire(s) à supprimer. => +#define GPIO_XENSE_SPEAKERS      0x0080
82 Mot inconnu : x0080 => +#define GPIO_XENSE_SPEAKERS      0x0080

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  #define I2C_DEVICE_PCM1796(i)    (0x98 + ((i) << 1))    /* 10011, ii,
84 Mot inconnu : I2C_DEVICE_PCM1796 =>  #define I2C_DEVICE_PCM1796(i)    (0x98 + ((i) << 1))    /* 10011, ii,
84 Mot inconnu : x98 =>  #define I2C_DEVICE_PCM1796(i)    (0x98 + ((i) << 1))    /* 10011, ii,
84 Formatage des grands nombres. =>  #define I2C_DEVICE_PCM1796(i)    (0x98 + ((i) << 1))    /* 10011, ii,
84 Mot inconnu : ii =>  #define I2C_DEVICE_PCM1796(i)    (0x98 + ((i) << 1))    /* 10011, ii,

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */
86 Mot inconnu : I2C_DEVICE_CS2000 =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */
86 Espace(s) surnuméraire(s) à supprimer. =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */
86 Mot inconnu : x9c =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */
86 Espace(s) surnuméraire(s) à supprimer. =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */
86 Formatage des grands nombres. =>  #define I2C_DEVICE_CS2000    0x9c            /* 100111, 0, /W=0 */

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

88 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Mot inconnu : static => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Mot inconnu : void => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Mot inconnu : xonar_stx_init => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Il manque un espace avant la parenthèse. => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Mot inconnu : struct => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)
88 Mot inconnu : oxygen => @@ -499,6 +504,52 @@ static void xonar_stx_init(struct oxygen *chip)

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      xonar_st_init_common(chip);
89 Mot inconnu : xonar_st_init_common =>      xonar_st_init_common(chip);
89 Il manque un espace avant la parenthèse. =>      xonar_st_init_common(chip);

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  }

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

92 Mot inconnu : static => +static void xonar_xense_init(struct oxygen *chip)
92 Mot inconnu : void => +static void xonar_xense_init(struct oxygen *chip)
92 Mot inconnu : xonar_xense_init => +static void xonar_xense_init(struct oxygen *chip)
92 Il manque un espace avant la parenthèse. => +static void xonar_xense_init(struct oxygen *chip)
92 Mot inconnu : struct => +static void xonar_xense_init(struct oxygen *chip)
92 Mot inconnu : oxygen => +static void xonar_xense_init(struct oxygen *chip)

94 Mot inconnu : struct => +    struct xonar_pcm179x *data = chip->model_data;
94 Mot inconnu : xonar_pcm179x => +    struct xonar_pcm179x *data = chip->model_data;
94 Mot inconnu : model_data => +    struct xonar_pcm179x *data = chip->model_data;
94 Il manque un espace insécable. => +    struct xonar_pcm179x *data = chip->model_data;

96 Mot inconnu : generic => +    data->generic.ext_power_reg = OXYGEN_GPI_DATA;
96 Mot inconnu : ext_power_reg => +    data->generic.ext_power_reg = OXYGEN_GPI_DATA;
96 Mot inconnu : OXYGEN_GPI_DATA => +    data->generic.ext_power_reg = OXYGEN_GPI_DATA;
96 Il manque un espace insécable. => +    data->generic.ext_power_reg = OXYGEN_GPI_DATA;

97 Mot inconnu : generic => +    data->generic.ext_power_int_reg = OXYGEN_GPI_INTERRUPT_MASK;
97 Mot inconnu : ext_power_int_reg => +    data->generic.ext_power_int_reg = OXYGEN_GPI_INTERRUPT_MASK;
97 Mot inconnu : OXYGEN_GPI_INTERRUPT_MASK => +    data->generic.ext_power_int_reg = OXYGEN_GPI_INTERRUPT_MASK;
97 Il manque un espace insécable. => +    data->generic.ext_power_int_reg = OXYGEN_GPI_INTERRUPT_MASK;

98 Mot inconnu : generic => +    data->generic.ext_power_bit = GPI_EXT_POWER;
98 Mot inconnu : ext_power_bit => +    data->generic.ext_power_bit = GPI_EXT_POWER;
98 Mot inconnu : GPI_EXT_POWER => +    data->generic.ext_power_bit = GPI_EXT_POWER;
98 Il manque un espace insécable. => +    data->generic.ext_power_bit = GPI_EXT_POWER;

99 Mot inconnu : xonar_init_ext_power => +    xonar_init_ext_power(chip);
99 Il manque un espace avant la parenthèse. => +    xonar_init_ext_power(chip);

100 Espace(s) en fin de ligne à supprimer. => +   

101 Mot inconnu : generic => +    data->generic.anti_pop_delay = 100;
101 Mot inconnu : anti_pop_delay => +    data->generic.anti_pop_delay = 100;
101 Il manque un espace insécable. => +    data->generic.anti_pop_delay = 100;

102 Mot inconnu : h6 => +    data->h6 = chip->model.dac_channels_mixer > 2;
102 Mot inconnu : model => +    data->h6 = chip->model.dac_channels_mixer > 2;
102 Mot inconnu : dac_channels_mixer => +    data->h6 = chip->model.dac_channels_mixer > 2;
102 Il manque un espace insécable. => +    data->h6 = chip->model.dac_channels_mixer > 2;

103 Mot inconnu : has_cs2000 => +    data->has_cs2000 = 1;
103 Il manque un espace insécable. => +    data->has_cs2000 = 1;

104 Mot inconnu : cs2000_regs => +    data->cs2000_regs[CS2000_FUN_CFG_1] = CS2000_REF_CLK_DIV_1;
104 Mot inconnu : CS2000_FUN_CFG_1 => +    data->cs2000_regs[CS2000_FUN_CFG_1] = CS2000_REF_CLK_DIV_1;
104 Mot inconnu : CS2000_REF_CLK_DIV_1 => +    data->cs2000_regs[CS2000_FUN_CFG_1] = CS2000_REF_CLK_DIV_1;
104 Il manque un espace insécable. => +    data->cs2000_regs[CS2000_FUN_CFG_1] = CS2000_REF_CLK_DIV_1;

105 Mot inconnu : broken_i2c => +    data->broken_i2c = true;
105 Mot inconnu : true => +    data->broken_i2c = true;
105 Il manque un espace insécable. => +    data->broken_i2c = true;

107 Mot inconnu : oxygen_write16 => +    oxygen_write16(chip, OXYGEN_I2S_A_FORMAT,
107 Il manque un espace avant la parenthèse. => +    oxygen_write16(chip, OXYGEN_I2S_A_FORMAT,
107 Mot inconnu : OXYGEN_I2S_A_FORMAT => +    oxygen_write16(chip, OXYGEN_I2S_A_FORMAT,

108 Mot inconnu : OXYGEN_RATE_48000 => +               OXYGEN_RATE_48000 |

109 Mot inconnu : OXYGEN_I2S_FORMAT_I2S => +               OXYGEN_I2S_FORMAT_I2S |

110 Mot inconnu : OXYGEN_I2S_MCLK => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Il manque un espace avant la parenthèse. => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Mot inconnu : h6 => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Il manque un espace insécable. => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Mot inconnu : MCLK_256 => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Il manque un espace insécable. => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |
110 Mot inconnu : MCLK_512 => +               OXYGEN_I2S_MCLK(data->h6 ? MCLK_256 : MCLK_512) |

111 Mot inconnu : OXYGEN_I2S_BITS_16 => +               OXYGEN_I2S_BITS_16 |

112 Mot inconnu : OXYGEN_I2S_MASTER => +               OXYGEN_I2S_MASTER |

113 Mot inconnu : OXYGEN_I2S_BCLK_64 => +               OXYGEN_I2S_BCLK_64);

115 Mot inconnu : xonar_st_init_i2c => +    xonar_st_init_i2c(chip);
115 Il manque un espace avant la parenthèse. => +    xonar_st_init_i2c(chip);

116 Mot inconnu : cs2000_registers_init => +    cs2000_registers_init(chip);
116 Il manque un espace avant la parenthèse. => +    cs2000_registers_init(chip);

117 Espace(s) en fin de ligne à supprimer. => +   

118 Mot inconnu : generic => +    data->generic.output_enable_bit = GPIO_XENSE_OUTPUT_ENABLE;
118 Mot inconnu : output_enable_bit => +    data->generic.output_enable_bit = GPIO_XENSE_OUTPUT_ENABLE;
118 Mot inconnu : GPIO_XENSE_OUTPUT_ENABLE => +    data->generic.output_enable_bit = GPIO_XENSE_OUTPUT_ENABLE;
118 Il manque un espace insécable. => +    data->generic.output_enable_bit = GPIO_XENSE_OUTPUT_ENABLE;

119 Mot inconnu : dacs => +    data->dacs = chip->model.dac_channels_mixer / 2;
119 Mot inconnu : model => +    data->dacs = chip->model.dac_channels_mixer / 2;
119 Mot inconnu : dac_channels_mixer => +    data->dacs = chip->model.dac_channels_mixer / 2;
119 Il manque un espace insécable. => +    data->dacs = chip->model.dac_channels_mixer / 2;

120 Mot inconnu : hp_gain_offset => +    data->hp_gain_offset = 2*-18;
120 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => +    data->hp_gain_offset = 2*-18;
120 Il manque un espace insécable. => +    data->hp_gain_offset = 2*-18;

122 Mot inconnu : pcm1796_init => +    pcm1796_init(chip);
122 Il manque un espace avant la parenthèse. => +    pcm1796_init(chip);

124 Mot inconnu : oxygen_set_bits16 => +    oxygen_set_bits16(chip, OXYGEN_GPIO_CONTROL,
124 Il manque un espace avant la parenthèse. => +    oxygen_set_bits16(chip, OXYGEN_GPIO_CONTROL,
124 Mot inconnu : OXYGEN_GPIO_CONTROL => +    oxygen_set_bits16(chip, OXYGEN_GPIO_CONTROL,

125 Mot inconnu : GPIO_INPUT_ROUTE => +              GPIO_INPUT_ROUTE | GPIO_XENSE_HP_REAR |
125 Mot inconnu : GPIO_XENSE_HP_REAR => +              GPIO_INPUT_ROUTE | GPIO_XENSE_HP_REAR |

126 Mot inconnu : GPIO_XENSE_MAGIC => +              GPIO_XENSE_MAGIC | GPIO_XENSE_SPEAKERS);
126 Mot inconnu : GPIO_XENSE_SPEAKERS => +              GPIO_XENSE_MAGIC | GPIO_XENSE_SPEAKERS);

127 Mot inconnu : oxygen_clear_bits16 => +    oxygen_clear_bits16(chip, OXYGEN_GPIO_DATA,
127 Il manque un espace avant la parenthèse. => +    oxygen_clear_bits16(chip, OXYGEN_GPIO_DATA,
127 Mot inconnu : OXYGEN_GPIO_DATA => +    oxygen_clear_bits16(chip, OXYGEN_GPIO_DATA,

128 Mot inconnu : GPIO_INPUT_ROUTE => +                GPIO_INPUT_ROUTE | GPIO_XENSE_HP_REAR | GPIO_XENSE_SPEAKERS);
128 Mot inconnu : GPIO_XENSE_HP_REAR => +                GPIO_INPUT_ROUTE | GPIO_XENSE_HP_REAR | GPIO_XENSE_SPEAKERS);
128 Mot inconnu : GPIO_XENSE_SPEAKERS => +                GPIO_INPUT_ROUTE | GPIO_XENSE_HP_REAR | GPIO_XENSE_SPEAKERS);

130 Mot inconnu : xonar_init_cs53x1 => +    xonar_init_cs53x1(chip);
130 Signe de multiplication typographique. => +    xonar_init_cs53x1(chip);
130 Il manque un espace avant la parenthèse. => +    xonar_init_cs53x1(chip);

131 Mot inconnu : xonar_enable_output => +    xonar_enable_output(chip);
131 Il manque un espace avant la parenthèse. => +    xonar_enable_output(chip);

133 Mot inconnu : snd_component_add => +    snd_component_add(chip->card, "PCM1792A");
133 Il manque un espace avant la parenthèse. => +    snd_component_add(chip->card, "PCM1792A");
133 Mot inconnu : card => +    snd_component_add(chip->card, "PCM1792A");
133 Guillemets typographiques ouvrants. => +    snd_component_add(chip->card, "PCM1792A");
133 Mot inconnu : PCM1792A => +    snd_component_add(chip->card, "PCM1792A");
133 Guillemets typographiques fermants. => +    snd_component_add(chip->card, "PCM1792A");

134 Mot inconnu : snd_component_add => +    snd_component_add(chip->card, "CS5381");
134 Il manque un espace avant la parenthèse. => +    snd_component_add(chip->card, "CS5381");
134 Mot inconnu : card => +    snd_component_add(chip->card, "CS5381");
134 Guillemets typographiques ouvrants. => +    snd_component_add(chip->card, "CS5381");
134 Mot inconnu : CS5381 => +    snd_component_add(chip->card, "CS5381");
134 Guillemets typographiques fermants. => +    snd_component_add(chip->card, "CS5381");

135 Mot inconnu : snd_component_add => +    snd_component_add(chip->card, "CS2000");
135 Il manque un espace avant la parenthèse. => +    snd_component_add(chip->card, "CS2000");
135 Mot inconnu : card => +    snd_component_add(chip->card, "CS2000");
135 Guillemets typographiques ouvrants. => +    snd_component_add(chip->card, "CS2000");
135 Mot inconnu : CS2000 => +    snd_component_add(chip->card, "CS2000");
135 Guillemets typographiques fermants. => +    snd_component_add(chip->card, "CS2000");

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Mot inconnu : static =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Mot inconnu : void =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Mot inconnu : xonar_d2_cleanup =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Il manque un espace avant la parenthèse. =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Mot inconnu : struct =>  static void xonar_d2_cleanup(struct oxygen *chip)
138 Mot inconnu : oxygen =>  static void xonar_d2_cleanup(struct oxygen *chip)

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  {

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      xonar_disable_output(chip);
140 Mot inconnu : xonar_disable_output =>      xonar_disable_output(chip);
140 Il manque un espace avant la parenthèse. =>      xonar_disable_output(chip);

141 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Mot inconnu : static => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Mot inconnu : int => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Mot inconnu : st_output_switch_get => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Il manque un espace avant la parenthèse. => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Mot inconnu : struct => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol
141 Mot inconnu : snd_kcontrol => @@ -763,7 +814,6 @@ static int st_output_switch_get(struct snd_kcontrol

142 Mot inconnu : ctl => *ctl,

143 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      return 0;
143 Mot inconnu : return =>      return 0;
143 Il manque un espace insécable. =>      return 0;

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  }

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : static =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : int =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : st_output_switch_put =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Il manque un espace avant la parenthèse. =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : struct =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : snd_kcontrol =>  static int st_output_switch_put(struct snd_kcontrol *ctl,
147 Mot inconnu : ctl =>  static int st_output_switch_put(struct snd_kcontrol *ctl,

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  struct snd_ctl_elem_value *value)
148 Mot inconnu : struct =>                  struct snd_ctl_elem_value *value)
148 Mot inconnu : snd_ctl_elem_value =>                  struct snd_ctl_elem_value *value)

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  {

150 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {
150 Mot inconnu : static => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {
150 Mot inconnu : const => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {
150 Mot inconnu : struct => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {
150 Mot inconnu : snd_kcontrol_new => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {
150 Mot inconnu : st_controls => @@ -859,6 +909,67 @@ static const struct snd_kcontrol_new st_controls[] = {

151 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      },

152 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  };

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

154 Mot inconnu : static => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Mot inconnu : int => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Mot inconnu : xense_output_switch_get => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Il manque un espace avant la parenthèse. => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Mot inconnu : struct => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Mot inconnu : snd_kcontrol => +static int xense_output_switch_get(struct snd_kcontrol *ctl,
154 Mot inconnu : ctl => +static int xense_output_switch_get(struct snd_kcontrol *ctl,

155 Mot inconnu : struct => +                struct snd_ctl_elem_value *value)
155 Mot inconnu : snd_ctl_elem_value => +                struct snd_ctl_elem_value *value)

157 Mot inconnu : struct => +    struct oxygen *chip = ctl->private_data;
157 Mot inconnu : oxygen => +    struct oxygen *chip = ctl->private_data;
157 Mot inconnu : ctl => +    struct oxygen *chip = ctl->private_data;
157 Mot inconnu : private_data => +    struct oxygen *chip = ctl->private_data;
157 Il manque un espace insécable. => +    struct oxygen *chip = ctl->private_data;

158 Mot inconnu : u16 => +    u16 gpio;
158 Mot inconnu : gpio => +    u16 gpio;
158 Il manque un espace insécable. => +    u16 gpio;

160 Mot inconnu : gpio => +    gpio = oxygen_read16(chip, OXYGEN_GPIO_DATA);
160 Mot inconnu : oxygen_read16 => +    gpio = oxygen_read16(chip, OXYGEN_GPIO_DATA);
160 Il manque un espace avant la parenthèse. => +    gpio = oxygen_read16(chip, OXYGEN_GPIO_DATA);
160 Mot inconnu : OXYGEN_GPIO_DATA => +    gpio = oxygen_read16(chip, OXYGEN_GPIO_DATA);

161 Mot inconnu : gpio => +    if (gpio & GPIO_XENSE_SPEAKERS)
161 Mot inconnu : GPIO_XENSE_SPEAKERS => +    if (gpio & GPIO_XENSE_SPEAKERS)

162 Il manque un espace insécable. => +        value->value.enumerated.item[0] = 0;

163 Mot inconnu : else => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))
163 Il manque un espace. => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))
163 Mot inconnu : gpio => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))
163 Mot inconnu : GPIO_XENSE_SPEAKERS => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))
163 Mot inconnu : gpio => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))
163 Mot inconnu : GPIO_XENSE_HP_REAR => +    else if (!(gpio & GPIO_XENSE_SPEAKERS) && (gpio & GPIO_XENSE_HP_REAR))

164 Il manque un espace insécable. => +        value->value.enumerated.item[0] = 1;

165 Mot inconnu : else => +    else

166 Il manque un espace insécable. => +        value->value.enumerated.item[0] = 2;

167 Mot inconnu : return => +    return 0;
167 Il manque un espace insécable. => +    return 0;

170 Mot inconnu : static => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Mot inconnu : int => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Mot inconnu : xense_output_switch_put => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Il manque un espace avant la parenthèse. => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Mot inconnu : struct => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Mot inconnu : snd_kcontrol => +static int xense_output_switch_put(struct snd_kcontrol *ctl,
170 Mot inconnu : ctl => +static int xense_output_switch_put(struct snd_kcontrol *ctl,

171 Mot inconnu : struct => +                struct snd_ctl_elem_value *value)
171 Mot inconnu : snd_ctl_elem_value => +                struct snd_ctl_elem_value *value)

173 Mot inconnu : struct => +    struct oxygen *chip = ctl->private_data;
173 Mot inconnu : oxygen => +    struct oxygen *chip = ctl->private_data;
173 Mot inconnu : ctl => +    struct oxygen *chip = ctl->private_data;
173 Mot inconnu : private_data => +    struct oxygen *chip = ctl->private_data;
173 Il manque un espace insécable. => +    struct oxygen *chip = ctl->private_data;

174 Mot inconnu : struct => +    struct xonar_pcm179x *data = chip->model_data;
174 Mot inconnu : xonar_pcm179x => +    struct xonar_pcm179x *data = chip->model_data;
174 Mot inconnu : model_data => +    struct xonar_pcm179x *data = chip->model_data;
174 Il manque un espace insécable. => +    struct xonar_pcm179x *data = chip->model_data;

175 Mot inconnu : u16 => +    u16 gpio_old, gpio;
175 Mot inconnu : gpio_old => +    u16 gpio_old, gpio;
175 Mot inconnu : gpio => +    u16 gpio_old, gpio;
175 Il manque un espace insécable. => +    u16 gpio_old, gpio;

177 Mot inconnu : mutex_lock => +    mutex_lock(&chip->mutex);
177 Il manque un espace avant la parenthèse. => +    mutex_lock(&chip->mutex);
177 Mot inconnu : mutex => +    mutex_lock(&chip->mutex);

178 Mot inconnu : gpio_old => +    gpio_old = oxygen_read16(chip, OXYGEN_GPIO_DATA);
178 Mot inconnu : oxygen_read16 => +    gpio_old = oxygen_read16(chip, OXYGEN_GPIO_DATA);
178 Il manque un espace avant la parenthèse. => +    gpio_old = oxygen_read16(chip, OXYGEN_GPIO_DATA);
178 Mot inconnu : OXYGEN_GPIO_DATA => +    gpio_old = oxygen_read16(chip, OXYGEN_GPIO_DATA);

179 Mot inconnu : gpio => +    gpio = gpio_old;
179 Mot inconnu : gpio_old => +    gpio = gpio_old;
179 Il manque un espace insécable. => +    gpio = gpio_old;

180 Mot inconnu : switch => +    switch (value->value.enumerated.item[0]) {

181 Il manque un espace insécable. => +    case 0:

182 Mot inconnu : gpio => +        gpio |= GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR;
182 Mot inconnu : GPIO_XENSE_SPEAKERS => +        gpio |= GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR;
182 Mot inconnu : GPIO_XENSE_HP_REAR => +        gpio |= GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR;
182 Il manque un espace insécable. => +        gpio |= GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR;

183 Il manque un espace insécable. => +        break;

184 Il manque un espace insécable. => +    case 1:

185 Mot inconnu : gpio => +        gpio = (gpio | GPIO_XENSE_HP_REAR) & ~GPIO_XENSE_SPEAKERS;
185 Mot inconnu : gpio => +        gpio = (gpio | GPIO_XENSE_HP_REAR) & ~GPIO_XENSE_SPEAKERS;
185 Mot inconnu : GPIO_XENSE_HP_REAR => +        gpio = (gpio | GPIO_XENSE_HP_REAR) & ~GPIO_XENSE_SPEAKERS;
185 Mot inconnu : GPIO_XENSE_SPEAKERS => +        gpio = (gpio | GPIO_XENSE_HP_REAR) & ~GPIO_XENSE_SPEAKERS;
185 Il manque un espace insécable. => +        gpio = (gpio | GPIO_XENSE_HP_REAR) & ~GPIO_XENSE_SPEAKERS;

186 Il manque un espace insécable. => +        break;

187 Il manque un espace insécable. => +    case 2:

188 Mot inconnu : gpio => +        gpio &= ~(GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR);
188 Mot inconnu : GPIO_XENSE_SPEAKERS => +        gpio &= ~(GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR);
188 Mot inconnu : GPIO_XENSE_HP_REAR => +        gpio &= ~(GPIO_XENSE_SPEAKERS | GPIO_XENSE_HP_REAR);

189 Il manque un espace insécable. => +        break;

191 Mot inconnu : oxygen_write16 => +    oxygen_write16(chip, OXYGEN_GPIO_DATA, gpio);
191 Il manque un espace avant la parenthèse. => +    oxygen_write16(chip, OXYGEN_GPIO_DATA, gpio);
191 Mot inconnu : OXYGEN_GPIO_DATA => +    oxygen_write16(chip, OXYGEN_GPIO_DATA, gpio);
191 Mot inconnu : gpio => +    oxygen_write16(chip, OXYGEN_GPIO_DATA, gpio);

192 Mot inconnu : hp_active => +    data->hp_active = !(gpio & GPIO_XENSE_SPEAKERS);
192 Il manque un espace insécable. => +    data->hp_active = !(gpio & GPIO_XENSE_SPEAKERS);
192 Il manque un espace. => +    data->hp_active = !(gpio & GPIO_XENSE_SPEAKERS);
192 Mot inconnu : gpio => +    data->hp_active = !(gpio & GPIO_XENSE_SPEAKERS);
192 Mot inconnu : GPIO_XENSE_SPEAKERS => +    data->hp_active = !(gpio & GPIO_XENSE_SPEAKERS);

193 Mot inconnu : update_pcm1796_volume => +    update_pcm1796_volume(chip);
193 Il manque un espace avant la parenthèse. => +    update_pcm1796_volume(chip);

194 Mot inconnu : mutex_unlock => +    mutex_unlock(&chip->mutex);
194 Il manque un espace avant la parenthèse. => +    mutex_unlock(&chip->mutex);
194 Mot inconnu : mutex => +    mutex_unlock(&chip->mutex);

195 Mot inconnu : return => +    return gpio != gpio_old;
195 Mot inconnu : gpio => +    return gpio != gpio_old;
195 Il manque un espace insécable. => +    return gpio != gpio_old;
195 Mot inconnu : gpio_old => +    return gpio != gpio_old;
195 Il manque un espace insécable. => +    return gpio != gpio_old;

198 Mot inconnu : static => +static const struct snd_kcontrol_new xense_controls[] = {
198 Mot inconnu : const => +static const struct snd_kcontrol_new xense_controls[] = {
198 Mot inconnu : struct => +static const struct snd_kcontrol_new xense_controls[] = {
198 Mot inconnu : snd_kcontrol_new => +static const struct snd_kcontrol_new xense_controls[] = {
198 Mot inconnu : xense_controls => +static const struct snd_kcontrol_new xense_controls[] = {

200 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
200 Mot inconnu : iface => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
200 Mot inconnu : SNDRV_CTL_ELEM_IFACE_MIXER => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,

201 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .name = "Analog Output",
201 Mot inconnu : name => +        .name = "Analog Output",
201 Guillemets typographiques ouvrants. => +        .name = "Analog Output",
201 Mot inconnu : Analog => +        .name = "Analog Output",
201 Guillemets typographiques fermants. => +        .name = "Analog Output",

202 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .info = st_output_switch_info,
202 Mot inconnu : st_output_switch_info => +        .info = st_output_switch_info,

203 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .get = xense_output_switch_get,
203 Mot inconnu : get => +        .get = xense_output_switch_get,
203 Mot inconnu : xense_output_switch_get => +        .get = xense_output_switch_get,

204 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .put = xense_output_switch_put,
204 Mot inconnu : xense_output_switch_put => +        .put = xense_output_switch_put,

207 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
207 Mot inconnu : iface => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
207 Mot inconnu : SNDRV_CTL_ELEM_IFACE_MIXER => +        .iface = SNDRV_CTL_ELEM_IFACE_MIXER,

208 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .name = "Headphones Impedance Playback Enum",
208 Mot inconnu : name => +        .name = "Headphones Impedance Playback Enum",
208 Guillemets typographiques ouvrants. => +        .name = "Headphones Impedance Playback Enum",
208 Mot inconnu : Headphones => +        .name = "Headphones Impedance Playback Enum",
208 Mot inconnu : Impedance => +        .name = "Headphones Impedance Playback Enum",
208 Mot inconnu : Enum => +        .name = "Headphones Impedance Playback Enum",
208 Guillemets typographiques fermants. => +        .name = "Headphones Impedance Playback Enum",

209 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .info = st_hp_volume_offset_info,
209 Mot inconnu : st_hp_volume_offset_info => +        .info = st_hp_volume_offset_info,

210 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .get = st_hp_volume_offset_get,
210 Mot inconnu : get => +        .get = st_hp_volume_offset_get,
210 Mot inconnu : st_hp_volume_offset_get => +        .get = st_hp_volume_offset_get,

211 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => +        .put = st_hp_volume_offset_put,
211 Mot inconnu : st_hp_volume_offset_put => +        .put = st_hp_volume_offset_put,

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Mot inconnu : static =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Mot inconnu : void =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Mot inconnu : xonar_line_mic_ac97_switch =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Il manque un espace avant la parenthèse. =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Mot inconnu : struct =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,
215 Mot inconnu : oxygen =>  static void xonar_line_mic_ac97_switch(struct oxygen *chip,

216 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                         unsigned int reg, unsigned int mute)
216 Mot inconnu : unsigned =>                         unsigned int reg, unsigned int mute)
216 Mot inconnu : int =>                         unsigned int reg, unsigned int mute)
216 Mot inconnu : unsigned =>                         unsigned int reg, unsigned int mute)
216 Mot inconnu : int =>                         unsigned int reg, unsigned int mute)

217 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  {

218 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Formatage des grands nombres. => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Mot inconnu : static => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Mot inconnu : int => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Mot inconnu : xonar_st_mixer_init => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Il manque un espace avant la parenthèse. => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Mot inconnu : struct => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)
218 Mot inconnu : oxygen => @@ -946,6 +1057,23 @@ static int xonar_st_mixer_init(struct oxygen *chip)

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      return 0;
219 Mot inconnu : return =>      return 0;
219 Il manque un espace insécable. =>      return 0;

220 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  }

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

222 Mot inconnu : static => +static int xonar_xense_mixer_init(struct oxygen *chip)
222 Mot inconnu : int => +static int xonar_xense_mixer_init(struct oxygen *chip)
222 Mot inconnu : xonar_xense_mixer_init => +static int xonar_xense_mixer_init(struct oxygen *chip)
222 Il manque un espace avant la parenthèse. => +static int xonar_xense_mixer_init(struct oxygen *chip)
222 Mot inconnu : struct => +static int xonar_xense_mixer_init(struct oxygen *chip)
222 Mot inconnu : oxygen => +static int xonar_xense_mixer_init(struct oxygen *chip)

224 Mot inconnu : unsigned => +    unsigned int i;
224 Mot inconnu : int => +    unsigned int i;
224 Il manque un espace insécable. => +    unsigned int i;

225 Mot inconnu : int => +    int err;
225 Mot inconnu : err => +    int err;
225 Il manque un espace insécable. => +    int err;

227 Il manque un espace insécable. => +    for (i = 0; i < ARRAY_SIZE(xense_controls); ++i) {
227 Mot inconnu : ARRAY_SIZE => +    for (i = 0; i < ARRAY_SIZE(xense_controls); ++i) {
227 Il manque un espace avant la parenthèse. => +    for (i = 0; i < ARRAY_SIZE(xense_controls); ++i) {
227 Mot inconnu : xense_controls => +    for (i = 0; i < ARRAY_SIZE(xense_controls); ++i) {

228 Mot inconnu : err => +        err = snd_ctl_add(chip->card,
228 Mot inconnu : snd_ctl_add => +        err = snd_ctl_add(chip->card,
228 Il manque un espace avant la parenthèse. => +        err = snd_ctl_add(chip->card,
228 Mot inconnu : card => +        err = snd_ctl_add(chip->card,

229 Mot inconnu : snd_ctl_new1 => +                  snd_ctl_new1(&xense_controls[i], chip));
229 Il manque un espace avant la parenthèse. => +                  snd_ctl_new1(&xense_controls[i], chip));
229 Mot inconnu : xense_controls => +                  snd_ctl_new1(&xense_controls[i], chip));

230 Mot inconnu : err => +        if (err < 0)

231 Mot inconnu : return => +            return err;
231 Mot inconnu : err => +            return err;
231 Il manque un espace insécable. => +            return err;

233 Mot inconnu : err => +    err = add_pcm1796_controls(chip);
233 Mot inconnu : add_pcm1796_controls => +    err = add_pcm1796_controls(chip);
233 Il manque un espace avant la parenthèse. => +    err = add_pcm1796_controls(chip);

234 Mot inconnu : err => +    if (err < 0)

235 Mot inconnu : return => +        return err;
235 Mot inconnu : err => +        return err;
235 Il manque un espace insécable. => +        return err;

236 Mot inconnu : return => +    return 0;
236 Il manque un espace insécable. => +    return 0;

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Mot inconnu : static =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Mot inconnu : void =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Mot inconnu : dump_pcm1796_registers =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Il manque un espace avant la parenthèse. =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Mot inconnu : struct =>  static void dump_pcm1796_registers(struct oxygen *chip,
239 Mot inconnu : oxygen =>  static void dump_pcm1796_registers(struct oxygen *chip,

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                     struct snd_info_buffer *buffer)
240 Mot inconnu : struct =>                     struct snd_info_buffer *buffer)
240 Mot inconnu : snd_info_buffer =>                     struct snd_info_buffer *buffer)
240 Mot inconnu : buffer =>                     struct snd_info_buffer *buffer)

241 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  {

242 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Formatage des grands nombres. => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Mot inconnu : int => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Mot inconnu : get_xonar_pcm179x_model => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Il manque un espace avant la parenthèse. => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Mot inconnu : struct => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,
242 Mot inconnu : oxygen => @@ -1138,6 +1266,13 @@ int get_xonar_pcm179x_model(struct oxygen *chip,

243 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          chip->model.resume = xonar_stx_resume;
243 Mot inconnu : model =>          chip->model.resume = xonar_stx_resume;
243 Mot inconnu : resume =>          chip->model.resume = xonar_stx_resume;
243 Mot inconnu : xonar_stx_resume =>          chip->model.resume = xonar_stx_resume;
243 Il manque un espace insécable. =>          chip->model.resume = xonar_stx_resume;

244 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          chip->model.set_dac_params = set_pcm1796_params;
244 Mot inconnu : model =>          chip->model.set_dac_params = set_pcm1796_params;
244 Mot inconnu : set_dac_params =>          chip->model.set_dac_params = set_pcm1796_params;
244 Mot inconnu : set_pcm1796_params =>          chip->model.set_dac_params = set_pcm1796_params;
244 Il manque un espace insécable. =>          chip->model.set_dac_params = set_pcm1796_params;

245 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          break;
245 Il manque un espace insécable. =>          break;

246 Mot inconnu : x8428 => +    case 0x8428:
246 Il manque un espace insécable. => +    case 0x8428:

247 Mot inconnu : model => +        chip->model = model_xonar_st;
247 Mot inconnu : model_xonar_st => +        chip->model = model_xonar_st;
247 Il manque un espace insécable. => +        chip->model = model_xonar_st;

248 Mot inconnu : model => +        chip->model.shortname = "Xonar Xense";
248 Mot inconnu : shortname => +        chip->model.shortname = "Xonar Xense";
248 Guillemets typographiques ouvrants. => +        chip->model.shortname = "Xonar Xense";
248 Mot inconnu : Xonar => +        chip->model.shortname = "Xonar Xense";
248 Mot inconnu : Xense => +        chip->model.shortname = "Xonar Xense";
248 Guillemets typographiques fermants. => +        chip->model.shortname = "Xonar Xense";

249 Mot inconnu : model => +        chip->model.chip = "AV100";
249 Il manque un espace. => +        chip->model.chip = "AV100";
249 Guillemets typographiques ouvrants. => +        chip->model.chip = "AV100";
249 Mot inconnu : AV100 => +        chip->model.chip = "AV100";
249 Guillemets typographiques fermants. => +        chip->model.chip = "AV100";

250 Mot inconnu : model => +        chip->model.init = xonar_xense_init;
250 Mot inconnu : init => +        chip->model.init = xonar_xense_init;
250 Mot inconnu : xonar_xense_init => +        chip->model.init = xonar_xense_init;
250 Il manque un espace insécable. => +        chip->model.init = xonar_xense_init;

251 Mot inconnu : model => +        chip->model.mixer_init = xonar_xense_mixer_init;
251 Mot inconnu : mixer_init => +        chip->model.mixer_init = xonar_xense_mixer_init;
251 Mot inconnu : xonar_xense_mixer_init => +        chip->model.mixer_init = xonar_xense_mixer_init;
251 Il manque un espace insécable. => +        chip->model.mixer_init = xonar_xense_mixer_init;

252 Il manque un espace insécable. => +        break;

253 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      default:
253 Mot inconnu : default =>      default:
253 Il manque un espace insécable. =>      default:

254 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          return -EINVAL;
254 Mot inconnu : return =>          return -EINVAL;
254 Il manque un espace à côté du tiret. =>          return -EINVAL;
254 Mot inconnu : EINVAL =>          return -EINVAL;
254 Il manque un espace insécable. =>          return -EINVAL;

255 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      }

258 Mot inconnu : linux-source => Il vous incombera désormais de patcher les sources du noyau Linux et de compiler uniquement les modules nécessaires au bon fonctionnement de la carte (pour ça, vous aurez déjà besoin d'installer le paquet linux-source, et d'extraire les sources du fichier compressé situé dans /usr/src/ )
258 Pas d’espace avant ce signe. => Il vous incombera désormais de patcher les sources du noyau Linux et de compiler uniquement les modules nécessaires au bon fonctionnement de la carte (pour ça, vous aurez déjà besoin d'installer le paquet linux-source, et d'extraire les sources du fichier compressé situé dans /usr/src/ )

260 Forme interrogative ? Mettez un trait d’union. => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Pas d’espace après ce signe. => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Mot inconnu : linux-3 => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Mot inconnu : sound => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Mot inconnu : pci => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Mot inconnu : oxygen => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch
260 Pas d’espace avant ce signe. => Déplacez vous dans le dossier des sources des modules pour appliquer le patch ( cd linux-3.**/sound/pci/oxygen ) puis appliquez le patch

261 Mot inconnu : sudo => <code>sudo patch -p1 -i /chemin/xonar-xense.patch</code>
261 Il manque un espace à côté du tiret. => <code>sudo patch -p1 -i /chemin/xonar-xense.patch</code>
261 Mot inconnu : p1 => <code>sudo patch -p1 -i /chemin/xonar-xense.patch</code>
261 Mot inconnu : xonar-xense => <code>sudo patch -p1 -i /chemin/xonar-xense.patch</code>
261 Il manque un espace. => <code>sudo patch -p1 -i /chemin/xonar-xense.patch</code>

263 Guillemets typographiques ouvrants. => Une fois ces dernières patchées retournez à la racine du dossier des sources du noyau Linux à l'aide de la commande "cd"
263 Guillemets typographiques fermants. => Une fois ces dernières patchées retournez à la racine du dossier des sources du noyau Linux à l'aide de la commande "cd"

265 Il manque un espace insécable. => Exécutez ces commandes à adapter selon votre version du noyau :

269 Mot inconnu : sudo => sudo cp /usr/src/linux-headers-3.8.0-27-generic/Module.symvers Module.symvers
269 Mot inconnu : cp => sudo cp /usr/src/linux-headers-3.8.0-27-generic/Module.symvers Module.symvers
269 Mot inconnu : symvers => sudo cp /usr/src/linux-headers-3.8.0-27-generic/Module.symvers Module.symvers

270 Mot inconnu : sudo => sudo cp /boot/config-3.8.0-27-generic .config
270 Mot inconnu : cp => sudo cp /boot/config-3.8.0-27-generic .config
270 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => sudo cp /boot/config-3.8.0-27-generic .config
270 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sudo cp /boot/config-3.8.0-27-generic .config

271 Mot inconnu : sudo => sudo make prepare
271 Mot inconnu : make => sudo make prepare
271 Mot inconnu : prepare => sudo make prepare

272 Mot inconnu : sudo => sudo make scripts
272 Mot inconnu : make => sudo make scripts

273 Mot inconnu : sudo => sudo make -j4 M=sound/pci/oxygen/
273 Mot inconnu : make => sudo make -j4 M=sound/pci/oxygen/
273 Il manque un espace à côté du tiret. => sudo make -j4 M=sound/pci/oxygen/
273 Mot inconnu : j4 => sudo make -j4 M=sound/pci/oxygen/
273 Mot inconnu : sound => sudo make -j4 M=sound/pci/oxygen/
273 Mot inconnu : pci => sudo make -j4 M=sound/pci/oxygen/
273 Mot inconnu : oxygen => sudo make -j4 M=sound/pci/oxygen/

274 Mot inconnu : sudo => sudo rm /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/*.ko
274 Mot inconnu : rm => sudo rm /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/*.ko

275 Mot inconnu : sudo => sudo cp sound/pci/oxygen/*.ko /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/
275 Mot inconnu : cp => sudo cp sound/pci/oxygen/*.ko /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/
275 Mot inconnu : sound => sudo cp sound/pci/oxygen/*.ko /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/
275 Mot inconnu : pci => sudo cp sound/pci/oxygen/*.ko /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/
275 Mot inconnu : oxygen => sudo cp sound/pci/oxygen/*.ko /lib/modules/3.8.0-27-generic/kernel/sound/pci/oxygen/

278 Il manque un espace insécable. => Ensuite, redémarrez le système et chargez le module :

280 Mot inconnu : sudo => sudo modprobe snd-virtuoso
280 Mot inconnu : modprobe => sudo modprobe snd-virtuoso
280 Mot inconnu : snd-virtuoso => sudo modprobe snd-virtuoso

284 Pas d’espace après ce signe. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Mot inconnu : snd-oxygen => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Il manque un espace. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Mot inconnu : snd-oxygen-lib => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Il manque un espace. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Mot inconnu : snd-virtuoso => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Il manque un espace. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Pas d’espace avant ce signe. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Mot inconnu : Xonar => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Mot inconnu : Xense => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Accord de nombre erroné : « dernier » est au singulier. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.
284 Accord de nombre erroné : « dernier » devrait être au pluriel. => En gros, avec ces commandes, on copie les fichiers de configuration pour compiler le noyau tel que ça a été fait pour le noyau présentement utilisé au sein du système, ensuite on prépare le nécessaire pour la prise en charge des options en question, puis on compile, pour obtenir 3 fichiers distincts ( snd-oxygen.ko / snd-oxygen-lib.ko / snd-virtuoso.ko ) qui sont nos fameux modules (drivers) patchés pour le support de la Xonar Xense, et enfin la copie de ces dernier en remplacement de ceux actuellement présents, et leur chargement pour utilisation courante.

286 Mot inconnu : alsamixer => Un petit test rapide avec l'outil alsamixer vous montrera que la carte est bien accessible et utilisable, et l'applet sonore pulseaudio pourra également vous l'indiquer (pensez à configurer la bonne sortie utilisée quand nécessaire !)
286 Mot inconnu : pulseaudio => Un petit test rapide avec l'outil alsamixer vous montrera que la carte est bien accessible et utilisable, et l'applet sonore pulseaudio pourra également vous l'indiquer (pensez à configurer la bonne sortie utilisée quand nécessaire !)
286 Il manque un espace insécable. => Un petit test rapide avec l'outil alsamixer vous montrera que la carte est bien accessible et utilisable, et l'applet sonore pulseaudio pourra également vous l'indiquer (pensez à configurer la bonne sortie utilisée quand nécessaire !)

290 Mot inconnu : Xonar => Voilà, profitez bien de votre carte Xonar Xense sous Linux ! 
290 Mot inconnu : Xense => Voilà, profitez bien de votre carte Xonar Xense sous Linux ! 
290 Il manque un espace insécable. => Voilà, profitez bien de votre carte Xonar Xense sous Linux ! 
290 Espace(s) en fin de ligne à supprimer. => Voilà, profitez bien de votre carte Xonar Xense sous Linux ! 

294 Accord de genre erroné : « prémisse » est féminin. => Ce patch est le prémisse du support officiel de cette carte son, actuellement une seule limitation est connue par rapport aux pilotes, et pas des moindres, toutes les sorties, 7.1 analagique et spdif comprises, ne fonctionnent pour le moment qu'en Stéréo.
294 Mot inconnu : analagique => Ce patch est le prémisse du support officiel de cette carte son, actuellement une seule limitation est connue par rapport aux pilotes, et pas des moindres, toutes les sorties, 7.1 analagique et spdif comprises, ne fonctionnent pour le moment qu'en Stéréo.
294 Mot inconnu : spdif => Ce patch est le prémisse du support officiel de cette carte son, actuellement une seule limitation est connue par rapport aux pilotes, et pas des moindres, toutes les sorties, 7.1 analagique et spdif comprises, ne fonctionnent pour le moment qu'en Stéréo.

299 Mot inconnu : Vendor-Asus => http://www.alsa-project.org/main/index.php/Matrix:Vendor-Asus

301 Mot inconnu : Module-virtuoso => http://www.alsa-project.org/main/index.php/Matrix:Module-virtuoso

303 Mot inconnu : Module-oxygen => http://www.alsa-project.org/main/index.php/Matrix:Module-oxygen
