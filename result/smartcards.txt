
7 Espace(s) surnuméraire(s) à supprimer. => Les Cartes à puce  (smart cards en anglais) sont des cartes intelligentes qui embarquent un microcontrôleur ou un microprocesseur. Le nombre d'applications est illimité.
7 Mot inconnu : cards => Les Cartes à puce  (smart cards en anglais) sont des cartes intelligentes qui embarquent un microcontrôleur ou un microprocesseur. Le nombre d'applications est illimité.

11 Mot inconnu : SC => Cette page traite de deux type de cartes, les cartes PC/SC et les cartes de type [[#javax.smartcardio]].
11 Mot inconnu : smartcardio => Cette page traite de deux type de cartes, les cartes PC/SC et les cartes de type [[#javax.smartcardio]].
13 Mot inconnu : SC => [[wpfr>PC/SC|Personal computer/Smart Card]] (ou PC/SC) est une bibliothèque logicielle pour l'accès à des cartes à puce sous Microsoft Windows. Une implémentation libre de PC/SC, appelée PC/SC Lite, est disponible sous GNU/Linux et distribuée avec Mac OS X.
13 Mot inconnu : Personal => [[wpfr>PC/SC|Personal computer/Smart Card]] (ou PC/SC) est une bibliothèque logicielle pour l'accès à des cartes à puce sous Microsoft Windows. Une implémentation libre de PC/SC, appelée PC/SC Lite, est disponible sous GNU/Linux et distribuée avec Mac OS X.
13 Mot inconnu : SC => [[wpfr>PC/SC|Personal computer/Smart Card]] (ou PC/SC) est une bibliothèque logicielle pour l'accès à des cartes à puce sous Microsoft Windows. Une implémentation libre de PC/SC, appelée PC/SC Lite, est disponible sous GNU/Linux et distribuée avec Mac OS X.
13 Mot inconnu : SC => [[wpfr>PC/SC|Personal computer/Smart Card]] (ou PC/SC) est une bibliothèque logicielle pour l'accès à des cartes à puce sous Microsoft Windows. Une implémentation libre de PC/SC, appelée PC/SC Lite, est disponible sous GNU/Linux et distribuée avec Mac OS X.
13 Mot inconnu : SC => [[wpfr>PC/SC|Personal computer/Smart Card]] (ou PC/SC) est une bibliothèque logicielle pour l'accès à des cartes à puce sous Microsoft Windows. Une implémentation libre de PC/SC, appelée PC/SC Lite, est disponible sous GNU/Linux et distribuée avec Mac OS X.

14 Mot inconnu : SC => La spécification de cette bibliothèque est faite par le PC/SC Workgroup, composé de grands fabricants de carte à puce ou d'ordinateur. Son but est d'assurer une base standard de commandes pour permettre une meilleure interopérabilité entre PC, lecteurs de carte et cartes à puce elles-mêmes.
14 Mot inconnu : Workgroup => La spécification de cette bibliothèque est faite par le PC/SC Workgroup, composé de grands fabricants de carte à puce ou d'ordinateur. Son but est d'assurer une base standard de commandes pour permettre une meilleure interopérabilité entre PC, lecteurs de carte et cartes à puce elles-mêmes.

17 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

18 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Disposer des [[:sudo|droits d'administration]].

19 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Disposer d'une connexion à Internet configurée et activée.

20 Mot inconnu : SC => ===== PC/SC (Personal computer/Smart Card) =====
20 Mot inconnu : Personal => ===== PC/SC (Personal computer/Smart Card) =====

24 Mot inconnu : SC => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Il manque un espace. => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Mot inconnu : pcscd => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Il manque un espace. => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Mot inconnu : libpcsclite1 => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Mot inconnu : pcsc-tools => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
24 Mot inconnu : SC => La gestion des lecteurs PC/SC n'est pas native sous Linux, mais peut être très facilement ajoutée par l'[[:tutoriel:comment_installer_un_paquet|installation des paquets]]  **[[apt>pcscd,libpcsclite1,pcsc-tools]]** qui installent respectivement le démon PC/SC et la bibliothèque de communication.
27 Guillemets typographiques ouvrants. => Par la suite, suivant votre lecteur, il vous faudra installer le pilote PC/SC correspondant à votre périphérique. Un certain nombre est déjà fourni dans les [[:depots|dépôts]] Ubuntu. Pour savoir lequel est nécessaire à l'utilisation de votre carte entrez la commande suivante dans un [[:terminal]] : <code>apt-cache search "PC/SC driver"</code>
27 Guillemets typographiques fermants. => Par la suite, suivant votre lecteur, il vous faudra installer le pilote PC/SC correspondant à votre périphérique. Un certain nombre est déjà fourni dans les [[:depots|dépôts]] Ubuntu. Pour savoir lequel est nécessaire à l'utilisation de votre carte entrez la commande suivante dans un [[:terminal]] : <code>apt-cache search "PC/SC driver"</code>

29 Mot inconnu : libacr38u => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Mot inconnu : SC => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Mot inconnu : the => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Mot inconnu : ACR38U => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Mot inconnu : card => libacr38u - PC/SC driver for the ACR38U smart card reader
29 Mot inconnu : reader => libacr38u - PC/SC driver for the ACR38U smart card reader

30 Mot inconnu : libasedrive-serial => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : SC => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : the => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : Athena => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : ASEDrive => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Nombre ordinal romain singulier. Exemples : IIᵉ, IIIᵉ, IVᵉ… => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : serial => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : card => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader
30 Mot inconnu : reader => libasedrive-serial - PC/SC driver for the Athena ASEDrive IIIe serial smart card reader

31 Mot inconnu : libasedrive-usb => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : SC => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : the => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : Athena => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : ASEDrive => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Nombre ordinal romain singulier. Exemples : IIᵉ, IIIᵉ, IVᵉ… => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : card => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader
31 Mot inconnu : reader => libasedrive-usb - PC/SC driver for the Athena ASEDrive IIIe USB smart card reader

32 Mot inconnu : libccid => libccid - PC/SC driver for USB CCID smart card readers
32 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libccid - PC/SC driver for USB CCID smart card readers
32 Mot inconnu : SC => libccid - PC/SC driver for USB CCID smart card readers
32 Mot inconnu : CCID => libccid - PC/SC driver for USB CCID smart card readers
32 Mot inconnu : card => libccid - PC/SC driver for USB CCID smart card readers
32 Mot inconnu : readers => libccid - PC/SC driver for USB CCID smart card readers

33 Mot inconnu : libgcr410 => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Mot inconnu : SC => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Mot inconnu : GemPlus => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Mot inconnu : GCR410 => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Mot inconnu : serial => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface
33 Mot inconnu : SmartCard => libgcr410 - PC/SC driver for GemPlus GCR410 serial SmartCard interface

34 Mot inconnu : libgempc410 => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : SC => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : the => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : GemPC => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : and => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : card => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers
34 Mot inconnu : readers => libgempc410 - PC/SC driver for the GemPC 410, 412, 413 and 415 smart card readers

35 Mot inconnu : libgempc430 => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Mot inconnu : SC => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Mot inconnu : the => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Mot inconnu : GemPC => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Mot inconnu : card => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers
35 Mot inconnu : readers => libgempc430 - PC/SC driver for the GemPC 430, 432, 435 smart card readers

36 Mot inconnu : pcsc-omnikey => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : SC => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : Omnikey => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : Cardman => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : Smartcard => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : readers => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)
36 Mot inconnu : binary-only => pcsc-omnikey - PC/SC driver for Omnikey Cardman Smartcard readers (binary-only)

39 Mot inconnu : libccid => Le paquet **libccid** installé par défaut avec **pcscd** est le pilote PC/SC pour le standard [[wpen>Integrated_circuit_card_interface_device|CCID]]. Il permet la reconnaissance d'un grand nombre de lecteurs génériques basés sur ce standard.
39 Mot inconnu : pcscd => Le paquet **libccid** installé par défaut avec **pcscd** est le pilote PC/SC pour le standard [[wpen>Integrated_circuit_card_interface_device|CCID]]. Il permet la reconnaissance d'un grand nombre de lecteurs génériques basés sur ce standard.
39 Mot inconnu : SC => Le paquet **libccid** installé par défaut avec **pcscd** est le pilote PC/SC pour le standard [[wpen>Integrated_circuit_card_interface_device|CCID]]. Il permet la reconnaissance d'un grand nombre de lecteurs génériques basés sur ce standard.
39 Mot inconnu : Integrated_circuit_card_interface_device => Le paquet **libccid** installé par défaut avec **pcscd** est le pilote PC/SC pour le standard [[wpen>Integrated_circuit_card_interface_device|CCID]]. Il permet la reconnaissance d'un grand nombre de lecteurs génériques basés sur ce standard.
43 Mot inconnu : pcsc-tools => Pour vérifier que tout fonctionne, vous pouvez utiliser les outils du paquet **[[apt>pcsc-tools]]** : 
43 Espace(s) en fin de ligne à supprimer. => Pour vérifier que tout fonctionne, vous pouvez utiliser les outils du paquet **[[apt>pcsc-tools]]** : 

44 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **pcsc_scan** : un petit script d'exemple qui détecte les périphériques et leurs cartes : <code>pcsc_scan</code> 
44 Il manque un espace insécable. =>   * **pcsc_scan** : un petit script d'exemple qui détecte les périphériques et leurs cartes : <code>pcsc_scan</code> 
44 Espace(s) en fin de ligne à supprimer. =>   * **pcsc_scan** : un petit script d'exemple qui détecte les périphériques et leurs cartes : <code>pcsc_scan</code> 

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **gscriptor** : un petit logiciel avec interface graphique qui permet d'envoyer des commandes APDU.
45 Mot inconnu : gscriptor =>   * **gscriptor** : un petit logiciel avec interface graphique qui permet d'envoyer des commandes APDU.
45 Il manque un espace insécable. =>   * **gscriptor** : un petit logiciel avec interface graphique qui permet d'envoyer des commandes APDU.
45 Mot inconnu : APDU =>   * **gscriptor** : un petit logiciel avec interface graphique qui permet d'envoyer des commandes APDU.

48 Mot inconnu : javax => ===== javax.smartcardio =====
48 Mot inconnu : smartcardio => ===== javax.smartcardio =====

50 Mot inconnu : JSR => L'API Java Smart Card I/O défini par la JSR 268 est une API pour le langage Java permettant la communication avec les smart cards en utilisant l'ISO/IEC 7816-4 APDUs. Elle permet ainsi la lecture et l'écriture des cartes et fonctionne avec le lecteur PC/SC.
50 Mot inconnu : cards => L'API Java Smart Card I/O défini par la JSR 268 est une API pour le langage Java permettant la communication avec les smart cards en utilisant l'ISO/IEC 7816-4 APDUs. Elle permet ainsi la lecture et l'écriture des cartes et fonctionne avec le lecteur PC/SC.
50 Mot inconnu : IEC => L'API Java Smart Card I/O défini par la JSR 268 est une API pour le langage Java permettant la communication avec les smart cards en utilisant l'ISO/IEC 7816-4 APDUs. Elle permet ainsi la lecture et l'écriture des cartes et fonctionne avec le lecteur PC/SC.
50 Mot inconnu : APDUs => L'API Java Smart Card I/O défini par la JSR 268 est une API pour le langage Java permettant la communication avec les smart cards en utilisant l'ISO/IEC 7816-4 APDUs. Elle permet ainsi la lecture et l'écriture des cartes et fonctionne avec le lecteur PC/SC.
50 Mot inconnu : SC => L'API Java Smart Card I/O défini par la JSR 268 est une API pour le langage Java permettant la communication avec les smart cards en utilisant l'ISO/IEC 7816-4 APDUs. Elle permet ainsi la lecture et l'écriture des cartes et fonctionne avec le lecteur PC/SC.

52 Incohérence : les mots “des” et “ses” ne devraient pas se succéder. => Un des ses atouts majeurs et que couplé à une applet Java, elle permet l'utilisation des cartes directement depuis le navigateur Web.
52 Confusion probable. Pour la préposition, écrivez “dès” ou “de”. => Un des ses atouts majeurs et que couplé à une applet Java, elle permet l'utilisation des cartes directement depuis le navigateur Web.
52 Accord de genre erroné : « applet » est masculin. => Un des ses atouts majeurs et que couplé à une applet Java, elle permet l'utilisation des cartes directement depuis le navigateur Web.

54 Accord erroné : “API” et “introduit” ne sont pas accordés. => Cette API a été introduit depuis Java 1.6 et est disponible et fonctionnelle avec les [[:java]] et [[:openJDK]].

59 Mot inconnu : javax => import javax.smartcardio.*;
59 Mot inconnu : smartcardio => import javax.smartcardio.*;

60 Mot inconnu : util => import java.util.*;

62 Mot inconnu : class => public class TestSmartCardIO {
62 Mot inconnu : TestSmartCardIO => public class TestSmartCardIO {

64 Mot inconnu : static => 	public static String toString(byte[] bytes) {
64 Mot inconnu : toString => 	public static String toString(byte[] bytes) {
64 Il manque un espace avant la parenthèse. => 	public static String toString(byte[] bytes) {

65 Mot inconnu : StringBuffer => 		StringBuffer sbTmp = new StringBuffer();
65 Mot inconnu : sbTmp => 		StringBuffer sbTmp = new StringBuffer();
65 Mot inconnu : StringBuffer => 		StringBuffer sbTmp = new StringBuffer();

66 Il manque un espace avant la parenthèse. => 		for(byte b : bytes){
66 Il manque un espace insécable. => 		for(byte b : bytes){

67 Mot inconnu : sbTmp => 			sbTmp.append(String.format("%X", b));
67 Il manque un espace. => 			sbTmp.append(String.format("%X", b));
67 Il manque un espace avant la parenthèse. => 			sbTmp.append(String.format("%X", b));
67 Il manque un espace. => 			sbTmp.append(String.format("%X", b));
67 Il manque un espace avant la parenthèse. => 			sbTmp.append(String.format("%X", b));
67 Il manque un espace. => 			sbTmp.append(String.format("%X", b));
67 Guillemets typographiques fermants. => 			sbTmp.append(String.format("%X", b));

69 Mot inconnu : return => 		return sbTmp.toString();
69 Mot inconnu : sbTmp => 		return sbTmp.toString();
69 Mot inconnu : toString => 		return sbTmp.toString();

72 Mot inconnu : static => 	public static void main(String[] args) {
72 Mot inconnu : void => 	public static void main(String[] args) {
72 Il manque un espace avant la parenthèse. => 	public static void main(String[] args) {
72 Mot inconnu : args => 	public static void main(String[] args) {

74 Mot inconnu : try => 		try {

75 Mot inconnu : the => 			// Show the list of available terminals
75 Mot inconnu : list => 			// Show the list of available terminals
75 Mot inconnu : of => 			// Show the list of available terminals
75 Mot inconnu : available => 			// Show the list of available terminals
75 Mot inconnu : terminals => 			// Show the list of available terminals

76 Incohérence avec “On” : “Windows” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => 			// On Windows see HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Calais\Readers
76 Mot inconnu : see => 			// On Windows see HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Calais\Readers
76 Mot inconnu : HKEY_LOCAL_MACHINE => 			// On Windows see HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Calais\Readers
76 Mot inconnu : Cryptography => 			// On Windows see HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Calais\Readers
76 Mot inconnu : Readers => 			// On Windows see HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Calais\Readers

77 Mot inconnu : TerminalFactory => 			TerminalFactory factory = TerminalFactory.getDefault();
77 Mot inconnu : factory => 			TerminalFactory factory = TerminalFactory.getDefault();
77 Mot inconnu : TerminalFactory => 			TerminalFactory factory = TerminalFactory.getDefault();
77 Mot inconnu : getDefault => 			TerminalFactory factory = TerminalFactory.getDefault();

78 Mot inconnu : List => 			List terminals = factory.terminals().list();
78 Mot inconnu : terminals => 			List terminals = factory.terminals().list();
78 Mot inconnu : factory => 			List terminals = factory.terminals().list();
78 Mot inconnu : terminals => 			List terminals = factory.terminals().list();
78 Mot inconnu : list => 			List terminals = factory.terminals().list();

79 Il manque un espace. => 			System.out.println("Terminals count: " + terminals.size());
79 Il manque un espace avant la parenthèse. => 			System.out.println("Terminals count: " + terminals.size());
79 Guillemets typographiques ouvrants. => 			System.out.println("Terminals count: " + terminals.size());
79 Mot inconnu : Terminals => 			System.out.println("Terminals count: " + terminals.size());
79 Mot inconnu : count => 			System.out.println("Terminals count: " + terminals.size());
79 Il manque un espace insécable. => 			System.out.println("Terminals count: " + terminals.size());
79 Guillemets isolés. => 			System.out.println("Terminals count: " + terminals.size());
79 Mot inconnu : terminals => 			System.out.println("Terminals count: " + terminals.size());
79 Mot inconnu : size => 			System.out.println("Terminals count: " + terminals.size());

80 Il manque un espace. => 			System.out.println("Terminals: " + terminals);
80 Il manque un espace avant la parenthèse. => 			System.out.println("Terminals: " + terminals);
80 Guillemets typographiques ouvrants. => 			System.out.println("Terminals: " + terminals);
80 Mot inconnu : Terminals => 			System.out.println("Terminals: " + terminals);
80 Il manque un espace insécable. => 			System.out.println("Terminals: " + terminals);
80 Guillemets isolés. => 			System.out.println("Terminals: " + terminals);
80 Mot inconnu : terminals => 			System.out.println("Terminals: " + terminals);

82 Mot inconnu : Get => 			// Get the first terminal in the list
82 Mot inconnu : the => 			// Get the first terminal in the list
82 Mot inconnu : first => 			// Get the first terminal in the list
82 Mot inconnu : the => 			// Get the first terminal in the list
82 Mot inconnu : list => 			// Get the first terminal in the list

83 Mot inconnu : CardTerminal => 			CardTerminal terminal = (CardTerminal) terminals.get(0);
83 Mot inconnu : CardTerminal => 			CardTerminal terminal = (CardTerminal) terminals.get(0);
83 Mot inconnu : terminals => 			CardTerminal terminal = (CardTerminal) terminals.get(0);
83 Mot inconnu : get => 			CardTerminal terminal = (CardTerminal) terminals.get(0);

85 Mot inconnu : Establish => 			// Establish a connection with the card using
85 Mot inconnu : connection => 			// Establish a connection with the card using
85 Mot inconnu : with => 			// Establish a connection with the card using
85 Mot inconnu : the => 			// Establish a connection with the card using
85 Mot inconnu : card => 			// Establish a connection with the card using
85 Mot inconnu : using => 			// Establish a connection with the card using

86 Guillemets typographiques ouvrants. => 			// "T=0", "T=1", "T=CL" or "*"
86 Guillemets typographiques fermants. => 			// "T=0", "T=1", "T=CL" or "*"
86 Guillemets typographiques ouvrants. => 			// "T=0", "T=1", "T=CL" or "*"
86 Guillemets typographiques fermants. => 			// "T=0", "T=1", "T=CL" or "*"
86 Guillemets typographiques ouvrants. => 			// "T=0", "T=1", "T=CL" or "*"
86 Guillemets typographiques fermants. => 			// "T=0", "T=1", "T=CL" or "*"

87 Mot inconnu : card => 			Card card = terminal.connect("*");
87 Mot inconnu : connect => 			Card card = terminal.connect("*");
87 Il manque un espace avant la parenthèse. => 			Card card = terminal.connect("*");

88 Il manque un espace. => 			System.out.println("Card: " + card);
88 Il manque un espace avant la parenthèse. => 			System.out.println("Card: " + card);
88 Guillemets typographiques ouvrants. => 			System.out.println("Card: " + card);
88 Il manque un espace insécable. => 			System.out.println("Card: " + card);
88 Guillemets isolés. => 			System.out.println("Card: " + card);
88 Mot inconnu : card => 			System.out.println("Card: " + card);

90 Mot inconnu : Get => 			// Get ATR
90 Mot inconnu : ATR => 			// Get ATR

91 Mot inconnu : baATR => 			byte[] baATR = card.getATR().getBytes();
91 Mot inconnu : card => 			byte[] baATR = card.getATR().getBytes();
91 Mot inconnu : getATR => 			byte[] baATR = card.getATR().getBytes();
91 Mot inconnu : getBytes => 			byte[] baATR = card.getATR().getBytes();

92 Il manque un espace. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Il manque un espace avant la parenthèse. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Guillemets typographiques ouvrants. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Mot inconnu : ATR => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Il manque un espace insécable. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Guillemets isolés. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Mot inconnu : TestSmartCardIO => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Mot inconnu : toString => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Il manque un espace avant la parenthèse. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Mot inconnu : baATR => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );
92 Pas d’espace avant ce signe. => 			System.out.println("ATR: " + TestSmartCardIO.toString(baATR) );

95 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => 			// - Establish channel to exchange APDU
95 Mot inconnu : Establish => 			// - Establish channel to exchange APDU
95 Mot inconnu : channel => 			// - Establish channel to exchange APDU
95 Mot inconnu : to => 			// - Establish channel to exchange APDU
95 Mot inconnu : exchange => 			// - Establish channel to exchange APDU
95 Mot inconnu : APDU => 			// - Establish channel to exchange APDU

96 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => 			// - Send SELECT Command APDU
96 Mot inconnu : Send => 			// - Send SELECT Command APDU
96 Mot inconnu : Command => 			// - Send SELECT Command APDU
96 Mot inconnu : APDU => 			// - Send SELECT Command APDU

97 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => 			// - Show Response APDU
97 Mot inconnu : Response => 			// - Show Response APDU
97 Mot inconnu : APDU => 			// - Show Response APDU

98 Mot inconnu : CardChannel => 			CardChannel channel = card.getBasicChannel();
98 Mot inconnu : channel => 			CardChannel channel = card.getBasicChannel();
98 Mot inconnu : card => 			CardChannel channel = card.getBasicChannel();
98 Mot inconnu : getBasicChannel => 			CardChannel channel = card.getBasicChannel();

100 Mot inconnu : Command => 			//SELECT Command

101 Mot inconnu : See => 			// See GlobalPlatform Card Specification (e.g. 2.2, section 11.9)
101 Mot inconnu : GlobalPlatform => 			// See GlobalPlatform Card Specification (e.g. 2.2, section 11.9)
101 Mot inconnu : Specification => 			// See GlobalPlatform Card Specification (e.g. 2.2, section 11.9)

102 Mot inconnu : CLA => 			// CLA: 00
102 Il manque un espace insécable. => 			// CLA: 00

103 Mot inconnu : INS => 			// INS: A4
103 Il manque un espace insécable. => 			// INS: A4
103 Mot inconnu : A4 => 			// INS: A4

104 Mot inconnu : P1 => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Il manque un espace insécable. => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : b3 => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : is => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : to => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : means => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : by => 			// P1: 04 i.e. b3 is set to 1, means select by name
104 Mot inconnu : name => 			// P1: 04 i.e. b3 is set to 1, means select by name

105 Mot inconnu : P2 => 			// P2: 00 i.e. first or only occurence
105 Il manque un espace insécable. => 			// P2: 00 i.e. first or only occurence
105 Mot inconnu : first => 			// P2: 00 i.e. first or only occurence
105 Mot inconnu : only => 			// P2: 00 i.e. first or only occurence
105 Mot inconnu : occurence => 			// P2: 00 i.e. first or only occurence

106 Mot inconnu : Lc => 			// Lc: 08 i.e. length of AID see below
106 Il manque un espace insécable. => 			// Lc: 08 i.e. length of AID see below
106 Mot inconnu : length => 			// Lc: 08 i.e. length of AID see below
106 Mot inconnu : of => 			// Lc: 08 i.e. length of AID see below
106 Mot inconnu : AID => 			// Lc: 08 i.e. length of AID see below
106 Mot inconnu : see => 			// Lc: 08 i.e. length of AID see below
106 Mot inconnu : below => 			// Lc: 08 i.e. length of AID see below

107 Il manque un espace insécable. => 			// Data: A0 00 00 00 03 00 00 00
107 Mot inconnu : A0 => 			// Data: A0 00 00 00 03 00 00 00

108 Mot inconnu : AID => 			// AID of the card manager,
108 Mot inconnu : of => 			// AID of the card manager,
108 Mot inconnu : the => 			// AID of the card manager,
108 Mot inconnu : card => 			// AID of the card manager,

109 Mot inconnu : the => 			// in the future should change to A0 00 00 01 51 00 00
109 Mot inconnu : should => 			// in the future should change to A0 00 00 01 51 00 00
109 Mot inconnu : to => 			// in the future should change to A0 00 00 01 51 00 00
109 Mot inconnu : A0 => 			// in the future should change to A0 00 00 01 51 00 00

111 Mot inconnu : baCommandAPDU => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : xA4 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x04 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x08 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : xA0 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x03 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};
111 Mot inconnu : x00 => 			byte[] baCommandAPDU = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x08, (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00};

112 Il manque un espace. => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Il manque un espace avant la parenthèse. => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Guillemets typographiques ouvrants. => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Mot inconnu : APDU => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Guillemets isolés. => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Mot inconnu : TestSmartCardIO => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Mot inconnu : toString => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Il manque un espace avant la parenthèse. => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));
112 Mot inconnu : baCommandAPDU => 			System.out.println("APDU >>>: " + TestSmartCardIO.toString(baCommandAPDU));

114 Mot inconnu : ResponseAPDU => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Mot inconnu : channel => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Il manque un espace. => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Il manque un espace avant la parenthèse. => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Mot inconnu : CommandAPDU => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Il manque un espace avant la parenthèse. => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));
114 Mot inconnu : baCommandAPDU => 			ResponseAPDU r = channel.transmit(new CommandAPDU(baCommandAPDU));

115 Il manque un espace. => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Il manque un espace avant la parenthèse. => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Guillemets typographiques ouvrants. => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Mot inconnu : APDU => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Guillemets isolés. => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Mot inconnu : TestSmartCardIO => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Mot inconnu : toString => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Il manque un espace avant la parenthèse. => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));
115 Mot inconnu : getBytes => 			System.out.println("APDU <<<: " + TestSmartCardIO.toString(r.getBytes()));

117 Mot inconnu : Disconnect => 			// Disconnect

118 Mot inconnu : true => 			// true: reset the card after disconnecting card.
118 Il manque un espace insécable. => 			// true: reset the card after disconnecting card.
118 Mot inconnu : reset => 			// true: reset the card after disconnecting card.
118 Mot inconnu : the => 			// true: reset the card after disconnecting card.
118 Mot inconnu : card => 			// true: reset the card after disconnecting card.
118 Mot inconnu : disconnecting => 			// true: reset the card after disconnecting card.
118 Mot inconnu : card => 			// true: reset the card after disconnecting card.

120 Mot inconnu : card => 			card.disconnect(true);
120 Mot inconnu : disconnect => 			card.disconnect(true);
120 Il manque un espace avant la parenthèse. => 			card.disconnect(true);
120 Mot inconnu : true => 			card.disconnect(true);

121 Il manque un espace avant la parenthèse. => 		} catch(Exception ex)  {

122 Mot inconnu : printStackTrace => 			ex.printStackTrace();

125 Espace(s) en fin de ligne à supprimer. => } 

130 Il manque un espace insécable. => Généralement, sous Eclipse vous obtiendrez sur les classes de l'API un message d'erreur de ce type : 
130 Espace(s) en fin de ligne à supprimer. => Généralement, sous Eclipse vous obtiendrez sur les classes de l'API un message d'erreur de ce type : 

131 Mot inconnu : Access => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Il manque un espace insécable. => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : The => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : TerminalFactory => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : is => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : not => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : to => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : required => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Mot inconnu : library => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>
131 Il manque un espace. => <note important>Access restriction: The type TerminalFactory is not accessible due to restriction on required library /usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar</note>

133 Mot inconnu : JVM => Pour pallier ce problème, il faut lever les restrictions d'Eclipse sur la JVM.

134 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Clic droit sur votre projet puis **Properties**
134 Mot inconnu : Properties =>   * Clic droit sur votre projet puis **Properties**

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Dans la section **Java Build Path**, onglet **Librairies**, choisissez la ligne **Access rules** puis bouton **Edit**.
135 Mot inconnu : Path =>   * Dans la section **Java Build Path**, onglet **Librairies**, choisissez la ligne **Access rules** puis bouton **Edit**.
135 Mot inconnu : Access =>   * Dans la section **Java Build Path**, onglet **Librairies**, choisissez la ligne **Access rules** puis bouton **Edit**.
135 Mot inconnu : rules =>   * Dans la section **Java Build Path**, onglet **Librairies**, choisissez la ligne **Access rules** puis bouton **Edit**.
135 Mot inconnu : Edit =>   * Dans la section **Java Build Path**, onglet **Librairies**, choisissez la ligne **Access rules** puis bouton **Edit**.

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Dans la fenêtre, ajouter une règle avec le bouton **Add**.
136 Mot inconnu : Add =>   * Dans la fenêtre, ajouter une règle avec le bouton **Add**.

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.
137 Mot inconnu : Resolution =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.
137 Mot inconnu : Rule =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.
137 Il manque un espace. =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.
137 Mot inconnu : javax =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.
137 Mot inconnu : smartcardio =>   * Dans **Resolution**, choisir "//Accessible//" et dans **Rule pattern** mettre //"%%javax/smartcardio/**%%"//.

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Enfin valider.

143 Mot inconnu : pcsc_scan => Si votre cible est correctement détectée avec pcsc_scan mais pas avec Java, ceci est du à un [[https://bugs.launchpad.net/ubuntu/+source/sun-java6/+bug/378294|bug]] dans Ubuntu (ou Java au choix). 
143 Confusion. Ce qui est dû. => Si votre cible est correctement détectée avec pcsc_scan mais pas avec Java, ceci est du à un [[https://bugs.launchpad.net/ubuntu/+source/sun-java6/+bug/378294|bug]] dans Ubuntu (ou Java au choix). 
143 Espace(s) en fin de ligne à supprimer. => Si votre cible est correctement détectée avec pcsc_scan mais pas avec Java, ceci est du à un [[https://bugs.launchpad.net/ubuntu/+source/sun-java6/+bug/378294|bug]] dans Ubuntu (ou Java au choix). 

145 Mot inconnu : libpcsclite => Par défaut, l'API Java cherche **libpcsclite.so** dans les dossiers ///usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64//. Cependant, sous Ubuntu, elle se situe dans le dossier ///lib//.
145 Mot inconnu : so => Par défaut, l'API Java cherche **libpcsclite.so** dans les dossiers ///usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64//. Cependant, sous Ubuntu, elle se situe dans le dossier ///lib//.
145 Il manque un espace insécable. => Par défaut, l'API Java cherche **libpcsclite.so** dans les dossiers ///usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64//. Cependant, sous Ubuntu, elle se situe dans le dossier ///lib//.
145 Il manque un espace insécable. => Par défaut, l'API Java cherche **libpcsclite.so** dans les dossiers ///usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64//. Cependant, sous Ubuntu, elle se situe dans le dossier ///lib//.
145 Il manque un espace insécable. => Par défaut, l'API Java cherche **libpcsclite.so** dans les dossiers ///usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64//. Cependant, sous Ubuntu, elle se situe dans le dossier ///lib//.

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Sous architecture x86 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib/libpcsclite.so</code>
148 Mot inconnu : x86 =>   * Sous architecture x86 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib/libpcsclite.so</code>
148 Il manque un espace insécable. =>   * Sous architecture x86 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib/libpcsclite.so</code>
148 Il manque un espace à côté du tiret. =>   * Sous architecture x86 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib/libpcsclite.so</code>

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Sous architecture amd64 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib64/libpcsclite.so</code>
149 Mot inconnu : amd64 =>   * Sous architecture amd64 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib64/libpcsclite.so</code>
149 Il manque un espace insécable. =>   * Sous architecture amd64 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib64/libpcsclite.so</code>
149 Il manque un espace à côté du tiret. =>   * Sous architecture amd64 : <code>sudo ln -s /lib/libpcsclite.so.1 /usr/local/lib64/libpcsclite.so</code>

151 Il manque un espace insécable. => Soit vous définissez la librairie à l'exécution du programme : <code java>

152 Il manque un espace à côté du tiret. => java -Dsun.security.smartcardio.library=/usr/local/lib/libpcsclite.so TestSmartCardIO 
152 Mot inconnu : TestSmartCardIO => java -Dsun.security.smartcardio.library=/usr/local/lib/libpcsclite.so TestSmartCardIO 
152 Espace(s) en fin de ligne à supprimer. => java -Dsun.security.smartcardio.library=/usr/local/lib/libpcsclite.so TestSmartCardIO 

154 Il manque un espace insécable. => Soit vous faites le travail dans le code en recherchant le fichier dans /lib dans le code : <code java>

155 Mot inconnu : libPcscLite => File libPcscLite = new File("/lib/libpcsclite.so.1");
155 Il manque un espace avant la parenthèse. => File libPcscLite = new File("/lib/libpcsclite.so.1");

156 Mot inconnu : libPcscLite => if (libPcscLite.exists()) {
156 Mot inconnu : exists => if (libPcscLite.exists()) {

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Mot inconnu : System =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Mot inconnu : setProperty =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Il manque un espace avant la parenthèse. =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Guillemets typographiques ouvrants. =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Guillemets typographiques fermants. =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Mot inconnu : libPcscLite =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());
157 Mot inconnu : getAbsolutePath =>   System.setProperty("sun.security.smartcardio.library", libPcscLite.getAbsolutePath());

161 Mot inconnu : SpringCard => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Accord de nombre erroné avec « des outils » : « gratuit » devrait être au pluriel. => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Mot inconnu : SC => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Guillemets typographiques ouvrants. => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Mot inconnu : javax => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Mot inconnu : smartcardio => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.
161 Guillemets typographiques fermants. => SpringCard met à disposition des outils gratuit pour PC/SC sur son site. Notamment un [[http://www.springcard.com/online/applet_pcsc/|applet Java en ligne]] qui permet de tester facilement si ''javax.smartcardio'' fonctionne.

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[https://wiki.debian.org/fr/Smartcards|liste des cartes reconnues sous debian avec leur pilote respectif]],
164 Mot inconnu : debian =>   * [[https://wiki.debian.org/fr/Smartcards|liste des cartes reconnues sous debian avec leur pilote respectif]],

165 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.springcard.com/solutions/pcsc.html| Liste d'outils PCSC recensé par SpringCard]].
165 Mot inconnu : PCSC =>   * [[http://www.springcard.com/solutions/pcsc.html| Liste d'outils PCSC recensé par SpringCard]].
165 Mot inconnu : SpringCard =>   * [[http://www.springcard.com/solutions/pcsc.html| Liste d'outils PCSC recensé par SpringCard]].

169 Il manque un espace insécable. => //Contributeurs : [[:utilisateurs:SaiyanRiku]] ;//
169 Il manque un espace. => //Contributeurs : [[:utilisateurs:SaiyanRiku]] ;//
169 Il manque un espace insécable. => //Contributeurs : [[:utilisateurs:SaiyanRiku]] ;//
