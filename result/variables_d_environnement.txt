8 Il manque un espace insécable. => Les variables d'environnement constituent un moyen d'influencer le comportement des logiciels sur votre système. Par exemple, la variable d'environnement « LANG » détermine la langue que les logiciels utilisent pour communiquer avec l'utilisateur.
8 Mot inconnu : LANG => Les variables d'environnement constituent un moyen d'influencer le comportement des logiciels sur votre système. Par exemple, la variable d'environnement « LANG » détermine la langue que les logiciels utilisent pour communiquer avec l'utilisateur.
8 Il manque un espace insécable. => Les variables d'environnement constituent un moyen d'influencer le comportement des logiciels sur votre système. Par exemple, la variable d'environnement « LANG » détermine la langue que les logiciels utilisent pour communiquer avec l'utilisateur.

10 Il manque un espace insécable. => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».
10 Mot inconnu : fr_FR => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».
10 Il manque un espace insécable. => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».
10 Il manque un espace insécable. => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».
10 Mot inconnu : LANG => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».
10 Il manque un espace insécable. => Les variables sont constituées de **noms** auxquels on assigne des **valeurs**. Ainsi, le système d'un utilisateur français devrait avoir la valeur « fr_FR.UTF-8 » assignée à la variable « LANG ».

19 Espace(s) en fin de ligne à supprimer. => Bien que quelques applications de configuration en mode graphique manipulent en réalité des variables d'environnement, la ligne de commande offre un maximum de flexibilité pour créer et modifier ces variables. 

21 Il manque un espace insécable. => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Mot inconnu : Bourne => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Il manque un espace insécable. => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Il manque les traits d’union. => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Mot inconnu : sh => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Mot inconnu : ksh => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Mot inconnu : bash => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>
21 Mot inconnu : csh => <note>Les techniques expliquées ci-dessous s'appliquent à la famille d'interpréteurs de commandes « Bourne Shell », c'est à dire **sh**, **ksh**, et **bash**. Ce dernier est l'interpréteur de commande par défaut d'Ubuntu. Si vous utilisez un autre interpréteur de commande, comme **csh**, les commandes indiquées pourraient être différentes.</note>

25 Il manque un espace insécable. => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Mot inconnu : fr_FR => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Il manque un espace insécable. => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Il manque un espace insécable. => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Mot inconnu : LANG => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Il manque un espace insécable. => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :
25 Il manque un espace insécable. => Pour affecter une valeur à une variable d'environnement **existante**, nous utilisons une expression d'affectation. Par exemple pour assigner la valeur « fr_FR.UTF-8 » à la variable « LANG », nous utilisons la commande suivante :

28 Mot inconnu : LANG => LANG=fr_FR.UTF-8
28 Mot inconnu : fr_FR => LANG=fr_FR.UTF-8

31 Il manque un espace insécable. => Si nous utilisons une expression d'affectation pour une variable qui n'existe pas, l'interpréteur de commande créera une « variable de shell », qui est similaire à une variable d'environnement mais qui n'affectera pas le comportement d'autres applications.
31 Il manque un espace insécable. => Si nous utilisons une expression d'affectation pour une variable qui n'existe pas, l'interpréteur de commande créera une « variable de shell », qui est similaire à une variable d'environnement mais qui n'affectera pas le comportement d'autres applications.

33 Il manque un espace insécable. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Mot inconnu : EDITOR => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Il manque un espace insécable. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Il manque un espace insécable. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Mot inconnu : nano => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Il manque un espace insécable. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Accord erroné : “méthodes” et “utilisée” ne sont pas accordés. Mettez au pluriel. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :
33 Il manque un espace insécable. => Une variable de shell peut être exportée pour devenir une variable d'environnement grâce à la commande **export**. Pour créer la variable d'environnement « EDITOR » et lui assigner la valeur « nano », plusieurs méthodes peuvent être utilisée. Voici celle que nous proposons :

37 Mot inconnu : EDITOR => EDITOR=nano
37 Mot inconnu : nano => EDITOR=nano

38 Mot inconnu : EDITOR => export EDITOR

41 Mot inconnu : bash => L'interpréteur de commandes **bash** (celui qui est fourni par défaut avec Ubuntu) propose un raccourci pour créer des variables d'environnement. L'exemple précédent peut être condensé en une seule ligne de commande :
41 Il manque un espace insécable. => L'interpréteur de commandes **bash** (celui qui est fourni par défaut avec Ubuntu) propose un raccourci pour créer des variables d'environnement. L'exemple précédent peut être condensé en une seule ligne de commande :

44 Mot inconnu : EDITOR => export EDITOR=nano
44 Mot inconnu : nano => export EDITOR=nano

48 Mot inconnu : printenv => La commande **printenv** affiche les noms et les valeurs de toutes les variables d'environnement définies :
48 Il manque un espace insécable. => La commande **printenv** affiche les noms et les valeurs de toutes les variables d'environnement définies :

51 Mot inconnu : printenv => printenv 
51 Espace(s) en fin de ligne à supprimer. => printenv 

54 Mot inconnu : printenv => Pour examiner la valeur d'une variable en particulier, il suffit de spécifier son nom après la commande **printenv** :
54 Il manque un espace insécable. => Pour examiner la valeur d'une variable en particulier, il suffit de spécifier son nom après la commande **printenv** :

57 Mot inconnu : printenv => printenv TERM
57 Mot inconnu : TERM => printenv TERM

60 Il manque un espace insécable. => La valeur de la variable peut également être récupérée en utilisant le signe « $ » devant son nom, comme dans l'exemple suivant :
60 Il manque un espace insécable. => La valeur de la variable peut également être récupérée en utilisant le signe « $ » devant son nom, comme dans l'exemple suivant :
60 Il manque un espace insécable. => La valeur de la variable peut également être récupérée en utilisant le signe « $ » devant son nom, comme dans l'exemple suivant :

63 Mot inconnu : echo => echo $TERM
63 Mot inconnu : TERM => echo $TERM

66 Il manque un espace insécable. => Il existe une commande qui permet de faire des modifications temporaires, à court terme, sur l'environnement. Cela peut aussi être utilisé pour afficher les variables d'environnement courantes. Il s'agit de la commande **env** :

72 Mot inconnu : Desktop => Le signe dollar peut être utilisé pour récupérer la valeur des variables d'environnement dans les lignes de commandes. Par exemple, la commande suivante peut être utilisée pour lister les fichiers du bureau (dossier Desktop) de l'utilisateur courant :
72 Il manque un espace insécable. => Le signe dollar peut être utilisé pour récupérer la valeur des variables d'environnement dans les lignes de commandes. Par exemple, la commande suivante peut être utilisée pour lister les fichiers du bureau (dossier Desktop) de l'utilisateur courant :

75 Mot inconnu : ls => ls $HOME/Desktop
75 Mot inconnu : Desktop => ls $HOME/Desktop

80 Il manque un espace insécable. => Dans la plupart des cas, affecter une valeur vide à une variable d'environnement suffit à annuler son effet, comme dans l'exemple ci-dessous. Cependant certaines variables comme « POSIXLY_CORRECT » ont une influence sur les programmes du fait même de leur existence, et ce, même si leur valeur est vide.
80 Mot inconnu : POSIXLY_CORRECT => Dans la plupart des cas, affecter une valeur vide à une variable d'environnement suffit à annuler son effet, comme dans l'exemple ci-dessous. Cependant certaines variables comme « POSIXLY_CORRECT » ont une influence sur les programmes du fait même de leur existence, et ce, même si leur valeur est vide.
80 Il manque un espace insécable. => Dans la plupart des cas, affecter une valeur vide à une variable d'environnement suffit à annuler son effet, comme dans l'exemple ci-dessous. Cependant certaines variables comme « POSIXLY_CORRECT » ont une influence sur les programmes du fait même de leur existence, et ce, même si leur valeur est vide.

83 Mot inconnu : LC_ALL => export LC_ALL=

86 Mot inconnu : unset => La commande **unset** peut être utilisée pour supprimer complètement une variable d'environnement :
86 Il manque un espace insécable. => La commande **unset** peut être utilisée pour supprimer complètement une variable d'environnement :

89 Mot inconnu : unset => unset LC_ALL
89 Mot inconnu : LC_ALL => unset LC_ALL

95 Il manque un espace à côté du tiret. => export -n LC_ALL
95 Mot inconnu : LC_ALL => export -n LC_ALL

104 Il manque les traits d’union. => Les variables d'environnement ont une portée locale. Ce qui signifie que leur valeur est spécifique au processus dans lequel ou pour lequel elles ont été définies. Ainsi si vous ouvrez deux terminaux différents, c'est à dire deux processus **bash** différents, et que vous changez la valeur d'une variable d'environnement dans un terminal, ce changement n'affectera pas l'autre terminal ni aucun autre programme. Ce changement est local, il affecte le processus dans lequel il a été effectué, sans aucune influence sur les autres processus externes.
104 Mot inconnu : bash => Les variables d'environnement ont une portée locale. Ce qui signifie que leur valeur est spécifique au processus dans lequel ou pour lequel elles ont été définies. Ainsi si vous ouvrez deux terminaux différents, c'est à dire deux processus **bash** différents, et que vous changez la valeur d'une variable d'environnement dans un terminal, ce changement n'affectera pas l'autre terminal ni aucun autre programme. Ce changement est local, il affecte le processus dans lequel il a été effectué, sans aucune influence sur les autres processus externes.

108 Mot inconnu : gedit => Lorsqu'un processus enfant est créé à partir d'un processus parent, le processus enfant hérite de toutes les variables du processus parent, avec leurs valeurs. Par exemple, si on lance **gedit** depuis un terminal, **bash** le processus parent, engendre le processus enfant **gedit**.
108 Mot inconnu : bash => Lorsqu'un processus enfant est créé à partir d'un processus parent, le processus enfant hérite de toutes les variables du processus parent, avec leurs valeurs. Par exemple, si on lance **gedit** depuis un terminal, **bash** le processus parent, engendre le processus enfant **gedit**.
108 Mot inconnu : gedit => Lorsqu'un processus enfant est créé à partir d'un processus parent, le processus enfant hérite de toutes les variables du processus parent, avec leurs valeurs. Par exemple, si on lance **gedit** depuis un terminal, **bash** le processus parent, engendre le processus enfant **gedit**.

110 Il manque un espace insécable. => En conséquence, si nous définissons la valeur de la variable d'environnement « LANG » dans un terminal, et que nous lançons depuis le même terminal **gedit**, celui-ci héritera de la nouvelle valeur de la variable LANG, et s'affichera donc dans une langue différente du reste des applications du système.
110 Mot inconnu : LANG => En conséquence, si nous définissons la valeur de la variable d'environnement « LANG » dans un terminal, et que nous lançons depuis le même terminal **gedit**, celui-ci héritera de la nouvelle valeur de la variable LANG, et s'affichera donc dans une langue différente du reste des applications du système.
110 Il manque un espace insécable. => En conséquence, si nous définissons la valeur de la variable d'environnement « LANG » dans un terminal, et que nous lançons depuis le même terminal **gedit**, celui-ci héritera de la nouvelle valeur de la variable LANG, et s'affichera donc dans une langue différente du reste des applications du système.
110 Mot inconnu : gedit => En conséquence, si nous définissons la valeur de la variable d'environnement « LANG » dans un terminal, et que nous lançons depuis le même terminal **gedit**, celui-ci héritera de la nouvelle valeur de la variable LANG, et s'affichera donc dans une langue différente du reste des applications du système.
110 Mot inconnu : LANG => En conséquence, si nous définissons la valeur de la variable d'environnement « LANG » dans un terminal, et que nous lançons depuis le même terminal **gedit**, celui-ci héritera de la nouvelle valeur de la variable LANG, et s'affichera donc dans une langue différente du reste des applications du système.

112 Mot inconnu : gedit => Notez bien que du fait de la portée des variables, expliquée plus haut, une fois le processus **gedit** lancé, les modifications de variables dans le processus parent ne seront pas répercutées sur le processus enfant et vice-versa.

115 Il manque un espace insécable. => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Il manque un espace insécable. => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Mot inconnu : éxecutant => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Mot inconnu : KDE => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Il manque un espace insécable. => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Mot inconnu : kde-session => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».
115 Il manque un espace insécable. => Dans l'environnement de bureau GNOME, « gnome-session » est le processus parent de tous les processus s'éxecutant dans cet environnement. Ceci constitue (avec le principe d'héritage) le point clé qui nous permet d'influencer le comportement de notre environnement de bureau grâce aux variables d'environnement. L'équivalent pour KDE est « kde-session ».

120 Mot inconnu : LANG => Le nom des variables d'environnement est sensible à la casse. Ce qui signifie que //LANG// n'est pas la même variable que //lang//, //Lang// ou encore //laNg//.
120 Mot inconnu : lang => Le nom des variables d'environnement est sensible à la casse. Ce qui signifie que //LANG// n'est pas la même variable que //lang//, //Lang// ou encore //laNg//.
120 Mot inconnu : Lang => Le nom des variables d'environnement est sensible à la casse. Ce qui signifie que //LANG// n'est pas la même variable que //lang//, //Lang// ou encore //laNg//.
120 Mot inconnu : laNg => Le nom des variables d'environnement est sensible à la casse. Ce qui signifie que //LANG// n'est pas la même variable que //lang//, //Lang// ou encore //laNg//.

122 Il manque un espace insécable. => La pratique courante est de nommer toutes les variables d'environnement uniquement en anglais, en majuscules avec éventuellement des tirets de soulignement « _ ».
122 Il manque un espace insécable. => La pratique courante est de nommer toutes les variables d'environnement uniquement en anglais, en majuscules avec éventuellement des tirets de soulignement « _ ».

125 Mot inconnu : Bash => ===== Affectation rapide et héritage avec Bash =====

127 Mot inconnu : bash => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Il manque un espace insécable. => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Mot inconnu : LANG => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Il manque un espace insécable. => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Il manque un espace insécable. => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Mot inconnu : FOO => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Il manque un espace insécable. => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Mot inconnu : gedit => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :
127 Il manque un espace insécable. => L'interpréteur de commandes **bash** nous permet de définir une ou plusieurs variables d'environnement et de lancer un processus enfant en une seule commande. Par exemple, pour définir les variables « LANG » et « FOO », puis lancer **gedit**, nous pouvons utiliser la commande :

130 Mot inconnu : LANG => LANG=he_IL.UTF-8 FOO=bar gedit
130 Mot inconnu : he_IL => LANG=he_IL.UTF-8 FOO=bar gedit
130 Mot inconnu : FOO => LANG=he_IL.UTF-8 FOO=bar gedit
130 Mot inconnu : gedit => LANG=he_IL.UTF-8 FOO=bar gedit

133 Il manque un espace insécable. => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Mot inconnu : processsus => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Mot inconnu : gedit => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Il manque un espace insécable. => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Mot inconnu : LANG => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Il manque un espace insécable. => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.
133 Mot inconnu : fr_FR => Remarque : En utilisant cette commande, les nouvelles valeurs sont uniquement assignées au processsus enfant, ici **gedit**. Les variables du shell conservent leurs valeurs d'origine. Ainsi, dans cet exemple, la valeur de « LANG » restera inchangée (sans doute fr_FR.UTF-8 pour vous) pour les commandes suivantes dans le terminal.

142 Il manque un espace insécable. => Pour définir une variable d'environnement de manière à ce qu'elle affecte l'ensemble de la session d'un utilisateur, il suffit de placer une commande la définissant dans l'un des fichiers cachés de script présent dans le répertoire personnel de l'utilisateur. Voici les fichiers les plus courants qui peuvent être utilisés :

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **~/.profile** - C'est probablement le meilleur endroit pour placer une définition de variable d'environnement. En effet, il est exécuté automatiquement par le gestionnaire de connexion lors du démarrage d'une session graphique, mais aussi lors du démarrage d'une session en mode console texte.
144 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **~/.profile** - C'est probablement le meilleur endroit pour placer une définition de variable d'environnement. En effet, il est exécuté automatiquement par le gestionnaire de connexion lors du démarrage d'une session graphique, mais aussi lors du démarrage d'une session en mode console texte.

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : bash_profile =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : bash_login =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : Bash =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : Bash =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : bash_profile =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.
146 Mot inconnu : bash_login =>   * **~/.bash_profile** ou **~/.bash_login** - Si l'un de ces fichiers existe, il sera exécuté par **Bash** préférentiellement à **~/.profile** lors d'une connexion sur une console. (Bash utilisera ~/.bash_profile de préférence à ~/.bash_login). Cependant, ces fichiers n'auront par défaut aucune influence sur une session en mode graphique.

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Mot inconnu : bashrc =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Confusion. =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Mot inconnu : bash =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Il manque un espace insécable. =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)
148 Il manque un espace insécable. =>   * **~/.bashrc** - Du fait de la manière dont Ubuntu configure par défaut les divers fichiers de scripts, c'est sans doute l'endroit le plus facile pour définir des variables. La configuration par défaut garantit a peu près que ce fichier sera exécuté à chaque invocation de *bash* ainsi que lors de la connexion à l'environnement graphique. Cependant du point de vue des performances, ce n'est pas l'idéal car les variables seront inutilement redéfinies à chaque fois. (NdT : à chaque fois que vous ouvrez un terminal par exemple?)

152 Accord de genre erroné : « une session » est féminin, « utilisateur » est masculin. => Les variables d'environnement qui affectent l'ensemble du système (plutôt qu'une session utilisateur particulière) peuvent être définies dans l'un des nombreux scripts au niveau système, qui s'exécutent lors du chargement du système ou de l'environnement graphique. Ces définitions peuvent être placées dans plusieurs fichiers sur Ubuntu :
152 Il manque un espace insécable. => Les variables d'environnement qui affectent l'ensemble du système (plutôt qu'une session utilisateur particulière) peuvent être définies dans l'un des nombreux scripts au niveau système, qui s'exécutent lors du chargement du système ou de l'environnement graphique. Ces définitions peuvent être placées dans plusieurs fichiers sur Ubuntu :

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **/etc/profile** - Ce fichier est exécuté quelle que soit la méthode de connexion utilisée : une console, une connexion distante ssh, ou une connexion en mode graphique. C'est probablement l'emplacement qui vous sera conseillé par les vieux routiers d'UNIX pour gérer vos variables d'environnement. Cependant sur Ubuntu ce script fait quelques vérifications puis invoque **/etc/bash.bashrc**.
154 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **/etc/profile** - Ce fichier est exécuté quelle que soit la méthode de connexion utilisée : une console, une connexion distante ssh, ou une connexion en mode graphique. C'est probablement l'emplacement qui vous sera conseillé par les vieux routiers d'UNIX pour gérer vos variables d'environnement. Cependant sur Ubuntu ce script fait quelques vérifications puis invoque **/etc/bash.bashrc**.
154 Il manque un espace insécable. =>   * **/etc/profile** - Ce fichier est exécuté quelle que soit la méthode de connexion utilisée : une console, une connexion distante ssh, ou une connexion en mode graphique. C'est probablement l'emplacement qui vous sera conseillé par les vieux routiers d'UNIX pour gérer vos variables d'environnement. Cependant sur Ubuntu ce script fait quelques vérifications puis invoque **/etc/bash.bashrc**.
154 Mot inconnu : ssh =>   * **/etc/profile** - Ce fichier est exécuté quelle que soit la méthode de connexion utilisée : une console, une connexion distante ssh, ou une connexion en mode graphique. C'est probablement l'emplacement qui vous sera conseillé par les vieux routiers d'UNIX pour gérer vos variables d'environnement. Cependant sur Ubuntu ce script fait quelques vérifications puis invoque **/etc/bash.bashrc**.

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **/etc/bash.bashrc** - C'est la version au niveau système du fichier utilisateur **~/.bashrc**. Par défaut Ubuntu est configuré pour exécuter ce fichier quelle que soit la méthode de connexion, sur une console ou en environnement graphique.
156 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **/etc/bash.bashrc** - C'est la version au niveau système du fichier utilisateur **~/.bashrc**. Par défaut Ubuntu est configuré pour exécuter ce fichier quelle que soit la méthode de connexion, sur une console ou en environnement graphique.
156 Mot inconnu : bashrc =>   * **/etc/bash.bashrc** - C'est la version au niveau système du fichier utilisateur **~/.bashrc**. Par défaut Ubuntu est configuré pour exécuter ce fichier quelle que soit la méthode de connexion, sur une console ou en environnement graphique.
156 Accord erroné : “Ubuntu” et “configuré” ne sont pas accordés. Mettez au féminin pluriel. =>   * **/etc/bash.bashrc** - C'est la version au niveau système du fichier utilisateur **~/.bashrc**. Par défaut Ubuntu est configuré pour exécuter ce fichier quelle que soit la méthode de connexion, sur une console ou en environnement graphique.

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **/etc/environment** - Ce fichier est spécialement conçu pour recevoir les définitions de variables d'environnement au niveau système. Ce n'est pas un fichier de script, mais plutôt un fichier de déclarations de variables, ligne par ligne. En particulier, il contient les définitions des variables de langue et de la variable **PATH** au niveau système.
158 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   * **/etc/environment** - Ce fichier est spécialement conçu pour recevoir les définitions de variables d'environnement au niveau système. Ce n'est pas un fichier de script, mais plutôt un fichier de déclarations de variables, ligne par ligne. En particulier, il contient les définitions des variables de langue et de la variable **PATH** au niveau système.
158 Mot inconnu : PATH =>   * **/etc/environment** - Ce fichier est spécialement conçu pour recevoir les définitions de variables d'environnement au niveau système. Ce n'est pas un fichier de script, mais plutôt un fichier de déclarations de variables, ligne par ligne. En particulier, il contient les définitions des variables de langue et de la variable **PATH** au niveau système.

173 Accord de nombre erroné avec « Exemples ». => ^ Variable ^ Exemples de valeur ^ Rôle ^
173 Accord de nombre erroné avec « Variable ». => ^ Variable ^ Exemples de valeur ^ Rôle ^

174 Mot inconnu : PATH => |PATH|/usr/sbin:/usr/bin:/sbin:/bin|Lorsque vous tapez une commande, le système la cherche dans les dossiers spécifiés par la variable PATH, dans l'ordre où ils sont indiqués.|
174 Il manque un espace insécable. => |PATH|/usr/sbin:/usr/bin:/sbin:/bin|Lorsque vous tapez une commande, le système la cherche dans les dossiers spécifiés par la variable PATH, dans l'ordre où ils sont indiqués.|
174 Il manque un espace insécable. => |PATH|/usr/sbin:/usr/bin:/sbin:/bin|Lorsque vous tapez une commande, le système la cherche dans les dossiers spécifiés par la variable PATH, dans l'ordre où ils sont indiqués.|
174 Il manque un espace insécable. => |PATH|/usr/sbin:/usr/bin:/sbin:/bin|Lorsque vous tapez une commande, le système la cherche dans les dossiers spécifiés par la variable PATH, dans l'ordre où ils sont indiqués.|
174 Mot inconnu : PATH => |PATH|/usr/sbin:/usr/bin:/sbin:/bin|Lorsque vous tapez une commande, le système la cherche dans les dossiers spécifiés par la variable PATH, dans l'ordre où ils sont indiqués.|

175 Mot inconnu : MANPATH => |MANPATH|/usr/share/man:/usr/local/man|Liste de dossiers où le système doit chercher les pages de manuel.|
175 Il manque un espace insécable. => |MANPATH|/usr/share/man:/usr/local/man|Liste de dossiers où le système doit chercher les pages de manuel.|

176 Mot inconnu : LD_LIBRARY_PATH => |LD_LIBRARY_PATH|/opt/app/oracle/lib|Liste de dossiers où le système doit chercher les bibliothèques d'exécution en plus de celles définies dans //ld// et ///etc/ld.so.conf//|
176 Mot inconnu : ld => |LD_LIBRARY_PATH|/opt/app/oracle/lib|Liste de dossiers où le système doit chercher les bibliothèques d'exécution en plus de celles définies dans //ld// et ///etc/ld.so.conf//|

177 Mot inconnu : TMPDIR => |TMPDIR|/var/tmp|Le dossier utilisé pour les fichiers temporaires créés par de nombreux programmes|

180 Espace(s) surnuméraire(s) à supprimer. => ==== Variables de paramètres régionaux  ====

184 Il manque un espace à côté du tiret. => Les valeurs qui peuvent être assignées à ces variables d'environnement correspondent aux paramètres régionaux installés sur le système. Pour voir quels sont ces paramètres installés, vous pouvez utiliser la commande **locale -a**. les paramètres régionaux peuvent être générés par la commande **locale-gen**. Cependant, Ubuntu inclut des paramètres régionaux prédéfinis dans les paquets de langue (language-pack-xx) disponibles au travers du système de gestion de paquets
184 Mot inconnu : locale-gen => Les valeurs qui peuvent être assignées à ces variables d'environnement correspondent aux paramètres régionaux installés sur le système. Pour voir quels sont ces paramètres installés, vous pouvez utiliser la commande **locale -a**. les paramètres régionaux peuvent être générés par la commande **locale-gen**. Cependant, Ubuntu inclut des paramètres régionaux prédéfinis dans les paquets de langue (language-pack-xx) disponibles au travers du système de gestion de paquets
184 Mot inconnu : language-pack-xx => Les valeurs qui peuvent être assignées à ces variables d'environnement correspondent aux paramètres régionaux installés sur le système. Pour voir quels sont ces paramètres installés, vous pouvez utiliser la commande **locale -a**. les paramètres régionaux peuvent être générés par la commande **locale-gen**. Cependant, Ubuntu inclut des paramètres régionaux prédéfinis dans les paquets de langue (language-pack-xx) disponibles au travers du système de gestion de paquets

188 Mot inconnu : LANG => |LANG| Le paramètre linguistique de base utilisé par les applications du système, tant qu'il n'est pas contredit par une autre variable|

189 Mot inconnu : LC_CTYPE => |LC_CTYPE|Le jeu de caractères utilisé pour saisir et afficher du texte|

190 Mot inconnu : LC_NUMERIC => |LC_NUMERIC|Mise en forme des valeurs numériques non-monétaires|

191 Mot inconnu : LC_TIME => |LC_TIME|Format de la date et de l'heure|

192 Mot inconnu : LC_COLLATE => |LC_COLLATE|Comment trier diverses informations, définit par exemple l'ordre alphabétique afin que les éléments puissent être triés alphabétiquement en utilisant la commande **sort**|

193 Mot inconnu : LC_MONETARY => |LC_MONETARY|Format des valeurs numériques monétaires|

194 Mot inconnu : LC_MESSAGES => |LC_MESSAGES|Langue utilisée pour afficher les messages à l'utilisateur|

195 Mot inconnu : LC_PAPER => |LC_PAPER|Définitions des formats de papier standard|

196 Mot inconnu : LC_NAME => |LC_NAME|Format des noms|

197 Mot inconnu : LC_ADDRESS => |LC_ADDRESS|Format des adresses|

198 Mot inconnu : LC_TELEPHONE => |LC_TELEPHONE|Structure des numéros de téléphone|

199 Mot inconnu : LC_MEASUREMENT => |LC_MEASUREMENT|Unités de mesure à utiliser|

200 Mot inconnu : LC_IDENTIFICATION => |LC_IDENTIFICATION||

201 Mot inconnu : LC_ALL => |LC_ALL|Cette variable a un rôle puissant pour écraser les autres paramètres régionaux. Lorsqu'une valeur lui est affectée, les applications utiliseront cette valeur quelle que soient les valeurs des autres variables|
201 Accord avec “les valeurs”. Utilisez le pluriel. => |LC_ALL|Cette variable a un rôle puissant pour écraser les autres paramètres régionaux. Lorsqu'une valeur lui est affectée, les applications utiliseront cette valeur quelle que soient les valeurs des autres variables|

203 Mot inconnu : US-English => En utilisant diverses combinaisons pour ces variables de paramètres régionaux, vous pouvez obtenir des modifications intéressantes du comportement de votre système. Par exemple, votre système peut afficher les messages en anglo-américain (US-English), tout en utilisant les formats de date, nombres et unités de mesure les plus courants en Europe.

215 Accord de nombre erroné avec « propres ». => En général, ces variables ne sont pas respectées par les applications en mode graphique qui intègrent leur propres éditeurs et afficheurs de texte. La plupart des environnements de bureau proposent en outre leur propre système de sélection des applications préférées.
215 Accord de nombre erroné : « propres » devrait être au singulier. => En général, ces variables ne sont pas respectées par les applications en mode graphique qui intègrent leur propres éditeurs et afficheurs de texte. La plupart des environnements de bureau proposent en outre leur propre système de sélection des applications préférées.

221 Mot inconnu : EDITOR => |EDITOR|usr/bin/nano|Le nom de l'éditeur de texte préféré pour les utilisateurs. Il sera utilisé par des commandes telles que **mutt** ou **sudoedit**|
221 Mot inconnu : usr => |EDITOR|usr/bin/nano|Le nom de l'éditeur de texte préféré pour les utilisateurs. Il sera utilisé par des commandes telles que **mutt** ou **sudoedit**|
221 Mot inconnu : mutt => |EDITOR|usr/bin/nano|Le nom de l'éditeur de texte préféré pour les utilisateurs. Il sera utilisé par des commandes telles que **mutt** ou **sudoedit**|
221 Mot inconnu : sudoedit => |EDITOR|usr/bin/nano|Le nom de l'éditeur de texte préféré pour les utilisateurs. Il sera utilisé par des commandes telles que **mutt** ou **sudoedit**|

222 Mot inconnu : VISUAL => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Il manque un espace insécable. => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Mot inconnu : EDITOR => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Il manque un espace insécable. => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Il manque un espace insécable. => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Mot inconnu : EDITOR => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|
222 Il manque un espace insécable. => |VISUAL|/usr/bin/gedit|A le même rôle que la variable « EDITOR » mais est prioritaire. Si elle n'a pas de valeur « EDITOR » définie la valeur de l'application qui sera utilisée.|

223 Mot inconnu : BROWSER => |BROWSER|/usr/bin/lynx|Le nom du navigateur Web préféré pour les utilisateurs|

229 Mot inconnu : DISPLAY => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Mot inconnu : localhost => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Il manque un espace. => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Mot inconnu : terminal01 => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Il manque un espace. => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Il manque un espace insécable. => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Mot inconnu : gdm => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|
229 Mot inconnu : ssh => |DISPLAY|:0.0\\ localhost:10.0\\ terminal01:0.0|Cette variable est utilisée pour indiquer aux applications où afficher l'interface graphique utilisateur. Sa valeur est constituée de trois parties : un nom d'hôte suivi de deux-points (:), un numéro d'affichage suivi d'un point (.) et un numéro d'écran. Le nom d'hôte peut être utilisé pour déporter l'affichage sur une machine distante du réseau. Il peut être omis si l'affichage se fait sur la machine locale. Le numéro d'affichage permet de choisir un parmi plusieurs serveurs X tournant sur la même machine (Ubuntu utilise plusieurs serveurs X pour permettre plusieurs sessions graphiques simultanées). Le numéro d'écran permet de choisir parmi plusieurs moniteurs gérés par le même serveur X. Sa valeur est généralement 0, et il est rarement utile de la modifier manuellement car cela peut être réglé automatiquement et intelligemment par de nombreuses applications comme **gdm** ou **ssh** lorsque c'est nécessaire.|

230 Mot inconnu : XDG_DATA_HOME => |XDG_DATA_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les données de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications.|
230 Mot inconnu : share => |XDG_DATA_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les données de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications.|
230 Mot inconnu : freedesktop => |XDG_DATA_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les données de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications.|

231 Mot inconnu : XDG_CONFIG_HOME => |XDG_CONFIG_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les informations de configuration de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
231 Mot inconnu : share => |XDG_CONFIG_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les informations de configuration de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
231 Mot inconnu : freedesktop => |XDG_CONFIG_HOME|~/.local/share|Indique aux applications conformes aux spécifications freedesktop.org, où placer les informations de configuration de l'utilisateur. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|

232 Mot inconnu : XDG_DATA_DIRS => |XDG_DATA_DIRS|/usr/local/share:/usr/share|Une liste de dossiers séparés par deux-points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les données. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
232 Il manque un espace insécable. => |XDG_DATA_DIRS|/usr/local/share:/usr/share|Une liste de dossiers séparés par deux-points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les données. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
232 Mot inconnu : PATH => |XDG_DATA_DIRS|/usr/local/share:/usr/share|Une liste de dossiers séparés par deux-points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les données. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
232 Mot inconnu : freedesktop => |XDG_DATA_DIRS|/usr/local/share:/usr/share|Une liste de dossiers séparés par deux-points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les données. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|

233 Mot inconnu : XDG_CONFIG_DIRS => |XDG_CONFIG_DIRS|/etc/xdg|Une liste de dossiers séparés par deux points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les informations de configuration. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
233 Mot inconnu : PATH => |XDG_CONFIG_DIRS|/etc/xdg|Une liste de dossiers séparés par deux points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les informations de configuration. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
233 Mot inconnu : freedesktop => |XDG_CONFIG_DIRS|/etc/xdg|Une liste de dossiers séparés par deux points (similaire à **PATH**) indiquant aux applications conformes aux spécifications freedesktop.org, où chercher les informations de configuration. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|

234 Mot inconnu : XDG_CACHE_HOME => |XDG_CACHE_HOME|~/.cache|un emplacement utilisé par les applications conformes aux spécifications freedesktop.org, pour mettre en cache les données temporaires. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|
234 Mot inconnu : freedesktop => |XDG_CACHE_HOME|~/.cache|un emplacement utilisé par les applications conformes aux spécifications freedesktop.org, pour mettre en cache les données temporaires. En général cette variable n'est pas définie puisqu'une valeur de secours par défaut est implémentée dans les spécifications|

236 Mot inconnu : XDG_ => Les variables XDG_* sont définies pour chaque utilisateur dans le fichier ~/.config/user-dirs.dirs. Leurs valeurs par défaut sont récupérés dans le fichier /etc/xdg/user-dirs.defaults.
236 Mot inconnu : user-dirs => Les variables XDG_* sont définies pour chaque utilisateur dans le fichier ~/.config/user-dirs.dirs. Leurs valeurs par défaut sont récupérés dans le fichier /etc/xdg/user-dirs.defaults.
236 Mot inconnu : dirs => Les variables XDG_* sont définies pour chaque utilisateur dans le fichier ~/.config/user-dirs.dirs. Leurs valeurs par défaut sont récupérés dans le fichier /etc/xdg/user-dirs.defaults.
236 Accord erroné : “valeurs” et “récupérés” ne sont pas accordés. Mettez au féminin pluriel. => Les variables XDG_* sont définies pour chaque utilisateur dans le fichier ~/.config/user-dirs.dirs. Leurs valeurs par défaut sont récupérés dans le fichier /etc/xdg/user-dirs.defaults.

238 Il manque un espace insécable. => Pour redéfinir ces variables utilisez une commande du type :

240 Mot inconnu : xdg-user-dirs-update => <code>xdg-user-dirs-update --set DIR path</code>
240 Mot inconnu : DIR => <code>xdg-user-dirs-update --set DIR path</code>
240 Mot inconnu : path => <code>xdg-user-dirs-update --set DIR path</code>

242 Mot inconnu : DIR => Remplacez DIR par un nom de variable présent dans /etc/xdg/user-dirs.defaults et path par le dossier de votre choix.
242 Mot inconnu : path => Remplacez DIR par un nom de variable présent dans /etc/xdg/user-dirs.defaults et path par le dossier de votre choix.

244 Il manque un espace insécable. => Par exemple pour redéfinir le dossier du bureau :

246 Mot inconnu : xdg-user-dirs-update => <code>xdg-user-dirs-update --set DESKTOP $HOME/toto</code>
246 Mot inconnu : DESKTOP => <code>xdg-user-dirs-update --set DESKTOP $HOME/toto</code>

250 Mot inconnu : Desktop => Si vous avez une ancienne installation d'Ubuntu que vous mettez à jour, il est probable que vous gardiez les anciens répertoires (Desktop pour le bureau, pas de répertoire Téléchargements, etc).

252 Il manque un espace insécable. => Pour forcer la redéfinition des répertoires, il faut lancer la commande suivante :

253 Mot inconnu : xdg-user-dirs-update => <code>xdg-user-dirs-update --force</code>

258 Mot inconnu : NAUTILUS_SCRIPT_SELECTED_FILE_PATHS => |NAUTILUS_SCRIPT_SELECTED_FILE_PATHS|/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des fichiers actuellement sélectionnés. Cette variable ne sera définie que s'il s'agit de fichiers locaux, ne provenant pas d'un partage réseau ou d'une connexion ssh.|
258 Mot inconnu : nautilus => |NAUTILUS_SCRIPT_SELECTED_FILE_PATHS|/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des fichiers actuellement sélectionnés. Cette variable ne sera définie que s'il s'agit de fichiers locaux, ne provenant pas d'un partage réseau ou d'une connexion ssh.|
258 Mot inconnu : ssh => |NAUTILUS_SCRIPT_SELECTED_FILE_PATHS|/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des fichiers actuellement sélectionnés. Cette variable ne sera définie que s'il s'agit de fichiers locaux, ne provenant pas d'un partage réseau ou d'une connexion ssh.|

259 Mot inconnu : NAUTILUS_SCRIPT_SELECTED_URIS => |NAUTILUS_SCRIPT_SELECTED_URIS|file:/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des adresses (URI) des fichiers actuellement sélectionnés.|
259 Il manque un espace insécable. => |NAUTILUS_SCRIPT_SELECTED_URIS|file:/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des adresses (URI) des fichiers actuellement sélectionnés.|
259 Mot inconnu : nautilus => |NAUTILUS_SCRIPT_SELECTED_URIS|file:/home/ifireball/about.html|Cette variable d'environnement est définie par **nautilus**, le gestionnaire de fichiers de GNOME, lorsqu'un script est appelé à l'aide d'un clic droit. Elle consiste en une liste, ligne par ligne, des adresses (URI) des fichiers actuellement sélectionnés.|

260 Mot inconnu : NAUTILUS_SCRIPT_CURRENT_URI => |NAUTILUS_SCRIPT_CURRENT_URI|file:/home/ifireball|Cette variable d’environnement contient l'adresse (URI) de l'emplacement actuellement affiché dans la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|
260 Il manque un espace insécable. => |NAUTILUS_SCRIPT_CURRENT_URI|file:/home/ifireball|Cette variable d’environnement contient l'adresse (URI) de l'emplacement actuellement affiché dans la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|
260 Mot inconnu : nautilus => |NAUTILUS_SCRIPT_CURRENT_URI|file:/home/ifireball|Cette variable d’environnement contient l'adresse (URI) de l'emplacement actuellement affiché dans la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|

261 Mot inconnu : NAUTILUS_SCRIPT_WINDOW_GEOMETRY => |NAUTILUS_SCRIPT_WINDOW_GEOMETRY|828x511+251+342|Cette variable d'environnement contient la position à l'écran de la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|
261 Signe de multiplication typographique. => |NAUTILUS_SCRIPT_WINDOW_GEOMETRY|828x511+251+342|Cette variable d'environnement contient la position à l'écran de la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|
261 Mot inconnu : x511 => |NAUTILUS_SCRIPT_WINDOW_GEOMETRY|828x511+251+342|Cette variable d'environnement contient la position à l'écran de la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|
261 Mot inconnu : nautilus => |NAUTILUS_SCRIPT_WINDOW_GEOMETRY|828x511+251+342|Cette variable d'environnement contient la position à l'écran de la fenêtre de **nautilus** lorsqu'un script est appelé à l'aide d'un clic droit.|

270 Mot inconnu : LD_PRELOAD => |LD_PRELOAD|/usr/lib/valgrind.so|Cette variable peut être utilisée pour injecter une bibliothèque dynamique personnalisée lors du chargement de l'application en mémoire. Cela peut servir à certaines choses, comme remplacer la bibliothèque d'allocation mémoire intégrée à l'application par une version de débogage, afin de détecter des fuites mémoire.|

276 Mot inconnu : gcc => |CC| gcc | Le nom du compilateur C à utiliser |

277 Mot inconnu : CFLAGS => |CFLAGS| -o out.o | Une liste d'arguments de débogage / optimisation à passer au compilateur C |

278 Mot inconnu : CXXFLAGS => |CXXFLAGS| -Wall | Une liste d'arguments de débogage / optimisation à passer au compilateur C++ |

279 Mot inconnu : CPPFLAGS => |CPPFLAGS| -DDEBUG | Une liste d'arguments à passer au préprocesseur / compilateur C/C++ |
279 Mot inconnu : DDEBUG => |CPPFLAGS| -DDEBUG | Une liste d'arguments à passer au préprocesseur / compilateur C/C++ |

280 Mot inconnu : LIBRARY_PATH => |LIBRARY_PATH| /usr/lib/firefox |Une liste de dossiers (séparés par deux-points) où chercher les fichiers de bibliothèques |

281 Mot inconnu : INCLUDE => |INCLUDE| /opt/app/src/include | Une liste de dossiers (séparés par deux-points) où chercher les fichiers d'en-têtes |

282 Mot inconnu : CPATH => |CPATH| ..:$HOME/include:/usr/local/include | Une liste de dossiers (séparés par deux-points) où chercher les fichiers d'en-têtes |
282 Typographie : un ou trois points ? => |CPATH| ..:$HOME/include:/usr/local/include | Une liste de dossiers (séparés par deux-points) où chercher les fichiers d'en-têtes |
282 Mot inconnu : include => |CPATH| ..:$HOME/include:/usr/local/include | Une liste de dossiers (séparés par deux-points) où chercher les fichiers d'en-têtes |
282 Il manque un espace insécable. => |CPATH| ..:$HOME/include:/usr/local/include | Une liste de dossiers (séparés par deux-points) où chercher les fichiers d'en-têtes |

294 Mot inconnu : USERNAME => |USERNAME|nom_utilisateur| Le nom de l'utilisateur actuellement connecté. Cette variable est définie par le système. Vous ne devriez certainement pas changer sa valeur manuellement.|
294 Mot inconnu : nom_utilisateur => |USERNAME|nom_utilisateur| Le nom de l'utilisateur actuellement connecté. Cette variable est définie par le système. Vous ne devriez certainement pas changer sa valeur manuellement.|

295 Mot inconnu : LOGNAME => |LOGNAME|nom_utilisateur|Similaire à **USER**, certains programmes utilisent celle-ci de préférence à **USER** .|
295 Mot inconnu : nom_utilisateur => |LOGNAME|nom_utilisateur|Similaire à **USER**, certains programmes utilisent celle-ci de préférence à **USER** .|

297 Mot inconnu : PWD => |PWD|/home/utilisateur/Desktop|Le répertoire de travail courant de l'interpréteur de commande.|

298 Espace(s) surnuméraire(s) à supprimer. => |SHELL|/bin/bash|L'interpréteur de commande préféré de l'utilisateur tel qu'il est défini dans le fichier  « /etc/passwd » .|

299 Mot inconnu : POSIXLY_CORRECT => |POSIXLY_CORRECT|s.o.|L'existence même de cette variable d'environnement, indépendamment de sa valeur, oblige quelques utilitaires à se comporter de manière plus conforme au standard POSIX. Cela peut provoquer le dysfonctionnement de divers outils GNU qui facilitent la vie, mais c'est peut être justement ce qui est recherché pour faire fonctionner correctement de vieux scripts UNIX.|
299 Sigle. Il est recommandé d’ôter les points pour les sigles. (S’il s’agit d’un prénom et d’un nom, mettez un espace.) => |POSIXLY_CORRECT|s.o.|L'existence même de cette variable d'environnement, indépendamment de sa valeur, oblige quelques utilitaires à se comporter de manière plus conforme au standard POSIX. Cela peut provoquer le dysfonctionnement de divers outils GNU qui facilitent la vie, mais c'est peut être justement ce qui est recherché pour faire fonctionner correctement de vieux scripts UNIX.|
299 Mot inconnu : POSIX => |POSIXLY_CORRECT|s.o.|L'existence même de cette variable d'environnement, indépendamment de sa valeur, oblige quelques utilitaires à se comporter de manière plus conforme au standard POSIX. Cela peut provoquer le dysfonctionnement de divers outils GNU qui facilitent la vie, mais c'est peut être justement ce qui est recherché pour faire fonctionner correctement de vieux scripts UNIX.|

300 Mot inconnu : HOSTALIASES => |HOSTALIASES|/etc/host.aliases|Le nom du fichier contenant les alias des noms d'hôtes pour utiliser avec divers logiciels réseau.|

301 Mot inconnu : TZDIR => |TZDIR|/usr/share/zoneinfo|Le chemin du dossier contenant les fichiers d'informations sur les fuseaux horaires (TimeZoneDIRectory). Il est généralement inutile de la définir manuellement car les systèmes cherchent de tels fichiers dans /usr/share/zoneinfo, par défaut.|
301 Mot inconnu : TimeZoneDIRectory => |TZDIR|/usr/share/zoneinfo|Le chemin du dossier contenant les fichiers d'informations sur les fuseaux horaires (TimeZoneDIRectory). Il est généralement inutile de la définir manuellement car les systèmes cherchent de tels fichiers dans /usr/share/zoneinfo, par défaut.|
301 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => |TZDIR|/usr/share/zoneinfo|Le chemin du dossier contenant les fichiers d'informations sur les fuseaux horaires (TimeZoneDIRectory). Il est généralement inutile de la définir manuellement car les systèmes cherchent de tels fichiers dans /usr/share/zoneinfo, par défaut.|

302 Mot inconnu : TZ => |TZ|IST-2 \\ :Japan | Cette variable était utilisée par les anciens systèmes Unix pour spécifier le fuseau horaire du système. Cependant, Ubuntu et la plupart des systèmes récents utilisent pour cela le fichier /etc/localtime. Elle peut néanmoins être utilisée afin qu'une session utilisateur particulière affiche l'heure pour un fuseau horaire différent de celui du système. La valeur de cette variable peut être soit le nom et le décalage d'un fuseau horaire (premier exemple), soit le nom d'un fichier de zone situé dans /usr/share/zoneinfo (second exemple).|
302 Mot inconnu : IST-2 => |TZ|IST-2 \\ :Japan | Cette variable était utilisée par les anciens systèmes Unix pour spécifier le fuseau horaire du système. Cependant, Ubuntu et la plupart des systèmes récents utilisent pour cela le fichier /etc/localtime. Elle peut néanmoins être utilisée afin qu'une session utilisateur particulière affiche l'heure pour un fuseau horaire différent de celui du système. La valeur de cette variable peut être soit le nom et le décalage d'un fuseau horaire (premier exemple), soit le nom d'un fichier de zone situé dans /usr/share/zoneinfo (second exemple).|
302 Mot inconnu : Japan => |TZ|IST-2 \\ :Japan | Cette variable était utilisée par les anciens systèmes Unix pour spécifier le fuseau horaire du système. Cependant, Ubuntu et la plupart des systèmes récents utilisent pour cela le fichier /etc/localtime. Elle peut néanmoins être utilisée afin qu'une session utilisateur particulière affiche l'heure pour un fuseau horaire différent de celui du système. La valeur de cette variable peut être soit le nom et le décalage d'un fuseau horaire (premier exemple), soit le nom d'un fichier de zone situé dans /usr/share/zoneinfo (second exemple).|
302 Accord de genre erroné : « une session » est féminin, « utilisateur » est masculin. => |TZ|IST-2 \\ :Japan | Cette variable était utilisée par les anciens systèmes Unix pour spécifier le fuseau horaire du système. Cependant, Ubuntu et la plupart des systèmes récents utilisent pour cela le fichier /etc/localtime. Elle peut néanmoins être utilisée afin qu'une session utilisateur particulière affiche l'heure pour un fuseau horaire différent de celui du système. La valeur de cette variable peut être soit le nom et le décalage d'un fuseau horaire (premier exemple), soit le nom d'un fichier de zone situé dans /usr/share/zoneinfo (second exemple).|

303 Mot inconnu : TERM => |TERM|xterm|Le nom d'un fichier d'informations sur le terminal situé dans /lib/terminfo, ce fichier indique au programme en mode console comment effectuer certaines tâches telles que l'affichage des couleurs. Il peut être utile de jouer avec cette variable si vous essayez d'utiliser un programme d'émulation de terminal inhabituel, ou si vous essayez de connecter un émulateur de terminal matériel par le port série et que vous n'obtenez pas les résultats escomptés.|
303 Mot inconnu : xterm => |TERM|xterm|Le nom d'un fichier d'informations sur le terminal situé dans /lib/terminfo, ce fichier indique au programme en mode console comment effectuer certaines tâches telles que l'affichage des couleurs. Il peut être utile de jouer avec cette variable si vous essayez d'utiliser un programme d'émulation de terminal inhabituel, ou si vous essayez de connecter un émulateur de terminal matériel par le port série et que vous n'obtenez pas les résultats escomptés.|

304 Mot inconnu : TERMCAP => |TERMCAP| |Cette variable peut être utilisée à la place de "TERM" pour spécifier les informations sur le terminal manuellement, plutôt que d'avoir recours à un fichier.|
304 Guillemets typographiques ouvrants. => |TERMCAP| |Cette variable peut être utilisée à la place de "TERM" pour spécifier les informations sur le terminal manuellement, plutôt que d'avoir recours à un fichier.|
304 Mot inconnu : TERM => |TERMCAP| |Cette variable peut être utilisée à la place de "TERM" pour spécifier les informations sur le terminal manuellement, plutôt que d'avoir recours à un fichier.|
304 Guillemets typographiques fermants. => |TERMCAP| |Cette variable peut être utilisée à la place de "TERM" pour spécifier les informations sur le terminal manuellement, plutôt que d'avoir recours à un fichier.|

305 Mot inconnu : COLUMNS => |COLUMNS|80|Le nombre de colonnes sur la fenêtre de console. Essayez d'ajuster cette variable si les lignes semblent ne pas être coupées correctement sur la console.|

306 Mot inconnu : LINES => |LINES|25|Le nombre de lignes sur la fenêtre de console. Essayez d'ajuster cette variable si vous obtenez des résultats étranges lorsque vous faites défiler le texte.|

307 Mot inconnu : http_proxy => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
307 Mot inconnu : passwd => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
307 Il manque un espace. => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
307 Mot inconnu : HTTP_PROXY => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
307 Mot inconnu : ftp_proxy => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
307 Mot inconnu : FTP_proxy => |http_proxy|http://user:passwd@proxy:port/|La variable pour utiliser un proxy, marche aussi avec HTTP_PROXY, ftp_proxy et FTP_proxy .|
