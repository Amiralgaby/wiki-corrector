3 Mot inconnu : ipython => ====== ipython ======

4 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

5 Mot inconnu : ipython => Pour trouver ipython pour Edgy et supérieur vous pouvez suivre ce lien : [[apt://ipython]]
5 Mot inconnu : Edgy => Pour trouver ipython pour Edgy et supérieur vous pouvez suivre ce lien : [[apt://ipython]]
5 Il manque un espace insécable. => Pour trouver ipython pour Edgy et supérieur vous pouvez suivre ce lien : [[apt://ipython]]
5 Mot inconnu : apt => Pour trouver ipython pour Edgy et supérieur vous pouvez suivre ce lien : [[apt://ipython]]
5 Mot inconnu : ipython => Pour trouver ipython pour Edgy et supérieur vous pouvez suivre ce lien : [[apt://ipython]]

7 Mot inconnu : Ipython => Ipython est un interpréteur python amélioré qui apporte un pack de nouvelles fonctions sympa que je vais vous lister succinctement.

8 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Auto-complétion avec la touche TAB
8 Mot inconnu : TAB =>   * Auto-complétion avec la touche TAB

9 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * L'auto-complétion trouve les variables qui ont été déclarées.

10 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * Elle trouve les mots clefs et les fonctions locales.

11 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * La complétion des méthodes sur les variables tiennent compte du type actuel de cette dernière.

12 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * Par contre la complétion ne tient pas compte du contexte.

13 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Historique persistant (même si on quitte l'interpréteur, on peut retrouver les dernières commandes par l'historique)

14 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * Recherche dans l'historique avec ctrl+P (previous), ctrl+n (next) les entrées commençant par la partie manuellement entrée
14 Mot inconnu : ctrl =>     * Recherche dans l'historique avec ctrl+P (previous), ctrl+n (next) les entrées commençant par la partie manuellement entrée
14 Mot inconnu : previous =>     * Recherche dans l'historique avec ctrl+P (previous), ctrl+n (next) les entrées commençant par la partie manuellement entrée
14 Mot inconnu : ctrl =>     * Recherche dans l'historique avec ctrl+P (previous), ctrl+n (next) les entrées commençant par la partie manuellement entrée
14 Mot inconnu : next =>     * Recherche dans l'historique avec ctrl+P (previous), ctrl+n (next) les entrées commençant par la partie manuellement entrée

15 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * Isole dans l'historique les entrées multilignes
15 Mot inconnu : multilignes =>     * Isole dans l'historique les entrées multilignes

16 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * On peut désormais éditer des lignes antérieures dans le cas d'instructions multilignes
16 Mot inconnu : multilignes =>     * On peut désormais éditer des lignes antérieures dans le cas d'instructions multilignes

17 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * On peut appeler les instructions précédentes qui sont rangées dans une liste _i[n] pour la même commande ou _ii (pour la dernière commande et plus on ajoute de i et plus on remonte)
17 Mot inconnu : _i =>     * On peut appeler les instructions précédentes qui sont rangées dans une liste _i[n] pour la même commande ou _ii (pour la dernière commande et plus on ajoute de i et plus on remonte)
17 Mot inconnu : _ii =>     * On peut appeler les instructions précédentes qui sont rangées dans une liste _i[n] pour la même commande ou _ii (pour la dernière commande et plus on ajoute de i et plus on remonte)

18 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Contient des raccourcis et alias
18 S’il s’agit d’un impératif, la terminaison est “is”, non “it”. =>   * Contient des raccourcis et alias

19 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * entrez "%magic" pour connaître les raccourcis
19 Il manque un espace. =>     * entrez "%magic" pour connaître les raccourcis
19 Mot inconnu : magic =>     * entrez "%magic" pour connaître les raccourcis
19 Guillemets typographiques fermants. =>     * entrez "%magic" pour connaître les raccourcis

20 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * "!" permet d'exécuter directement des commandes systèmes.
20 Guillemets fermants. =>     * "!" permet d'exécuter directement des commandes systèmes.
20 Guillemets typographiques fermants. =>     * "!" permet d'exécuter directement des commandes systèmes.

21 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Pas d’espace après ce signe. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Guillemets typographiques ouvrants. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : callable_ob =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg1 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg2 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg3 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Guillemets typographiques fermants. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Guillemets typographiques ouvrants. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : callable_ob =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Il manque un espace avant la parenthèse. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg1 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg2 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Mot inconnu : arg3 =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )
21 Pas d’espace avant ce signe. =>     * ajoute les parenthèses automatiquement sur les fonctions ( "callable_ob arg1, arg2, arg3"    ==     "callable_ob(arg1, arg2, arg3)"  )

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Ipython est documenté, j'ai trouvé ces informations en entrant telle une commande "?"
22 Mot inconnu : Ipython =>   * Ipython est documenté, j'ai trouvé ces informations en entrant telle une commande "?"
22 Guillemets fermants. =>   * Ipython est documenté, j'ai trouvé ces informations en entrant telle une commande "?"
22 Guillemets typographiques fermants. =>   * Ipython est documenté, j'ai trouvé ces informations en entrant telle une commande "?"

23 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).
23 Mot inconnu : Ipython =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).
23 Guillemets fermants. =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).
23 Guillemets typographiques fermants. =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).
23 Guillemets fermants. =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).
23 Guillemets typographiques fermants. =>   * Ipython permet de facilement trouver les docs des objets en les accolant à un "?" ou "??" pour une aide plus détaillée (avec la doc string).

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Colore et organise les sorties (messages d'erreur ou retour à la ligne entre chaque élément d'une liste si on l'affiche)

26 Typographie : points de suspension. Utilisez le caractère dédié. => et encore bien d'autres fonctions... espérons que le prompt de python 3.0 ait les principaux avantages de ce prompt avec prioritairement la documentation et l'auto-complétion.
