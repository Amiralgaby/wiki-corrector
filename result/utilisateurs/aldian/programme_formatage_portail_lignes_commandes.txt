4 Mot inconnu : portail_lignes_commandes => En relation avec la rédaction en cours de la page [[:portail_lignes_commandes|portail lignes de commande]] qui est en projet, et avec la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] qui vient en appoint pour décharger les contributeurs de la lourde tache du formatage, un programme java a été créé pour générer automatiquement le formatage. Le programme est particulièrement long (400 lignes), mais il a été conçu dans l'optique de la fiabilité et de l'ergonomie. Et plus un programme est ergonomique, plus il est long ;).
4 Il manque un espace. => En relation avec la rédaction en cours de la page [[:portail_lignes_commandes|portail lignes de commande]] qui est en projet, et avec la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] qui vient en appoint pour décharger les contributeurs de la lourde tache du formatage, un programme java a été créé pour générer automatiquement le formatage. Le programme est particulièrement long (400 lignes), mais il a été conçu dans l'optique de la fiabilité et de l'ergonomie. Et plus un programme est ergonomique, plus il est long ;).
4 Mot inconnu : aldian => En relation avec la rédaction en cours de la page [[:portail_lignes_commandes|portail lignes de commande]] qui est en projet, et avec la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] qui vient en appoint pour décharger les contributeurs de la lourde tache du formatage, un programme java a été créé pour générer automatiquement le formatage. Le programme est particulièrement long (400 lignes), mais il a été conçu dans l'optique de la fiabilité et de l'ergonomie. Et plus un programme est ergonomique, plus il est long ;).
4 Mot inconnu : participer_portail_lignes_commandes => En relation avec la rédaction en cours de la page [[:portail_lignes_commandes|portail lignes de commande]] qui est en projet, et avec la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] qui vient en appoint pour décharger les contributeurs de la lourde tache du formatage, un programme java a été créé pour générer automatiquement le formatage. Le programme est particulièrement long (400 lignes), mais il a été conçu dans l'optique de la fiabilité et de l'ergonomie. Et plus un programme est ergonomique, plus il est long ;).
4 Il manque un espace insécable. => En relation avec la rédaction en cours de la page [[:portail_lignes_commandes|portail lignes de commande]] qui est en projet, et avec la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] qui vient en appoint pour décharger les contributeurs de la lourde tache du formatage, un programme java a été créé pour générer automatiquement le formatage. Le programme est particulièrement long (400 lignes), mais il a été conçu dans l'optique de la fiabilité et de l'ergonomie. Et plus un programme est ergonomique, plus il est long ;).

8 Guillemets typographiques ouvrants. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Mot inconnu : CommandArray => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Il manque un espace. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Guillemets typographiques fermants. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Il manque un espace. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Mot inconnu : comment_installer_un_paquet => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Mot inconnu : gcj => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Accord de genre erroné : « java » est féminin. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.
8 Accord de genre erroné : « du » est un déterminant masculin. => Copiez-collez le code source dans un fichier texte que vous nommerez "CommandArray.java". Vous avez besoin d'avoir installé le paquet [[:tutoriel:comment_installer_un_paquet|gcj]] pour pouvoir compiler du java en ligne de commande.

10 Il manque un espace insécable. => Compilez le programme avec la commande suivante:

11 Mot inconnu : javac => <code>javac CommandArray.java</code>
11 Mot inconnu : CommandArray => <code>javac CommandArray.java</code>
11 Il manque un espace. => <code>javac CommandArray.java</code>

13 Il manque un espace. => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Mot inconnu : aldian => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Mot inconnu : participer_portail_lignes_commandes => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Mot inconnu : txt => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Il manque un espace insécable. => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Mot inconnu : CommandArray => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt
13 Mot inconnu : txt => Ensuite en admettant que vous ayez copié collé tous les modèles renseignés de la page [[:utilisateurs:aldian:participer_portail_lignes_commandes|participer au portail sur les lignes de commandes]] dans un fichier nommé commandes.txt, exécutez la commande: <code>java CommandArray commandes.txt</code> Le résultat s'affiche à l'écran et est stocké dans le fichier commandes.txt_format.txt

21 Mot inconnu : CommandArray => /*   CommandArray: This program create the formating for the page 
21 Il manque un espace insécable. => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : This => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : program => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : create => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : the => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : formating => /*   CommandArray: This program create the formating for the page 
21 Mot inconnu : the => /*   CommandArray: This program create the formating for the page 
21 Espace(s) en fin de ligne à supprimer. => /*   CommandArray: This program create the formating for the page 

22 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   portail_lignes_de_commande of site http://doc.ubuntu-fr.org/
22 Mot inconnu : portail_lignes_de_commande =>  *   portail_lignes_de_commande of site http://doc.ubuntu-fr.org/
22 Mot inconnu : of =>  *   portail_lignes_de_commande of site http://doc.ubuntu-fr.org/

23 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *  
23 Espace(s) en fin de ligne à supprimer. =>  *  

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   Copyright (C) 2009  Aldian (Administrator of Ubuntu French Documentation)
24 Espace(s) surnuméraire(s) à supprimer. =>  *   Copyright (C) 2009  Aldian (Administrator of Ubuntu French Documentation)
24 Mot inconnu : Aldian =>  *   Copyright (C) 2009  Aldian (Administrator of Ubuntu French Documentation)
24 Mot inconnu : Administrator =>  *   Copyright (C) 2009  Aldian (Administrator of Ubuntu French Documentation)
24 Mot inconnu : of =>  *   Copyright (C) 2009  Aldian (Administrator of Ubuntu French Documentation)

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *

26 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : This =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : program =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : is =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : free =>  *   This program is free software: you can redistribute it and/or modify
26 Il manque un espace insécable. =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : you =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : can =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : redistribute =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : it =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : and =>  *   This program is free software: you can redistribute it and/or modify
26 Mot inconnu : modify =>  *   This program is free software: you can redistribute it and/or modify

27 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : it =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : under =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : the =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : terms =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : of =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : the =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : General =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : License =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : published =>  *   it under the terms of the GNU General Public License as published by
27 Mot inconnu : by =>  *   it under the terms of the GNU General Public License as published by

28 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : the =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : Foundation =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : either =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : of =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : the =>  *   the Free Software Foundation, either version 3 of the License, or
28 Mot inconnu : License =>  *   the Free Software Foundation, either version 3 of the License, or

29 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   (at your option) any later version.
29 Mot inconnu : at =>  *   (at your option) any later version.
29 Mot inconnu : your =>  *   (at your option) any later version.
29 Mot inconnu : any =>  *   (at your option) any later version.
29 Mot inconnu : later =>  *   (at your option) any later version.

30 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *

31 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : This =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : program =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : is =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : distributed =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : the =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : hope =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : that =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : it =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : will =>  *   This program is distributed in the hope that it will be useful,
31 Mot inconnu : useful =>  *   This program is distributed in the hope that it will be useful,

32 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : WITHOUT =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : ANY =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : WARRANTY =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Il manque un espace insécable. =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : without =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : even =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : the =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : implied =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : warranty =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
32 Mot inconnu : of =>  *   but WITHOUT ANY WARRANTY; without even the implied warranty of

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Mot inconnu : MERCHANTABILITY =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Mot inconnu : PARTICULAR =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Mot inconnu : PURPOSE =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Espace(s) surnuméraire(s) à supprimer. =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Mot inconnu : See =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
33 Mot inconnu : the =>  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

34 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   GNU General Public License for more details.
34 Mot inconnu : General =>  *   GNU General Public License for more details.
34 Mot inconnu : License =>  *   GNU General Public License for more details.
34 Mot inconnu : details =>  *   GNU General Public License for more details.

35 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *

36 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : You =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : should =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : received =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : copy =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : of =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : the =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : General =>  *   You should have received a copy of the GNU General Public License
36 Mot inconnu : License =>  *   You should have received a copy of the GNU General Public License

37 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : along =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : with =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : this =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : program =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Espace(s) surnuméraire(s) à supprimer. =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : not =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
37 Mot inconnu : see =>  *   along with this program.  If not, see <http://www.gnu.org/licenses/>.

38 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * 
38 Espace(s) en fin de ligne à supprimer. =>  * 

39 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  */

41 Il manque un espace insécable. => import java.io.BufferedReader;

42 Il manque un espace insécable. => import java.io.BufferedWriter;

43 Il manque un espace insécable. => import java.io.FileNotFoundException;

44 Il manque un espace insécable. => import java.io.FileReader;

45 Il manque un espace insécable. => import java.io.FileWriter;

46 Il manque un espace insécable. => import java.io.IOException;

47 Il manque un espace insécable. => import java.net.MalformedURLException;

48 Il manque un espace insécable. => import java.net.URL;

49 Il manque un espace insécable. => import java.util.LinkedList;

53 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * @author Aldian (Administrator of Ubuntu French Documentation)
53 Mot inconnu : Aldian =>  * @author Aldian (Administrator of Ubuntu French Documentation)
53 Mot inconnu : Administrator =>  * @author Aldian (Administrator of Ubuntu French Documentation)
53 Mot inconnu : of =>  * @author Aldian (Administrator of Ubuntu French Documentation)

54 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * 
54 Espace(s) en fin de ligne à supprimer. =>  * 

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * génère le formatage correspondant à l'ensemble des commandes fournies dans le  
55 Espace(s) en fin de ligne à supprimer. =>  * génère le formatage correspondant à l'ensemble des commandes fournies dans le  

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * fichier passé en paramètre: 
56 Il manque un espace insécable. =>  * fichier passé en paramètre: 
56 Espace(s) en fin de ligne à supprimer. =>  * fichier passé en paramètre: 

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *  
57 Espace(s) en fin de ligne à supprimer. =>  *  

58 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * paramètre obligatoire: nom du fichier 
58 Il manque un espace insécable. =>  * paramètre obligatoire: nom du fichier 
58 Espace(s) en fin de ligne à supprimer. =>  * paramètre obligatoire: nom du fichier 

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * le résultat est stocké dans le fichier NOM_FICHIER_format.txt 
59 Mot inconnu : NOM_FICHIER_format =>  * le résultat est stocké dans le fichier NOM_FICHIER_format.txt 
59 Mot inconnu : txt =>  * le résultat est stocké dans le fichier NOM_FICHIER_format.txt 
59 Espace(s) en fin de ligne à supprimer. =>  * le résultat est stocké dans le fichier NOM_FICHIER_format.txt 

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * le fichier source doit contenir au moins une fois le motif suivant: 
60 Il manque un espace insécable. =>  * le fichier source doit contenir au moins une fois le motif suivant: 
60 Espace(s) en fin de ligne à supprimer. =>  * le fichier source doit contenir au moins une fois le motif suivant: 

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *  
61 Espace(s) en fin de ligne à supprimer. =>  *  

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * NOM: 
62 Il manque un espace insécable. =>  * NOM: 
62 Espace(s) en fin de ligne à supprimer. =>  * NOM: 

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * DESCRIPTION: 
63 Il manque un espace insécable. =>  * DESCRIPTION: 
63 Espace(s) en fin de ligne à supprimer. =>  * DESCRIPTION: 

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * LIEN_SYNOPSIS: 
64 Mot inconnu : LIEN_SYNOPSIS =>  * LIEN_SYNOPSIS: 
64 Il manque un espace insécable. =>  * LIEN_SYNOPSIS: 
64 Espace(s) en fin de ligne à supprimer. =>  * LIEN_SYNOPSIS: 

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * LIEN: 
65 Il manque un espace insécable. =>  * LIEN: 
65 Espace(s) en fin de ligne à supprimer. =>  * LIEN: 

66 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * LIEN_MANPAGE: 
66 Mot inconnu : LIEN_MANPAGE =>  * LIEN_MANPAGE: 
66 Il manque un espace insécable. =>  * LIEN_MANPAGE: 
66 Espace(s) en fin de ligne à supprimer. =>  * LIEN_MANPAGE: 

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * LIEN_FORUM: 
67 Mot inconnu : LIEN_FORUM =>  * LIEN_FORUM: 
67 Il manque un espace insécable. =>  * LIEN_FORUM: 
67 Espace(s) en fin de ligne à supprimer. =>  * LIEN_FORUM: 

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *  
68 Espace(s) en fin de ligne à supprimer. =>  *  

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins 
69 Espace(s) en fin de ligne à supprimer. =>  * Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins 

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE, 
70 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>  * une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE, 
70 Mot inconnu : LIEN_MANPAGE =>  * une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE, 
70 Espace(s) en fin de ligne à supprimer. =>  * une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE, 

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  * vous pouvez indifféremment mettre la ligne vide ou pas. 
71 Espace(s) en fin de ligne à supprimer. =>  * vous pouvez indifféremment mettre la ligne vide ou pas. 

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  *

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  */

74 Mot inconnu : class => public class CommandArray {
74 Mot inconnu : CommandArray => public class CommandArray {

75 Mot inconnu : protected => 	protected static boolean DEBUG = true;
75 Mot inconnu : static => 	protected static boolean DEBUG = true;
75 Mot inconnu : boolean => 	protected static boolean DEBUG = true;
75 Mot inconnu : DEBUG => 	protected static boolean DEBUG = true;
75 Mot inconnu : true => 	protected static boolean DEBUG = true;
75 Il manque un espace insécable. => 	protected static boolean DEBUG = true;

76 Mot inconnu : null => 	String nom = null;
76 Il manque un espace insécable. => 	String nom = null;

77 Mot inconnu : null => 	String description = null;
77 Il manque un espace insécable. => 	String description = null;

78 Mot inconnu : lien_synopsys => 	String lien_synopsys = null;
78 Mot inconnu : null => 	String lien_synopsys = null;
78 Il manque un espace insécable. => 	String lien_synopsys = null;

79 Mot inconnu : LinkedList => 	LinkedList<String> liens = new LinkedList<String>();
79 Mot inconnu : LinkedList => 	LinkedList<String> liens = new LinkedList<String>();

80 Mot inconnu : lien_manpage => 	String lien_manpage = null;
80 Mot inconnu : null => 	String lien_manpage = null;
80 Il manque un espace insécable. => 	String lien_manpage = null;

81 Mot inconnu : lien_forum => 	String lien_forum = null;
81 Mot inconnu : null => 	String lien_forum = null;
81 Il manque un espace insécable. => 	String lien_forum = null;

83 Mot inconnu : CommandArray => 	public CommandArray(String nom, String description){
83 Il manque un espace avant la parenthèse. => 	public CommandArray(String nom, String description){

84 Mot inconnu : this => 		this(nom);
84 Il manque un espace avant la parenthèse. => 		this(nom);

85 Mot inconnu : this => 		this.description= description;
85 Il manque un espace. => 		this.description= description;
85 Il manque un espace insécable. => 		this.description= description;

87 Mot inconnu : private => 	private CommandArray(String nom){
87 Mot inconnu : CommandArray => 	private CommandArray(String nom){
87 Il manque un espace avant la parenthèse. => 	private CommandArray(String nom){

88 Mot inconnu : this => 		this.nom=nom;
88 Il manque un espace. => 		this.nom=nom;
88 Il manque un espace insécable. => 		this.nom=nom;

92 Incohérence : espace et tabulation. => 	 * Cette méthode ouvre les fichiers et s'assure de l'absence d'erreurs à l'ouverture.

93 Incohérence : espace et tabulation. => 	 * Le travail réel de gestion du formatage est sous traité à la fonction performFormat
93 Mot inconnu : performFormat => 	 * Le travail réel de gestion du formatage est sous traité à la fonction performFormat

94 Incohérence : espace et tabulation. => 	 * 
94 Espace(s) en fin de ligne à supprimer. => 	 * 

95 Incohérence : espace et tabulation. => 	 * @param args le nom du fichier à traiter
95 Mot inconnu : args => 	 * @param args le nom du fichier à traiter

96 Incohérence : espace et tabulation. => 	 */

97 Mot inconnu : static => 	public static void main(String[] args) {
97 Mot inconnu : void => 	public static void main(String[] args) {
97 Il manque un espace avant la parenthèse. => 	public static void main(String[] args) {
97 Mot inconnu : args => 	public static void main(String[] args) {

98 Mot inconnu : printLicense => 		printLicense();

99 Mot inconnu : BufferedReader => 		BufferedReader in;
99 Il manque un espace insécable. => 		BufferedReader in;

100 Mot inconnu : BufferedWriter => 		BufferedWriter out;
100 Il manque un espace insécable. => 		BufferedWriter out;

102 Mot inconnu : check => 		// check nombre arguments

103 Il manque un espace avant la parenthèse. => 		if(args.length!=1){
103 Mot inconnu : args => 		if(args.length!=1){
103 Mot inconnu : length => 		if(args.length!=1){
103 Il manque un espace insécable. => 		if(args.length!=1){

104 Mot inconnu : printUsage => 			printUsage();

105 Mot inconnu : return => 			return;
105 Il manque un espace insécable. => 			return;

108 Mot inconnu : check => 		// check help
108 Mot inconnu : help => 		// check help

109 Il manque un espace avant la parenthèse. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : args => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : equals => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Il manque un espace avant la parenthèse. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Guillemets typographiques fermants. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : args => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : equals => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Il manque un espace avant la parenthèse. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : help => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Guillemets typographiques fermants. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : args => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : equals => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Il manque un espace avant la parenthèse. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Guillemets typographiques fermants. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : args => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Mot inconnu : equals => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Il manque un espace avant la parenthèse. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){
109 Guillemets typographiques fermants. => 		if(args[0].equals("-h") || args[0].equals("-help") || args[0].equals("-u") || args[0].equals("-usage")){

110 Mot inconnu : printUsage => 			printUsage();

111 Mot inconnu : return => 			return;
111 Il manque un espace insécable. => 			return;

114 Mot inconnu : check => 		// check ouverture fichier input

115 Mot inconnu : try => 		try {

116 Mot inconnu : BufferedReader => 			in = new BufferedReader(new FileReader(args[0]));
116 Il manque un espace avant la parenthèse. => 			in = new BufferedReader(new FileReader(args[0]));
116 Mot inconnu : FileReader => 			in = new BufferedReader(new FileReader(args[0]));
116 Il manque un espace avant la parenthèse. => 			in = new BufferedReader(new FileReader(args[0]));
116 Mot inconnu : args => 			in = new BufferedReader(new FileReader(args[0]));

117 Mot inconnu : FileNotFoundException => 		} catch (FileNotFoundException e) {

118 Mot inconnu : println => 			println("erreur: nom de fichier incorrect: "+args[0]);
118 Il manque un espace avant la parenthèse. => 			println("erreur: nom de fichier incorrect: "+args[0]);
118 Guillemets typographiques ouvrants. => 			println("erreur: nom de fichier incorrect: "+args[0]);
118 Il manque un espace insécable. => 			println("erreur: nom de fichier incorrect: "+args[0]);
118 Il manque un espace insécable. => 			println("erreur: nom de fichier incorrect: "+args[0]);
118 Mot inconnu : args => 			println("erreur: nom de fichier incorrect: "+args[0]);

119 Il manque un espace avant la parenthèse. => 			if(DEBUG)
119 Mot inconnu : DEBUG => 			if(DEBUG)

120 Mot inconnu : printStackTrace => 				e.printStackTrace();

121 Mot inconnu : return => 			return;
121 Il manque un espace insécable. => 			return;

124 Mot inconnu : check => 		// check ouverture fichier output

125 Mot inconnu : outputFileName => 		String outputFileName = args[0]+"_format.txt";
125 Mot inconnu : args => 		String outputFileName = args[0]+"_format.txt";
125 Guillemets typographiques ouvrants. => 		String outputFileName = args[0]+"_format.txt";
125 Mot inconnu : _format => 		String outputFileName = args[0]+"_format.txt";
125 Mot inconnu : txt => 		String outputFileName = args[0]+"_format.txt";
125 Guillemets typographiques fermants. => 		String outputFileName = args[0]+"_format.txt";

126 Mot inconnu : try => 		try {

127 Mot inconnu : BufferedWriter => 			out = new BufferedWriter(new FileWriter(outputFileName));
127 Il manque un espace avant la parenthèse. => 			out = new BufferedWriter(new FileWriter(outputFileName));
127 Mot inconnu : FileWriter => 			out = new BufferedWriter(new FileWriter(outputFileName));
127 Il manque un espace avant la parenthèse. => 			out = new BufferedWriter(new FileWriter(outputFileName));
127 Mot inconnu : outputFileName => 			out = new BufferedWriter(new FileWriter(outputFileName));

128 Mot inconnu : IOException => 		} catch (IOException e) {

129 Mot inconnu : println => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);
129 Il manque un espace avant la parenthèse. => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);
129 Guillemets typographiques ouvrants. => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);
129 Il manque un espace insécable. => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);
129 Il manque un espace insécable. => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);
129 Mot inconnu : outputFileName => 			println("erreur: impossible de créer le fichier d'output: "+outputFileName);

130 Il manque un espace avant la parenthèse. => 			if(DEBUG)
130 Mot inconnu : DEBUG => 			if(DEBUG)

131 Mot inconnu : printStackTrace => 				e.printStackTrace();

132 Mot inconnu : return => 			return;
132 Il manque un espace insécable. => 			return;

136 Mot inconnu : println => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Il manque un espace avant la parenthèse. => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Guillemets typographiques ouvrants. => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Mot inconnu : formating => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Il manque un espace insécable. => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Mot inconnu : args => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Mot inconnu : to => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Mot inconnu : outputFileName => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Typographie : points de suspension. Utilisez le caractère dédié. => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");
136 Guillemets typographiques fermants. => 		println("formating content file: "+args[0]+" to file "+outputFileName+"...");

137 Mot inconnu : try => 		try {

138 Mot inconnu : performFormat => 			performFormat(in, out);
138 Il manque un espace avant la parenthèse. => 			performFormat(in, out);

139 Mot inconnu : e1 => 		} catch (Exception e1) {

140 Mot inconnu : println => 			println("Une erreur est survenue durant l'exécution");
140 Il manque un espace avant la parenthèse. => 			println("Une erreur est survenue durant l'exécution");
140 Guillemets typographiques ouvrants. => 			println("Une erreur est survenue durant l'exécution");
140 Guillemets typographiques fermants. => 			println("Une erreur est survenue durant l'exécution");

141 Il manque un espace avant la parenthèse. => 			if(DEBUG)
141 Mot inconnu : DEBUG => 			if(DEBUG)

142 Mot inconnu : e1 => 				e1.printStackTrace();
142 Mot inconnu : printStackTrace => 				e1.printStackTrace();

144 Mot inconnu : finally => 		finally {

146 Mot inconnu : try => 			try {

147 Il manque un espace. => 				in.close();

148 Il manque un espace. => 				out.close();

149 Mot inconnu : IOException => 			} catch (IOException e) {

150 Mot inconnu : println => 				println("Warning: une erreur est survenue pendant la fermeture des fichiers");
150 Il manque un espace avant la parenthèse. => 				println("Warning: une erreur est survenue pendant la fermeture des fichiers");
150 Guillemets typographiques ouvrants. => 				println("Warning: une erreur est survenue pendant la fermeture des fichiers");
150 Il manque un espace insécable. => 				println("Warning: une erreur est survenue pendant la fermeture des fichiers");
150 Guillemets typographiques fermants. => 				println("Warning: une erreur est survenue pendant la fermeture des fichiers");

151 Il manque un espace avant la parenthèse. => 				if(DEBUG)
151 Mot inconnu : DEBUG => 				if(DEBUG)

152 Mot inconnu : printStackTrace => 					e.printStackTrace();

155 Mot inconnu : println => 		println("Le programme s'est terminé sans erreurs");
155 Il manque un espace avant la parenthèse. => 		println("Le programme s'est terminé sans erreurs");
155 Guillemets typographiques ouvrants. => 		println("Le programme s'est terminé sans erreurs");
155 Guillemets typographiques fermants. => 		println("Le programme s'est terminé sans erreurs");

159 Incohérence : espace et tabulation. => 	 * Lit le fichier source, génère la liste des commandes, effectue le formatage, écrit le fichier de destination

160 Incohérence : espace et tabulation. => 	 * 
160 Espace(s) en fin de ligne à supprimer. => 	 * 

161 Incohérence : espace et tabulation. => 	 * @param in le buffer vers le fichier d'entrée
161 Mot inconnu : buffer => 	 * @param in le buffer vers le fichier d'entrée

162 Incohérence : espace et tabulation. => 	 * @param out le buffer vers le fichier de sortie
162 Mot inconnu : buffer => 	 * @param out le buffer vers le fichier de sortie

163 Incohérence : espace et tabulation. => 	 * @throws IOException
163 Mot inconnu : IOException => 	 * @throws IOException

164 Incohérence : espace et tabulation. => 	 * @throws ParseException
164 Mot inconnu : ParseException => 	 * @throws ParseException

165 Incohérence : espace et tabulation. => 	 */

166 Mot inconnu : static => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : void => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : performFormat => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Il manque un espace avant la parenthèse. => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : BufferedReader => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Il manque un espace. => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : BufferedWriter => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : throws => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : IOException => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{
166 Mot inconnu : ParseException => 	public static void performFormat(BufferedReader in,BufferedWriter out) throws IOException, ParseException{

167 Mot inconnu : LinkedList => 		LinkedList<CommandArray> commandListe = readFile(in);
167 Mot inconnu : commandListe => 		LinkedList<CommandArray> commandListe = readFile(in);
167 Mot inconnu : readFile => 		LinkedList<CommandArray> commandListe = readFile(in);

171 Il manque un espace avant la parenthèse. => 		if(!checkCommandListValidity(commandListe))
171 Il manque un espace. => 		if(!checkCommandListValidity(commandListe))
171 Mot inconnu : checkCommandListValidity => 		if(!checkCommandListValidity(commandListe))
171 Il manque un espace avant la parenthèse. => 		if(!checkCommandListValidity(commandListe))
171 Mot inconnu : commandListe => 		if(!checkCommandListValidity(commandListe))

172 Mot inconnu : return => 			return;
172 Il manque un espace insécable. => 			return;

175 Incohérence : espace et tabulation. => 		 * A partir de maintenant on dispose d'une liste d'objets ayant au moins un nom et une description probablement valides.
175 Confusion probable : “a” est la conjugaison du verbe “avoir”. Utilisez la préposition “à”. => 		 * A partir de maintenant on dispose d'une liste d'objets ayant au moins un nom et une description probablement valides.

176 Incohérence : espace et tabulation. => 		 * Les urls sont forcément correctement constituées.
176 Mot inconnu : urls => 		 * Les urls sont forcément correctement constituées.

177 Incohérence : espace et tabulation. => 		 */

178 Mot inconnu : formatedLine => 		String formatedLine = null;
178 Mot inconnu : null => 		String formatedLine = null;
178 Il manque un espace insécable. => 		String formatedLine = null;

179 Il manque un espace avant la parenthèse. => 		for(int i=0;i<commandListe.size();i++){
179 Mot inconnu : int => 		for(int i=0;i<commandListe.size();i++){
179 Il manque un espace insécable. => 		for(int i=0;i<commandListe.size();i++){
179 Il manque un espace. => 		for(int i=0;i<commandListe.size();i++){
179 Mot inconnu : commandListe => 		for(int i=0;i<commandListe.size();i++){
179 Mot inconnu : size => 		for(int i=0;i<commandListe.size();i++){
179 Il manque un espace. => 		for(int i=0;i<commandListe.size();i++){

180 Mot inconnu : formatedLine => 			formatedLine = makeFormattedLine(commandListe.get(i));
180 Mot inconnu : makeFormattedLine => 			formatedLine = makeFormattedLine(commandListe.get(i));
180 Il manque un espace avant la parenthèse. => 			formatedLine = makeFormattedLine(commandListe.get(i));
180 Mot inconnu : commandListe => 			formatedLine = makeFormattedLine(commandListe.get(i));
180 Mot inconnu : get => 			formatedLine = makeFormattedLine(commandListe.get(i));

181 Mot inconnu : write => 			out.write(formatedLine+"\n");
181 Il manque un espace avant la parenthèse. => 			out.write(formatedLine+"\n");
181 Mot inconnu : formatedLine => 			out.write(formatedLine+"\n");
181 Guillemets typographiques fermants. => 			out.write(formatedLine+"\n");

182 Mot inconnu : println => 			println(formatedLine);
182 Il manque un espace avant la parenthèse. => 			println(formatedLine);
182 Mot inconnu : formatedLine => 			println(formatedLine);

189 Incohérence : espace et tabulation. => 	 *           FONCTIONS DE FORMATAGE             *
189 Espace(s) surnuméraire(s) à supprimer. => 	 *           FONCTIONS DE FORMATAGE             *

190 Incohérence : espace et tabulation. => 	 ************************************************/

193 Incohérence : espace et tabulation. => 	 * Cette fonction crée le formatage pour une commande donnée

194 Incohérence : espace et tabulation. => 	 * 
194 Espace(s) en fin de ligne à supprimer. => 	 * 

195 Incohérence : espace et tabulation. => 	 * @param commandArray :  La commande à formatter
195 Mot inconnu : commandArray => 	 * @param commandArray :  La commande à formatter
195 Il manque un espace insécable. => 	 * @param commandArray :  La commande à formatter
195 Espace(s) surnuméraire(s) à supprimer. => 	 * @param commandArray :  La commande à formatter
195 Mot inconnu : formatter => 	 * @param commandArray :  La commande à formatter

196 Incohérence : espace et tabulation. => 	 * @return ligne contenant le code formatée pour la commande donnée.
196 Accord de genre erroné : « le code » est masculin, « formatée » est féminin. => 	 * @return ligne contenant le code formatée pour la commande donnée.

197 Incohérence : espace et tabulation. => 	 */

198 Mot inconnu : static => 	public static String makeFormattedLine(CommandArray commandArray){
198 Mot inconnu : makeFormattedLine => 	public static String makeFormattedLine(CommandArray commandArray){
198 Il manque un espace avant la parenthèse. => 	public static String makeFormattedLine(CommandArray commandArray){
198 Mot inconnu : CommandArray => 	public static String makeFormattedLine(CommandArray commandArray){
198 Mot inconnu : commandArray => 	public static String makeFormattedLine(CommandArray commandArray){

199 Mot inconnu : StringBuilder => 		StringBuilder result = new StringBuilder();
199 Mot inconnu : result => 		StringBuilder result = new StringBuilder();
199 Mot inconnu : StringBuilder => 		StringBuilder result = new StringBuilder();

200 Mot inconnu : int => 		int i;
200 Il manque un espace insécable. => 		int i;

201 Mot inconnu : link => 		//String link = null;
201 Mot inconnu : null => 		//String link = null;
201 Il manque un espace insécable. => 		//String link = null;

202 Mot inconnu : result => 		result.append("| ");
202 Il manque un espace. => 		result.append("| ");
202 Il manque un espace avant la parenthèse. => 		result.append("| ");

203 Mot inconnu : result => 		result.append(commandArray.description);
203 Il manque un espace. => 		result.append(commandArray.description);
203 Il manque un espace avant la parenthèse. => 		result.append(commandArray.description);
203 Mot inconnu : commandArray => 		result.append(commandArray.description);
203 Il manque un espace. => 		result.append(commandArray.description);

204 Mot inconnu : result => 		result.append(" | ");
204 Il manque un espace. => 		result.append(" | ");
204 Il manque un espace avant la parenthèse. => 		result.append(" | ");

205 Mot inconnu : result => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Il manque un espace. => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Il manque un espace avant la parenthèse. => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Mot inconnu : makeDocLinkString => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Il manque un espace avant la parenthèse. => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Mot inconnu : commandArray => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Mot inconnu : lien_synopsys => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Il manque un espace. => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));
205 Mot inconnu : commandArray => 		result.append(makeDocLinkString(commandArray.lien_synopsys,commandArray.nom));

206 Mot inconnu : result => 		result.append(" | ");
206 Il manque un espace. => 		result.append(" | ");
206 Il manque un espace avant la parenthèse. => 		result.append(" | ");

207 Il manque un espace avant la parenthèse. => 		if(commandArray.liens!=null){
207 Mot inconnu : commandArray => 		if(commandArray.liens!=null){
207 Il manque un espace. => 		if(commandArray.liens!=null){
207 Il manque un espace insécable. => 		if(commandArray.liens!=null){
207 Mot inconnu : null => 		if(commandArray.liens!=null){

208 Il manque un espace avant la parenthèse. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 Il manque un espace insécable. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 Il manque un espace. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 Il manque un espace. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 Il manque un espace insécable. => 			for(i=0;i<commandArray.liens.size()-1;i++)
208 Il manque un espace. => 			for(i=0;i<commandArray.liens.size()-1;i++)

209 Mot inconnu : result => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Il manque un espace. => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Il manque un espace avant la parenthèse. => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Mot inconnu : makeUndiferrentiateLinkString => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Il manque un espace avant la parenthèse. => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Il manque un espace. => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");
209 Mot inconnu : null => 				result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null)+", ");

210 Mot inconnu : result => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Il manque un espace. => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Il manque un espace avant la parenthèse. => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Mot inconnu : makeUndiferrentiateLinkString => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Il manque un espace avant la parenthèse. => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Il manque un espace. => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));
210 Mot inconnu : null => 			result.append(makeUndiferrentiateLinkString(commandArray.liens.get(i),null));

212 Mot inconnu : result => 		result.append(" | ");
212 Il manque un espace. => 		result.append(" | ");
212 Il manque un espace avant la parenthèse. => 		result.append(" | ");

213 Mot inconnu : result => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Il manque un espace. => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Il manque un espace avant la parenthèse. => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Mot inconnu : makeExternLink => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Il manque un espace avant la parenthèse. => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Mot inconnu : commandArray => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Mot inconnu : lien_manpage => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Guillemets typographiques ouvrants. => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Mot inconnu : manpage => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));
213 Guillemets typographiques fermants. => 		result.append(makeExternLink(commandArray.lien_manpage,"manpage"));

214 Mot inconnu : result => 		result.append(" | ");
214 Il manque un espace. => 		result.append(" | ");
214 Il manque un espace avant la parenthèse. => 		result.append(" | ");

215 Mot inconnu : result => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Il manque un espace. => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Il manque un espace avant la parenthèse. => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Mot inconnu : makeExternLink => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Il manque un espace avant la parenthèse. => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Mot inconnu : commandArray => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Mot inconnu : lien_forum => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Guillemets typographiques ouvrants. => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));
215 Guillemets typographiques fermants. => 		result.append(makeExternLink(commandArray.lien_forum,"forum"));

216 Mot inconnu : result => 		result.append(" |");
216 Il manque un espace. => 		result.append(" |");
216 Il manque un espace avant la parenthèse. => 		result.append(" |");

218 Mot inconnu : return => 		return result.toString();
218 Mot inconnu : result => 		return result.toString();
218 Mot inconnu : toString => 		return result.toString();

222 Incohérence : espace et tabulation. => 	 * Appelle la méthode corespondante selon que le lien est interne ou externe à la documentation.
222 Mot inconnu : corespondante => 	 * Appelle la méthode corespondante selon que le lien est interne ou externe à la documentation.

223 Incohérence : espace et tabulation. => 	 * 
223 Espace(s) en fin de ligne à supprimer. => 	 * 

224 Incohérence : espace et tabulation. => 	 * @param link lien à formatter
224 Mot inconnu : link => 	 * @param link lien à formatter
224 Mot inconnu : formatter => 	 * @param link lien à formatter

225 Incohérence : espace et tabulation. => 	 * @param nom du lien à formatter
225 Mot inconnu : formatter => 	 * @param nom du lien à formatter

226 Incohérence : espace et tabulation. => 	 * @return code correspondant au lien

227 Incohérence : espace et tabulation. => 	 */

228 Mot inconnu : static => 	public static String makeUndiferrentiateLinkString(String link, String nom){
228 Mot inconnu : makeUndiferrentiateLinkString => 	public static String makeUndiferrentiateLinkString(String link, String nom){
228 Il manque un espace avant la parenthèse. => 	public static String makeUndiferrentiateLinkString(String link, String nom){
228 Mot inconnu : link => 	public static String makeUndiferrentiateLinkString(String link, String nom){

229 Il manque un espace avant la parenthèse. => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)
229 Mot inconnu : link => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)
229 Mot inconnu : indexOf => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)
229 Il manque un espace avant la parenthèse. => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)
229 Guillemets typographiques ouvrants. => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)
229 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 		if(link.indexOf("http://doc.ubuntu-fr.org")==-1)

230 Mot inconnu : return => 			return makeExternLink(link,nom);
230 Mot inconnu : makeExternLink => 			return makeExternLink(link,nom);
230 Il manque un espace avant la parenthèse. => 			return makeExternLink(link,nom);
230 Mot inconnu : link => 			return makeExternLink(link,nom);
230 Il manque un espace. => 			return makeExternLink(link,nom);

231 Mot inconnu : else => 		else

232 Mot inconnu : return => 			return makeDocLinkString(link,nom);
232 Mot inconnu : makeDocLinkString => 			return makeDocLinkString(link,nom);
232 Il manque un espace avant la parenthèse. => 			return makeDocLinkString(link,nom);
232 Mot inconnu : link => 			return makeDocLinkString(link,nom);
232 Il manque un espace. => 			return makeDocLinkString(link,nom);

237 Incohérence : espace et tabulation. => 	 * Crée le formattage pour un lien interne à la documentation. 
237 Mot inconnu : formattage => 	 * Crée le formattage pour un lien interne à la documentation. 
237 Espace(s) en fin de ligne à supprimer. => 	 * Crée le formattage pour un lien interne à la documentation. 

238 Incohérence : espace et tabulation. => 	 * Si le nom n'est pas spécifié, un nom par défaut est généré.

239 Incohérence : espace et tabulation. => 	 * 
239 Espace(s) en fin de ligne à supprimer. => 	 * 

240 Incohérence : espace et tabulation. => 	 * @param link lien à formatter
240 Mot inconnu : link => 	 * @param link lien à formatter
240 Mot inconnu : formatter => 	 * @param link lien à formatter

241 Incohérence : espace et tabulation. => 	 * @param nom du lien à formatter
241 Mot inconnu : formatter => 	 * @param nom du lien à formatter

242 Incohérence : espace et tabulation. => 	 * @return code correspondant au lien

243 Incohérence : espace et tabulation. => 	 */

244 Mot inconnu : static => 	public static String makeDocLinkString(String link, String nom){
244 Mot inconnu : makeDocLinkString => 	public static String makeDocLinkString(String link, String nom){
244 Il manque un espace avant la parenthèse. => 	public static String makeDocLinkString(String link, String nom){
244 Mot inconnu : link => 	public static String makeDocLinkString(String link, String nom){

245 Mot inconnu : result => 		String result = null;
245 Mot inconnu : null => 		String result = null;
245 Il manque un espace insécable. => 		String result = null;

246 Mot inconnu : url => 		URL url = null;
246 Mot inconnu : null => 		URL url = null;
246 Il manque un espace insécable. => 		URL url = null;

247 Mot inconnu : name => 		String name = null;
247 Mot inconnu : null => 		String name = null;
247 Il manque un espace insécable. => 		String name = null;

250 Il manque un espace avant la parenthèse. => 		if(link==null)
250 Mot inconnu : link => 		if(link==null)
250 Mot inconnu : null => 		if(link==null)

251 Mot inconnu : return => 			return "";

254 Mot inconnu : try => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Mot inconnu : url => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Il manque un espace avant la parenthèse. => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Mot inconnu : link => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Mot inconnu : MalformedURLException => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Mot inconnu : return => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Mot inconnu : null => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}
254 Il manque un espace insécable. => 		try {url = new URL(link);} catch (MalformedURLException e) {return null;}

257 Il manque un espace avant la parenthèse. => 		if(nom!=null)
257 Il manque un espace insécable. => 		if(nom!=null)
257 Mot inconnu : null => 		if(nom!=null)

258 Il manque un espace avant la parenthèse. => 			if(checkValidity(nom))
258 Mot inconnu : checkValidity => 			if(checkValidity(nom))
258 Il manque un espace avant la parenthèse. => 			if(checkValidity(nom))

259 Mot inconnu : name => 				name=nom;
259 Il manque un espace insécable. => 				name=nom;

260 Il manque un espace avant la parenthèse. => 		if(name==null){
260 Mot inconnu : name => 		if(name==null){
260 Mot inconnu : null => 		if(name==null){

261 Mot inconnu : name => 			name=url.getPath();
261 Mot inconnu : url => 			name=url.getPath();
261 Mot inconnu : getPath => 			name=url.getPath();

262 Mot inconnu : int => 			int slash = name.lastIndexOf("/");
262 Mot inconnu : name => 			int slash = name.lastIndexOf("/");
262 Mot inconnu : lastIndexOf => 			int slash = name.lastIndexOf("/");
262 Il manque un espace avant la parenthèse. => 			int slash = name.lastIndexOf("/");

263 Il manque un espace avant la parenthèse. => 			if(slash!=-1){
263 Il manque un espace insécable. => 			if(slash!=-1){
263 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 			if(slash!=-1){

264 Mot inconnu : name => 				name=name.substring(slash+1);
264 Mot inconnu : name => 				name=name.substring(slash+1);
264 Mot inconnu : substring => 				name=name.substring(slash+1);
264 Il manque un espace avant la parenthèse. => 				name=name.substring(slash+1);

269 Mot inconnu : path => 		String path = url.getPath();
269 Mot inconnu : url => 		String path = url.getPath();
269 Mot inconnu : getPath => 		String path = url.getPath();

270 Mot inconnu : pathChar => 		char [] pathChar = path.toCharArray();
270 Mot inconnu : path => 		char [] pathChar = path.toCharArray();
270 Mot inconnu : toCharArray => 		char [] pathChar = path.toCharArray();

271 Il manque un espace avant la parenthèse. => 		for(int i=0;i<pathChar.length;i++)
271 Mot inconnu : int => 		for(int i=0;i<pathChar.length;i++)
271 Il manque un espace insécable. => 		for(int i=0;i<pathChar.length;i++)
271 Il manque un espace. => 		for(int i=0;i<pathChar.length;i++)
271 Mot inconnu : pathChar => 		for(int i=0;i<pathChar.length;i++)
271 Mot inconnu : length => 		for(int i=0;i<pathChar.length;i++)
271 Il manque un espace insécable. => 		for(int i=0;i<pathChar.length;i++)
271 Il manque un espace. => 		for(int i=0;i<pathChar.length;i++)

272 Il manque un espace avant la parenthèse. => 			if(pathChar[i]=='/')
272 Mot inconnu : pathChar => 			if(pathChar[i]=='/')

273 Mot inconnu : pathChar => 				pathChar[i]=':';

274 Mot inconnu : path => 		path = new String(pathChar);
274 Il manque un espace avant la parenthèse. => 		path = new String(pathChar);
274 Mot inconnu : pathChar => 		path = new String(pathChar);

277 Mot inconnu : url => 		String ancre = url.getRef();
277 Mot inconnu : getRef => 		String ancre = url.getRef();

278 Il manque un espace avant la parenthèse. => 		if(ancre==null)
278 Mot inconnu : null => 		if(ancre==null)

280 Il manque un espace avant la parenthèse. => 		if(ancre.indexOf('?')!=-1){
280 Mot inconnu : indexOf => 		if(ancre.indexOf('?')!=-1){
280 Il manque un espace avant la parenthèse. => 		if(ancre.indexOf('?')!=-1){
280 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 		if(ancre.indexOf('?')!=-1){

281 Mot inconnu : substring => 			ancre=ancre.substring(0, ancre.indexOf('?')-1);
281 Il manque un espace avant la parenthèse. => 			ancre=ancre.substring(0, ancre.indexOf('?')-1);
281 Mot inconnu : indexOf => 			ancre=ancre.substring(0, ancre.indexOf('?')-1);
281 Il manque un espace avant la parenthèse. => 			ancre=ancre.substring(0, ancre.indexOf('?')-1);
281 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 			ancre=ancre.substring(0, ancre.indexOf('?')-1);

284 Il manque un espace insécable. => 		//construction de la représentation de la doc:

285 Mot inconnu : result => 		result = "[["+path;
285 Mot inconnu : path => 		result = "[["+path;
285 Il manque un espace insécable. => 		result = "[["+path;

286 Il manque un espace avant la parenthèse. => 		if(!ancre.equals(""))
286 Il manque un espace. => 		if(!ancre.equals(""))
286 Mot inconnu : equals => 		if(!ancre.equals(""))

287 Mot inconnu : result => 			result+="#"+ancre;
287 Il manque un espace insécable. => 			result+="#"+ancre;

288 Mot inconnu : result => 		result+="|"+name+"]]";
288 Mot inconnu : name => 		result+="|"+name+"]]";

290 Mot inconnu : return => 		return result;
290 Mot inconnu : result => 		return result;
290 Il manque un espace insécable. => 		return result;

294 Incohérence : espace et tabulation. => 	 * Crée le formattage pour un lien externe à la documentation.
294 Mot inconnu : formattage => 	 * Crée le formattage pour un lien externe à la documentation.

295 Incohérence : espace et tabulation. => 	 * Si le nom est omis, un nom par défaut est généré.

296 Incohérence : espace et tabulation. => 	 * 
296 Espace(s) en fin de ligne à supprimer. => 	 * 

297 Incohérence : espace et tabulation. => 	 * @param link lien à formatter
297 Mot inconnu : link => 	 * @param link lien à formatter
297 Mot inconnu : formatter => 	 * @param link lien à formatter

298 Incohérence : espace et tabulation. => 	 * @param nom du lien à formatter
298 Mot inconnu : formatter => 	 * @param nom du lien à formatter

299 Incohérence : espace et tabulation. => 	 * @return code correspondant au lien

300 Incohérence : espace et tabulation. => 	 */

301 Mot inconnu : static => 	public static String makeExternLink(String link,String nom){
301 Mot inconnu : makeExternLink => 	public static String makeExternLink(String link,String nom){
301 Il manque un espace avant la parenthèse. => 	public static String makeExternLink(String link,String nom){
301 Mot inconnu : link => 	public static String makeExternLink(String link,String nom){
301 Il manque un espace. => 	public static String makeExternLink(String link,String nom){

302 Mot inconnu : url => 		URL url = null;
302 Mot inconnu : null => 		URL url = null;
302 Il manque un espace insécable. => 		URL url = null;

303 Mot inconnu : name => 		String name = null;
303 Mot inconnu : null => 		String name = null;
303 Il manque un espace insécable. => 		String name = null;

306 Il manque un espace avant la parenthèse. => 		if(nom!=null)
306 Il manque un espace insécable. => 		if(nom!=null)
306 Mot inconnu : null => 		if(nom!=null)

307 Il manque un espace avant la parenthèse. => 			if(checkValidity(nom))
307 Mot inconnu : checkValidity => 			if(checkValidity(nom))
307 Il manque un espace avant la parenthèse. => 			if(checkValidity(nom))

308 Mot inconnu : name => 				name=nom;
308 Il manque un espace insécable. => 				name=nom;

309 Il manque un espace avant la parenthèse. => 		if(name==null){
309 Mot inconnu : name => 		if(name==null){
309 Mot inconnu : null => 		if(name==null){

310 Mot inconnu : try => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}
310 Mot inconnu : url => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}
310 Il manque un espace avant la parenthèse. => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}
310 Mot inconnu : link => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}
310 Mot inconnu : MalformedURLException => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}
310 Mot inconnu : return => 			try {url = new URL(link);} catch (MalformedURLException e) {return "";}

311 Mot inconnu : name => 			name=url.getPath();
311 Mot inconnu : url => 			name=url.getPath();
311 Mot inconnu : getPath => 			name=url.getPath();

314 Mot inconnu : int => 			int slash = name.lastIndexOf("/");
314 Mot inconnu : name => 			int slash = name.lastIndexOf("/");
314 Mot inconnu : lastIndexOf => 			int slash = name.lastIndexOf("/");
314 Il manque un espace avant la parenthèse. => 			int slash = name.lastIndexOf("/");

315 Il manque un espace avant la parenthèse. => 			if(slash!=-1){
315 Il manque un espace insécable. => 			if(slash!=-1){
315 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 			if(slash!=-1){

316 Mot inconnu : name => 				name=name.substring(slash+1);
316 Mot inconnu : name => 				name=name.substring(slash+1);
316 Mot inconnu : substring => 				name=name.substring(slash+1);
316 Il manque un espace avant la parenthèse. => 				name=name.substring(slash+1);

320 Mot inconnu : int => 			int dot = name.lastIndexOf(".");
320 Mot inconnu : name => 			int dot = name.lastIndexOf(".");
320 Mot inconnu : lastIndexOf => 			int dot = name.lastIndexOf(".");
320 Il manque un espace avant la parenthèse. => 			int dot = name.lastIndexOf(".");
320 Guillemets typographiques fermants. => 			int dot = name.lastIndexOf(".");

321 Il manque un espace avant la parenthèse. => 			if(dot>1){

322 Mot inconnu : name => 				name=name.substring(0,dot);
322 Mot inconnu : name => 				name=name.substring(0,dot);
322 Mot inconnu : substring => 				name=name.substring(0,dot);
322 Il manque un espace avant la parenthèse. => 				name=name.substring(0,dot);

328 Il manque un espace avant la parenthèse. => 		if(link==null)
328 Mot inconnu : link => 		if(link==null)
328 Mot inconnu : null => 		if(link==null)

329 Mot inconnu : return => 			return "";

330 Mot inconnu : else => 		else

331 Mot inconnu : return => 			return "[["+link+"|"+name+"]]";
331 Mot inconnu : link => 			return "[["+link+"|"+name+"]]";
331 Mot inconnu : name => 			return "[["+link+"|"+name+"]]";

336 Incohérence : espace et tabulation. => 	 *    FONCTIONS DE VERIFICATION DE VALIDITE     *
336 Mot inconnu : VERIFICATION => 	 *    FONCTIONS DE VERIFICATION DE VALIDITE     *
336 Mot inconnu : VALIDITE => 	 *    FONCTIONS DE VERIFICATION DE VALIDITE     *
336 Espace(s) surnuméraire(s) à supprimer. => 	 *    FONCTIONS DE VERIFICATION DE VALIDITE     *

337 Incohérence : espace et tabulation. => 	 ************************************************/

340 Incohérence : espace et tabulation. => 	 * Vérifie l'ensemble d'une liste de commandes pour voir si elles sont acceptables et s'il n'y a pas d'erreurs.

341 Incohérence : espace et tabulation. => 	 * En fait cette fonction fait plus qu'un test, en effet les objets invalides sont retirés de la liste.

342 Incohérence : espace et tabulation. => 	 * 
342 Espace(s) en fin de ligne à supprimer. => 	 * 

343 Incohérence : espace et tabulation. => 	 * @param commandListe
343 Mot inconnu : commandListe => 	 * @param commandListe

344 Incohérence : espace et tabulation. => 	 * @return vrai si à l'issue du test la liste contient au moins une commande valide, non sinon

345 Incohérence : espace et tabulation. => 	 */

346 Mot inconnu : static => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){
346 Mot inconnu : boolean => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){
346 Mot inconnu : checkCommandListValidity => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){
346 Il manque un espace avant la parenthèse. => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){
346 Mot inconnu : LinkedList => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){
346 Mot inconnu : commandListe => 	public static boolean checkCommandListValidity(LinkedList<CommandArray> commandListe){

347 Mot inconnu : boolean => 		boolean  validity =  true;
347 Espace(s) surnuméraire(s) à supprimer. => 		boolean  validity =  true;
347 Mot inconnu : validity => 		boolean  validity =  true;
347 Mot inconnu : true => 		boolean  validity =  true;
347 Il manque un espace insécable. => 		boolean  validity =  true;

348 Mot inconnu : CommandArray => 		CommandArray commandArray=null;
348 Mot inconnu : commandArray => 		CommandArray commandArray=null;
348 Mot inconnu : null => 		CommandArray commandArray=null;
348 Il manque un espace insécable. => 		CommandArray commandArray=null;

351 Il manque un espace avant la parenthèse. => 		if(commandListe.size()==0){
351 Mot inconnu : commandListe => 		if(commandListe.size()==0){
351 Mot inconnu : size => 		if(commandListe.size()==0){

352 Mot inconnu : println => 			println("erreur, pas d'objet valide trouvé.");
352 Il manque un espace avant la parenthèse. => 			println("erreur, pas d'objet valide trouvé.");
352 Guillemets typographiques ouvrants. => 			println("erreur, pas d'objet valide trouvé.");
352 Guillemets typographiques fermants. => 			println("erreur, pas d'objet valide trouvé.");

353 Mot inconnu : return => 			return false;
353 Mot inconnu : false => 			return false;
353 Il manque un espace insécable. => 			return false;

357 Il manque un espace avant la parenthèse. => 		for(int i=0;i<commandListe.size();i++){
357 Mot inconnu : int => 		for(int i=0;i<commandListe.size();i++){
357 Il manque un espace insécable. => 		for(int i=0;i<commandListe.size();i++){
357 Il manque un espace. => 		for(int i=0;i<commandListe.size();i++){
357 Mot inconnu : commandListe => 		for(int i=0;i<commandListe.size();i++){
357 Mot inconnu : size => 		for(int i=0;i<commandListe.size();i++){
357 Il manque un espace. => 		for(int i=0;i<commandListe.size();i++){

358 Mot inconnu : commandArray => 			commandArray=commandListe.get(i);
358 Mot inconnu : commandListe => 			commandArray=commandListe.get(i);
358 Mot inconnu : get => 			commandArray=commandListe.get(i);

359 Il manque un espace avant la parenthèse. => 			if(!checkCommandValidity(commandArray)){
359 Il manque un espace. => 			if(!checkCommandValidity(commandArray)){
359 Mot inconnu : checkCommandValidity => 			if(!checkCommandValidity(commandArray)){
359 Il manque un espace avant la parenthèse. => 			if(!checkCommandValidity(commandArray)){
359 Mot inconnu : commandArray => 			if(!checkCommandValidity(commandArray)){

360 Mot inconnu : debug => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Il manque un espace avant la parenthèse. => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Guillemets typographiques ouvrants. => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Mot inconnu : performFormat => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Guillemets typographiques fermants. => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Guillemets typographiques ouvrants. => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Mot inconnu : lien_forum => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Mot inconnu : commandArray => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Mot inconnu : lien_forum => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
360 Guillemets typographiques fermants. => 				debug("performFormat","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");

361 Mot inconnu : commandListe => 				commandListe.remove(commandArray);
361 Mot inconnu : remove => 				commandListe.remove(commandArray);
361 Il manque un espace avant la parenthèse. => 				commandListe.remove(commandArray);
361 Mot inconnu : commandArray => 				commandListe.remove(commandArray);

366 Il manque un espace avant la parenthèse. => 		if(commandListe.size()==0){
366 Mot inconnu : commandListe => 		if(commandListe.size()==0){
366 Mot inconnu : size => 		if(commandListe.size()==0){

367 Mot inconnu : println => 			println("erreur, pas d'objet valide trouvé après check de validité.");
367 Il manque un espace avant la parenthèse. => 			println("erreur, pas d'objet valide trouvé après check de validité.");
367 Guillemets typographiques ouvrants. => 			println("erreur, pas d'objet valide trouvé après check de validité.");
367 Mot inconnu : check => 			println("erreur, pas d'objet valide trouvé après check de validité.");
367 Guillemets typographiques fermants. => 			println("erreur, pas d'objet valide trouvé après check de validité.");

368 Mot inconnu : return => 			return false;
368 Mot inconnu : false => 			return false;
368 Il manque un espace insécable. => 			return false;

371 Mot inconnu : return => 		return validity;
371 Mot inconnu : validity => 		return validity;
371 Il manque un espace insécable. => 		return validity;

375 Incohérence : espace et tabulation. => 	 * Vérifie la validité d'une commande simple. La présence d'un nom et d'une description valide sont obligatoires pour avoir un résultat true.
375 Mot inconnu : true => 	 * Vérifie la validité d'une commande simple. La présence d'un nom et d'une description valide sont obligatoires pour avoir un résultat true.

376 Incohérence : espace et tabulation. => 	 * Les autres champs sont testés aussi, et en cas de problèmes, réinitialisés.

377 Incohérence : espace et tabulation. => 	 * 
377 Espace(s) en fin de ligne à supprimer. => 	 * 

378 Incohérence : espace et tabulation. => 	 * @param commandArray
378 Mot inconnu : commandArray => 	 * @param commandArray

379 Incohérence : espace et tabulation. => 	 * @return

380 Incohérence : espace et tabulation. => 	 */

381 Mot inconnu : static => 	public static boolean checkCommandValidity(CommandArray commandArray){
381 Mot inconnu : boolean => 	public static boolean checkCommandValidity(CommandArray commandArray){
381 Mot inconnu : checkCommandValidity => 	public static boolean checkCommandValidity(CommandArray commandArray){
381 Il manque un espace avant la parenthèse. => 	public static boolean checkCommandValidity(CommandArray commandArray){
381 Mot inconnu : CommandArray => 	public static boolean checkCommandValidity(CommandArray commandArray){
381 Mot inconnu : commandArray => 	public static boolean checkCommandValidity(CommandArray commandArray){

382 Mot inconnu : boolean => 		boolean result = true;
382 Mot inconnu : result => 		boolean result = true;
382 Mot inconnu : true => 		boolean result = true;
382 Il manque un espace insécable. => 		boolean result = true;

383 Mot inconnu : null => 		String lien = null;
383 Il manque un espace insécable. => 		String lien = null;

384 Il manque un espace avant la parenthèse. => 		if(!checkValidity(commandArray.nom)){
384 Il manque un espace. => 		if(!checkValidity(commandArray.nom)){
384 Mot inconnu : checkValidity => 		if(!checkValidity(commandArray.nom)){
384 Il manque un espace avant la parenthèse. => 		if(!checkValidity(commandArray.nom)){
384 Mot inconnu : commandArray => 		if(!checkValidity(commandArray.nom)){
384 Il manque un espace. => 		if(!checkValidity(commandArray.nom)){

385 Mot inconnu : result => 			result = false;
385 Mot inconnu : false => 			result = false;
385 Il manque un espace insécable. => 			result = false;

386 Mot inconnu : debug => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Il manque un espace avant la parenthèse. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Mot inconnu : checkCommandValidity => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Guillemets typographiques fermants. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Mot inconnu : commandArray => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Il manque un espace. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");
386 Guillemets typographiques fermants. => 			debug("checkCommandValidity","erreur, nom {"+commandArray.nom+"} incorrect");

388 Il manque un espace avant la parenthèse. => 		if(!checkValidity(commandArray.description)){
388 Il manque un espace. => 		if(!checkValidity(commandArray.description)){
388 Mot inconnu : checkValidity => 		if(!checkValidity(commandArray.description)){
388 Il manque un espace avant la parenthèse. => 		if(!checkValidity(commandArray.description)){
388 Mot inconnu : commandArray => 		if(!checkValidity(commandArray.description)){
388 Il manque un espace. => 		if(!checkValidity(commandArray.description)){

389 Mot inconnu : result => 			result = false;
389 Mot inconnu : false => 			result = false;
389 Il manque un espace insécable. => 			result = false;

390 Mot inconnu : debug => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Il manque un espace avant la parenthèse. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Mot inconnu : checkCommandValidity => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Guillemets typographiques fermants. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Mot inconnu : commandArray => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Il manque un espace. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");
390 Guillemets typographiques fermants. => 			debug("checkCommandValidity","erreur, description {"+commandArray.description+"} incorrect");

392 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_synopsys)){
392 Il manque un espace. => 		if(!checkLinkValidity(commandArray.lien_synopsys)){
392 Mot inconnu : checkLinkValidity => 		if(!checkLinkValidity(commandArray.lien_synopsys)){
392 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_synopsys)){
392 Mot inconnu : commandArray => 		if(!checkLinkValidity(commandArray.lien_synopsys)){
392 Mot inconnu : lien_synopsys => 		if(!checkLinkValidity(commandArray.lien_synopsys)){

393 Mot inconnu : commandArray => 			commandArray.lien_synopsys=null;
393 Mot inconnu : lien_synopsys => 			commandArray.lien_synopsys=null;
393 Mot inconnu : null => 			commandArray.lien_synopsys=null;
393 Il manque un espace insécable. => 			commandArray.lien_synopsys=null;

394 Mot inconnu : debug => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Il manque un espace avant la parenthèse. => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Mot inconnu : checkCommandValidity => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Mot inconnu : lien_synopsys => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Mot inconnu : commandArray => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Mot inconnu : lien_synopsys => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");
394 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_synopsys {"+commandArray.lien_synopsys+"} incorrect >> Réinitialisé");

396 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_manpage)){
396 Il manque un espace. => 		if(!checkLinkValidity(commandArray.lien_manpage)){
396 Mot inconnu : checkLinkValidity => 		if(!checkLinkValidity(commandArray.lien_manpage)){
396 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_manpage)){
396 Mot inconnu : commandArray => 		if(!checkLinkValidity(commandArray.lien_manpage)){
396 Mot inconnu : lien_manpage => 		if(!checkLinkValidity(commandArray.lien_manpage)){

397 Mot inconnu : commandArray => 			commandArray.lien_manpage=null;
397 Mot inconnu : lien_manpage => 			commandArray.lien_manpage=null;
397 Mot inconnu : null => 			commandArray.lien_manpage=null;
397 Il manque un espace insécable. => 			commandArray.lien_manpage=null;

398 Mot inconnu : debug => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Il manque un espace avant la parenthèse. => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Mot inconnu : checkCommandValidity => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Mot inconnu : lien_manpage => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Mot inconnu : commandArray => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Mot inconnu : lien_manpage => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");
398 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_manpage {"+commandArray.lien_manpage+"} incorrect >> Réinitialisé");

400 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_forum)){
400 Il manque un espace. => 		if(!checkLinkValidity(commandArray.lien_forum)){
400 Mot inconnu : checkLinkValidity => 		if(!checkLinkValidity(commandArray.lien_forum)){
400 Il manque un espace avant la parenthèse. => 		if(!checkLinkValidity(commandArray.lien_forum)){
400 Mot inconnu : commandArray => 		if(!checkLinkValidity(commandArray.lien_forum)){
400 Mot inconnu : lien_forum => 		if(!checkLinkValidity(commandArray.lien_forum)){

401 Mot inconnu : commandArray => 			commandArray.lien_forum=null;
401 Mot inconnu : lien_forum => 			commandArray.lien_forum=null;
401 Mot inconnu : null => 			commandArray.lien_forum=null;
401 Il manque un espace insécable. => 			commandArray.lien_forum=null;

402 Mot inconnu : debug => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Il manque un espace avant la parenthèse. => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Mot inconnu : checkCommandValidity => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Guillemets typographiques ouvrants. => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Mot inconnu : lien_forum => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Mot inconnu : commandArray => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Mot inconnu : lien_forum => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");
402 Guillemets typographiques fermants. => 			debug("checkCommandValidity","warning, lien_forum {"+commandArray.lien_forum+"} incorrect >> Réinitialisé");

404 Il manque un espace avant la parenthèse. => 		if(commandArray.liens.size()==0)
404 Il manque un espace. => 		if(commandArray.liens.size()==0)

405 Mot inconnu : commandArray => 			commandArray.liens = null;
405 Il manque un espace. => 			commandArray.liens = null;
405 Mot inconnu : null => 			commandArray.liens = null;
405 Il manque un espace insécable. => 			commandArray.liens = null;

406 Mot inconnu : else => 		else {

407 Il manque un espace avant la parenthèse. => 			for(int i=0;i<commandArray.liens.size();i++){
407 Mot inconnu : int => 			for(int i=0;i<commandArray.liens.size();i++){
407 Il manque un espace insécable. => 			for(int i=0;i<commandArray.liens.size();i++){
407 Il manque un espace. => 			for(int i=0;i<commandArray.liens.size();i++){
407 Il manque un espace. => 			for(int i=0;i<commandArray.liens.size();i++){
407 Il manque un espace. => 			for(int i=0;i<commandArray.liens.size();i++){

408 Il manque un espace. => 				lien = commandArray.liens.get(i);

409 Il manque un espace avant la parenthèse. => 				if(!checkLinkValidity(lien)){
409 Il manque un espace. => 				if(!checkLinkValidity(lien)){
409 Mot inconnu : checkLinkValidity => 				if(!checkLinkValidity(lien)){
409 Il manque un espace avant la parenthèse. => 				if(!checkLinkValidity(lien)){

410 Mot inconnu : debug => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Il manque un espace avant la parenthèse. => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Guillemets typographiques ouvrants. => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Mot inconnu : checkCommandValidity => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Guillemets typographiques fermants. => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Guillemets typographiques ouvrants. => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");
410 Guillemets typographiques fermants. => 					debug("checkCommandValidity","warning, lien {"+lien+"} incorrect >> Réinitialisé");

411 Il manque un espace. => 					commandArray.liens.remove(lien);
411 Il manque un espace avant la parenthèse. => 					commandArray.liens.remove(lien);

414 Il manque un espace avant la parenthèse. => 			if(commandArray.liens.size()==0)
414 Il manque un espace. => 			if(commandArray.liens.size()==0)

415 Mot inconnu : commandArray => 				commandArray.liens = null;
415 Il manque un espace. => 				commandArray.liens = null;
415 Mot inconnu : null => 				commandArray.liens = null;
415 Il manque un espace insécable. => 				commandArray.liens = null;

417 Mot inconnu : return => 		return result;
417 Mot inconnu : result => 		return result;
417 Il manque un espace insécable. => 		return result;

421 Incohérence : espace et tabulation. => 	 * Teste la validité d'une String suivant les critèrs suivants:
421 Accord de genre erroné : « String » est masculin. => 	 * Teste la validité d'une String suivant les critèrs suivants:
421 Mot inconnu : critèrs => 	 * Teste la validité d'une String suivant les critèrs suivants:
421 Il manque un espace insécable. => 	 * Teste la validité d'une String suivant les critèrs suivants:

422 Incohérence : espace et tabulation. => 	 * Ne doit pas être nulle, ne doit pas être vide, mono caractère ou constituée seulement d'espaces.

423 Incohérence : espace et tabulation. => 	 * A noter qu'on ne s'est pas donner la peine de tester proprement les espaces, 
423 Confusion probable : “a” est la conjugaison du verbe “avoir”. Utilisez la préposition “à”. => 	 * A noter qu'on ne s'est pas donner la peine de tester proprement les espaces, 
423 Incohérence. Après « s’être », le verbe doit être un participe passé. => 	 * A noter qu'on ne s'est pas donner la peine de tester proprement les espaces, 
423 Espace(s) en fin de ligne à supprimer. => 	 * A noter qu'on ne s'est pas donner la peine de tester proprement les espaces, 

424 Incohérence : espace et tabulation. => 	 * si vous voulez faire planter le programme mettez en un grand nombre.

425 Incohérence : espace et tabulation. => 	 * 
425 Espace(s) en fin de ligne à supprimer. => 	 * 

426 Incohérence : espace et tabulation. => 	 * @param arg la chaine à tester
426 Mot inconnu : arg => 	 * @param arg la chaine à tester

427 Incohérence : espace et tabulation. => 	 * @return un booléen qui indique si la chaine est correcte ou non.

428 Incohérence : espace et tabulation. => 	 */

429 Mot inconnu : static => 	public static boolean checkValidity(String arg){
429 Mot inconnu : boolean => 	public static boolean checkValidity(String arg){
429 Mot inconnu : checkValidity => 	public static boolean checkValidity(String arg){
429 Il manque un espace avant la parenthèse. => 	public static boolean checkValidity(String arg){
429 Mot inconnu : arg => 	public static boolean checkValidity(String arg){

430 Il manque un espace avant la parenthèse. => 		if(arg==null)
430 Mot inconnu : arg => 		if(arg==null)
430 Mot inconnu : null => 		if(arg==null)

431 Mot inconnu : return => 			return false;
431 Mot inconnu : false => 			return false;
431 Il manque un espace insécable. => 			return false;

432 Guillemets typographiques ouvrants. => 		//pas envie de me prendre la tête à faire "si ya que des espaces" ;)
432 Mot inconnu : ya => 		//pas envie de me prendre la tête à faire "si ya que des espaces" ;)
432 Guillemets typographiques fermants. => 		//pas envie de me prendre la tête à faire "si ya que des espaces" ;)
432 Il manque un espace insécable. => 		//pas envie de me prendre la tête à faire "si ya que des espaces" ;)

433 Il manque un espace avant la parenthèse. => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : arg => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : equals => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : arg => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : equals => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Il manque un espace avant la parenthèse. => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : arg => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : equals => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Il manque un espace avant la parenthèse. => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : arg => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Mot inconnu : equals => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))
433 Il manque un espace avant la parenthèse. => 		if(arg.equals("") || arg.equals(" ") || arg.equals("  ") || arg.equals("   "))

434 Mot inconnu : return => 			return false;
434 Mot inconnu : false => 			return false;
434 Il manque un espace insécable. => 			return false;

435 Il manque un espace avant la parenthèse. => 		if(arg.length()<2)
435 Mot inconnu : arg => 		if(arg.length()<2)
435 Mot inconnu : length => 		if(arg.length()<2)

436 Mot inconnu : return => 			return false;
436 Mot inconnu : false => 			return false;
436 Il manque un espace insécable. => 			return false;

437 Mot inconnu : return => 		return true;
437 Mot inconnu : true => 		return true;
437 Il manque un espace insécable. => 		return true;

441 Incohérence : espace et tabulation. => 	 * Teste la validité d'un lien de la manière suivante:
441 Il manque un espace insécable. => 	 * Teste la validité d'un lien de la manière suivante:

442 Incohérence : espace et tabulation. => 	 * Construit un objet URL basé sur ce lien. S'il n'y a pas de MalformedURLException, c'est bon.
442 Mot inconnu : MalformedURLException => 	 * Construit un objet URL basé sur ce lien. S'il n'y a pas de MalformedURLException, c'est bon.

443 Incohérence : espace et tabulation. => 	 * 
443 Espace(s) en fin de ligne à supprimer. => 	 * 

444 Incohérence : espace et tabulation. => 	 * @param arg le lien à tester 
444 Mot inconnu : arg => 	 * @param arg le lien à tester 
444 Espace(s) en fin de ligne à supprimer. => 	 * @param arg le lien à tester 

445 Incohérence : espace et tabulation. => 	 * @return un booléen qui indique si le lien est correct ou non.

446 Incohérence : espace et tabulation. => 	 */

447 Mot inconnu : static => 	public static boolean checkLinkValidity(String arg){
447 Mot inconnu : boolean => 	public static boolean checkLinkValidity(String arg){
447 Mot inconnu : checkLinkValidity => 	public static boolean checkLinkValidity(String arg){
447 Il manque un espace avant la parenthèse. => 	public static boolean checkLinkValidity(String arg){
447 Mot inconnu : arg => 	public static boolean checkLinkValidity(String arg){

448 Il manque un espace avant la parenthèse. => 		@SuppressWarnings("unused")
448 Guillemets typographiques ouvrants. => 		@SuppressWarnings("unused")
448 Mot inconnu : unused => 		@SuppressWarnings("unused")
448 Guillemets typographiques fermants. => 		@SuppressWarnings("unused")

449 Mot inconnu : url => 		URL url = null;
449 Mot inconnu : null => 		URL url = null;
449 Il manque un espace insécable. => 		URL url = null;

450 Mot inconnu : try => 		try {

451 Mot inconnu : url => 			url = new URL(arg);
451 Il manque un espace avant la parenthèse. => 			url = new URL(arg);
451 Mot inconnu : arg => 			url = new URL(arg);

452 Mot inconnu : MalformedURLException => 		} catch (MalformedURLException e) {

453 Mot inconnu : return => 			return false;
453 Mot inconnu : false => 			return false;
453 Il manque un espace insécable. => 			return false;

455 Mot inconnu : return => 		return true;
455 Mot inconnu : true => 		return true;
455 Il manque un espace insécable. => 		return true;

459 Incohérence : espace et tabulation. => 	 *    FONCTIONS DE LECTURE DU FICHIER SOURCE    *
459 Espace(s) surnuméraire(s) à supprimer. => 	 *    FONCTIONS DE LECTURE DU FICHIER SOURCE    *

460 Incohérence : espace et tabulation. => 	 ************************************************/

464 Incohérence : espace et tabulation. => 	 * Crée la liste des commandes à formater à partir du fichie source
464 Mot inconnu : fichie => 	 * Crée la liste des commandes à formater à partir du fichie source

465 Incohérence : espace et tabulation. => 	 * @param in

466 Incohérence : espace et tabulation. => 	 * @return LinkedList<CommandArray>
466 Mot inconnu : LinkedList => 	 * @return LinkedList<CommandArray>

467 Incohérence : espace et tabulation. => 	 * @throws IOException
467 Mot inconnu : IOException => 	 * @throws IOException

468 Incohérence : espace et tabulation. => 	 * @throws ParseException
468 Mot inconnu : ParseException => 	 * @throws ParseException

469 Incohérence : espace et tabulation. => 	 */

470 Mot inconnu : static => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : LinkedList => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : readFile => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Il manque un espace avant la parenthèse. => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : BufferedReader => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : throws => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : IOException => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{
470 Mot inconnu : ParseException => 	public static LinkedList<CommandArray> readFile(BufferedReader in) throws IOException, ParseException{

471 Mot inconnu : LinkedList => 		LinkedList<CommandArray> commandListe = new LinkedList<CommandArray>();
471 Mot inconnu : commandListe => 		LinkedList<CommandArray> commandListe = new LinkedList<CommandArray>();
471 Mot inconnu : LinkedList => 		LinkedList<CommandArray> commandListe = new LinkedList<CommandArray>();

475 Incohérence : espace et tabulation. => 		 * Initialisation. Pour l'initialisation on fait tous les tests de validité possibles, on sera moins strict par la suite.

476 Incohérence : espace et tabulation. => 		 */

477 Mot inconnu : firstValidLine => 		String [] firstValidLine = searchForValidLine(in);
477 Mot inconnu : searchForValidLine => 		String [] firstValidLine = searchForValidLine(in);

478 Il manque un espace avant la parenthèse. => 		if(firstValidLine==null)
478 Mot inconnu : firstValidLine => 		if(firstValidLine==null)
478 Mot inconnu : null => 		if(firstValidLine==null)

479 Mot inconnu : throw => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");
479 Mot inconnu : CommandArray => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");
479 Mot inconnu : ParseException => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");
479 Il manque un espace avant la parenthèse. => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");
479 Guillemets typographiques ouvrants. => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");
479 Guillemets typographiques fermants. => 			throw new CommandArray.ParseException("Erreur, aucune ligne valide trouvée dans le fichier.");

480 Il manque un espace avant la parenthèse. => 		if(!firstValidLine[0].equals("NOM"))
480 Il manque un espace. => 		if(!firstValidLine[0].equals("NOM"))
480 Mot inconnu : firstValidLine => 		if(!firstValidLine[0].equals("NOM"))
480 Mot inconnu : equals => 		if(!firstValidLine[0].equals("NOM"))
480 Il manque un espace avant la parenthèse. => 		if(!firstValidLine[0].equals("NOM"))
480 Guillemets typographiques ouvrants. => 		if(!firstValidLine[0].equals("NOM"))
480 Guillemets typographiques fermants. => 		if(!firstValidLine[0].equals("NOM"))

481 Mot inconnu : throw => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +
481 Mot inconnu : CommandArray => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +
481 Mot inconnu : ParseException => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +
481 Il manque un espace avant la parenthèse. => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +
481 Guillemets typographiques ouvrants. => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +
481 Guillemets isolés. => 			throw new CommandArray.ParseException("Erreur, le NOM doit venir en premier " +

482 Guillemets isolés. => 					"(vérifiez si vous n'avez pas une ligne comportant un ':' précédent " +

483 Guillemets typographiques ouvrants. => 					"votre première ligne commençant par NOM");
483 Guillemets typographiques fermants. => 					"votre première ligne commençant par NOM");

484 Mot inconnu : secondValidLine => 		String [] secondValidLine = searchForValidLine(in);
484 Mot inconnu : searchForValidLine => 		String [] secondValidLine = searchForValidLine(in);

485 Il manque un espace avant la parenthèse. => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Il manque un espace. => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Mot inconnu : secondValidLine => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Mot inconnu : equals => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Il manque un espace avant la parenthèse. => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Guillemets typographiques ouvrants. => 		if(!secondValidLine[0].equals("DESCRIPTION"))
485 Guillemets typographiques fermants. => 		if(!secondValidLine[0].equals("DESCRIPTION"))

486 Mot inconnu : throw => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +
486 Mot inconnu : CommandArray => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +
486 Mot inconnu : ParseException => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +
486 Il manque un espace avant la parenthèse. => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +
486 Guillemets typographiques ouvrants. => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +
486 Guillemets typographiques fermants. => 			throw new CommandArray.ParseException("Erreur, la DESCRIPTION doit venir juste" +

487 Guillemets typographiques fermants. => 					" après le NOM");

489 Il manque un espace avant la parenthèse. => 		if(!checkValidity(firstValidLine[1]))
489 Il manque un espace. => 		if(!checkValidity(firstValidLine[1]))
489 Mot inconnu : checkValidity => 		if(!checkValidity(firstValidLine[1]))
489 Il manque un espace avant la parenthèse. => 		if(!checkValidity(firstValidLine[1]))
489 Mot inconnu : firstValidLine => 		if(!checkValidity(firstValidLine[1]))

490 Mot inconnu : throw => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Mot inconnu : CommandArray => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Mot inconnu : ParseException => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Il manque un espace avant la parenthèse. => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Guillemets typographiques ouvrants. => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Il manque un espace insécable. => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");
490 Mot inconnu : firstValidLine => 			throw new CommandArray.ParseException("Erreur, nom invalide: {"+firstValidLine[1]+"}");

491 Il manque un espace avant la parenthèse. => 		if(!checkValidity(secondValidLine[1]))
491 Il manque un espace. => 		if(!checkValidity(secondValidLine[1]))
491 Mot inconnu : checkValidity => 		if(!checkValidity(secondValidLine[1]))
491 Il manque un espace avant la parenthèse. => 		if(!checkValidity(secondValidLine[1]))
491 Mot inconnu : secondValidLine => 		if(!checkValidity(secondValidLine[1]))

492 Mot inconnu : throw => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Mot inconnu : CommandArray => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Mot inconnu : ParseException => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Il manque un espace avant la parenthèse. => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Guillemets typographiques ouvrants. => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Il manque un espace insécable. => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");
492 Mot inconnu : firstValidLine => 			throw new CommandArray.ParseException("Erreur, description invalide: {"+firstValidLine[1]+"}");

494 Mot inconnu : CommandArray => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);
494 Mot inconnu : commandArray => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);
494 Mot inconnu : CommandArray => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);
494 Il manque un espace avant la parenthèse. => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);
494 Mot inconnu : firstValidLine => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);
494 Mot inconnu : secondValidLine => 		CommandArray commandArray = new CommandArray(firstValidLine[1],secondValidLine[1]);

497 Incohérence : espace et tabulation. => 		 * Boucle. On ne se soucie pas trop des éventuels problèmes d'objet mal rempli, ce sera checké en aval
497 Mot inconnu : checké => 		 * Boucle. On ne se soucie pas trop des éventuels problèmes d'objet mal rempli, ce sera checké en aval

498 Incohérence : espace et tabulation. => 		 */

499 Mot inconnu : line => 		String [] line = null;
499 Mot inconnu : null => 		String [] line = null;
499 Il manque un espace insécable. => 		String [] line = null;

500 Mot inconnu : arg => 		String arg = null, key = null;
500 Mot inconnu : null => 		String arg = null, key = null;
500 Mot inconnu : key => 		String arg = null, key = null;
500 Mot inconnu : null => 		String arg = null, key = null;
500 Il manque un espace insécable. => 		String arg = null, key = null;

501 Mot inconnu : while => 		while((line=searchForValidLine(in))!=null){
501 Il manque un espace avant la parenthèse. => 		while((line=searchForValidLine(in))!=null){
501 Mot inconnu : line => 		while((line=searchForValidLine(in))!=null){
501 Mot inconnu : searchForValidLine => 		while((line=searchForValidLine(in))!=null){
501 Mot inconnu : null => 		while((line=searchForValidLine(in))!=null){

502 Mot inconnu : key => 			key = line[0];
502 Mot inconnu : line => 			key = line[0];
502 Il manque un espace insécable. => 			key = line[0];

503 Mot inconnu : arg => 			arg = line[1];
503 Mot inconnu : line => 			arg = line[1];
503 Il manque un espace insécable. => 			arg = line[1];

504 Il manque un espace avant la parenthèse. => 			if(key.equals("NOM")){
504 Mot inconnu : key => 			if(key.equals("NOM")){
504 Mot inconnu : equals => 			if(key.equals("NOM")){
504 Il manque un espace avant la parenthèse. => 			if(key.equals("NOM")){
504 Guillemets typographiques ouvrants. => 			if(key.equals("NOM")){
504 Guillemets typographiques fermants. => 			if(key.equals("NOM")){

505 Mot inconnu : commandListe => 				commandListe.add(commandArray);
505 Mot inconnu : add => 				commandListe.add(commandArray);
505 Il manque un espace avant la parenthèse. => 				commandListe.add(commandArray);
505 Mot inconnu : commandArray => 				commandListe.add(commandArray);

506 Mot inconnu : commandArray => 				commandArray=new CommandArray(arg);
506 Mot inconnu : CommandArray => 				commandArray=new CommandArray(arg);
506 Il manque un espace avant la parenthèse. => 				commandArray=new CommandArray(arg);
506 Mot inconnu : arg => 				commandArray=new CommandArray(arg);

508 Il manque un espace avant la parenthèse. => 			if(key.equals("DESCRIPTION"))
508 Mot inconnu : key => 			if(key.equals("DESCRIPTION"))
508 Mot inconnu : equals => 			if(key.equals("DESCRIPTION"))
508 Il manque un espace avant la parenthèse. => 			if(key.equals("DESCRIPTION"))
508 Guillemets typographiques ouvrants. => 			if(key.equals("DESCRIPTION"))
508 Guillemets typographiques fermants. => 			if(key.equals("DESCRIPTION"))

509 Mot inconnu : commandArray => 				commandArray.description=arg;
509 Il manque un espace. => 				commandArray.description=arg;
509 Mot inconnu : arg => 				commandArray.description=arg;
509 Il manque un espace insécable. => 				commandArray.description=arg;

510 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_SYNOPSIS"))
510 Mot inconnu : key => 			if(key.equals("LIEN_SYNOPSIS"))
510 Mot inconnu : equals => 			if(key.equals("LIEN_SYNOPSIS"))
510 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_SYNOPSIS"))
510 Guillemets typographiques ouvrants. => 			if(key.equals("LIEN_SYNOPSIS"))
510 Mot inconnu : LIEN_SYNOPSIS => 			if(key.equals("LIEN_SYNOPSIS"))
510 Guillemets typographiques fermants. => 			if(key.equals("LIEN_SYNOPSIS"))

511 Mot inconnu : commandArray => 				commandArray.lien_synopsys=arg;
511 Mot inconnu : lien_synopsys => 				commandArray.lien_synopsys=arg;
511 Mot inconnu : arg => 				commandArray.lien_synopsys=arg;
511 Il manque un espace insécable. => 				commandArray.lien_synopsys=arg;

512 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN"))
512 Mot inconnu : key => 			if(key.equals("LIEN"))
512 Mot inconnu : equals => 			if(key.equals("LIEN"))
512 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN"))
512 Guillemets typographiques ouvrants. => 			if(key.equals("LIEN"))
512 Guillemets typographiques fermants. => 			if(key.equals("LIEN"))

513 Il manque un espace. => 				commandArray.liens.add(arg);
513 Il manque un espace avant la parenthèse. => 				commandArray.liens.add(arg);
513 Mot inconnu : arg => 				commandArray.liens.add(arg);

514 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_MANPAGE"))
514 Mot inconnu : key => 			if(key.equals("LIEN_MANPAGE"))
514 Mot inconnu : equals => 			if(key.equals("LIEN_MANPAGE"))
514 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_MANPAGE"))
514 Guillemets typographiques ouvrants. => 			if(key.equals("LIEN_MANPAGE"))
514 Mot inconnu : LIEN_MANPAGE => 			if(key.equals("LIEN_MANPAGE"))
514 Guillemets typographiques fermants. => 			if(key.equals("LIEN_MANPAGE"))

515 Mot inconnu : commandArray => 				commandArray.lien_manpage=arg;
515 Mot inconnu : lien_manpage => 				commandArray.lien_manpage=arg;
515 Mot inconnu : arg => 				commandArray.lien_manpage=arg;
515 Il manque un espace insécable. => 				commandArray.lien_manpage=arg;

516 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_FORUM"))
516 Mot inconnu : key => 			if(key.equals("LIEN_FORUM"))
516 Mot inconnu : equals => 			if(key.equals("LIEN_FORUM"))
516 Il manque un espace avant la parenthèse. => 			if(key.equals("LIEN_FORUM"))
516 Guillemets typographiques ouvrants. => 			if(key.equals("LIEN_FORUM"))
516 Mot inconnu : LIEN_FORUM => 			if(key.equals("LIEN_FORUM"))
516 Guillemets typographiques fermants. => 			if(key.equals("LIEN_FORUM"))

517 Mot inconnu : commandArray => 				commandArray.lien_forum=arg;
517 Mot inconnu : lien_forum => 				commandArray.lien_forum=arg;
517 Mot inconnu : arg => 				commandArray.lien_forum=arg;
517 Il manque un espace insécable. => 				commandArray.lien_forum=arg;

520 Mot inconnu : commandListe => 		commandListe.add(commandArray);
520 Mot inconnu : add => 		commandListe.add(commandArray);
520 Il manque un espace avant la parenthèse. => 		commandListe.add(commandArray);
520 Mot inconnu : commandArray => 		commandListe.add(commandArray);

523 Mot inconnu : return => 		return commandListe;
523 Mot inconnu : commandListe => 		return commandListe;
523 Il manque un espace insécable. => 		return commandListe;

527 Incohérence : espace et tabulation. => 	 * Retrouve la ligne valide suivante dans le fichier source.

528 Incohérence : espace et tabulation. => 	 * Une ligne est considérée comme valide si elle comporte un ':' 
528 Espace(s) en fin de ligne à supprimer. => 	 * Une ligne est considérée comme valide si elle comporte un ':' 

529 Incohérence : espace et tabulation. => 	 * @param in

530 Incohérence : espace et tabulation. => 	 * @return ligne valide

531 Incohérence : espace et tabulation. => 	 * @throws IOException
531 Mot inconnu : IOException => 	 * @throws IOException

532 Incohérence : espace et tabulation. => 	 */

533 Mot inconnu : static => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{
533 Mot inconnu : searchForValidLine => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{
533 Il manque un espace avant la parenthèse. => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{
533 Mot inconnu : BufferedReader => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{
533 Mot inconnu : throws => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{
533 Mot inconnu : IOException => 	public static String [] searchForValidLine(BufferedReader in) throws IOException{

534 Mot inconnu : line => 		String line = null;
534 Mot inconnu : null => 		String line = null;
534 Il manque un espace insécable. => 		String line = null;

535 Mot inconnu : key => 		//String key = null;
535 Mot inconnu : null => 		//String key = null;
535 Il manque un espace insécable. => 		//String key = null;

536 Mot inconnu : splitedLine => 		String [] splitedLine = new String[2];
536 Il manque un espace insécable. => 		String [] splitedLine = new String[2];

537 Mot inconnu : int => 		int doubledotindex=-1;
537 Mot inconnu : doubledotindex => 		int doubledotindex=-1;
537 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 		int doubledotindex=-1;
537 Il manque un espace insécable. => 		int doubledotindex=-1;

538 Mot inconnu : while => 		while((line=in.readLine())!=null){
538 Il manque un espace avant la parenthèse. => 		while((line=in.readLine())!=null){
538 Mot inconnu : line => 		while((line=in.readLine())!=null){
538 Mot inconnu : readLine => 		while((line=in.readLine())!=null){
538 Mot inconnu : null => 		while((line=in.readLine())!=null){

539 Mot inconnu : doubledotindex => 			doubledotindex=line.indexOf(':');
539 Mot inconnu : line => 			doubledotindex=line.indexOf(':');
539 Mot inconnu : indexOf => 			doubledotindex=line.indexOf(':');
539 Il manque un espace avant la parenthèse. => 			doubledotindex=line.indexOf(':');

540 Il manque un espace avant la parenthèse. => 			if(doubledotindex!=-1)
540 Mot inconnu : doubledotindex => 			if(doubledotindex!=-1)
540 Il manque un espace insécable. => 			if(doubledotindex!=-1)
540 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 			if(doubledotindex!=-1)

542 Mot inconnu : splitedLine => 				splitedLine[0]=line.substring(0, doubledotindex);
542 Mot inconnu : line => 				splitedLine[0]=line.substring(0, doubledotindex);
542 Mot inconnu : substring => 				splitedLine[0]=line.substring(0, doubledotindex);
542 Il manque un espace avant la parenthèse. => 				splitedLine[0]=line.substring(0, doubledotindex);
542 Mot inconnu : doubledotindex => 				splitedLine[0]=line.substring(0, doubledotindex);

543 Il manque un espace avant la parenthèse. => 				if(doubledotindex<line.length())
543 Mot inconnu : doubledotindex => 				if(doubledotindex<line.length())
543 Mot inconnu : line => 				if(doubledotindex<line.length())
543 Mot inconnu : length => 				if(doubledotindex<line.length())

544 Mot inconnu : splitedLine => 					splitedLine[1]=line.substring(doubledotindex+1);
544 Mot inconnu : line => 					splitedLine[1]=line.substring(doubledotindex+1);
544 Mot inconnu : substring => 					splitedLine[1]=line.substring(doubledotindex+1);
544 Il manque un espace avant la parenthèse. => 					splitedLine[1]=line.substring(doubledotindex+1);
544 Mot inconnu : doubledotindex => 					splitedLine[1]=line.substring(doubledotindex+1);

545 Mot inconnu : else => 				else

546 Mot inconnu : splitedLine => 					splitedLine[1]="";

547 Mot inconnu : splitedLine => 				/*splitedLine =  line.split(":");
547 Mot inconnu : line => 				/*splitedLine =  line.split(":");
547 Mot inconnu : split => 				/*splitedLine =  line.split(":");
547 Il manque un espace avant la parenthèse. => 				/*splitedLine =  line.split(":");

548 Il manque un espace avant la parenthèse. => 				if(splitedLine.length==2)
548 Mot inconnu : splitedLine => 				if(splitedLine.length==2)
548 Mot inconnu : length => 				if(splitedLine.length==2)

549 Mot inconnu : return => 					return splitedLine;
549 Mot inconnu : splitedLine => 					return splitedLine;
549 Il manque un espace insécable. => 					return splitedLine;

550 Mot inconnu : else => 				else {

551 Mot inconnu : key => 					key = splitedLine[0];
551 Mot inconnu : splitedLine => 					key = splitedLine[0];
551 Il manque un espace insécable. => 					key = splitedLine[0];

552 Mot inconnu : splitedLine => 					splitedLine=new String[2];
552 Il manque un espace insécable. => 					splitedLine=new String[2];

553 Mot inconnu : splitedLine => 					splitedLine[0]=key;
553 Mot inconnu : key => 					splitedLine[0]=key;
553 Il manque un espace insécable. => 					splitedLine[0]=key;

554 Mot inconnu : splitedLine => 					splitedLine[1]="";

555 Mot inconnu : return => 					return splitedLine;
555 Mot inconnu : splitedLine => 					return splitedLine;
555 Il manque un espace insécable. => 					return splitedLine;

557 Mot inconnu : return => 				return splitedLine;
557 Mot inconnu : splitedLine => 				return splitedLine;
557 Il manque un espace insécable. => 				return splitedLine;

560 Mot inconnu : return => 		return null;
560 Mot inconnu : null => 		return null;
560 Il manque un espace insécable. => 		return null;

565 Incohérence : espace et tabulation. => 	 *    println & debug stuff    *
565 Mot inconnu : println => 	 *    println & debug stuff    *
565 Mot inconnu : debug => 	 *    println & debug stuff    *
565 Mot inconnu : stuff => 	 *    println & debug stuff    *
565 Espace(s) surnuméraire(s) à supprimer. => 	 *    println & debug stuff    *

566 Incohérence : espace et tabulation. => 	 *******************************/

567 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void println(String s){
567 Mot inconnu : static =>     public static void println(String s){
567 Mot inconnu : void =>     public static void println(String s){
567 Mot inconnu : println =>     public static void println(String s){
567 Il manque un espace avant la parenthèse. =>     public static void println(String s){

568 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	System.out.println(s);
568 Incohérence : espace et tabulation. =>     	System.out.println(s);
568 Il manque un espace. =>     	System.out.println(s);

569 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

570 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void println(String [] s){
570 Mot inconnu : static =>     public static void println(String [] s){
570 Mot inconnu : void =>     public static void println(String [] s){
570 Mot inconnu : println =>     public static void println(String [] s){
570 Il manque un espace avant la parenthèse. =>     public static void println(String [] s){

571 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	for(int i=0;i<s.length;i++)
571 Incohérence : espace et tabulation. =>     	for(int i=0;i<s.length;i++)
571 Il manque un espace avant la parenthèse. =>     	for(int i=0;i<s.length;i++)
571 Mot inconnu : int =>     	for(int i=0;i<s.length;i++)
571 Il manque un espace insécable. =>     	for(int i=0;i<s.length;i++)
571 Il manque un espace. =>     	for(int i=0;i<s.length;i++)
571 Mot inconnu : length =>     	for(int i=0;i<s.length;i++)
571 Il manque un espace insécable. =>     	for(int i=0;i<s.length;i++)
571 Il manque un espace. =>     	for(int i=0;i<s.length;i++)

572 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     		System.out.println(s[i]);
572 Incohérence : espace et tabulation. =>     		System.out.println(s[i]);
572 Il manque un espace. =>     		System.out.println(s[i]);
572 Il manque un espace avant la parenthèse. =>     		System.out.println(s[i]);

573 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

574 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

575 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void debug(String origin,String s){
575 Mot inconnu : static =>     public static void debug(String origin,String s){
575 Mot inconnu : void =>     public static void debug(String origin,String s){
575 Mot inconnu : debug =>     public static void debug(String origin,String s){
575 Il manque un espace avant la parenthèse. =>     public static void debug(String origin,String s){
575 Mot inconnu : origin =>     public static void debug(String origin,String s){
575 Il manque un espace. =>     public static void debug(String origin,String s){

576 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	if (DEBUG) {
576 Incohérence : espace et tabulation. =>     	if (DEBUG) {
576 Mot inconnu : DEBUG =>     	if (DEBUG) {

577 Il manque un espace. => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Il manque un espace avant la parenthèse. => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Guillemets typographiques ouvrants. => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Mot inconnu : DEBUG => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Il manque un espace avant la parenthèse. => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Mot inconnu : FormatArray => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Guillemets typographiques fermants. => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);
577 Mot inconnu : origin => 			System.out.println("DEBUG(FormatArray."+origin+"): "+s);

579 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

580 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void debug(String origin,String [] s){
580 Mot inconnu : static =>     public static void debug(String origin,String [] s){
580 Mot inconnu : void =>     public static void debug(String origin,String [] s){
580 Mot inconnu : debug =>     public static void debug(String origin,String [] s){
580 Il manque un espace avant la parenthèse. =>     public static void debug(String origin,String [] s){
580 Mot inconnu : origin =>     public static void debug(String origin,String [] s){
580 Il manque un espace. =>     public static void debug(String origin,String [] s){

581 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	if (DEBUG) {
581 Incohérence : espace et tabulation. =>     	if (DEBUG) {
581 Mot inconnu : DEBUG =>     	if (DEBUG) {

582 Mot inconnu : int => 			for (int i = 0; i < s.length; i++)
582 Il manque un espace insécable. => 			for (int i = 0; i < s.length; i++)
582 Mot inconnu : length => 			for (int i = 0; i < s.length; i++)
582 Il manque un espace insécable. => 			for (int i = 0; i < s.length; i++)

583 Il manque un espace. => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Il manque un espace avant la parenthèse. => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Guillemets typographiques ouvrants. => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Mot inconnu : DEBUG => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Il manque un espace avant la parenthèse. => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Mot inconnu : FormatArray => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Guillemets typographiques fermants. => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);
583 Mot inconnu : origin => 				System.out.println("DEBUG(FormatArray."+origin+"): "+s[i]);

585 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

586 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void printUsage(){
586 Mot inconnu : static =>     public static void printUsage(){
586 Mot inconnu : void =>     public static void printUsage(){
586 Mot inconnu : printUsage =>     public static void printUsage(){

587 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("***************************************************************************");
587 Incohérence : espace et tabulation. =>     	println("***************************************************************************");
587 Mot inconnu : println =>     	println("***************************************************************************");
587 Il manque un espace avant la parenthèse. =>     	println("***************************************************************************");

588 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("*                           FormatArray                                   *");
588 Incohérence : espace et tabulation. =>     	println("*                           FormatArray                                   *");
588 Mot inconnu : println =>     	println("*                           FormatArray                                   *");
588 Il manque un espace avant la parenthèse. =>     	println("*                           FormatArray                                   *");
588 Mot inconnu : FormatArray =>     	println("*                           FormatArray                                   *");
588 Espace(s) surnuméraire(s) à supprimer. =>     	println("*                           FormatArray                                   *");

589 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("***************************************************************************");
589 Incohérence : espace et tabulation. =>     	println("***************************************************************************");
589 Mot inconnu : println =>     	println("***************************************************************************");
589 Il manque un espace avant la parenthèse. =>     	println("***************************************************************************");

590 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("");
590 Incohérence : espace et tabulation. =>     	println("");
590 Mot inconnu : println =>     	println("");

591 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("génère le formatage correspondant à l'ensemble des commandes fournies dans le ");
591 Incohérence : espace et tabulation. =>     	println("génère le formatage correspondant à l'ensemble des commandes fournies dans le ");
591 Mot inconnu : println =>     	println("génère le formatage correspondant à l'ensemble des commandes fournies dans le ");
591 Il manque un espace avant la parenthèse. =>     	println("génère le formatage correspondant à l'ensemble des commandes fournies dans le ");
591 Guillemets typographiques ouvrants. =>     	println("génère le formatage correspondant à l'ensemble des commandes fournies dans le ");

592 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("fichier passé en paramètre:");
592 Incohérence : espace et tabulation. =>     	println("fichier passé en paramètre:");
592 Mot inconnu : println =>     	println("fichier passé en paramètre:");
592 Il manque un espace avant la parenthèse. =>     	println("fichier passé en paramètre:");
592 Guillemets typographiques ouvrants. =>     	println("fichier passé en paramètre:");

593 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("");
593 Incohérence : espace et tabulation. =>     	println("");
593 Mot inconnu : println =>     	println("");

594 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("paramètre obligatoire: nom du fichier");
594 Incohérence : espace et tabulation. =>     	println("paramètre obligatoire: nom du fichier");
594 Mot inconnu : println =>     	println("paramètre obligatoire: nom du fichier");
594 Il manque un espace avant la parenthèse. =>     	println("paramètre obligatoire: nom du fichier");
594 Guillemets typographiques ouvrants. =>     	println("paramètre obligatoire: nom du fichier");
594 Il manque un espace insécable. =>     	println("paramètre obligatoire: nom du fichier");
594 Guillemets typographiques fermants. =>     	println("paramètre obligatoire: nom du fichier");

595 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Incohérence : espace et tabulation. =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Mot inconnu : println =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Il manque un espace avant la parenthèse. =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Guillemets typographiques ouvrants. =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Mot inconnu : NOM_FICHIER_format =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Mot inconnu : txt =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");
595 Guillemets typographiques fermants. =>     	println("le résultat est stocké dans le fichier NOM_FICHIER_format.txt");

596 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("le fichier source doit contenir au moins une fois le motif suivant:");
596 Incohérence : espace et tabulation. =>     	println("le fichier source doit contenir au moins une fois le motif suivant:");
596 Mot inconnu : println =>     	println("le fichier source doit contenir au moins une fois le motif suivant:");
596 Il manque un espace avant la parenthèse. =>     	println("le fichier source doit contenir au moins une fois le motif suivant:");
596 Guillemets typographiques ouvrants. =>     	println("le fichier source doit contenir au moins une fois le motif suivant:");

597 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("");
597 Incohérence : espace et tabulation. =>     	println("");
597 Mot inconnu : println =>     	println("");

598 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("NOM:");
598 Incohérence : espace et tabulation. =>     	println("NOM:");
598 Mot inconnu : println =>     	println("NOM:");
598 Il manque un espace avant la parenthèse. =>     	println("NOM:");
598 Guillemets typographiques ouvrants. =>     	println("NOM:");

599 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("DESCRIPTION:");
599 Incohérence : espace et tabulation. =>     	println("DESCRIPTION:");
599 Mot inconnu : println =>     	println("DESCRIPTION:");
599 Il manque un espace avant la parenthèse. =>     	println("DESCRIPTION:");
599 Guillemets typographiques ouvrants. =>     	println("DESCRIPTION:");

600 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("LIEN_SYNOPSIS:");
600 Incohérence : espace et tabulation. =>     	println("LIEN_SYNOPSIS:");
600 Mot inconnu : println =>     	println("LIEN_SYNOPSIS:");
600 Il manque un espace avant la parenthèse. =>     	println("LIEN_SYNOPSIS:");
600 Guillemets typographiques ouvrants. =>     	println("LIEN_SYNOPSIS:");
600 Mot inconnu : LIEN_SYNOPSIS =>     	println("LIEN_SYNOPSIS:");

601 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("LIEN:");
601 Incohérence : espace et tabulation. =>     	println("LIEN:");
601 Mot inconnu : println =>     	println("LIEN:");
601 Il manque un espace avant la parenthèse. =>     	println("LIEN:");
601 Guillemets typographiques ouvrants. =>     	println("LIEN:");

602 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("LIEN_MANPAGE:");
602 Incohérence : espace et tabulation. =>     	println("LIEN_MANPAGE:");
602 Mot inconnu : println =>     	println("LIEN_MANPAGE:");
602 Il manque un espace avant la parenthèse. =>     	println("LIEN_MANPAGE:");
602 Guillemets typographiques ouvrants. =>     	println("LIEN_MANPAGE:");
602 Mot inconnu : LIEN_MANPAGE =>     	println("LIEN_MANPAGE:");

603 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("LIEN_FORUM:");
603 Incohérence : espace et tabulation. =>     	println("LIEN_FORUM:");
603 Mot inconnu : println =>     	println("LIEN_FORUM:");
603 Il manque un espace avant la parenthèse. =>     	println("LIEN_FORUM:");
603 Guillemets typographiques ouvrants. =>     	println("LIEN_FORUM:");
603 Mot inconnu : LIEN_FORUM =>     	println("LIEN_FORUM:");

604 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("");
604 Incohérence : espace et tabulation. =>     	println("");
604 Mot inconnu : println =>     	println("");

605 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");
605 Incohérence : espace et tabulation. =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");
605 Mot inconnu : println =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");
605 Il manque un espace avant la parenthèse. =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");
605 Guillemets typographiques ouvrants. =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");
605 Guillemets typographiques fermants. =>     	println("Le nombre de LIEN est indifférent. Une entrée valide doit contenir au moins");

606 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Incohérence : espace et tabulation. =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Mot inconnu : println =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Il manque un espace avant la parenthèse. =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Guillemets typographiques ouvrants. =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Mot inconnu : LIEN_MANPAGE =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");
606 Guillemets typographiques fermants. =>     	println("une DESCRIPTION et un NOM. Si vous ne disposez pas par exemple du LIEN_MANPAGE,");

607 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");
607 Incohérence : espace et tabulation. =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");
607 Mot inconnu : println =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");
607 Il manque un espace avant la parenthèse. =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");
607 Guillemets typographiques ouvrants. =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");
607 Guillemets typographiques fermants. =>     	println("vous pouvez indifféremment mettre la ligne vide ou pas.");

608 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

609 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

610 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     public static void printLicense(){
610 Mot inconnu : static =>     public static void printLicense(){
610 Mot inconnu : void =>     public static void printLicense(){
610 Mot inconnu : printLicense =>     public static void printLicense(){

611 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Incohérence : espace et tabulation. =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Mot inconnu : println =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Il manque un espace avant la parenthèse. =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Guillemets typographiques ouvrants. =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Mot inconnu : FormatArray =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Espace(s) surnuméraire(s) à supprimer. =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Mot inconnu : Aldian =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Mot inconnu : Administrator =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");
611 Mot inconnu : of =>     	println("FormatArray  Copyright (C) 2009 Aldian (Administrator of Ubuntu French Documentation)");

612 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Incohérence : espace et tabulation. =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : println =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Il manque un espace avant la parenthèse. =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Guillemets typographiques ouvrants. =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : This =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : program =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : comes =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : with =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : ABSOLUTELY =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : WARRANTY =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Il manque un espace insécable. =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : details =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");
612 Mot inconnu : visit =>     	println("This program comes with ABSOLUTELY NO WARRANTY; for details visit site http://www.gnu.org/licenses/gpl.html.");

613 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("This is free software, and you are welcome to redistribute it");
613 Incohérence : espace et tabulation. =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : println =>     	println("This is free software, and you are welcome to redistribute it");
613 Il manque un espace avant la parenthèse. =>     	println("This is free software, and you are welcome to redistribute it");
613 Guillemets typographiques ouvrants. =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : This =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : is =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : free =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : and =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : you =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : welcome =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : to =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : redistribute =>     	println("This is free software, and you are welcome to redistribute it");
613 Mot inconnu : it =>     	println("This is free software, and you are welcome to redistribute it");
613 Guillemets typographiques fermants. =>     	println("This is free software, and you are welcome to redistribute it");

614 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Incohérence : espace et tabulation. =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Mot inconnu : println =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Il manque un espace avant la parenthèse. =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Guillemets typographiques ouvrants. =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Mot inconnu : under =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Il manque un espace insécable. =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Mot inconnu : visit =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Mot inconnu : details =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");
614 Guillemets typographiques fermants. =>     	println("under certain conditions; visit site http://www.gnu.org/licenses/gpl.html for details.");

615 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	println("");
615 Incohérence : espace et tabulation. =>     	println("");
615 Mot inconnu : println =>     	println("");

616 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

617 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

618 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     /**

619 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      * @author aldian
619 Mot inconnu : aldian =>      * @author aldian

620 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      * Exception dédiée aux problèmes survenus dans l'interprétation du contenu du fichier source.

621 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      */

622 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     static class ParseException extends Exception {
622 Mot inconnu : static =>     static class ParseException extends Exception {
622 Mot inconnu : class =>     static class ParseException extends Exception {
622 Mot inconnu : ParseException =>     static class ParseException extends Exception {
622 Mot inconnu : extends =>     static class ParseException extends Exception {

623 Mot inconnu : private => 		private static final long serialVersionUID = -1172968771252448754L;
623 Mot inconnu : static => 		private static final long serialVersionUID = -1172968771252448754L;
623 Mot inconnu : serialVersionUID => 		private static final long serialVersionUID = -1172968771252448754L;
623 Il manque un espace insécable. => 		private static final long serialVersionUID = -1172968771252448754L;

625 Mot inconnu : ParseException => 		public ParseException(String erreur){
625 Il manque un espace avant la parenthèse. => 		public ParseException(String erreur){

626 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     		super (erreur);
626 Incohérence : espace et tabulation. =>     		super (erreur);

627 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     	}
627 Incohérence : espace et tabulation. =>     	}

628 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }
