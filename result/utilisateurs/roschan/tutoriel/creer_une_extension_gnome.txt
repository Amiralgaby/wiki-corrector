2 Mot inconnu : extensions_GNOME => {{tag>gnome tutoriel programmation environnements personnalisation extensions_GNOME BROUILLON}}

5 Il manque un espace insécable. => ====== Tutoriel : programmer une extension GNOME Shell ======

13 Guillemets typographiques ouvrants. => J'ai appris à faire des extensions "en autodidacte" et mes conseils sont sans aucun doute perfectibles, je ne suis en aucun cas une autorité en la matière.</note>
13 Guillemets typographiques fermants. => J'ai appris à faire des extensions "en autodidacte" et mes conseils sont sans aucun doute perfectibles, je ne suis en aucun cas une autorité en la matière.</note>

16 Il manque un espace insécable. => ==== Qu'est GNOME Shell ? ====

18 Mot inconnu : Mutter => GNOME est un ensemble de logiciels libres formant un environnement de bureau. Depuis la version 3 de cet environnement, GNOME Shell constitue le //shell graphique// de l'[[:environnements|environnement]] GNOME, c'est-à-dire qu'il fournit l'interface graphique venant se greffer autour du [[:gestionnaire de fenêtres]] (nommé [[:Mutter]]).

20 Avec une unité de mesure, mettez un espace insécable. => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs.
20 Mot inconnu : xx => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs.
20 Mot inconnu : xx => Tous les 6 mois, aux alentours de l'équinoxe, une version stable de GNOME est diffusée, numérotée 3.xx, où xx est un numéro pair. Les distributeurs (les personnes qui mettent à disposition les paquets des distributions) mettent alors quelques jours à quelques mois avant de proposer ces paquets aux utilisateurs.

22 Mot inconnu : Nautilus => <note>Il est possible, notamment avec les Ubuntu antérieurs à mi-2017, que les versions des logiciels GNOME utilisés ([[:Nautilus]], ...) ne correspondent pas aux versions de GNOME Shell.</note>
22 Une de ces ponctuations est superflue. => <note>Il est possible, notamment avec les Ubuntu antérieurs à mi-2017, que les versions des logiciels GNOME utilisés ([[:Nautilus]], ...) ne correspondent pas aux versions de GNOME Shell.</note>
22 Typographie : points de suspension. Utilisez le caractère dédié. => <note>Il est possible, notamment avec les Ubuntu antérieurs à mi-2017, que les versions des logiciels GNOME utilisés ([[:Nautilus]], ...) ne correspondent pas aux versions de GNOME Shell.</note>

27 Mot inconnu : javascript => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox).
27 Mot inconnu : Gjs => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox).
27 Mot inconnu : javascript => L'interface GNOME Shell a la particularité d'être codée en javascript. Ce code est ensuite interprété par un moteur de rendu nommé **Gjs** (basé sur le moteur de rendu javascript de Firefox).

29 Mot inconnu : javascript => Vous le savez peut-être, javascript a la particularité d'autoriser le //monkeypatching//, c'est-à-dire qu'une fonction du code peut être réécrite à un autre endroit du code, dynamiquement. On peut donc modifier l'aspect et le comportement de la quasi-totalité des composants de l'interface GNOME Shell !
29 Mot inconnu : monkeypatching => Vous le savez peut-être, javascript a la particularité d'autoriser le //monkeypatching//, c'est-à-dire qu'une fonction du code peut être réécrite à un autre endroit du code, dynamiquement. On peut donc modifier l'aspect et le comportement de la quasi-totalité des composants de l'interface GNOME Shell !
29 Il manque un espace insécable. => Vous le savez peut-être, javascript a la particularité d'autoriser le //monkeypatching//, c'est-à-dire qu'une fonction du code peut être réécrite à un autre endroit du code, dynamiquement. On peut donc modifier l'aspect et le comportement de la quasi-totalité des composants de l'interface GNOME Shell !

31 Il manque un espace insécable. => On va d'abord se procurer le code source de l'interface par défaut :

33 Guillemets typographiques ouvrants. => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives.
33 Mot inconnu : xx => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives.
33 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Rendez-vous à l'adresse ''https://github.com/GNOME/gnome-shell/tree/gnome-3-xx'' où xx est votre version de GNOME Shell, cliquez sur le bouton vert pour télécharger le code source au format .zip et décompressez-le avec un gestionnaire d'archives.

35 Guillemets fermants. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.
35 Mot inconnu : js => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.
35 Mot inconnu : ui => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.
35 Guillemets typographiques fermants. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.
35 Il manque probablement un trait d’union. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.
35 Il manque un espace insécable. => La partie du code qui nous intéresse est dans le dossier ''./js/ui'', vous pouvez ne conserver que ce dossier là si le reste vous encombre. Je vous conseille d'ailleurs de changer les permissions de ce dossier pour le mettre en lecture seule : nous n'allons jamais ni le modifier ni l'exécuter.

37 Mot inconnu : Javascript => ==== Javascript ====

39 Mot inconnu : javascript => Ce tutoriel n'est pas un cours sur le javascript, il est conseillé de se familiariser préalablement avec ce langage, qui n'est heureusement pas le plus compliqué en ce monde.

46 Guillemets typographiques ouvrants. => On va ici "jouer" avec GNOME Shell lui-même. Il est très très probable qu'on le fasse crasher à un moment ou à un autre, et il va donc falloir sérieusement améliorer la résilience aux crashs de votre installation.
46 Guillemets typographiques fermants. => On va ici "jouer" avec GNOME Shell lui-même. Il est très très probable qu'on le fasse crasher à un moment ou à un autre, et il va donc falloir sérieusement améliorer la résilience aux crashs de votre installation.

48 Il manque un espace insécable. => Voici quelques pistes, idées ou astuces pour cela :

50 Mot inconnu : Wayland => === Ne pas utiliser Wayland ===

51 Mot inconnu : Wayland => Au moindre bug un peu brutal, avec Wayland, la session se ferme. De plus, Wayland n'autorise pas le rechargement à chaud de la session, ce qui empêche de tester le code !
51 Mot inconnu : Wayland => Au moindre bug un peu brutal, avec Wayland, la session se ferme. De plus, Wayland n'autorise pas le rechargement à chaud de la session, ce qui empêche de tester le code !
51 Il manque un espace insécable. => Au moindre bug un peu brutal, avec Wayland, la session se ferme. De plus, Wayland n'autorise pas le rechargement à chaud de la session, ce qui empêche de tester le code !

53 Mot inconnu : Xorg => On va donc plutôt utiliser Xorg pour le développement.

55 Mot inconnu : Wayland => <note>N'oubliez pas de tester le résultat final avec Wayland quand même !</note>
55 Il manque un espace insécable. => <note>N'oubliez pas de tester le résultat final avec Wayland quand même !</note>

58 Guillemets typographiques ouvrants. => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres.
58 Mot inconnu : CSD => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres.
58 Guillemets typographiques fermants. => Utilisez des applications avec des boutons de fenêtre "CSD", de manière à ce que vous ne perdiez pas totalement le contrôle sur vos fenêtres en cas de disparition des barres de fenêtres.

60 Mot inconnu : Tilix => Un terminal comme [[:Tilix]] peut être utile par exemple.

65 Mot inconnu : share => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :
65 Mot inconnu : nautilus => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :
65 Guillemets typographiques fermants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :
65 Guillemets typographiques ouvrants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :
65 Guillemets typographiques fermants. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :
65 Il manque un espace insécable. => Dans ''~/.local/share/nautilus/scripts'', créez un fichier "Remplacer GNOME Shell" contenant seulement les lignes suivantes :

67 Il manque un espace insécable. => #!/bin/bash

69 Il manque un espace à côté du tiret. => gnome-shell -r

72 Guillemets typographiques ouvrants. => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau.
72 Guillemets typographiques fermants. => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau.
72 Mot inconnu : Nautilus => Vous pouvez maintenant entièrement recharger GNOME Shell à partir du menu "clic-droit" fournit par Nautilus sur les fichiers, et donc notamment sur le bureau.

74 Il manque un espace insécable. => <note important>N'utilisez pas ce script à la légère : **si l'écran se verrouille** alors que vous venez d'utiliser ce script, cela vous obligerait à redémarrer l'ordinateur pour pouvoir accéder de nouveau à votre session.</note>

77 Guillemets typographiques ouvrants. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 Typographie des composés chimiques. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 Mot inconnu : F2 => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 Guillemets typographiques fermants. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 S’il s’agit d’une action que le sujet peut accomplir, le verbe devrait être à l’infinitif. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 Mot inconnu : tty2 => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.
77 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Avec ''Ctrl+Alt+F2'', vous pouvez vous accédez à une console (tty2) où vous pouvez vous connecter en ligne de commande et par exemple annuler la manipulation ayant généré le crash en 1er lieu.

79 Mot inconnu : Wayland => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Mot inconnu : Weston => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Mot inconnu : tty2 => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Guillemets typographiques ouvrants. => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Mot inconnu : weston => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Guillemets typographiques fermants. => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Mot inconnu : Wayland => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).
79 Mot inconnu : Xorg => Si vous n'êtes pas à l'aise en ligne de commande, installez [[:Wayland#Weston|Weston]], il vous servira d'environnement de secours pouvant être lancé sur tty2 (par exemple) avec la commande ''weston'' (cela utilise Wayland, et peut donc être lancé en parallèle d'un environnement sur [[:Xorg]]).

81 Mot inconnu : débugguer => ==== Tester et débugguer ====

82 Mot inconnu : débuggage => <note help>J'admets ne pas être un grand expert en débuggage, il existe probablement mieux que ce que je suggère ici.</note>

84 Guillemets typographiques ouvrants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.
84 Typographie des composés chimiques. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.
84 Mot inconnu : F2 => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.
84 Guillemets typographiques fermants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.
84 Guillemets typographiques ouvrants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.
84 Guillemets typographiques fermants. => Avec ''Alt+F2'', on trouve une fenêtre pour lancer des commandes. Cette fenêtre accepte des commandes "spéciales" internes à GNOME Shell.

86 Il manque un espace insécable. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Guillemets typographiques ouvrants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Typographie des composés chimiques. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Mot inconnu : F2 => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Guillemets typographiques fermants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Guillemets typographiques ouvrants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Mot inconnu : runDialog => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Mot inconnu : js => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>
86 Guillemets typographiques fermants. => <note>Vous vous souvenez du code source téléchargé tout à l'heure ? La boîte de dialogue lancée par ''Alt+F2'' est codée par ''runDialog.js'', vous pouvez essayer d'y analyser son fonctionnement si ça vous amuse.</note>

89 Mot inconnu : Wayland => <note>Incompatible avec Wayland.</note>

90 Guillemets typographiques ouvrants. => La commande spéciale ''r'' recharge GNOME Shell, cela peut prendre quelques instants.
90 Guillemets typographiques fermants. => La commande spéciale ''r'' recharge GNOME Shell, cela peut prendre quelques instants.

94 Mot inconnu : Looking => === Looking Glass ===

95 Guillemets typographiques ouvrants. => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard.
95 Mot inconnu : lg => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard.
95 Guillemets typographiques fermants. => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard.
95 Mot inconnu : Looking => La commande spéciale ''lg'' ouvre //Looking Glass//, un outil dont on reparlera plus tard.

97 Guillemets typographiques ouvrants. => === Voir les logs "en direct" ===
97 Guillemets typographiques fermants. => === Voir les logs "en direct" ===

99 Mot inconnu : Wayland => <note>Incompatible avec Wayland.</note>

102 Mot inconnu : Caffeine => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous).
102 Mot inconnu : __tout => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous).
102 Mot inconnu : temps__ => Vous pouvez désactiver le verrouillage de l'écran dans //Paramètres -> Confidentialité//, ou encore installer l'extension **Caffeine** (activez-la __tout le temps__ que durera la manipulation ci-dessous).

106 Espace(s) en fin de ligne à supprimer. => Pour voir en direct les logs, et ainsi tester le fonctionnement de l'extension, entrez dans un terminal la commande 

107 Il manque un espace à côté du tiret. => <code>gnome-shell -r</code>

108 Guillemets typographiques ouvrants. => C'est beaucoup plus "violent" que de simplement recharger GNOME Shell, et donc plus long. Toutes les erreurs émises entre autres par les extensions, mais aussi les messages ou les avertissements relatifs à d'autres librairies, apparaissent maintenant dans le terminal.
108 Guillemets typographiques fermants. => C'est beaucoup plus "violent" que de simplement recharger GNOME Shell, et donc plus long. Toutes les erreurs émises entre autres par les extensions, mais aussi les messages ou les avertissements relatifs à d'autres librairies, apparaissent maintenant dans le terminal.

113 Guillemets typographiques ouvrants. => On peut créer une extension en partant de zéro ou en //forkant// une extension existante, mais pour commencer, nous allons utiliser la méthode "classique" en lançant la commande
113 Guillemets typographiques fermants. => On peut créer une extension en partant de zéro ou en //forkant// une extension existante, mais pour commencer, nous allons utiliser la méthode "classique" en lançant la commande

114 Mot inconnu : gnome-shell-extension-tool => <code>gnome-shell-extension-tool --create-extension</code>
114 Mot inconnu : create-extension => <code>gnome-shell-extension-tool --create-extension</code>

116 Guillemets typographiques ouvrants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Mot inconnu : uuid => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Guillemets typographiques fermants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Guillemets typographiques ouvrants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Guillemets typographiques fermants. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Mot inconnu : share => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Mot inconnu : Nautilus => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Il manque un espace insécable. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).
116 Pas d’espace avant ce signe. => On vous demande un nom, une description et un identifiant ("uuid"). L'identifiant est souvent au format ''nom-extension@votre-pseudo'', inspirez-vous des identifiants d'extensions existants dans ''~/.local/share/gnome-shell/extensions/'' (mettez ce dossier dans vos signets Nautilus d'ailleurs ;-) ).

118 Mot inconnu : World => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') :
118 Mot inconnu : share => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') :
118 Mot inconnu : votre-uuid => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') :
118 Il manque un espace insécable. => L'extension qui vous est proposée pour débuter est un //Hello, World//, analysons les fichiers de son code source (situés dans ''~/.local/share/gnome-shell/extensions/''//votre-uuid//''/'') :

120 Mot inconnu : metadata => ==== metadata.json ====
120 Mot inconnu : json => ==== metadata.json ====

124 Guillemets typographiques ouvrants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules.
124 Guillemets typographiques fermants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules.
124 Guillemets typographiques fermants. => Entre 2 accolades, on a une liste de propriétés au format ''"clef": valeur'' séparées par des virgules.

126 Il manque un espace insécable. => Pour l'instant, il y a les clefs :

127 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;
127 Guillemets typographiques ouvrants. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;
127 Mot inconnu : uuid =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;
127 Guillemets typographiques fermants. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;
127 Il manque un espace insécable. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;
127 Il manque un espace insécable. =>   * ''uuid'' : obligatoire, doit correspondre au nom du dossier ;

128 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Guillemets typographiques ouvrants. =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Mot inconnu : name =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Guillemets typographiques fermants. =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Il manque un espace insécable. =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Mot inconnu : gnome-tweak-tool =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
128 Il manque un espace insécable. =>   * ''name'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
129 Guillemets typographiques ouvrants. =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
129 Guillemets typographiques fermants. =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
129 Il manque un espace insécable. =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
129 Mot inconnu : gnome-tweak-tool =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;
129 Il manque un espace insécable. =>   * ''description'' : obligatoire, apparaît dans [[:gnome-tweak-tool]] ;

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Guillemets typographiques ouvrants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Guillemets typographiques fermants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Il manque un espace insécable. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Mot inconnu : array =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Guillemets typographiques ouvrants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.
130 Guillemets typographiques fermants. =>   * ''shell-version'' : un tableau (array) de valeurs entre guillemets, séparées par des virgules. Ce sont les versions de GNOME Shell que vous déclarez supporter. Cela aide les utilisateurs à faire leur "tri" sur le site officiel, mais avec les réglages d'Ubuntu par défaut, une extension peut être installée même sur une version non supportée.

132 Mot inconnu : stylesheet => ==== stylesheet.css ====
132 Mot inconnu : css => ==== stylesheet.css ====

136 Mot inconnu : js => ==== extension.js ====

142 Mot inconnu : const => const St = imports.gi.St;
142 Il manque un espace insécable. => const St = imports.gi.St;

144 Mot inconnu : Toolkit => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...).
144 Une de ces ponctuations est superflue. => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...).
144 Typographie : points de suspension. Utilisez le caractère dédié. => St (Shell Toolkit) fournit un certain nombre de composants graphiques très utiles (des entrées de texte, des labels, des icônes, des boutons, ...).

146 Mot inconnu : javascript => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Mot inconnu : ui => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Guillemets typographiques fermants. => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Il manque un espace insécable. => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Mot inconnu : js => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Mot inconnu : tweener => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).
146 Mot inconnu : js => De plus, tous les fichiers javascript correspondant au code source de l'interface (''ui'') de GNOME Shell sont importables dans le code : ici, on rend accessibles le contenu de main.js et tweener.js (qui correspond aux animations).

148 Mot inconnu : const => const Main = imports.ui.main;
148 Il manque un espace insécable. => const Main = imports.ui.main;

149 Mot inconnu : const => const Tweener = imports.ui.tweener;
149 Mot inconnu : Tweener => const Tweener = imports.ui.tweener;
149 Il manque un espace insécable. => const Tweener = imports.ui.tweener;

152 Mot inconnu : text => let text, button;
152 Mot inconnu : button => let text, button;
152 Il manque un espace insécable. => let text, button;

154 Mot inconnu : function => function init() {
154 Mot inconnu : init => function init() {

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : button =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : Bin =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace avant la parenthèse. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : style_class =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Guillemets typographiques ouvrants. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : panel-button =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : reactive =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : can_focus =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : x_fill =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : y_fill =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : false =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : track_hover =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Il manque un espace insécable. =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });
155 Mot inconnu : true =>     button = new St.Bin({ style_class: 'panel-button', reactive: true, can_focus: true, x_fill: true, y_fill: false, track_hover: true });

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : Icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Il manque un espace avant la parenthèse. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : icon_name =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Il manque un espace insécable. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Guillemets typographiques ouvrants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : system-run-symbolic =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : style_class =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Il manque un espace insécable. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Guillemets typographiques ouvrants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Mot inconnu : system-status-icon =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });
156 Guillemets typographiques fermants. =>     let icon = new St.Icon({ icon_name: 'system-run-symbolic', style_class: 'system-status-icon' });

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button.set_child(icon);
157 Mot inconnu : button =>     button.set_child(icon);
157 Mot inconnu : set_child =>     button.set_child(icon);
157 Il manque un espace avant la parenthèse. =>     button.set_child(icon);
157 Mot inconnu : icon =>     button.set_child(icon);

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     button.connect('button-press-event', _showHello);
158 Mot inconnu : button =>     button.connect('button-press-event', _showHello);
158 Mot inconnu : connect =>     button.connect('button-press-event', _showHello);
158 Il manque un espace avant la parenthèse. =>     button.connect('button-press-event', _showHello);
158 Mot inconnu : button-press-event =>     button.connect('button-press-event', _showHello);
158 Mot inconnu : _showHello =>     button.connect('button-press-event', _showHello);

160 Mot inconnu : init => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Mot inconnu : button => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Mot inconnu : _showHello => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Il manque un espace insécable. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Mot inconnu : button-press-event => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques ouvrants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Mot inconnu : _showHello => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.
160 Guillemets typographiques fermants. => Le code ci-dessus est appelé au démarrage de GNOME Shell, **même si l'extension est désactivée**. La fonction init ne doit donc JAMAIS modifier l'interface graphique ni son comportement. Ici, la variable ''button'' précédemment créée a simplement été initialisée (voir [[https://developer.gnome.org/st/|la documentation de St]] pour plus de détails sur la signification des paramètres), et connectée à la fonction ''_showHello'' qu'on verra plus loin : '''button-press-event''' correspond à un clic sur bouton, chaque clic sur le bouton appellera donc le code de ''_showHello'', mais remarquez qu'on n'a pas encore ajouté le bouton à l'interface.

163 Mot inconnu : function => function enable() {
163 Mot inconnu : enable => function enable() {

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.panel._rightBox.insert_child_at_index(button, 0);
164 Il manque un espace. =>     Main.panel._rightBox.insert_child_at_index(button, 0);
164 Il manque un espace avant la parenthèse. =>     Main.panel._rightBox.insert_child_at_index(button, 0);
164 Mot inconnu : button =>     Main.panel._rightBox.insert_child_at_index(button, 0);

167 Mot inconnu : function => function disable() {
167 Mot inconnu : disable => function disable() {

168 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.panel._rightBox.remove_child(button);
168 Il manque un espace. =>     Main.panel._rightBox.remove_child(button);
168 Il manque un espace avant la parenthèse. =>     Main.panel._rightBox.remove_child(button);
168 Mot inconnu : button =>     Main.panel._rightBox.remove_child(button);

171 Guillemets typographiques ouvrants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.
171 Mot inconnu : enable => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.
171 Guillemets typographiques fermants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.
171 Guillemets typographiques ouvrants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.
171 Mot inconnu : disable => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.
171 Guillemets typographiques fermants. => La fonction ''enable'' est appelée si l'extension est activée. Elle apporte les modifications à l'interface. Toutes ces modifications doivent être annulées par la fonction ''disable'', qui est appelé quand on désactive une extension.

173 Il manque un espace insécable. => Ici, la modification consiste à ajouter un bouton en forme d'engrenage dans le panneau supérieur, le bouton étant celui qu'on a initialisé tout à l'heure. Cliquer sur le bouton déclenche la fonction suivante :

175 Mot inconnu : function => function _showHello() {
175 Mot inconnu : _showHello => function _showHello() {

176 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if (!text) {
176 Il manque un espace. =>     if (!text) {
176 Mot inconnu : text =>     if (!text) {

177 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Mot inconnu : text =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Il manque un espace. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Il manque un espace avant la parenthèse. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Mot inconnu : style_class =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Il manque un espace insécable. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Guillemets typographiques ouvrants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Mot inconnu : helloworld-label =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Mot inconnu : text =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Il manque un espace insécable. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Guillemets typographiques ouvrants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Mot inconnu : world =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Il manque un espace insécable. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });
177 Guillemets typographiques fermants. =>         text = new St.Label({ style_class: 'helloworld-label', text: "Hello, world!" });

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         Main.uiGroup.add_actor(text);
178 Il manque un espace avant la parenthèse. =>         Main.uiGroup.add_actor(text);
178 Mot inconnu : text =>         Main.uiGroup.add_actor(text);

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     }

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text.opacity = 255;
180 Mot inconnu : text =>     text.opacity = 255;
180 Mot inconnu : opacity =>     text.opacity = 255;
180 Il manque un espace insécable. =>     text.opacity = 255;

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     let monitor = Main.layoutManager.primaryMonitor;
181 Il manque un espace insécable. =>     let monitor = Main.layoutManager.primaryMonitor;

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : set_position =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : floor =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : width =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : width =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : floor =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Il manque un espace avant la parenthèse. =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : height =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : text =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));
182 Mot inconnu : height =>     text.set_position(monitor.x + Math.floor(monitor.width / 2 - text.width / 2), monitor.y + Math.floor(monitor.height / 2 - text.height / 2));

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : Tweener =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : addTween =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Il manque un espace avant la parenthèse. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : text =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : opacity =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Il manque un espace insécable. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : time =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Il manque un espace insécable. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Il manque un espace insécable. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Guillemets typographiques ouvrants. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : easeOutQuad =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : onComplete =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Il manque un espace insécable. =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });
183 Mot inconnu : _hideHello =>     Tweener.addTween(text, { opacity: 0, time: 2, transition: 'easeOutQuad', onComplete: _hideHello });

186 Il manque un espace insécable. => Ici, on a plusieurs concepts intéressants : celui d'acteur, qui est lié à [[https://fr.wikipedia.org/wiki/Clutter|la bibliothèque Clutter]].
186 Mot inconnu : Clutter => Ici, on a plusieurs concepts intéressants : celui d'acteur, qui est lié à [[https://fr.wikipedia.org/wiki/Clutter|la bibliothèque Clutter]].

188 Guillemets typographiques ouvrants. => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note>
188 Guillemets typographiques fermants. => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note>
188 Mot inconnu : Clutter => <note help>St est en fait une "surcouche" qui permet de rendre Clutter plus facile d'utilisation pour les usages courants de GNOME Shell, et d'uniformiser la manière d'y appliquer des thèmes.</note>

190 Mot inconnu : Clutter => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Nombre ordinal. Second : 2ᵈ. Seconde : 2ᵈᵉ. Seconds : 2ᵈˢ. Secondes : 2ᵈᵉˢ. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Mot inconnu : ClutterActor => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques ouvrants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.
190 Guillemets typographiques fermants. => Clutter fonctionne par la manipulation d'objets en 2D, nommés "acteurs", à l'intérieur d'un espace simulé en 3D. La classe de base d'un acteur est "ClutterActor", et tous les acteurs peuvent être positionnés, redimensionnés et tournés dans l'espace en 3D. La transparence est aussi gérée. Une transformation appliquée à l'acteur "parent" sera appliquée à ses acteurs "enfants". Voir la [[https://developer.gnome.org/clutter/stable/|vraie documentation]] pour plus de détails.

192 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Mot inconnu : text => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Il manque un espace insécable. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Mot inconnu : helloworld-label => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Guillemets typographiques ouvrants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Mot inconnu : stylesheet => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Mot inconnu : css => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''
192 Guillemets typographiques fermants. => Remarquez qu'on a appliqué à ''text'' une propriété relative au style : vous trouverez une classe ''helloworld-label'' dans le fichier ''stylesheet.css''

194 Mot inconnu : Tweener => Tweener concerne les animations, ici, on a une animation de disparition en fondu qui dure 2 secondes (d'ailleurs, si dans [[:gnome-tweak-tool]] on désactive les animations, le bouton n'a plus aucun effet visible puisque le label disparaît sitôt apparu), animation à la fin de laquelle on appelle ''_hideHello''
194 Mot inconnu : gnome-tweak-tool => Tweener concerne les animations, ici, on a une animation de disparition en fondu qui dure 2 secondes (d'ailleurs, si dans [[:gnome-tweak-tool]] on désactive les animations, le bouton n'a plus aucun effet visible puisque le label disparaît sitôt apparu), animation à la fin de laquelle on appelle ''_hideHello''
194 Guillemets typographiques ouvrants. => Tweener concerne les animations, ici, on a une animation de disparition en fondu qui dure 2 secondes (d'ailleurs, si dans [[:gnome-tweak-tool]] on désactive les animations, le bouton n'a plus aucun effet visible puisque le label disparaît sitôt apparu), animation à la fin de laquelle on appelle ''_hideHello''
194 Mot inconnu : _hideHello => Tweener concerne les animations, ici, on a une animation de disparition en fondu qui dure 2 secondes (d'ailleurs, si dans [[:gnome-tweak-tool]] on désactive les animations, le bouton n'a plus aucun effet visible puisque le label disparaît sitôt apparu), animation à la fin de laquelle on appelle ''_hideHello''
194 Guillemets typographiques fermants. => Tweener concerne les animations, ici, on a une animation de disparition en fondu qui dure 2 secondes (d'ailleurs, si dans [[:gnome-tweak-tool]] on désactive les animations, le bouton n'a plus aucun effet visible puisque le label disparaît sitôt apparu), animation à la fin de laquelle on appelle ''_hideHello''

197 Mot inconnu : function => function _hideHello() {
197 Mot inconnu : _hideHello => function _hideHello() {

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Main.uiGroup.remove_actor(text);
198 Il manque un espace avant la parenthèse. =>     Main.uiGroup.remove_actor(text);
198 Mot inconnu : text =>     Main.uiGroup.remove_actor(text);

199 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = null;
199 Mot inconnu : text =>     text = null;
199 Mot inconnu : null =>     text = null;
199 Il manque un espace insécable. =>     text = null;

203 Guillemets typographiques ouvrants. => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile.
203 Mot inconnu : World => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile.
203 Guillemets typographiques fermants. => C'était donc le fonctionnement de l'extension "Hello, World". Maintenant, on va chercher à faire une extension utile.

208 Il manque un espace insécable. => On ne crée par une extension pour le plaisir de créer une extension !

210 Il manque un espace insécable. => Une extension **rajoute une fonctionnalité là où elle manque** selon vous (ou des personnes avec qui vous parlez) ; exemples :
210 Il manque un espace insécable. => Une extension **rajoute une fonctionnalité là où elle manque** selon vous (ou des personnes avec qui vous parlez) ; exemples :

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Guillemets typographiques ouvrants. =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Guillemets typographiques fermants. =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Mot inconnu : dash =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Il manque un espace insécable. =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Mot inconnu : Dash =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]
211 Mot inconnu : to =>   * Pas envie d'ouvrir la vue "activités" pour voir les icônes du dash ? -> [[:Dash to Dock]]

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator
212 Il manque un espace insécable. =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator
212 Mot inconnu : Clipboard =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator
212 Mot inconnu : Indicator =>   * Pas envie d'un logiciel tiers pour gérer le presse-papier ? -> Clipboard Indicator

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie d'utiliser la recherche ni de parcourir la liste des applications ? -> des extensions proposant des menus avec les applications par catégories (Arc Menu, Gno-menu, etc.)
213 Il manque un espace insécable. =>   * Pas envie d'utiliser la recherche ni de parcourir la liste des applications ? -> des extensions proposant des menus avec les applications par catégories (Arc Menu, Gno-menu, etc.)
213 Mot inconnu : Gno-menu =>   * Pas envie d'utiliser la recherche ni de parcourir la liste des applications ? -> des extensions proposant des menus avec les applications par catégories (Arc Menu, Gno-menu, etc.)

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension
214 Mot inconnu : appfolders =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension
214 Il manque un espace insécable. =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension
214 Mot inconnu : Appfolders =>   * Pas envie de passer par la logithèque pour organiser vos //appfolders// ? -> Appfolders Management Extension

216 Il manque un espace insécable. => Ici, voilà qu'un [[https://forum.ubuntu-fr.org/viewtopic.php?id=1989116|problème récurrent embête les amateurs de films et séries sous-titrées]] !

218 Guillemets typographiques ouvrants. => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale).
218 Guillemets typographiques fermants. => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale).
218 Mot inconnu : Quan => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale).
218 Mot inconnu : Zhi => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale).
218 Mot inconnu : Gao => C'est vrai ça, impossible de bouger la petite "fenêtre" qui indique le changement du niveau de son ou de luminosité, donc chaque changement de volume ou de luminosité interrompt donc la compréhension de mon épisode passionnant de //Quan Zhi Gao Shou// ou toute autre chinoiserie dont j'aimerais pouvoir lire les sous-titres (à défaut de comprendre les acteurs de la version originale).

220 Il manque un espace insécable. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Guillemets typographiques ouvrants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Mot inconnu : osdWindow => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Mot inconnu : js => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Guillemets typographiques fermants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Guillemets typographiques ouvrants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Guillemets typographiques fermants. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Il manque un espace insécable. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.
220 Il manque un espace insécable. => Mais que vois-je dans [[#le code de GNOME Shell]] ? un fichier ''osdWindow.js'' qui contient précisément le code pour ces petites "fenêtres" gênantes ! Une extension peut donc résoudre ce problème ! De plus, ce n'est pas un problème très complexe, on va pouvoir le résoudre sans faire appel à des choses très compliquées.

222 Guillemets typographiques ouvrants. => Notre identifiant unique pour cet exemple sera ''move-osd-windows@maestrochan.fr''
222 Mot inconnu : move-osd-windows => Notre identifiant unique pour cet exemple sera ''move-osd-windows@maestrochan.fr''

223 S’il s’agit d’une action à accomplir, le verbe devrait être à l’infinitif. => <note tip>Le code final complet est installable sur le [[https://extensions.gnome.org/extension/1220/move-osd-windows/|site officiel]] des extensions GNOME Shell si vous désirez disposez des vrais fichiers complets.</note>

225 Mot inconnu : metadata => Voici son fichier metadata.json :
225 Mot inconnu : json => Voici son fichier metadata.json :
225 Il manque un espace insécable. => Voici son fichier metadata.json :

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Guillemets typographiques ouvrants. =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : _generated =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Guillemets typographiques fermants. =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Guillemets typographiques ouvrants. =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : Generated =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : by =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : SweetTooth =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : not =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Mot inconnu : edit =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Guillemets typographiques fermants. =>   "_generated": "Generated by SweetTooth, do not edit", 
228 Espace(s) en fin de ligne à supprimer. =>   "_generated": "Generated by SweetTooth, do not edit", 

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Guillemets typographiques ouvrants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Guillemets typographiques fermants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Guillemets typographiques ouvrants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : the =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : of =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : OSD =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : windows =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : sound =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Mot inconnu : luminosity =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Guillemets typographiques fermants. =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 
229 Espace(s) en fin de ligne à supprimer. =>   "description": "Change the position of OSD windows (sound & luminosity popups).", 

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "gettext-domain": "move-osd-windows", 
230 Guillemets typographiques ouvrants. =>   "gettext-domain": "move-osd-windows", 
230 Mot inconnu : gettext-domain =>   "gettext-domain": "move-osd-windows", 
230 Guillemets typographiques fermants. =>   "gettext-domain": "move-osd-windows", 
230 Guillemets typographiques ouvrants. =>   "gettext-domain": "move-osd-windows", 
230 Mot inconnu : move-osd-windows =>   "gettext-domain": "move-osd-windows", 
230 Guillemets typographiques fermants. =>   "gettext-domain": "move-osd-windows", 
230 Espace(s) en fin de ligne à supprimer. =>   "gettext-domain": "move-osd-windows", 

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "name": "Move OSD Windows", 
231 Guillemets typographiques ouvrants. =>   "name": "Move OSD Windows", 
231 Mot inconnu : name =>   "name": "Move OSD Windows", 
231 Guillemets typographiques fermants. =>   "name": "Move OSD Windows", 
231 Guillemets typographiques ouvrants. =>   "name": "Move OSD Windows", 
231 Mot inconnu : Move =>   "name": "Move OSD Windows", 
231 Mot inconnu : OSD =>   "name": "Move OSD Windows", 
231 Guillemets typographiques fermants. =>   "name": "Move OSD Windows", 
231 Espace(s) en fin de ligne à supprimer. =>   "name": "Move OSD Windows", 

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "shell-version": [
232 Guillemets typographiques ouvrants. =>   "shell-version": [
232 Guillemets typographiques fermants. =>   "shell-version": [

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.18", 
233 Guillemets typographiques ouvrants. =>     "3.18", 
233 Guillemets typographiques fermants. =>     "3.18", 
233 Espace(s) en fin de ligne à supprimer. =>     "3.18", 

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.20",
234 Guillemets typographiques ouvrants. =>     "3.20",
234 Guillemets typographiques fermants. =>     "3.20",

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.22", 
235 Guillemets typographiques ouvrants. =>     "3.22", 
235 Guillemets typographiques fermants. =>     "3.22", 
235 Espace(s) en fin de ligne à supprimer. =>     "3.22", 

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.24",
236 Guillemets typographiques ouvrants. =>     "3.24",
236 Guillemets typographiques fermants. =>     "3.24",

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     "3.26"
237 Guillemets typographiques ouvrants. =>     "3.26"
237 Guillemets typographiques fermants. =>     "3.26"

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   ], 
238 Pas d’espace avant ce signe. =>   ], 
238 Espace(s) en fin de ligne à supprimer. =>   ], 

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 
239 Guillemets typographiques ouvrants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 
239 Mot inconnu : url =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 
239 Guillemets typographiques fermants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 
239 Guillemets typographiques ouvrants. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 
239 Espace(s) en fin de ligne à supprimer. =>   "url": "https://github.com/Maestroschan/Move-OSD-Windows-GNOME-Extension", 

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Guillemets typographiques ouvrants. =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Mot inconnu : uuid =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Guillemets typographiques fermants. =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Guillemets typographiques ouvrants. =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Mot inconnu : move-osd-windows =>   "uuid": "move-osd-windows@maestroschan.fr", 
240 Espace(s) en fin de ligne à supprimer. =>   "uuid": "move-osd-windows@maestroschan.fr", 

241 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   "version": 1
241 Guillemets typographiques ouvrants. =>   "version": 1
241 Guillemets typographiques fermants. =>   "version": 1

245 Il manque un espace insécable. => <note>Ne vous préoccupez pas du numéro de version, il sera géré automatiquement par extensions.gnome.org ;-)</note>

249 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Commençons avec une 1ère ébauche du code d'extension.js \\
249 Mot inconnu : js => Commençons avec une 1ère ébauche du code d'extension.js \\

252 Mot inconnu : const => const Main = imports.ui.main;
252 Il manque un espace insécable. => const Main = imports.ui.main;

253 Mot inconnu : const => const OsdWindow = imports.ui.osdWindow;
253 Mot inconnu : OsdWindow => const OsdWindow = imports.ui.osdWindow;
253 Il manque un espace insécable. => const OsdWindow = imports.ui.osdWindow;

255 Il manque un espace insécable. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Guillemets typographiques ouvrants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Mot inconnu : osdWindow => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Mot inconnu : js => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Guillemets typographiques fermants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Guillemets typographiques ouvrants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Mot inconnu : js => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.
255 Guillemets typographiques fermants. => On importe ce dont on va avoir besoin : ''osdWindow.js'' concerne la petite fenêtre dont on veut modifier la position, et ''main.js'' nous permettra d'accéder à des choses comme le moniteur (écran d'affichage) et ses propriétés.

257 Mot inconnu : function => function init() { }
257 Mot inconnu : init => function init() { }

259 Guillemets typographiques ouvrants. => La fonction d'initialisation est vide, on fera tout dans le "enable".
259 Mot inconnu : enable => La fonction d'initialisation est vide, on fera tout dans le "enable".
259 Guillemets typographiques fermants. => La fonction d'initialisation est vide, on fera tout dans le "enable".

261 Mot inconnu : array => Avant tout, on va définir un //array// vide et deux fonctions :
261 Il manque un espace insécable. => Avant tout, on va définir un //array// vide et deux fonctions :

265 Mot inconnu : function => function injectToFunction(parent, name, func) {
265 Mot inconnu : injectToFunction => function injectToFunction(parent, name, func) {
265 Il manque un espace avant la parenthèse. => function injectToFunction(parent, name, func) {
265 Mot inconnu : name => function injectToFunction(parent, name, func) {
265 Mot inconnu : func => function injectToFunction(parent, name, func) {

266 Mot inconnu : origin => 	let origin = parent[name];
266 Mot inconnu : name => 	let origin = parent[name];
266 Il manque un espace insécable. => 	let origin = parent[name];

267 Mot inconnu : name => 	parent[name] = function() {
267 Mot inconnu : function => 	parent[name] = function() {

268 Mot inconnu : ret => 		let ret;
268 Il manque un espace insécable. => 		let ret;

269 Mot inconnu : ret => 		ret = origin.apply(this, arguments);
269 Mot inconnu : origin => 		ret = origin.apply(this, arguments);
269 Mot inconnu : apply => 		ret = origin.apply(this, arguments);
269 Il manque un espace avant la parenthèse. => 		ret = origin.apply(this, arguments);
269 Mot inconnu : this => 		ret = origin.apply(this, arguments);

270 Mot inconnu : ret => 			if (ret === undefined)
270 Mot inconnu : undefined => 			if (ret === undefined)

271 Mot inconnu : ret => 				ret = func.apply(this, arguments);
271 Mot inconnu : func => 				ret = func.apply(this, arguments);
271 Mot inconnu : apply => 				ret = func.apply(this, arguments);
271 Il manque un espace avant la parenthèse. => 				ret = func.apply(this, arguments);
271 Mot inconnu : this => 				ret = func.apply(this, arguments);

272 Mot inconnu : return => 			return ret;
272 Mot inconnu : ret => 			return ret;
272 Il manque un espace insécable. => 			return ret;

274 Mot inconnu : return => 	return origin;
274 Mot inconnu : origin => 	return origin;
274 Il manque un espace insécable. => 	return origin;

277 Mot inconnu : function => function removeInjection(object, injection, name) {
277 Mot inconnu : removeInjection => function removeInjection(object, injection, name) {
277 Il manque un espace avant la parenthèse. => function removeInjection(object, injection, name) {
277 Mot inconnu : object => function removeInjection(object, injection, name) {
277 Mot inconnu : name => function removeInjection(object, injection, name) {

278 Mot inconnu : name => 	if (injection[name] === undefined)
278 Mot inconnu : undefined => 	if (injection[name] === undefined)

279 Mot inconnu : delete => 		delete object[name];
279 Mot inconnu : object => 		delete object[name];
279 Mot inconnu : name => 		delete object[name];
279 Il manque un espace insécable. => 		delete object[name];

280 Mot inconnu : else => 	else

281 Mot inconnu : object => 		object[name] = injection[name];
281 Mot inconnu : name => 		object[name] = injection[name];
281 Mot inconnu : name => 		object[name] = injection[name];
281 Il manque un espace insécable. => 		object[name] = injection[name];

286 Guillemets typographiques ouvrants. => L'injection sera faite lors de l'exécution de la fonction ''enable'' :
286 Mot inconnu : enable => L'injection sera faite lors de l'exécution de la fonction ''enable'' :
286 Guillemets typographiques fermants. => L'injection sera faite lors de l'exécution de la fonction ''enable'' :
286 Il manque un espace insécable. => L'injection sera faite lors de l'exécution de la fonction ''enable'' :

288 Mot inconnu : function => function enable() {
288 Mot inconnu : enable => function enable() {

289 Mot inconnu : injectToFunction => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){
289 Il manque un espace avant la parenthèse. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){
289 Guillemets typographiques ouvrants. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){
289 Espace(s) surnuméraire(s) à supprimer. => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){
289 Mot inconnu : function => 	injections['show'] = injectToFunction(OsdWindow.OsdWindow.prototype, 'show',  function(){

290 Mot inconnu : this => 		let monitor = Main.layoutManager.monitors[this._monitorIndex];
290 Mot inconnu : _monitorIndex => 		let monitor = Main.layoutManager.monitors[this._monitorIndex];

291 Mot inconnu : h_percent => 		let h_percent = 40;
291 Il manque un espace insécable. => 		let h_percent = 40;

292 Mot inconnu : v_percent => 		let v_percent = -30;
292 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => 		let v_percent = -30;
292 Il manque un espace insécable. => 		let v_percent = -30;

294 Mot inconnu : h_percent => 		this._box.translation_x = h_percent * monitor.width / 100;
294 Mot inconnu : width => 		this._box.translation_x = h_percent * monitor.width / 100;
294 Il manque un espace insécable. => 		this._box.translation_x = h_percent * monitor.width / 100;

295 Mot inconnu : v_percent => 		this._box.translation_y = v_percent * monitor.height / 100;
295 Mot inconnu : height => 		this._box.translation_y = v_percent * monitor.height / 100;
295 Il manque un espace insécable. => 		this._box.translation_y = v_percent * monitor.height / 100;

299 Il manque un espace insécable. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : js => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : OsdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : OsdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques ouvrants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Guillemets typographiques fermants. => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.
299 Mot inconnu : osdWindow => Alors, que vient-on de faire ? Dans ''osdWindow.js'' (qu'on a importé dans la variable ''OsdWindow''), il existe l'objet ''OsdWindow'', dont le prototype définit une fonction ''show'', appelée quand on montre l'osdWindow à l'écran. On va injecter dans la fonction ''show'' de quoi modifier la position de l'osdWindow.

301 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Mot inconnu : _relayout => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Mot inconnu : OsdWindow => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Il manque un espace insécable. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques ouvrants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Mot inconnu : this => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Guillemets typographiques fermants. => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.
301 Mot inconnu : osdWindow => En lisant la fonction ''_relayout'' de l'objet ''OsdWindow'' (que je ne vous copie pas au milieu du code de l'extension pour ne pas porter à confusion), on comprend que la position est définie par ''this._box.translation_x'' et ''this._box.translation_y'' ; où ''this'' désigne l'osdWindow qu'on veut placer. On assigne donc de nouvelles valeurs à ces variables.

303 Guillemets typographiques ouvrants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Mot inconnu : h_percent => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Guillemets typographiques fermants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Guillemets typographiques ouvrants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Mot inconnu : v_percent => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Guillemets typographiques fermants. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 Il manque un espace insécable. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.
303 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => Si on avait mis 0 comme valeur pour ''h_percent'' et ''v_percent'', la fenêtre aurait été parfaitement centrée ; avec 40 et -30, la fenêtre sera dans le coin supérieur-droit.

305 Il manque un espace insécable. => Avant de vouloir tester ce qu'on a fait, il faut coder de quoi le retirer :

307 Mot inconnu : function => function disable() {
307 Mot inconnu : disable => function disable() {

308 Mot inconnu : arrayOSD => 	let arrayOSD = Main.osdWindowManager._osdWindows;
308 Il manque un espace insécable. => 	let arrayOSD = Main.osdWindowManager._osdWindows;

309 Il manque un espace insécable. => 	for (let i = 0; i < arrayOSD.length; i++) {
309 Mot inconnu : arrayOSD => 	for (let i = 0; i < arrayOSD.length; i++) {
309 Mot inconnu : length => 	for (let i = 0; i < arrayOSD.length; i++) {
309 Il manque un espace insécable. => 	for (let i = 0; i < arrayOSD.length; i++) {

310 Mot inconnu : arrayOSD => 		arrayOSD[i]._relayout();
310 Mot inconnu : _relayout => 		arrayOSD[i]._relayout();

311 Mot inconnu : arrayOSD => 		arrayOSD[i]._box.translation_x = 0;
311 Mot inconnu : _box => 		arrayOSD[i]._box.translation_x = 0;
311 Mot inconnu : translation_x => 		arrayOSD[i]._box.translation_x = 0;
311 Il manque un espace insécable. => 		arrayOSD[i]._box.translation_x = 0;

314 Mot inconnu : removeInjection => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show');
314 Il manque un espace avant la parenthèse. => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show');
314 Guillemets typographiques ouvrants. => 	removeInjection(OsdWindow.OsdWindow.prototype, injections, 'show');

317 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Mot inconnu : osd => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Mot inconnu : windows => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Mot inconnu : _relayout => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques ouvrants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').
317 Guillemets typographiques fermants. => Ici, pour toutes les "osd windows" existantes, on va remettre les valeurs de ''this._box.translation_x'' et ''this._box.translation_y'' à leurs valeurs initiales (la fonction _relayout() modifie ''this._box.translation_y'').

321 Typographie des composés chimiques. => Redémarrez GNOME Shell (Alt+F2 -> r -> Entrée) puis activez l'extension via [[:GNOME-Tweak-Tool]] par exemple.
321 Mot inconnu : F2 => Redémarrez GNOME Shell (Alt+F2 -> r -> Entrée) puis activez l'extension via [[:GNOME-Tweak-Tool]] par exemple.
321 Mot inconnu : GNOME-Tweak-Tool => Redémarrez GNOME Shell (Alt+F2 -> r -> Entrée) puis activez l'extension via [[:GNOME-Tweak-Tool]] par exemple.

327 Nombre ordinal. Premier : 1ᵉʳ. Première : 1ʳᵉ. Premiers : 1ᵉʳˢ. Premières : 1ʳᵉˢ. => Cette 1ère ébauche ne fait que déplacer le problème : l'utilisateur préférerait sans doute, quitte à s'encombrer d'une extension pour bouger la fenêtre, pouvoir choisir où il la bouge !
327 Il manque un espace insécable. => Cette 1ère ébauche ne fait que déplacer le problème : l'utilisateur préférerait sans doute, quitte à s'encombrer d'une extension pour bouger la fenêtre, pouvoir choisir où il la bouge !
327 Il manque un espace insécable. => Cette 1ère ébauche ne fait que déplacer le problème : l'utilisateur préférerait sans doute, quitte à s'encombrer d'une extension pour bouger la fenêtre, pouvoir choisir où il la bouge !

331 Il manque un espace insécable. => {{ http://i.imgur.com/fZY2jzV.png?400|L'arborescence complète une fois le projet terminé !}}

333 Mot inconnu : convenience => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Mot inconnu : js => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Il manque un espace insécable. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Il manque un espace insécable. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Guillemets typographiques ouvrants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Guillemets typographiques fermants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Guillemets typographiques ouvrants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".
333 Guillemets typographiques fermants. => Pour commencer, mettez dans votre dossier le fichier ''[[https://git.gnome.org//browse/gnome-shell-extensions/plain/lib/convenience.js|convenience.js]]'' ; étant proposé par les développeurs de GNOME Shell eux-mêmes, ce fichier est par défaut utilisé par beaucoup d'extensions, et est relativement standard : il fournit de quoi gérer facilement les aspects "paramétrage" et "internationalisation".

337 Guillemets typographiques ouvrants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).
337 Mot inconnu : schemas => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).
337 Guillemets typographiques fermants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).
337 Guillemets typographiques ouvrants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).
337 Il manque un espace. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).
337 Guillemets typographiques fermants. => Pour commencer, on va ajouter des paramètres. Dans un dossier ''schemas'', il faut avoir un fichier XML dont le nom soit ''org.gnome.shell.extensions.move-osd-windows.gschema.xml'' (remplacez bien sûr dans votre cas par votre propre nom d'extension).

339 Il manque un espace insécable. => Ce fichier contient les lignes suivantes : TODO
339 Mot inconnu : TODO => Ce fichier contient les lignes suivantes : TODO

343 Guillemets typographiques ouvrants. => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande
343 Mot inconnu : schemas => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande
343 Guillemets typographiques fermants. => En ouvrant un terminal dans le dossier ''schemas'', compilez le fichier XML avec la commande

344 Mot inconnu : glib-compile-schemas => <code>glib-compile-schemas .</code>

346 Mot inconnu : dconf-editor => On aura maintenant des //clés// dans [[:dconf-editor|dconf]] qui nous seront spécifiques (elles n'apparaissent pas dans //dconf-editor// tant qu'elles n'ont pas été explicitement réécrites).
346 Mot inconnu : dconf => On aura maintenant des //clés// dans [[:dconf-editor|dconf]] qui nous seront spécifiques (elles n'apparaissent pas dans //dconf-editor// tant qu'elles n'ont pas été explicitement réécrites).
346 Mot inconnu : dconf-editor => On aura maintenant des //clés// dans [[:dconf-editor|dconf]] qui nous seront spécifiques (elles n'apparaissent pas dans //dconf-editor// tant qu'elles n'ont pas été explicitement réécrites).

348 Il manque un espace insécable. => <note>Les types possibles pour les clés de paramètres sont : FIXME
348 Mot inconnu : FIXME => <note>Les types possibles pour les clés de paramètres sont : FIXME

349 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "s", une chaîne de caractères 
349 Guillemets typographiques ouvrants. =>   * "s", une chaîne de caractères 
349 Guillemets typographiques fermants. =>   * "s", une chaîne de caractères 
349 Espace(s) en fin de ligne à supprimer. =>   * "s", une chaîne de caractères 

350 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "as", un tableau de chaînes de caractères
350 Guillemets typographiques ouvrants. =>   * "as", un tableau de chaînes de caractères
350 Guillemets typographiques fermants. =>   * "as", un tableau de chaînes de caractères

351 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "b", un booléen (true/false)
351 Guillemets typographiques ouvrants. =>   * "b", un booléen (true/false)
351 Guillemets typographiques fermants. =>   * "b", un booléen (true/false)
351 Mot inconnu : true =>   * "b", un booléen (true/false)
351 Mot inconnu : false =>   * "b", un booléen (true/false)

352 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "i", un entier
352 Guillemets typographiques ouvrants. =>   * "i", un entier
352 Guillemets typographiques fermants. =>   * "i", un entier

353 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * "ai", un tableau d'entiers
353 Guillemets typographiques ouvrants. =>   * "ai", un tableau d'entiers
353 S’il s’agit d’un impératif, écrivez “aie”. =>   * "ai", un tableau d'entiers
353 Guillemets typographiques fermants. =>   * "ai", un tableau d'entiers

354 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * ...
354 Typographie : points de suspension. Utilisez le caractère dédié. =>   * ...

360 Guillemets typographiques ouvrants. => <note help>"Je suis nul en anglais, pourquoi ne pas avoir fait directement en français ?", direz-vous. Même si vous n'êtes pas polyglotte, je suggère quand même de faire l'extension en anglais puis de traduire en français, pour que des contributeurs débutants puissent ensuite traduire dans leur propre langue en prenant appui sur les fichiers adéquats proposés pour le français.</note>
360 Il manque un espace insécable. => <note help>"Je suis nul en anglais, pourquoi ne pas avoir fait directement en français ?", direz-vous. Même si vous n'êtes pas polyglotte, je suggère quand même de faire l'extension en anglais puis de traduire en français, pour que des contributeurs débutants puissent ensuite traduire dans leur propre langue en prenant appui sur les fichiers adéquats proposés pour le français.</note>
360 Guillemets typographiques fermants. => <note help>"Je suis nul en anglais, pourquoi ne pas avoir fait directement en français ?", direz-vous. Même si vous n'êtes pas polyglotte, je suggère quand même de faire l'extension en anglais puis de traduire en français, pour que des contributeurs débutants puissent ensuite traduire dans leur propre langue en prenant appui sur les fichiers adéquats proposés pour le français.</note>

364 Mot inconnu : Poedit => Installez un logiciel comme [[:Poedit]] ou [[:GNOME-Translate]] afin de pouvoir facilement éditer et compiler les fichiers de traduction.

368 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Pour gérer facilement les langues et les clés dconf, on va modifier le code ainsi :
368 Mot inconnu : dconf =>  Pour gérer facilement les langues et les clés dconf, on va modifier le code ainsi :
368 Il manque un espace insécable. =>  Pour gérer facilement les langues et les clés dconf, on va modifier le code ainsi :

369 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * le ''_''
369 Guillemets typographiques ouvrants. =>   * le ''_''
369 Guillemets typographiques fermants. =>   * le ''_''

370 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * le get truc
370 Mot inconnu : get =>   * le get truc

371 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * lien vers la version finale du code

372 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * +gros warning sa race à ce stade parce que c'est risqué hein

374 Mot inconnu : prefs => ==== prefs.js ====
374 Mot inconnu : js => ==== prefs.js ====

376 Mot inconnu : Javascript => Jusqu'à présent, notre code Javascript modifiait GNOME Shell, les erreurs ou avertissements apparaissaient dans la console si besoin, et il fallait tout recharger pour voir les modifications.

378 Mot inconnu : GTK => Ici, nous allons faire une fenêtre avec des éléments graphiques GTK+ 3, dont le code sera rechargé à chaque fois que vous cliquerez sur le petit "engrenage" en face du nom de l'extension dans l'Outil de personnalisation GNOME. Les seules erreurs qu'on verra sont celles qui bloqueront le chargement initial de la fenêtre, et on ne les verra pas dans la console, mais à la place du contenu de la fenêtre.
378 Guillemets typographiques ouvrants. => Ici, nous allons faire une fenêtre avec des éléments graphiques GTK+ 3, dont le code sera rechargé à chaque fois que vous cliquerez sur le petit "engrenage" en face du nom de l'extension dans l'Outil de personnalisation GNOME. Les seules erreurs qu'on verra sont celles qui bloqueront le chargement initial de la fenêtre, et on ne les verra pas dans la console, mais à la place du contenu de la fenêtre.
378 Guillemets typographiques fermants. => Ici, nous allons faire une fenêtre avec des éléments graphiques GTK+ 3, dont le code sera rechargé à chaque fois que vous cliquerez sur le petit "engrenage" en face du nom de l'extension dans l'Outil de personnalisation GNOME. Les seules erreurs qu'on verra sont celles qui bloqueront le chargement initial de la fenêtre, et on ne les verra pas dans la console, mais à la place du contenu de la fenêtre.

380 Il manque un espace insécable. => On commence par les importations nécessaires :

390 Il manque un espace avant la parenthèse. => N'hésitez pas à lire les codes d'autres extensions, pour les comprendre, s'en inspirer, voire copier ou adapter des petits bouts de code (citez leurs auteurs quand même hein) si la licence utilisée le permet((pas de souci normalement, les extensions de extensions.gnome.org sont toutes compatibles GPLv2)). \\
390 Mot inconnu : GPLv2 => N'hésitez pas à lire les codes d'autres extensions, pour les comprendre, s'en inspirer, voire copier ou adapter des petits bouts de code (citez leurs auteurs quand même hein) si la licence utilisée le permet((pas de souci normalement, les extensions de extensions.gnome.org sont toutes compatibles GPLv2)). \\

391 Il manque un espace insécable. => Il est par exemple possible qu'il existe déjà des extensions modifiant déjà en partie l'interface presque comme vous aimeriez le faire, comprendre leur fonctionnement est donc intéressant. Imaginons qu'on veuille ajouter un raccourci clavier pour ouvrir un menu : plusieurs extensions le proposent, analysez les fonctions utilisées en lisant leur code source !
391 Il manque un espace insécable. => Il est par exemple possible qu'il existe déjà des extensions modifiant déjà en partie l'interface presque comme vous aimeriez le faire, comprendre leur fonctionnement est donc intéressant. Imaginons qu'on veuille ajouter un raccourci clavier pour ouvrir un menu : plusieurs extensions le proposent, analysez les fonctions utilisées en lisant leur code source !

397 Il manque un trait d’union. => Parce que je préfère ne parler que de ce que je comprends, j'ai très peu abordé certains aspects du développement d'extensions pourtant très puissants. En voici quelques uns :
397 Il manque un espace insécable. => Parce que je préfère ne parler que de ce que je comprends, j'ai très peu abordé certains aspects du développement d'extensions pourtant très puissants. En voici quelques uns :

398 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  TODO
398 Mot inconnu : TODO =>  TODO

399 Mot inconnu : Clutter => ==== Clutter ====

400 Mot inconnu : Tweener => ==== Tweener ====

401 Mot inconnu : DBus => ==== DBus ====

402 Mot inconnu : Bash => ==== Bash ====

408 Mot inconnu : GitHub => Il est conseillé de publier le code sur une plateforme comme [[https://github.com|GitHub]] ou BitBucket, afin que d'autres personnes puissent collaborer au code source.
408 Mot inconnu : BitBucket => Il est conseillé de publier le code sur une plateforme comme [[https://github.com|GitHub]] ou BitBucket, afin que d'autres personnes puissent collaborer au code source.

410 Mot inconnu : GitHub => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation.
410 Guillemets typographiques ouvrants. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation.
410 Accord de genre erroné entre “onglet” et “Issues”. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation.
410 Guillemets typographiques fermants. => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation.
410 Mot inconnu : requests => Le dépôt GitHub peut faire office de page de présentation de votre extension, l'onglet "Issues" permet de discuter des bugs ou des idées d'amélioration avec les utilisateurs de votre extension, et il est probable que des //pull requests// contenant notamment des traductions soient soumises à votre approbation.

414 Mot inconnu : GitHub => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".
414 Il faut élider “si” et l’accoler au pronom. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".
414 Guillemets typographiques ouvrants. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".
414 Mot inconnu : Add => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".
414 Mot inconnu : yours => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".
414 Guillemets typographiques fermants. => Quelques passionnés découvriront sans doute votre extension sur GitHub à un moment donné, mais pour que tous les utilisateurs trouvent votre extension si ils en ont besoin, il vous sera nécessaire de vous inscrire sur extensions.gnome.org et de cliquer sur "Add yours".

416 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Mot inconnu : js => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Mot inconnu : metadata => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Mot inconnu : json => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Il manque un espace insécable. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Accord de genre erroné : « icône » est féminin. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques ouvrants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Mot inconnu : metadata => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Mot inconnu : json => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.
416 Guillemets typographiques fermants. => Le site vous demande un fichier ''votre@uuid.zip'' contenant directement au minimum les fichiers ''extension.js'' et ''metadata.json'' ; soyez bien conscient que le code sera relu, et qu'il faut donc qu'il soit propre et compréhensible. Après validation (généralement, ça prend moins d'une semaine, vous serez averti par mail), vous pourrez ajouter une capture d'écran et un icône à la page de votre extension. La description est celle présente dans ''metadata.json'', il est préférable qu'elle soit en anglais.

418 Guillemets typographiques ouvrants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.
418 Mot inconnu : metadata => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.
418 Mot inconnu : json => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.
418 Guillemets typographiques fermants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.
418 Mot inconnu : ré-uploader => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.
418 Guillemets typographiques ouvrants. => Pour mettre à jour l'extension, ne vous préoccupez pas du numéro de version dans ''metadata.json'' (il change automatiquement), contentez-vous de ré-uploader un fichier ''votre@uuid.zip'' selon exactement la même méthode. Si l'identifiant de l'extension est le même, le site sait qu'il faudra mettre à jour la page existante, et la mise à jour de l'extension sera proposée aux utilisateurs.

421 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://wiki.gnome.org/Projects/GnomeShell/Extensions/StepByStepTutorial

422 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/clutter/

423 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/st/stable/

424 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://wiki.gnome.org/Projects/GnomeShell/DebuggingJavaScript

425 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * http://hosted.zeh.com.br/tweener/docs/en-us/

427 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/gnome-devel-demos/stable/beginner.js.html.fr

428 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * https://developer.gnome.org/gnome-devel-demos/stable/js.html.fr
