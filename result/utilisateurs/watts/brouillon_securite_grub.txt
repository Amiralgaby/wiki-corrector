2 Mot inconnu : GRUB => {{tag>Bionic GRUB Sécurité tutoriel BROUILLON}}

3 Mot inconnu : Grub2 => ====== Sécuriser Grub2 de manière avancée ======

5 Il manque un espace insécable. => Ce tutoriel s'adresse à des utilisateurs confirmés en utilisation de la ligne de commande et en dépannage de démarrage. Sinon, vous allez droit vers la réinstallation pure et simple ! 
5 Espace(s) en fin de ligne à supprimer. => Ce tutoriel s'adresse à des utilisateurs confirmés en utilisation de la ligne de commande et en dépannage de démarrage. Sinon, vous allez droit vers la réinstallation pure et simple ! 
7 Mot inconnu : root => Ce tutoriel explique comment sécuriser le menu [[:grub-pc|Grub]] de manière avancée. Si protéger l'édition des entrées est déjà un point important, il ne faut pas oublier que n'importe qui peut démarrer un noyau en mode [[:recovery_mode|recovery]], et obtenir une console root par la suite! Il serait donc avantageux de ne permettre l'accès à un noyau recovery qu'en possession du mot de passe. 
7 Il manque un espace insécable. => Ce tutoriel explique comment sécuriser le menu [[:grub-pc|Grub]] de manière avancée. Si protéger l'édition des entrées est déjà un point important, il ne faut pas oublier que n'importe qui peut démarrer un noyau en mode [[:recovery_mode|recovery]], et obtenir une console root par la suite! Il serait donc avantageux de ne permettre l'accès à un noyau recovery qu'en possession du mot de passe. 
7 Espace(s) en fin de ligne à supprimer. => Ce tutoriel explique comment sécuriser le menu [[:grub-pc|Grub]] de manière avancée. Si protéger l'édition des entrées est déjà un point important, il ne faut pas oublier que n'importe qui peut démarrer un noyau en mode [[:recovery_mode|recovery]], et obtenir une console root par la suite! Il serait donc avantageux de ne permettre l'accès à un noyau recovery qu'en possession du mot de passe. 

9 Avec une unité de mesure, mettez un espace insécable. => Il faut savoir que votre ordinateur ne sera pas forcément protégé à 100% (puisqu'il reste la possibilité de démarrer sur une clé live), mais avec un mot de passe bios et le chiffrement des données sensibles, il y a de quoi retenir (ou dégoûter) un potentiel attaquant.
9 Accord de nombre erroné avec « mot » : « bios » devrait être au singulier. => Il faut savoir que votre ordinateur ne sera pas forcément protégé à 100% (puisqu'il reste la possibilité de démarrer sur une clé live), mais avec un mot de passe bios et le chiffrement des données sensibles, il y a de quoi retenir (ou dégoûter) un potentiel attaquant.

11 Il manque un trait d’union. => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Il manque un espace insécable. => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : ubuntu => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : KDE => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : Neon => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : boot => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : Mint => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : Xubuntu => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : __legacy__ => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>
11 Mot inconnu : EFI => <note important>Ce tutoriel fait suite à celui ci : **[[:securite#securiser_le_demarrage_d_ubuntu_grub|Sécuriser le démarrage d'ubuntu]]**. Vous devez impérativement avoir effectué ce dernier, et que la manipulation fonctionne, avant de passer à la suite. J'ai testé ces manipulations en 18.04 sur Ubuntu, KDE Neon dual boot Linux Mint 19.1 et Xubuntu en __legacy__. L'EFI pose parfois des problèmes. Aussi, prenez toutes vos précautions.</note>

13 Mot inconnu : grub => <note warning>Les manipulations qui suivent peuvent vous faire complétement perdre l'accès à votre système. Aussi, pensez à faire une sauvegarde du fichier grub.cfg grâce à cette ligne:
13 Mot inconnu : cfg => <note warning>Les manipulations qui suivent peuvent vous faire complétement perdre l'accès à votre système. Aussi, pensez à faire une sauvegarde du fichier grub.cfg grâce à cette ligne:
13 Il manque un espace insécable. => <note warning>Les manipulations qui suivent peuvent vous faire complétement perdre l'accès à votre système. Aussi, pensez à faire une sauvegarde du fichier grub.cfg grâce à cette ligne:

15 Mot inconnu : sudo => <code bash>sudo cp -p /boot/grub/grub.cfg /boot/grub/grub.cfg.$(date --rfc-3339=date)</code>
15 Mot inconnu : cp => <code bash>sudo cp -p /boot/grub/grub.cfg /boot/grub/grub.cfg.$(date --rfc-3339=date)</code>
15 Il manque un espace à côté du tiret. => <code bash>sudo cp -p /boot/grub/grub.cfg /boot/grub/grub.cfg.$(date --rfc-3339=date)</code>
15 Mot inconnu : rfc-3339 => <code bash>sudo cp -p /boot/grub/grub.cfg /boot/grub/grub.cfg.$(date --rfc-3339=date)</code>

17 Mot inconnu : grub => La sauvegarde du fichier grub.cfg sera suffixé par la date de la sauvegarde, ce qui permettra de le retrouver plus facilement en cas de multiples sauvegardes.
17 Mot inconnu : cfg => La sauvegarde du fichier grub.cfg sera suffixé par la date de la sauvegarde, ce qui permettra de le retrouver plus facilement en cas de multiples sauvegardes.

19 Il manque un espace. => Voir également [[:tutoriel:comment_sauver_et_restaurer_un_fichier]].

21 Forme interrogative ? Mettez un trait d’union. => Munissez vous d'un support d'installation de Ubuntu (ou de toute autre distribution permettant d'avoir une [[:live_usb|session live]]), et vérifiez bien que vous pouvez démarrer dessus. Une fois en session live, il suffira d'exécuter

23 Mot inconnu : sudo => <code bash>sudo cp -p mnt/boot/grub/grub.cfg.DATE mnt/boot/grub/grub.cfg</code>
23 Mot inconnu : cp => <code bash>sudo cp -p mnt/boot/grub/grub.cfg.DATE mnt/boot/grub/grub.cfg</code>
23 Il manque un espace à côté du tiret. => <code bash>sudo cp -p mnt/boot/grub/grub.cfg.DATE mnt/boot/grub/grub.cfg</code>
23 Mot inconnu : mnt => <code bash>sudo cp -p mnt/boot/grub/grub.cfg.DATE mnt/boot/grub/grub.cfg</code>
23 Mot inconnu : mnt => <code bash>sudo cp -p mnt/boot/grub/grub.cfg.DATE mnt/boot/grub/grub.cfg</code>

25 Mot inconnu : mnt => si la racine de votre système est montée sur mnt. 
25 Espace(s) en fin de ligne à supprimer. => si la racine de votre système est montée sur mnt. 

28 Mot inconnu : grub => Il est également possible de modifier directement le grub.cfg pour pouvoir rebooter (mais il faut savoir ce qu'on fait).
28 Mot inconnu : cfg => Il est également possible de modifier directement le grub.cfg pour pouvoir rebooter (mais il faut savoir ce qu'on fait).
28 Mot inconnu : rebooter => Il est également possible de modifier directement le grub.cfg pour pouvoir rebooter (mais il faut savoir ce qu'on fait).

33 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Disposer des [[:sudo|droits d'administration]]

34 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Avoir [[:tutoriel:comment_sauver_et_restaurer_un_fichier|sauvegardé les fichiers]] importants: **/boot/grub/grub.cfg**, **/etc/grub.d/00_security_header**, **/etc/grub.d/10_linux** et **/etc/grub.d/30_os_prober** (si vous êtes en dual boot)
34 Il manque un espace. =>   * Avoir [[:tutoriel:comment_sauver_et_restaurer_un_fichier|sauvegardé les fichiers]] importants: **/boot/grub/grub.cfg**, **/etc/grub.d/00_security_header**, **/etc/grub.d/10_linux** et **/etc/grub.d/30_os_prober** (si vous êtes en dual boot)
34 Il manque un espace insécable. =>   * Avoir [[:tutoriel:comment_sauver_et_restaurer_un_fichier|sauvegardé les fichiers]] importants: **/boot/grub/grub.cfg**, **/etc/grub.d/00_security_header**, **/etc/grub.d/10_linux** et **/etc/grub.d/30_os_prober** (si vous êtes en dual boot)
34 Mot inconnu : boot =>   * Avoir [[:tutoriel:comment_sauver_et_restaurer_un_fichier|sauvegardé les fichiers]] importants: **/boot/grub/grub.cfg**, **/etc/grub.d/00_security_header**, **/etc/grub.d/10_linux** et **/etc/grub.d/30_os_prober** (si vous êtes en dual boot)

35 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Avoir en cas de besoin d'un [[:live_usb|live USB]] ou d'un [[:live_cd|live CD]] permettant [[:live_cd#session_livequ_est-ce_que_c_est|d'essayer Ubuntu]]

37 Mot inconnu : _security_header => Normalement à ce stade vous devriez posséder un fichier **00_security_header** ressemblant à celui ci:
37 Il manque un trait d’union. => Normalement à ce stade vous devriez posséder un fichier **00_security_header** ressemblant à celui ci:
37 Il manque un espace insécable. => Normalement à ce stade vous devriez posséder un fichier **00_security_header** ressemblant à celui ci:

41 Mot inconnu : cat => cat <<EOF
41 Mot inconnu : EOF => cat <<EOF

43 Mot inconnu : superusers => set superusers="toto"
43 Guillemets typographiques ouvrants. => set superusers="toto"
43 Guillemets typographiques fermants. => set superusers="toto"

45 Mot inconnu : password_pbkdf2 => password_pbkdf2 toto grub.pbkdf2.sha512.10000.891DC34A2C0492FD76FA0E2D01B37F13FB3B3FD5A57D0838C4894D895CFAE206F9A2EA5ED3C1286AF7C44A1BBF4C9D4E2AD4AE4EBD376F4674FC8ACCEF65D92D.49656B11F58E309EC930E7B0CD76F63E67840E65E50F1F23FED0EA9D668291DFB0D10608BEEEC3C9F33AB68895C2EFDD7F7CDEE1CB58FD96CF12B9A507EACCCC

46 Mot inconnu : menuentry_id_option => set menuentry_id_option="--unrestricted \$menuentry_id_option"
46 Mot inconnu : unrestricted => set menuentry_id_option="--unrestricted \$menuentry_id_option"
46 Mot inconnu : menuentry_id_option => set menuentry_id_option="--unrestricted \$menuentry_id_option"
46 Guillemets typographiques fermants. => set menuentry_id_option="--unrestricted \$menuentry_id_option"

47 Mot inconnu : EOF => EOF

50 Mot inconnu : superusers => Le mot de passe n'est pas identique, mais c'est normal. Ce qui compte, c'est que le script fasse son travail. En particulier, que le superusers toto soit créé et fonctionne. 
50 Espace(s) en fin de ligne à supprimer. => Le mot de passe n'est pas identique, mais c'est normal. Ce qui compte, c'est que le script fasse son travail. En particulier, que le superusers toto soit créé et fonctionne. 

52 Mot inconnu : _security_header => ===== Modifier le script 00_security_header =====

54 Guillemets typographiques ouvrants. => Nous allons maintenant effacer la ligne "EOF" rajouter au script les lignes suivantes:
54 Mot inconnu : EOF => Nous allons maintenant effacer la ligne "EOF" rajouter au script les lignes suivantes:
54 Guillemets typographiques fermants. => Nous allons maintenant effacer la ligne "EOF" rajouter au script les lignes suivantes:
54 Il manque un espace insécable. => Nous allons maintenant effacer la ligne "EOF" rajouter au script les lignes suivantes:

57 Mot inconnu : restricted => set restricted="--users toto"
57 Mot inconnu : users => set restricted="--users toto"
57 Guillemets typographiques fermants. => set restricted="--users toto"

58 Mot inconnu : superusers => export superusers

59 Mot inconnu : menuentry_id_option => export menuentry_id_option

60 Mot inconnu : restricted => export restricted

61 Mot inconnu : EOF => EOF

64 Mot inconnu : Grub => Nous utilisons une variable pour déterminer les utilisateurs autorisés à faire quelque chose (nous définirons le quelque chose plus tard) Les commandes **export** permettent de changer la portée des variables afin qu'elles soient valables dans les autres fichiers de configuration de Grub. 
64 Espace(s) en fin de ligne à supprimer. => Nous utilisons une variable pour déterminer les utilisateurs autorisés à faire quelque chose (nous définirons le quelque chose plus tard) Les commandes **export** permettent de changer la portée des variables afin qu'elles soient valables dans les autres fichiers de configuration de Grub. 

66 Mot inconnu : _security_header => Voilà maintenant à quoi ressemble **00_security_header**

70 Mot inconnu : cat => cat <<EOF
70 Mot inconnu : EOF => cat <<EOF

72 Mot inconnu : superusers => set superusers="toto"
72 Guillemets typographiques ouvrants. => set superusers="toto"
72 Guillemets typographiques fermants. => set superusers="toto"

74 Mot inconnu : password_pbkdf2 => password_pbkdf2 toto grub.pbkdf2.sha512.10000.891DC34A2C0492FD76FA0E2D01B37F13FB3B3FD5A57D0838C4894D895CFAE206F9A2EA5ED3C1286AF7C44A1BBF4C9D4E2AD4AE4EBD376F4674FC8ACCEF65D92D.49656B11F58E309EC930E7B0CD76F63E67840E65E50F1F23FED0EA9D668291DFB0D10608BEEEC3C9F33AB68895C2EFDD7F7CDEE1CB58FD96CF12B9A507EACCCC

75 Mot inconnu : menuentry_id_option => set menuentry_id_option="--unrestricted \$menuentry_id_option"
75 Mot inconnu : unrestricted => set menuentry_id_option="--unrestricted \$menuentry_id_option"
75 Mot inconnu : menuentry_id_option => set menuentry_id_option="--unrestricted \$menuentry_id_option"
75 Guillemets typographiques fermants. => set menuentry_id_option="--unrestricted \$menuentry_id_option"

76 Mot inconnu : restricted => set restricted="--users toto"
76 Mot inconnu : users => set restricted="--users toto"
76 Guillemets typographiques fermants. => set restricted="--users toto"

77 Mot inconnu : superusers => export superusers

78 Mot inconnu : menuentry_id_option => export menuentry_id_option

79 Mot inconnu : restricted => export restricted

80 Mot inconnu : EOF => EOF

83 Mot inconnu : _linux => ===== Modifier le script 10_linux =====

87 Mot inconnu : Grub => Pour restreindre les parties de Grub que nous voulons, il va falloir "verrouiller" les entrées au niveau du script **10_linux** qui les génèrent.
87 Guillemets typographiques ouvrants. => Pour restreindre les parties de Grub que nous voulons, il va falloir "verrouiller" les entrées au niveau du script **10_linux** qui les génèrent.
87 Guillemets typographiques fermants. => Pour restreindre les parties de Grub que nous voulons, il va falloir "verrouiller" les entrées au niveau du script **10_linux** qui les génèrent.
87 Mot inconnu : _linux => Pour restreindre les parties de Grub que nous voulons, il va falloir "verrouiller" les entrées au niveau du script **10_linux** qui les génèrent.

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Avec votre éditeur favori, allez à la ligne 132. Vous voyez normalement cette ligne:
89 Il manque un espace insécable. =>   * Avec votre éditeur favori, allez à la ligne 132. Vous voyez normalement cette ligne:

92 Mot inconnu : echo => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : menuentry => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : echo => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : title => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Guillemets typographiques fermants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : grub_quote => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : CLASS => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : menuentry_id_option => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : gnulinux => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : boot_device_id => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Guillemets typographiques fermants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : sed => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
92 Mot inconnu : submenu_indentation => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"

95 Accord de nombre erroné : « sous » est au pluriel. => C'est la ligne qui définit toutes les entrées des noyaux dans le sous menu "Options avancées". 
95 Accord de nombre erroné : « sous » devrait être au singulier. => C'est la ligne qui définit toutes les entrées des noyaux dans le sous menu "Options avancées". 
95 Guillemets typographiques ouvrants. => C'est la ligne qui définit toutes les entrées des noyaux dans le sous menu "Options avancées". 
95 Guillemets typographiques fermants. => C'est la ligne qui définit toutes les entrées des noyaux dans le sous menu "Options avancées". 
95 Espace(s) en fin de ligne à supprimer. => C'est la ligne qui définit toutes les entrées des noyaux dans le sous menu "Options avancées". 

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:
97 Mot inconnu : restricted =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:
97 Mot inconnu : restricted =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:
97 Il manque un trait d’union. =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:
97 Mot inconnu : menuentry_id_option =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:
97 Il manque un espace insécable. =>    * Nous allons écrire **\$restricted** afin d'inclure le contenu de la variable restricted dans la ligne d'entrée ci dessus et enlever la variable **\$menuentry_id_option**, qui annulerait ce qu'on vient d'écrire. Cela donne:

100 Mot inconnu : echo => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : menuentry => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : echo => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : title => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Guillemets typographiques fermants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : grub_quote => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : CLASS => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : restricted => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : gnulinux => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : boot_device_id => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Guillemets typographiques fermants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : sed => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Guillemets typographiques ouvrants. => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"
100 Mot inconnu : submenu_indentation => echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$restricted 'gnulinux-$version-$type-$boot_device_id' {" |sed "s/^/$submenu_indentation/"

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Faites maintenant:
103 Il manque un espace insécable. =>   * Faites maintenant:

105 Mot inconnu : sudo => <code bash>sudo update-grub</code>
105 Mot inconnu : update-grub => <code bash>sudo update-grub</code>

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Redémarrez votre ordinateur afin de vous assurer de la prise en compte correcte des options. Normalement, en allant dans le menu "Options Avancées", il est désormais impossible de démarrer un noyau sans entrer le mot de passe renseigné dans 00_security_header. Néanmoins, depuis le menu principal, il est possible de démarrer le dernier noyau.
107 Guillemets typographiques ouvrants. =>   * Redémarrez votre ordinateur afin de vous assurer de la prise en compte correcte des options. Normalement, en allant dans le menu "Options Avancées", il est désormais impossible de démarrer un noyau sans entrer le mot de passe renseigné dans 00_security_header. Néanmoins, depuis le menu principal, il est possible de démarrer le dernier noyau.
107 Guillemets typographiques fermants. =>   * Redémarrez votre ordinateur afin de vous assurer de la prise en compte correcte des options. Normalement, en allant dans le menu "Options Avancées", il est désormais impossible de démarrer un noyau sans entrer le mot de passe renseigné dans 00_security_header. Néanmoins, depuis le menu principal, il est possible de démarrer le dernier noyau.
107 Mot inconnu : _security_header =>   * Redémarrez votre ordinateur afin de vous assurer de la prise en compte correcte des options. Normalement, en allant dans le menu "Options Avancées", il est désormais impossible de démarrer un noyau sans entrer le mot de passe renseigné dans 00_security_header. Néanmoins, depuis le menu principal, il est possible de démarrer le dernier noyau.

109 Guillemets typographiques ouvrants. => <note warning>Pour sortir du menu "Options Avancées" sans avoir entré le mot de passe auparavant, il faut saisir le mot de passe!</note>
109 Guillemets typographiques fermants. => <note warning>Pour sortir du menu "Options Avancées" sans avoir entré le mot de passe auparavant, il faut saisir le mot de passe!</note>
109 Il manque un espace insécable. => <note warning>Pour sortir du menu "Options Avancées" sans avoir entré le mot de passe auparavant, il faut saisir le mot de passe!</note>

111 Mot inconnu : dual-boot => ===== En cas de dual-boot avec un autre Système type Debian =====

113 Mot inconnu : dual-boot => Si vous êtes en dual-boot avec un autre système fonctionnant de la même manière (avec un sous menu "Options Avancées"), les manipulations ci haut sont à faire sur le grub maître (celui qui se lance). 
113 Guillemets typographiques ouvrants. => Si vous êtes en dual-boot avec un autre système fonctionnant de la même manière (avec un sous menu "Options Avancées"), les manipulations ci haut sont à faire sur le grub maître (celui qui se lance). 
113 Guillemets typographiques fermants. => Si vous êtes en dual-boot avec un autre système fonctionnant de la même manière (avec un sous menu "Options Avancées"), les manipulations ci haut sont à faire sur le grub maître (celui qui se lance). 
113 Mot inconnu : grub => Si vous êtes en dual-boot avec un autre système fonctionnant de la même manière (avec un sous menu "Options Avancées"), les manipulations ci haut sont à faire sur le grub maître (celui qui se lance). 
113 Espace(s) en fin de ligne à supprimer. => Si vous êtes en dual-boot avec un autre système fonctionnant de la même manière (avec un sous menu "Options Avancées"), les manipulations ci haut sont à faire sur le grub maître (celui qui se lance). 

115 Mot inconnu : _os-prober => De plus, de manière personnelle, pour limiter les entrées répétitives, je désactive le script **30_os-prober** pour tout les grub non maître: 
115 Mot inconnu : grub => De plus, de manière personnelle, pour limiter les entrées répétitives, je désactive le script **30_os-prober** pour tout les grub non maître: 
115 Il manque un espace insécable. => De plus, de manière personnelle, pour limiter les entrées répétitives, je désactive le script **30_os-prober** pour tout les grub non maître: 
115 Espace(s) en fin de ligne à supprimer. => De plus, de manière personnelle, pour limiter les entrées répétitives, je désactive le script **30_os-prober** pour tout les grub non maître: 

117 Mot inconnu : sudo => <code bash>sudo chmod -x /etc/grub.d/30_os-prober</code>
117 Mot inconnu : chmod => <code bash>sudo chmod -x /etc/grub.d/30_os-prober</code>
117 Il manque un espace à côté du tiret. => <code bash>sudo chmod -x /etc/grub.d/30_os-prober</code>

119 Guillemets typographiques ouvrants. => Sinon, le problème est bien pire. Les entrées de l'OS maître se retrouvent dans le menu "Options avancées" des autres OS, et cela détruit tout nos efforts précédents.
119 Guillemets typographiques fermants. => Sinon, le problème est bien pire. Les entrées de l'OS maître se retrouvent dans le menu "Options avancées" des autres OS, et cela détruit tout nos efforts précédents.
119 Erreur d’accord probable avec « nos ». => Sinon, le problème est bien pire. Les entrées de l'OS maître se retrouvent dans le menu "Options avancées" des autres OS, et cela détruit tout nos efforts précédents.

121 Guillemets typographiques ouvrants. => Il reste à sécuriser le menu "Options Avancées" de l'autre OS (pour ses propres noyaux). Il faut le faire depuis le grub maître.
121 Guillemets typographiques fermants. => Il reste à sécuriser le menu "Options Avancées" de l'autre OS (pour ses propres noyaux). Il faut le faire depuis le grub maître.
121 Mot inconnu : grub => Il reste à sécuriser le menu "Options Avancées" de l'autre OS (pour ses propres noyaux). Il faut le faire depuis le grub maître.

123 Mot inconnu : _os-prober => ==== Modification de 30_os-prober ====

125 Mot inconnu : _os-prober => Le fichier **30_os-prober** génère le menu grub pour les autres systèmes détectés par os-prober. Il suffit de trouver la ligne concernant le menu "Options Avancées" et de faire la même manipulation que dans la partie précédente. 
125 Mot inconnu : grub => Le fichier **30_os-prober** génère le menu grub pour les autres systèmes détectés par os-prober. Il suffit de trouver la ligne concernant le menu "Options Avancées" et de faire la même manipulation que dans la partie précédente. 
125 Guillemets typographiques ouvrants. => Le fichier **30_os-prober** génère le menu grub pour les autres systèmes détectés par os-prober. Il suffit de trouver la ligne concernant le menu "Options Avancées" et de faire la même manipulation que dans la partie précédente. 
125 Guillemets typographiques fermants. => Le fichier **30_os-prober** génère le menu grub pour les autres systèmes détectés par os-prober. Il suffit de trouver la ligne concernant le menu "Options Avancées" et de faire la même manipulation que dans la partie précédente. 
125 Espace(s) en fin de ligne à supprimer. => Le fichier **30_os-prober** génère le menu grub pour les autres systèmes détectés par os-prober. Il suffit de trouver la ligne concernant le menu "Options Avancées" et de faire la même manipulation que dans la partie précédente. 

127 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Ligne 292, vous avez:
127 Il manque un espace insécable. =>   * Ligne 292, vous avez:

129 Mot inconnu : echo => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : submenu => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : gettext_printf => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : Advanced => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Il manque un espace. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : onstr => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : grub_quote => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : menuentry_id_option => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : osprober-gnulinux-advanced => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Mot inconnu : boot_device_id => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
129 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {"</code>

131 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Il faut remplacer **\$menuentry_id_option** par **\$restricted**, ce qui donne:
131 Mot inconnu : menuentry_id_option =>   * Il faut remplacer **\$menuentry_id_option** par **\$restricted**, ce qui donne:
131 Mot inconnu : restricted =>   * Il faut remplacer **\$menuentry_id_option** par **\$restricted**, ce qui donne:
131 Il manque un espace insécable. =>   * Il faut remplacer **\$menuentry_id_option** par **\$restricted**, ce qui donne:

133 Mot inconnu : echo => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : submenu => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : gettext_printf => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : Advanced => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Il manque un espace. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : onstr => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : grub_quote => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : restricted => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques ouvrants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : osprober-gnulinux-advanced => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Mot inconnu : boot_device_id => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>
133 Guillemets typographiques fermants. => <code bash>echo "submenu '$gettext_printf "Advanced options for %s" "${OS} $onstr" | grub_quote)' \$restricted 'osprober-gnulinux-advanced-$boot_device_id' {"</code>

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Puis, dans le terminal:
135 Il manque un espace insécable. =>   * Puis, dans le terminal:

137 Mot inconnu : sudo => <code bash>sudo update-grub</code>
137 Mot inconnu : update-grub => <code bash>sudo update-grub</code>

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Redémarrer pour vérifier. Cette fois, dès l'appui sur le menu "Options Avancées" de l'autre OS, le mot de passe est demandé.
139 Guillemets typographiques ouvrants. =>   * Redémarrer pour vérifier. Cette fois, dès l'appui sur le menu "Options Avancées" de l'autre OS, le mot de passe est demandé.
139 Guillemets typographiques fermants. =>   * Redémarrer pour vérifier. Cette fois, dès l'appui sur le menu "Options Avancées" de l'autre OS, le mot de passe est demandé.

143 Mot inconnu : grub => Vous avez désormais un menu grub somme toute assez robuste, ce qui n'empêche pas des précautions élémentaires (ne pas laisser son ordinateur portable sans surveillance par exemple).

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[:grub-pc]]

148 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[:securite]]

151 Il manque un espace insécable. => //Contributeurs principaux : [[:utilisateurs:watts]] 
151 Il manque un espace. => //Contributeurs principaux : [[:utilisateurs:watts]] 
151 Espace(s) en fin de ligne à supprimer. => //Contributeurs principaux : [[:utilisateurs:watts]] 
