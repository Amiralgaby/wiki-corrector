2 Mot inconnu : epub => {{tag> epub ebook matériel bibliothèque livre e-book}}
2 Mot inconnu : ebook => {{tag> epub ebook matériel bibliothèque livre e-book}}

5 Mot inconnu : ebook => ====== Lecteur d'ebook Kobo ======
5 Mot inconnu : Kobo => ====== Lecteur d'ebook Kobo ======

9 Mot inconnu : Kobo => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : by => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : Fnac => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Espace(s) surnuméraire(s) à supprimer. => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : Kobo => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : touch => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : ebook => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : reader => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : Kobo => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Apostrophe incorrecte. => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Guillemets typographiques ouvrants. => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : ebook => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : reader => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : ebooks => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : Fnac => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.
9 Mot inconnu : Eink => Le Kobo by Fnac  (Kobo touch) est un ebook reader (une liseuse électronique en français) né de l'association de Kobo, fabricant d 'ebook reader et distributeur d'ebooks et de la Fnac, qui utilise la technologie Eink.

11 Mot inconnu : slot => Il dispose du wifi et d'une capacité de 2Go (1400Mo utilisables) et d'un slot microSD afin d'augmenter sa capacité de stockage.
11 Mot inconnu : microSD => Il dispose du wifi et d'une capacité de 2Go (1400Mo utilisables) et d'un slot microSD afin d'augmenter sa capacité de stockage.

13 Mot inconnu : ebooks => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.
13 Mot inconnu : DRM => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.
13 Mot inconnu : Kobo => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.
13 Mot inconnu : Fnac => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.
13 Mot inconnu : Kobo => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.
13 Mot inconnu : Desktop => Il est possible de télécharger des ebooks gratuits et payants (ceux-ci avec un DRM donc non copiables), sur la boutique en ligne Kobo ou le site de la Fnac. L'ajout se fera alors automatiquement lors de la synchronisation, après installation du logiciel gratuit Kobo Desktop.

14 Mot inconnu : ebooks => Mais il est également possible de télécharger des ebooks sur d'autres sites que ces deux derniers, et de copier/coller les ebooks directement dans le Kobo.
14 Copier-coller pour la verbe ou l’action, copié-collé (et ses variantes) pour ce qui est copié-collé. => Mais il est également possible de télécharger des ebooks sur d'autres sites que ces deux derniers, et de copier/coller les ebooks directement dans le Kobo.
14 Mot inconnu : ebooks => Mais il est également possible de télécharger des ebooks sur d'autres sites que ces deux derniers, et de copier/coller les ebooks directement dans le Kobo.
14 Mot inconnu : Kobo => Mais il est également possible de télécharger des ebooks sur d'autres sites que ces deux derniers, et de copier/coller les ebooks directement dans le Kobo.

16 Mot inconnu : Kobo => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.
16 Mot inconnu : ebooks => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.
16 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.
16 Mot inconnu : epub => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.
16 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.
16 Mot inconnu : pdf => Le Kobo est compatible avec les ebooks aux formats .epub et .pdf.

18 Mot inconnu : Kobo => ===== Installation de Kobo Desktop =====
18 Mot inconnu : Desktop => ===== Installation de Kobo Desktop =====

20 Mot inconnu : Kobo => Kobo ne propose pas le logiciel pour Linux. Cela est bien problématique car c'est avec ce logiciel que s'effectuent les mises à jour, la synchronisation des achats sur les serveurs Kobo et Fnac. De plus il n'est pas possible d'utiliser le wifi tant que l'appareil n'est pas enregistré sur Kobo Desktop.
20 Mot inconnu : Kobo => Kobo ne propose pas le logiciel pour Linux. Cela est bien problématique car c'est avec ce logiciel que s'effectuent les mises à jour, la synchronisation des achats sur les serveurs Kobo et Fnac. De plus il n'est pas possible d'utiliser le wifi tant que l'appareil n'est pas enregistré sur Kobo Desktop.
20 Mot inconnu : Fnac => Kobo ne propose pas le logiciel pour Linux. Cela est bien problématique car c'est avec ce logiciel que s'effectuent les mises à jour, la synchronisation des achats sur les serveurs Kobo et Fnac. De plus il n'est pas possible d'utiliser le wifi tant que l'appareil n'est pas enregistré sur Kobo Desktop.
20 Mot inconnu : Kobo => Kobo ne propose pas le logiciel pour Linux. Cela est bien problématique car c'est avec ce logiciel que s'effectuent les mises à jour, la synchronisation des achats sur les serveurs Kobo et Fnac. De plus il n'est pas possible d'utiliser le wifi tant que l'appareil n'est pas enregistré sur Kobo Desktop.
20 Mot inconnu : Desktop => Kobo ne propose pas le logiciel pour Linux. Cela est bien problématique car c'est avec ce logiciel que s'effectuent les mises à jour, la synchronisation des achats sur les serveurs Kobo et Fnac. De plus il n'est pas possible d'utiliser le wifi tant que l'appareil n'est pas enregistré sur Kobo Desktop.

24 Mot inconnu : kobo-desktop => Le paquet kobo-desktop.deb est téléchargeable [[http://www.bloguelinux.ca//wp-content/uploads/kobo/kobo-desktop.deb|ici]].
24 Mot inconnu : deb => Le paquet kobo-desktop.deb est téléchargeable [[http://www.bloguelinux.ca//wp-content/uploads/kobo/kobo-desktop.deb|ici]].

28 Espace(s) en fin de ligne à supprimer. => <note important>Ne fonctionne pas directement sur architecture 64bits</note> 

30 Mot inconnu : kobo-desktop => Après avoir téléchargé le paquet kobo-desktop.deb, ouvrez le terminal et lancez:
30 Mot inconnu : deb => Après avoir téléchargé le paquet kobo-desktop.deb, ouvrez le terminal et lancez:
30 Il manque un espace insécable. => Après avoir téléchargé le paquet kobo-desktop.deb, ouvrez le terminal et lancez:

31 Guillemets typographiques ouvrants. => ''sudo dpkg -i kobo-desktop.deb''
31 Mot inconnu : sudo => ''sudo dpkg -i kobo-desktop.deb''
31 Mot inconnu : dpkg => ''sudo dpkg -i kobo-desktop.deb''
31 Il manque un espace à côté du tiret. => ''sudo dpkg -i kobo-desktop.deb''
31 Mot inconnu : kobo-desktop => ''sudo dpkg -i kobo-desktop.deb''
31 Mot inconnu : deb => ''sudo dpkg -i kobo-desktop.deb''
31 Guillemets typographiques fermants. => ''sudo dpkg -i kobo-desktop.deb''

33 Il manque un espace insécable. => En 64 bits : voir ceci [[http://ubuntuforums.org/showpost.php?p=11232322&postcount=9]].

35 Il manque un espace insécable. => Tout fonctionne, sauf qu'il faut un autre paquet sur Ubuntu 12.04 : libicu44. Vous pouvez la télécharger sur [[https://launchpad.net/ubuntu/precise/i386/libicu44/4.4.2-2]]. À part ça tout fonctionne parfaitement.
35 Mot inconnu : libicu44 => Tout fonctionne, sauf qu'il faut un autre paquet sur Ubuntu 12.04 : libicu44. Vous pouvez la télécharger sur [[https://launchpad.net/ubuntu/precise/i386/libicu44/4.4.2-2]]. À part ça tout fonctionne parfaitement.

37 Mot inconnu : Kobo => Une fois l'installation effectuée, vous pouvez lancer le Kobo Desktop via le menu (rubrique Autres) et brancher votre Kobo touch pour le configurer.
37 Mot inconnu : Desktop => Une fois l'installation effectuée, vous pouvez lancer le Kobo Desktop via le menu (rubrique Autres) et brancher votre Kobo touch pour le configurer.
37 Mot inconnu : Kobo => Une fois l'installation effectuée, vous pouvez lancer le Kobo Desktop via le menu (rubrique Autres) et brancher votre Kobo touch pour le configurer.
37 Mot inconnu : touch => Une fois l'installation effectuée, vous pouvez lancer le Kobo Desktop via le menu (rubrique Autres) et brancher votre Kobo touch pour le configurer.

39 Mot inconnu : Kobo => <note help>Un petit guide très simple d'installation de Kobo Desktop sur une architecture 64 bits existe aussi à cette adresse :
39 Mot inconnu : Desktop => <note help>Un petit guide très simple d'installation de Kobo Desktop sur une architecture 64 bits existe aussi à cette adresse :
39 Il manque un espace insécable. => <note help>Un petit guide très simple d'installation de Kobo Desktop sur une architecture 64 bits existe aussi à cette adresse :

42 Mot inconnu : Kobo => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Mot inconnu : Desktop => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Mot inconnu : x86 => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Mot inconnu : libzip1 => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Mot inconnu : libssl0 => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Espace(s) surnuméraire(s) à supprimer. => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :
42 Il manque un espace insécable. => <note help>Kobo Desktop sur machines x86 Ubuntu 12.04, 12.10, bibliothèques libzip1 libssl0.9.8  :

46 Il manque un espace insécable. => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : error => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : while => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : loading => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : shared => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : libraries => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Il manque un espace insécable. => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Il manque un espace insécable. => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : cannot => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : shared => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : object => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Il manque un espace insécable. => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : such => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//
46 Mot inconnu : directory => <note help>erreur :// /usr/local/Kobo/Kobo: error while loading shared libraries: libicuuc.so.44: cannot open shared object file: No such file or directory//

47 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

48 Il manque un espace insécable. => J'ai installé libicuuc.so.44 (pour Ubuntu 11.10 (?) depuis : [[http://pkgs.org/ubuntu-11.10/ubuntu-updates-main-i386/libicu44_4.4.2-2ubuntu0.11.10.1_i386.deb/download/]]</note>

50 Guillemets typographiques ouvrants. => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Guillemets typographiques fermants. => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Kobo => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Desktop => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Il manque un espace insécable. => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Il manque un espace insécable. => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Kobo => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Desktop => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Kobo => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Mot inconnu : Touch => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 
50 Espace(s) en fin de ligne à supprimer. => <note important>L'onglet "liseuse" du Kobo Desktop ne semble pas fonctionnel sous Ubuntu 12.10; il reste grisé; essais réalisés pour ce qu'il en est des aides et problèmes Kobo Desktop depuis un Kobo Touch version 2.0.3</note> 

51 Mot inconnu : Kobo => ===== Activation du Kobo sans installer Kobo Desktop =====
51 Mot inconnu : Kobo => ===== Activation du Kobo sans installer Kobo Desktop =====
51 Mot inconnu : Desktop => ===== Activation du Kobo sans installer Kobo Desktop =====

53 Mot inconnu : Kobo => Il est possible d'activer le Kobo sans avoir à installer Kobo Desktop, sans passer par Windows et sans même créer de compte Kobo. Pour cela, il suffit de :
53 Mot inconnu : Kobo => Il est possible d'activer le Kobo sans avoir à installer Kobo Desktop, sans passer par Windows et sans même créer de compte Kobo. Pour cela, il suffit de :
53 Mot inconnu : Desktop => Il est possible d'activer le Kobo sans avoir à installer Kobo Desktop, sans passer par Windows et sans même créer de compte Kobo. Pour cela, il suffit de :
53 Mot inconnu : Kobo => Il est possible d'activer le Kobo sans avoir à installer Kobo Desktop, sans passer par Windows et sans même créer de compte Kobo. Pour cela, il suffit de :
53 Il manque un espace insécable. => Il est possible d'activer le Kobo sans avoir à installer Kobo Desktop, sans passer par Windows et sans même créer de compte Kobo. Pour cela, il suffit de :

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Il manque un espace insécable. =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Mot inconnu : sudo =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Mot inconnu : apt-get =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Mot inconnu : install =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>
55 Mot inconnu : sqlite3 =>   - taper la commande suivante dans un terminal: <code> sudo apt-get install sqlite3 </code>

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - relier le Kobo à l'ordinateur Ubuntu via USB
56 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - relier le Kobo à l'ordinateur Ubuntu via USB
56 Mot inconnu : Kobo =>   - relier le Kobo à l'ordinateur Ubuntu via USB

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - monter le Kobo (monté automatiquement normalement)
57 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - monter le Kobo (monté automatiquement normalement)
57 Mot inconnu : Kobo =>   - monter le Kobo (monté automatiquement normalement)

58 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   - noter le point de montage utilisé (ici, on suppose /media/KOBOeReader)
58 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>   - noter le point de montage utilisé (ici, on suppose /media/KOBOeReader)
58 Incohérence avec “on” : “suppose” devrait être un verbe, un pronom objet, un adverbe de négation, etc. =>   - noter le point de montage utilisé (ici, on suppose /media/KOBOeReader)
58 Mot inconnu : KOBOeReader =>   - noter le point de montage utilisé (ici, on suppose /media/KOBOeReader)

59 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>
59 Mot inconnu : Trusty => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>
59 Mot inconnu : KOBOeReader => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>
59 Mot inconnu : laurent => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>
59 Mot inconnu : KOBOeReader => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>
59 Mot inconnu : laurent => <note important>A partir de Trusty 14.04, le point de montage évolue et passe de /media/KOBOeReader/ à /media/laurent/KOBOeReader/, ou laurent est le nom de l'utilisateur de la machine sous Ubuntu.</note>

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

61 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 Mot inconnu : DBeaver => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 Mot inconnu : SQLite => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 Mot inconnu : kobo => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 Mot inconnu : KoboReader => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.
61 Mot inconnu : sqlite => une variante par interface graphique consiste à installer un éditeur SQL comme DBeaver et de créer une connexion SQLite en indiquant le fichier .kobo/KoboReader.sqlite comme source. La suite de la procédure est similaire.

63 Mot inconnu : Kobo => ==== Kobo touch/mini ====
63 Mot inconnu : touch => ==== Kobo touch/mini ====

65 Mot inconnu : echo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Guillemets typographiques ouvrants. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : into => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Il manque un espace avant la parenthèse. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : foo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Guillemets typographiques ouvrants. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : foo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Guillemets typographiques ouvrants. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : foo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Guillemets typographiques ouvrants. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : foo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Guillemets typographiques ouvrants. => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : foo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : sqlite3 => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : KOBOeReader => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : kobo => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : KoboReader => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>
65 Mot inconnu : sqlite => <code>echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite</code>

67 Mot inconnu : Kobo => Le procédé a été testé avec succès sur un Kobo Touch acheté aux USA. Ce [[http://a3nm.net/blog/fnacbook_kobo_hacking.html|blog en anglais]] indique qu'il fonctionne également pour les Kobo Fnac (je confirme sur un kobo mini).
67 Mot inconnu : Touch => Le procédé a été testé avec succès sur un Kobo Touch acheté aux USA. Ce [[http://a3nm.net/blog/fnacbook_kobo_hacking.html|blog en anglais]] indique qu'il fonctionne également pour les Kobo Fnac (je confirme sur un kobo mini).
67 Mot inconnu : Kobo => Le procédé a été testé avec succès sur un Kobo Touch acheté aux USA. Ce [[http://a3nm.net/blog/fnacbook_kobo_hacking.html|blog en anglais]] indique qu'il fonctionne également pour les Kobo Fnac (je confirme sur un kobo mini).
67 Mot inconnu : Fnac => Le procédé a été testé avec succès sur un Kobo Touch acheté aux USA. Ce [[http://a3nm.net/blog/fnacbook_kobo_hacking.html|blog en anglais]] indique qu'il fonctionne également pour les Kobo Fnac (je confirme sur un kobo mini).
67 Mot inconnu : kobo => Le procédé a été testé avec succès sur un Kobo Touch acheté aux USA. Ce [[http://a3nm.net/blog/fnacbook_kobo_hacking.html|blog en anglais]] indique qu'il fonctionne également pour les Kobo Fnac (je confirme sur un kobo mini).

69 Mot inconnu : Kobo => ==== Kobo glo ====
69 Mot inconnu : glo => ==== Kobo glo ====

71 Mot inconnu : Kobo => Le procédé fonctionne avec les Kobo Glo (Fnac) mais il faut utiliser l'instruction suivante:
71 Mot inconnu : Glo => Le procédé fonctionne avec les Kobo Glo (Fnac) mais il faut utiliser l'instruction suivante:
71 Mot inconnu : Fnac => Le procédé fonctionne avec les Kobo Glo (Fnac) mais il faut utiliser l'instruction suivante:
71 Il manque un espace insécable. => Le procédé fonctionne avec les Kobo Glo (Fnac) mais il faut utiliser l'instruction suivante:

73 Mot inconnu : echo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : into => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Il manque un espace avant la parenthèse. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : sqlite3 => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : KOBOeReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : kobo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : KoboReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite
73 Mot inconnu : sqlite => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/KOBOeReader/.kobo/KoboReader.sqlite

76 Mot inconnu : Kobo => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Mot inconnu : Touch => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Mot inconnu : Kobo => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Guillemets typographiques ouvrants. => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Guillemets typographiques fermants. => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Mot inconnu : Fnac => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).
76 Mot inconnu : Glo => Sur un Kobo Touch Mark 3, donc Kobo "original" acheté à la Fnac en début 2012, c'est la commande à sept paramètres qui est acceptée comme pour le Glo (10/12/2013 après régression au firmware 2.4.0b).

78 Mot inconnu : Kobo => Attention pour une Kobo Glo achetée en décembre 2015 ne fonctionne pas ! La commande suivante fera l'affaire:
78 Mot inconnu : Glo => Attention pour une Kobo Glo achetée en décembre 2015 ne fonctionne pas ! La commande suivante fera l'affaire:
78 Il manque un espace insécable. => Attention pour une Kobo Glo achetée en décembre 2015 ne fonctionne pas ! La commande suivante fera l'affaire:
78 Il manque un espace insécable. => Attention pour une Kobo Glo achetée en décembre 2015 ne fonctionne pas ! La commande suivante fera l'affaire:

80 Mot inconnu : echo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : into => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Il manque un espace avant la parenthèse. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : sqlite3 => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : TON_USER => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : KOBOeReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : kobo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : KoboReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite
80 Mot inconnu : sqlite => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', '0', '0', '0', '0', '0', '0');" | sqlite3 /media/TON_USER/KOBOeReader/.kobo/KoboReader.sqlite

83 Mot inconnu : Kobo => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : Glo => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : FNAC => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : UserID => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Guillemets typographiques ouvrants. => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : abcdef12-3456-789a-bcde-f123456789ab => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Guillemets typographiques fermants. => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Confusion : « votre possession », « la vôtre ». => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : dump => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Mot inconnu : sqlite => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :
83 Il manque un espace insécable. => Kobo Glo HD achetée en juillet 2016 à la FNAC, succès de la commande suivante après plusieurs essais (La liseuse se monte après le choix de la langue puis de l'installation sans accès wifi. Attention remplacer l'UserID de l'exemple - ici 'abcdef12-3456-789a-bcde-f123456789ab' - par le votre, affiché par la commande .dump user de sqlite) :

85 Mot inconnu : sqlite3 => sqlite3 KoboReader.sqlite
85 Mot inconnu : KoboReader => sqlite3 KoboReader.sqlite
85 Mot inconnu : sqlite => sqlite3 KoboReader.sqlite

86 Mot inconnu : sqlite => sqlite>  .dump user
86 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sqlite>  .dump user
86 Mot inconnu : dump => sqlite>  .dump user

87 Mot inconnu : BEGIN => BEGIN TRANSACTION;
87 Il manque un espace insécable. => BEGIN TRANSACTION;

88 Mot inconnu : CREATE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace avant la parenthèse. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : UserKey => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : UserDisplayName => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : UserEmail => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : ___DeviceID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : FacebookAuthToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : HasMadePurchase => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : IsOneStoreAccount => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : IsChildAccount => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : RefreshToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : AuthToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : AuthType => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : Loyalty => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : PRIMARY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : KEY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
88 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));

89 Mot inconnu : INTO => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Guillemets typographiques ouvrants. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Guillemets typographiques fermants. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Il manque un espace avant la parenthèse. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : abcdef12-3456-789a-bcde-f123456789ab => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : abcdef12-3456-789a-bcde-f123456789ab => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Il manque un espace. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : false => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : true => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : false => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Il manque un espace. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Il manque un espace. => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);
89 Mot inconnu : NULL => INSERT INTO "user" VALUES('abcdef12-3456-789a-bcde-f123456789ab','abcdef12-3456-789a-bcde-f123456789ab','demobundle06_13@kobo.com','demobundle06_13@kobo.com',NULL,NULL,'false','true','false',NULL,NULL,NULL,NULL);

90 Mot inconnu : sqlite => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : INTO => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Guillemets typographiques ouvrants. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Guillemets typographiques fermants. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Il manque un espace avant la parenthèse. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Il manque un espace. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Il manque un espace. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : false => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : false => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : false => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Il manque un espace. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Il manque un espace. => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
90 Mot inconnu : NULL => sqlite> INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);

91 Mot inconnu : sqlite => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Mot inconnu : DELETE => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Mot inconnu : from => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Mot inconnu : WHERE => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Mot inconnu : UserID => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Guillemets typographiques ouvrants. => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Mot inconnu : abcdef12-3456-789a-bcde-f123456789ab => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";
91 Guillemets typographiques fermants. => sqlite> DELETE from user WHERE UserID="abcdef12-3456-789a-bcde-f123456789ab";

92 Mot inconnu : sqlite => sqlite>  .dump user
92 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sqlite>  .dump user
92 Mot inconnu : dump => sqlite>  .dump user

93 Mot inconnu : PRAGMA => PRAGMA foreign_keys=OFF;
93 Mot inconnu : foreign_keys => PRAGMA foreign_keys=OFF;
93 Il manque un espace insécable. => PRAGMA foreign_keys=OFF;

94 Mot inconnu : BEGIN => BEGIN TRANSACTION;
94 Il manque un espace insécable. => BEGIN TRANSACTION;

95 Mot inconnu : CREATE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace avant la parenthèse. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : UserKey => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : UserDisplayName => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : UserEmail => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : ___DeviceID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : FacebookAuthToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : HasMadePurchase => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : IsOneStoreAccount => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : IsChildAccount => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : RefreshToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : AuthToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : AuthType => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : Loyalty => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : PRIMARY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : KEY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));
95 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE, IsOneStoreAccount BIT DEFAULT FALSE, IsChildAccount BIT DEFAULT FALSE, RefreshToken TEXT, AuthToken TEXT, AuthType TEXT, Loyalty BLOB,PRIMARY KEY (UserID));

96 Mot inconnu : INTO => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Guillemets typographiques ouvrants. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Guillemets typographiques fermants. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Il manque un espace avant la parenthèse. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Il manque un espace. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Il manque un espace. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : false => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : false => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : false => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Il manque un espace. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Il manque un espace. => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);
96 Mot inconnu : NULL => INSERT INTO "user" VALUES('Linux User','Linux User',NULL,NULL,NULL,NULL,'false','false','false',NULL,NULL,NULL,NULL);

97 Il manque un espace insécable. => COMMIT;

98 Mot inconnu : sqlite => sqlite> .exit
98 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sqlite> .exit

100 Mot inconnu : Kobo => ==== Kobo aura ====

102 Il manque un espace insécable. => Selon la version du système, le procédé peut attendre non pas 7 mais 9 paramètres comme celle-ci-dessous :

105 Mot inconnu : echo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : into => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Il manque un espace avant la parenthèse. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Guillemets typographiques ouvrants. => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : foo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : sqlite3 => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : laurent => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : KOBOeReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : kobo => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : KoboReader => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite
105 Mot inconnu : sqlite => echo "insert into user values('foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo');" | sqlite3 /media/laurent/KOBOeReader/.kobo/KoboReader.sqlite

108 Mot inconnu : Kobo => Le présent sujet prend un intérêt accru parce que Kobo vient de resserrer fortement les contraintes empêchant une utilisation indépendante de sa liseuse : les mises à jour du Kobo Desktop et du firmware sous Windows sont à présent imposées, avec des services commerciaux qui apparaissent en page d'accueil au lieu des livres. Les réseaux sociaux, les fonctionnalités indiscrètes sont difficiles ou impossibles à désactiver, de sorte que le passage par Linux devient quasi indispensable lorsqu'on veut régresser vers une version encore indépendante du logiciel de la liseuse (<= 2.4 ou 2.5).
108 Il manque un espace insécable. => Le présent sujet prend un intérêt accru parce que Kobo vient de resserrer fortement les contraintes empêchant une utilisation indépendante de sa liseuse : les mises à jour du Kobo Desktop et du firmware sous Windows sont à présent imposées, avec des services commerciaux qui apparaissent en page d'accueil au lieu des livres. Les réseaux sociaux, les fonctionnalités indiscrètes sont difficiles ou impossibles à désactiver, de sorte que le passage par Linux devient quasi indispensable lorsqu'on veut régresser vers une version encore indépendante du logiciel de la liseuse (<= 2.4 ou 2.5).
108 Mot inconnu : Kobo => Le présent sujet prend un intérêt accru parce que Kobo vient de resserrer fortement les contraintes empêchant une utilisation indépendante de sa liseuse : les mises à jour du Kobo Desktop et du firmware sous Windows sont à présent imposées, avec des services commerciaux qui apparaissent en page d'accueil au lieu des livres. Les réseaux sociaux, les fonctionnalités indiscrètes sont difficiles ou impossibles à désactiver, de sorte que le passage par Linux devient quasi indispensable lorsqu'on veut régresser vers une version encore indépendante du logiciel de la liseuse (<= 2.4 ou 2.5).
108 Mot inconnu : Desktop => Le présent sujet prend un intérêt accru parce que Kobo vient de resserrer fortement les contraintes empêchant une utilisation indépendante de sa liseuse : les mises à jour du Kobo Desktop et du firmware sous Windows sont à présent imposées, avec des services commerciaux qui apparaissent en page d'accueil au lieu des livres. Les réseaux sociaux, les fonctionnalités indiscrètes sont difficiles ou impossibles à désactiver, de sorte que le passage par Linux devient quasi indispensable lorsqu'on veut régresser vers une version encore indépendante du logiciel de la liseuse (<= 2.4 ou 2.5).

110 Mot inconnu : Kobo => ==== Kobo Clara HD ====

111 Il manque un espace insécable. => Ce modèle monte le nombre de paramètres à 26 et indiquer des chaînes vides pour l'ensemble des paramètres fonctionne : 
111 Espace(s) en fin de ligne à supprimer. => Ce modèle monte le nombre de paramètres à 26 et indiquer des chaînes vides pour l'ensemble des paramètres fonctionne : 

113 Mot inconnu : into => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets typographiques fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''
113 Guillemets fermants. => insert into user values ('','','','','','','','','','','','','','','','','','','','','','','','','',''); #pour 26 paramètres il faut bien 26 champs vides ''

115 Il manque un espace insécable. => Ou alternativement :

117 Mot inconnu : INTO => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Il manque un espace avant la parenthèse. => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Mot inconnu : UserID => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Il manque un espace. => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Mot inconnu : UserKey => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Il manque un espace avant la parenthèse. => INSERT INTO user(UserID,UserKey) VALUES('1','');
117 Guillemets typographiques fermants. => INSERT INTO user(UserID,UserKey) VALUES('1','');

121 Mot inconnu : Kobo => Voici une procédure qui va permettre de suivre les évolutions de la Kobo (ou autre) :
121 Il manque un espace insécable. => Voici une procédure qui va permettre de suivre les évolutions de la Kobo (ou autre) :

122 Il manque un espace insécable. => Avant tout, on est prudent, on fait une petite sauvegarde :   
122 Espace(s) en fin de ligne à supprimer. => Avant tout, on est prudent, on fait une petite sauvegarde :   

124 Mot inconnu : MYUSERNAME => Linux-prompt> export MYUSERNAME=`whoami`
124 Mot inconnu : whoami => Linux-prompt> export MYUSERNAME=`whoami`

125 Mot inconnu : MYUSERNAME => Linux-prompt> cd /media/${MYUSERNAME}/KOBOeReader
125 Mot inconnu : KOBOeReader => Linux-prompt> cd /media/${MYUSERNAME}/KOBOeReader

126 Mot inconnu : cp => Linux-prompt> cp -R .kobo .kobo_save
126 Il manque un espace à côté du tiret. => Linux-prompt> cp -R .kobo .kobo_save
126 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Linux-prompt> cp -R .kobo .kobo_save
126 Mot inconnu : kobo => Linux-prompt> cp -R .kobo .kobo_save
126 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Linux-prompt> cp -R .kobo .kobo_save
126 Mot inconnu : kobo_save => Linux-prompt> cp -R .kobo .kobo_save

128 Il manque un espace insécable. => maintenant on va regarder la structure de la table :

130 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Linux-prompt> cd .kobo
130 Mot inconnu : kobo => Linux-prompt> cd .kobo

131 Mot inconnu : sqlite3 => Linux-prompt> sqlite3 KoboReader.sqlite 
131 Mot inconnu : KoboReader => Linux-prompt> sqlite3 KoboReader.sqlite 
131 Mot inconnu : sqlite => Linux-prompt> sqlite3 KoboReader.sqlite 
131 Espace(s) en fin de ligne à supprimer. => Linux-prompt> sqlite3 KoboReader.sqlite 

132 Mot inconnu : SQLite => SQLite version 3.8.2 2013-12-06 14:53:30

133 Guillemets fermants. => Enter ".help" for instructions
133 Mot inconnu : help => Enter ".help" for instructions
133 Guillemets typographiques fermants. => Enter ".help" for instructions

134 Mot inconnu : statements => Enter SQL statements terminated with a ";"
134 Mot inconnu : terminated => Enter SQL statements terminated with a ";"
134 Mot inconnu : with => Enter SQL statements terminated with a ";"
134 Guillemets fermants. => Enter SQL statements terminated with a ";"

135 Mot inconnu : sqlite => sqlite> .schema user
135 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sqlite> .schema user
135 Mot inconnu : schema => sqlite> .schema user

136 Mot inconnu : CREATE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace avant la parenthèse. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : UserKey => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : NOT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : NULL => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : UserDisplayName => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : UserEmail => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : ___DeviceID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : FacebookAuthToken => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : TEXT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : HasMadePurchase => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : DEFAULT => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : FALSE => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Il manque un espace. => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : PRIMARY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : KEY => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));
136 Mot inconnu : UserID => CREATE TABLE user(UserID TEXT NOT NULL,UserKey TEXT NOT NULL,UserDisplayName TEXT,UserEmail TEXT,___DeviceID TEXT,FacebookAuthToken TEXT,HasMadePurchase BIT DEFAULT FALSE,PRIMARY KEY (UserID));

137 Mot inconnu : sqlite => sqlite> select * from user;
137 Mot inconnu : from => sqlite> select * from user;
137 Il manque un espace insécable. => sqlite> select * from user;

138 Mot inconnu : dec75cef-493f-4da1-af8d-d7a7183fa3e5 => dec75cef-493f-4da1-af8d-d7a7183fa3e5|0a0e4b93-68fd455ab716-039e7c973dce|demobundle06_13@kobo.com|demobundle06_13@kobo.com|||false
138 Mot inconnu : a0e4b93-68fd455ab716-039e7c973dce => dec75cef-493f-4da1-af8d-d7a7183fa3e5|0a0e4b93-68fd455ab716-039e7c973dce|demobundle06_13@kobo.com|demobundle06_13@kobo.com|||false
138 Mot inconnu : false => dec75cef-493f-4da1-af8d-d7a7183fa3e5|0a0e4b93-68fd455ab716-039e7c973dce|demobundle06_13@kobo.com|demobundle06_13@kobo.com|||false

140 Mot inconnu : kobo => Avec cette description de la table on va entrer une ligne bidon qui va contenter la kobo et permettre de passer la procédure d'enregistrement via le web. Les champs suggérés ici doivent être adaptés en fonction de la description de la table user obtenue à l'étape précédente. J'ai constaté que la ligne suivante fonctionnait. Elle a l'avantage de bien se repérer.

142 Mot inconnu : sqlite => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : into => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : UserBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : KeyBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : DisplayBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : MailBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : DeviceBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : FaceBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');
142 Mot inconnu : PurchBidon => sqlite> insert into user values ('UserBidon','KeyBidon','DisplayBidon','MailBidon','DeviceBidon','FaceBidon','PurchBidon');

144 Il manque un espace insécable. => Maintenant on vérifie :

146 Mot inconnu : sqlite => sqlite> select * from user where userId='UserBidon';
146 Mot inconnu : from => sqlite> select * from user where userId='UserBidon';
146 Mot inconnu : where => sqlite> select * from user where userId='UserBidon';
146 Mot inconnu : userId => sqlite> select * from user where userId='UserBidon';
146 Mot inconnu : UserBidon => sqlite> select * from user where userId='UserBidon';

147 Mot inconnu : UserBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : KeyBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : DisplayBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : MailBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : DeviceBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : FaceBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon
147 Mot inconnu : PurchBidon => UserBidon|KeyBidon|DisplayBidon|MailBidon|DeviceBidon|FaceBidon|PurchBidon

149 Mot inconnu : sqlite => C'est OK, on quitte sqlite

151 Mot inconnu : sqlite => sqlite> .exit
151 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => sqlite> .exit

152 Espace(s) en fin de ligne à supprimer. => Linux-prompt> 

154 Mot inconnu : kobo => Maintenant redémarrez la kobo est utilisez la comme une clef mémoire USB. Si vous êtes avare de mémoire, détruisez la sauvegarde mais pour 24Mega, est-ce bien utile ?
154 Après “être”, le verbe ne devrait pas être conjugué à la 2ᵉ personne du pluriel. => Maintenant redémarrez la kobo est utilisez la comme une clef mémoire USB. Si vous êtes avare de mémoire, détruisez la sauvegarde mais pour 24Mega, est-ce bien utile ?
154 Mot inconnu : Mega => Maintenant redémarrez la kobo est utilisez la comme une clef mémoire USB. Si vous êtes avare de mémoire, détruisez la sauvegarde mais pour 24Mega, est-ce bien utile ?
154 Il manque un espace insécable. => Maintenant redémarrez la kobo est utilisez la comme une clef mémoire USB. Si vous êtes avare de mémoire, détruisez la sauvegarde mais pour 24Mega, est-ce bien utile ?
