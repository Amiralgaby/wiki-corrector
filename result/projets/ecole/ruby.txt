3 Guillemets typographiques ouvrants. => Professeur de la "leçon" FiFouille
3 Guillemets typographiques fermants. => Professeur de la "leçon" FiFouille
3 Mot inconnu : FiFouille => Professeur de la "leçon" FiFouille

10 Mot inconnu : Ca => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre.
10 Mot inconnu : Ca => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre.
10 Mot inconnu : binding => Ruby sert à plein de choses, de l'administration système, des scripts, de la génération de document (latex par exemple).Ca peut être un bon substitut à d'autre langage de script comme Perl ou python. Ca peut aussi servir pour des applications plus classiques comme vous le feriez pour du python avec un binding gtk ou des histoires du genre.

11 Mot inconnu : ruby => Aujourd'hui ruby est à la mode.

12 Incohérence avec “on” : “Rails” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => C'est aussi à la base de Ruby on Rails, le fameux framework web quifaittoutmemelecafé.
12 Mot inconnu : quifaittoutmemelecafé => C'est aussi à la base de Ruby on Rails, le fameux framework web quifaittoutmemelecafé.

14 Mot inconnu : ERB => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc
14 Mot inconnu : métalanguage => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc
14 Mot inconnu : html => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc
14 Mot inconnu : docbook => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc
14 Doublon. => ERB lui c'est une sorte de métalanguage où on peut insérer du code Ruby un peu comme on veut pour générer dynamiquement du html, latex, docbook, etc etc

15 Incohérence avec “On” : “Rails” devrait être un verbe, un pronom objet, un adverbe de négation, etc. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues'
15 Guillemets typographiques ouvrants. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues'
15 Guillemets typographiques fermants. => lui aussi il est utilisé dans Ruby On Rails, pour les 'vues'

21 Conjugaison erronée. Accord avec “les langages…”. Le verbe devrait être à la 3ᵉ personne du pluriel. => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise.
21 Espace(s) surnuméraire(s) à supprimer. => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise.
21 Mot inconnu : garbage => Comme les langages java python, D, C#,  Ruby a un garbage collector ça veut dire qu'il s'occupe tout seul de la gestion mémoire, pas besoin d'allouer ou libérer la mémoire qu'on utilise.

23 Accord de genre erroné : « java » est féminin. => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer.
23 Accord de genre erroné : « du » est un déterminant masculin. => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer.
23 Mot inconnu : lisp => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer.
23 Mot inconnu : scheme => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer.
23 Mot inconnu : ruby => Il est procédural (comme du C), orienté objet (comme du java), fonctionnel (comme lisp ou scheme). En ruby, tout est objet. Si vous ne savez pas ce que c'est, vous allez le sentir sans même qu'on ait à vous l'expliquer.

24 Il manque un espace insécable. => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise.
24 Guillemets typographiques ouvrants. => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise.
24 Guillemets typographiques fermants. => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise.
24 Mot inconnu : least => Une chose à ajouter aussi, Ruby a un principe intéressant dans son implémentation : le principe de "convention", least surprise.

26 Le verbe devrait être à l’infinitif. => Un exemple avec Ruby, si vous connaissez le fonctionnement général du langage, en général pour de nouveau type de donnés il y a moyen de s'en sortir sans même lire la doc, ça marche comme le reste ;)
26 Il manque un espace insécable. => Un exemple avec Ruby, si vous connaissez le fonctionnement général du langage, en général pour de nouveau type de donnés il y a moyen de s'en sortir sans même lire la doc, ça marche comme le reste ;)

28 Guillemets typographiques ouvrants. => Le grand troll actuel "Ruby c'est lent" alors oui, c'est moins rapide que d'autres langages de scripts comme du python par exemple.
28 Guillemets typographiques fermants. => Le grand troll actuel "Ruby c'est lent" alors oui, c'est moins rapide que d'autres langages de scripts comme du python par exemple.

29 Guillemets typographiques ouvrants. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus.
29 Guillemets typographiques fermants. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus.
29 Grands nombres : utilisez des espaces insécables. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus.
29 Mot inconnu : ruby => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus.
29 Il manque un trait d’union. => Moins "rapide", si vous voulez gérer un tableau de 500 000 éléments et réaliser un traitement statistique par exemple. Pour une utilisation classique vous ne vous en rendrez même pas compte mais bon, les gens de ruby sont gentils, ils bossent là dessus.

33 Il manque un espace insécable. => ===== Partie 2 : passage à la pratique =====

35 Mot inconnu : drole => On va donc commencer à essayer un peu la bête, sinon c'est pas drole.

37 Mot inconnu : irb => Ce dont on va avoir besoin, Ruby, l'interpréteur et pour nos essais, on va aussi installer irb, interactive ruby c'est comme le mode interactif de python pour ceux qui connaissent, et c'est pratique pour les expérimentations rapides.
37 Mot inconnu : ruby => Ce dont on va avoir besoin, Ruby, l'interpréteur et pour nos essais, on va aussi installer irb, interactive ruby c'est comme le mode interactif de python pour ceux qui connaissent, et c'est pratique pour les expérimentations rapides.

38 Mot inconnu : prennez => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement.
38 Mot inconnu : synaptic => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement.
38 Mot inconnu : ruby1 => Donc, prennez votre terminal favori ou synaptic et en avant pendant que ça s'installe, il est aussi possible de s'amuser avec ruby1.9, la version de développement.

39 Mot inconnu : debian => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce.
39 Mot inconnu : ubuntu => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce.
39 Mot inconnu : slide => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce.
39 Ni apostrophe ni trait d’union après “y”. => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce.
39 Mot inconnu : y'a => Mais ça ne supporte pas encore tout, en tout cas pas au niveau du packaging debian/ubuntu, alors si vous voyez le slide, y'a une petite astuce.

40 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Il manque un espace. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : require => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : completion => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Guillemets typographiques fermants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : irbirc => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Pas d’espace après ce signe. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : echo => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : require => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Guillemets typographiques ouvrants. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : irb => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : completion => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Mot inconnu : irbrc => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )
40 Pas d’espace avant ce signe. => Pour avoir l'autocomplétion dans irb, histoire de pouvoir faire [1,2,3].<TAB> et avoir toutes les méthodes (fonctions) utilisables sur un tableau.Très pratique quand on débute (et même quand on débute pas) alors pour les pas habitués du shell, ça met simplement la ligne require 'irb/completion' dans un fichier .irbirc de votre HOME ( echo "require 'irb/completion'" > ~/.irbrc )

43 Mot inconnu : ya => Il ya aussi deux autres programmes utiles :
43 Il manque un espace insécable. => Il ya aussi deux autres programmes utiles :

44 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Mot inconnu : rubygems =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Mot inconnu : ruby =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Mot inconnu : gems =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Mot inconnu : packagés =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib
44 Mot inconnu : distrib =>   * **rubygems**, c'est un gestionnaire de paquets ruby. On peut récupérer plein de plugins, de bibliothèque, les tenir à jour et en général les paquets récupérés par gems sont beaucoup plus récents que ceux packagés dans la distrib

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * Liste à puce
