5 Mot inconnu : Glade2script => ======Glade2script======

7 Mot inconnu : pygtk-glade => Surcouche **pygtk-glade** pour gestion interface graphique depuis un script **bash**, **python** ou autre.
7 Mot inconnu : bash => Surcouche **pygtk-glade** pour gestion interface graphique depuis un script **bash**, **python** ou autre.

10 Il manque un trait d’union. => Merci de se référer à celle ci: [[http://code.google.com/p/glade2script/wiki/Principe]].
10 Il manque un espace insécable. => Merci de se référer à celle ci: [[http://code.google.com/p/glade2script/wiki/Principe]].

13 Mot inconnu : glade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé.
13 Mot inconnu : libglade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé.
13 Mot inconnu : bash => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé.
13 Mot inconnu : glade => L'interface sera créée via glade­3 (projet libglade), un script bash, python ou autre, portant le même nom que le glade, y sera associé.

16 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK.
16 Mot inconnu : glade2script => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK.
16 Mot inconnu : stdout => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK.
16 Mot inconnu : echo => glade2script, écrit en python, sert de passerelle entre le script et l'interface GTK. Il est connecté au stdout du script (chaque echo), traduit et envoie les commandes à GTK.
18 Mot inconnu : FIFO => Pour envoyer des informations depuis GTK au script, il écrit dans un fichier (FIFO), sur lequel le script est connecté et en récupère les données pour les interpréter sous forme d'appel à des fonctions ou de variables chargées dans l'environnement.

20 Mot inconnu : callbacks => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script.
20 Mot inconnu : glade => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script.
20 Mot inconnu : glade2script => Pour récupérer la valeur d'un widget, 2 solutions, soit via les **callbacks** (qui appellent nos fonctions avec arguments, à renseigner dans le **glade**) ou via les commandes **glade2script** qui agissent sur l'interface depuis notre script.

22 Mot inconnu : __Les => __Les commandes seront du type :__
22 Mot inconnu : __ => __Les commandes seront du type :__

23 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Commande glade2script et pygtk
23 Mot inconnu : glade2script =>       # Commande glade2script et pygtk
23 Mot inconnu : pygtk =>       # Commande glade2script et pygtk

24 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'SET@_label1.set_text(“mon texte”)'
24 Mot inconnu : echo =>       echo 'SET@_label1.set_text(“mon texte”)'
24 Guillemets typographiques ouvrants. =>       echo 'SET@_label1.set_text(“mon texte”)'
24 Il manque un espace avant la parenthèse. =>       echo 'SET@_label1.set_text(“mon texte”)'

25 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'GET@_entry1.get_text()'
25 Mot inconnu : echo =>       echo 'GET@_entry1.get_text()'
25 Guillemets typographiques ouvrants. =>       echo 'GET@_entry1.get_text()'

26 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Commande glade2script
26 Mot inconnu : glade2script =>       # Commande glade2script

27 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree"
27 Mot inconnu : echo =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree"
27 Guillemets typographiques ouvrants. =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree"
27 Mot inconnu : TREE =>       echo "TREE@@LOAD@@treeview1@@/tmp/liste_tree"

28 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo "IMG@@_img_tux@@tux.png@@150@@150"
28 Mot inconnu : echo =>       echo "IMG@@_img_tux@@tux.png@@150@@150"
28 Guillemets typographiques ouvrants. =>       echo "IMG@@_img_tux@@tux.png@@150@@150"
28 Mot inconnu : IMG =>       echo "IMG@@_img_tux@@tux.png@@150@@150"
28 Guillemets typographiques fermants. =>       echo "IMG@@_img_tux@@tux.png@@150@@150"

34 Mot inconnu : glade2script => Il y a 2 façons d'utiliser glade2script:
34 Il manque un espace insécable. => Il y a 2 façons d'utiliser glade2script:

38 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Dans le script principal, on appelle l'interface graphique et en sortie, on récupère les variables des différents

39 Mot inconnu : zenity => widgets référencés en argument (comme le fait **zenity** par exemple )
39 Pas d’espace avant ce signe. => widgets référencés en argument (comme le fait **zenity** par exemple )

40 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #/bin/bash

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : SORTIE_GUI =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : glade2script =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Il manque un espace à côté du tiret. =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : MonFichier =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : glade =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Guillemets typographiques ouvrants. =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : _entry1 =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')
41 Mot inconnu : get_text =>       SORTIE_GUI=$(glade2script -g ./MonFichier.glade -r '_entry1.get_text')

42 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo “$SORTIE_GUI”
42 Mot inconnu : echo =>       echo “$SORTIE_GUI”
42 Mot inconnu : SORTIE_GUI =>       echo “$SORTIE_GUI”

43 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #Résultat:
43 Il manque un espace insécable. =>       #Résultat:

44 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       _entry1_get_text=”texte saisie dans l'entrée”
44 Mot inconnu : _entry1_get_text =>       _entry1_get_text=”texte saisie dans l'entrée”
44 Guillemets ouvrants introuvables dans ce paragraphe. =>       _entry1_get_text=”texte saisie dans l'entrée”

45 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       EXIT=”ok”
45 Mot inconnu : ok =>       EXIT=”ok”
45 Guillemets ouvrants introuvables dans ce paragraphe. =>       EXIT=”ok”

46 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       

49 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies.
49 Mot inconnu : glade =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies.
49 Après “être”, le verbe ne devrait pas être à l’infinitif. =>  Des traitements seront réalisés en réaction à l'interface, ce code se trouvera dans le script associé au glade, l'interface ne devra pas être fermer pour pouvoir récupérer les données saisies.

50 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Pour lancer la machine, il suffit de créer un petit script où se trouve la commande glade2script.
50 Mot inconnu : glade2script =>  Pour lancer la machine, il suffit de créer un petit script où se trouve la commande glade2script.

51 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  On peut mixer les deux, utilisation dynamique et récupération des variables en sortie quand même, selon les besoins.

53 Mot inconnu : ca => Cela peut paraître compliqué, mais ca ne l'est pas du tout à l'usage, le petit exemple ci-dessous vous le prouvera.

57 Mot inconnu : glade => Il faut d'abord créer la boite de dialogue dans glade.

58 Mot inconnu : clicked => Dans les signaux des boutons, renseigner pour le signal clicked => on_clicked
58 Mot inconnu : on_clicked => Dans les signaux des boutons, renseigner pour le signal clicked => on_clicked

59 Mot inconnu : btn_ok => Donner un nom explicite aux boutons, ici, btn_ok, btn_no
59 Mot inconnu : btn_no => Donner un nom explicite aux boutons, ici, btn_ok, btn_no

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Le script associé au glade et portant le même nom.
62 Mot inconnu : glade =>  Le script associé au glade et portant le même nom.

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #! /bin/bash

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       PID=$$
64 Mot inconnu : PID =>       PID=$$

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       FIFO=/tmp/FIFO${PID}
65 Mot inconnu : FIFO =>       FIFO=/tmp/FIFO${PID}
65 Mot inconnu : PID =>       FIFO=/tmp/FIFO${PID}

66 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       mkfifo $FIFO
66 Mot inconnu : mkfifo =>       mkfifo $FIFO
66 Mot inconnu : FIFO =>       mkfifo $FIFO

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       function btn_ok()
67 Mot inconnu : function =>       function btn_ok()
67 Mot inconnu : btn_ok =>       function btn_ok()

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       {

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'EXIT@@SAVE'
69 Mot inconnu : echo =>       echo 'EXIT@@SAVE'
69 Guillemets typographiques ouvrants. =>       echo 'EXIT@@SAVE'
69 Guillemets typographiques fermants. =>       echo 'EXIT@@SAVE'

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       }

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       function btn_no()
71 Mot inconnu : function =>       function btn_no()
71 Mot inconnu : btn_no =>       function btn_no()

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       {

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'EXIT@@'
73 Mot inconnu : echo =>       echo 'EXIT@@'
73 Guillemets typographiques ouvrants. =>       echo 'EXIT@@'

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       }

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # La boucle imbriquée qui suit est le coeur du système de
75 Mot inconnu : coeur =>       # La boucle imbriquée qui suit est le coeur du système de

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # communication entre GTK et bash.
76 Mot inconnu : bash =>       # communication entre GTK et bash.

77 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Elle devra toujours se trouver en bas du script associé au

78 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # glade. Vous n'avez pas à vous en soucier, mais il y est possible
78 Mot inconnu : glade =>       # glade. Vous n'avez pas à vous en soucier, mais il y est possible

79 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # d'intercepter les signaux pour en faire autre chose que

80 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # d'appeler une fonction ou charger une variable...
80 Typographie : points de suspension. Utilisez le caractère dédié. =>       # d'appeler une fonction ou charger une variable...

81 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       while read ligne; do
81 Mot inconnu : while =>       while read ligne; do
81 Mot inconnu : read =>       while read ligne; do
81 Il manque un espace insécable. =>       while read ligne; do

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             if [[ "$ligne" =~ GET@ ]]; then
82 Pas d’espace après ce signe. =>             if [[ "$ligne" =~ GET@ ]]; then
82 Guillemets typographiques fermants. =>             if [[ "$ligne" =~ GET@ ]]; then
82 Mot inconnu : GET =>             if [[ "$ligne" =~ GET@ ]]; then
82 Pas d’espace avant ce signe. =>             if [[ "$ligne" =~ GET@ ]]; then
82 Mot inconnu : then =>             if [[ "$ligne" =~ GET@ ]]; then

83 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  eval ${ligne#*@}
83 Mot inconnu : eval =>                  eval ${ligne#*@}

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  echo "DEBUG => in boucle bash :" ${ligne#*@}
84 Mot inconnu : echo =>                  echo "DEBUG => in boucle bash :" ${ligne#*@}
84 Guillemets typographiques ouvrants. =>                  echo "DEBUG => in boucle bash :" ${ligne#*@}
84 Mot inconnu : DEBUG =>                  echo "DEBUG => in boucle bash :" ${ligne#*@}
84 Mot inconnu : bash =>                  echo "DEBUG => in boucle bash :" ${ligne#*@}

85 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             else
85 Mot inconnu : else =>             else

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Mot inconnu : echo =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Guillemets typographiques ouvrants. =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Mot inconnu : DEBUG =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Mot inconnu : bash =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Mot inconnu : NOT =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Mot inconnu : GET =>                  echo "DEBUG=> in bash NOT GET" $ligne
86 Guillemets typographiques fermants. =>                  echo "DEBUG=> in bash NOT GET" $ligne

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  $ligne

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>            fi

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       done < <(while true; do
89 Mot inconnu : done =>       done < <(while true; do
89 Mot inconnu : while =>       done < <(while true; do
89 Mot inconnu : true =>       done < <(while true; do
89 Il manque un espace insécable. =>       done < <(while true; do

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             read entree < $FIFO
90 Mot inconnu : read =>             read entree < $FIFO
90 Mot inconnu : entree =>             read entree < $FIFO
90 Mot inconnu : FIFO =>             read entree < $FIFO

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             [[ "$entree" == "QuitNow" ]] && break
91 Pas d’espace après ce signe. =>             [[ "$entree" == "QuitNow" ]] && break
91 Mot inconnu : entree =>             [[ "$entree" == "QuitNow" ]] && break
91 Guillemets typographiques fermants. =>             [[ "$entree" == "QuitNow" ]] && break
91 Guillemets typographiques ouvrants. =>             [[ "$entree" == "QuitNow" ]] && break
91 Mot inconnu : QuitNow =>             [[ "$entree" == "QuitNow" ]] && break
91 Guillemets typographiques fermants. =>             [[ "$entree" == "QuitNow" ]] && break
91 Pas d’espace avant ce signe. =>             [[ "$entree" == "QuitNow" ]] && break

92 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>               echo $entree
92 Mot inconnu : echo =>               echo $entree
92 Mot inconnu : entree =>               echo $entree

93 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       done)
93 Mot inconnu : done =>       done)

94 Il manque un espace insécable. => Votre script maintenant :

95 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #! /bin/bash

96 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Déroulement de votre script

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # 2 façons de récupérer le résultat, soit par le code de sortie

98 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # ou en chargeant la variable EXIT dans l'environement et traiter
98 Accord de genre erroné : « la variable » est féminin, « EXIT » est masculin. =>       # ou en chargeant la variable EXIT dans l'environement et traiter
98 Mot inconnu : environement =>       # ou en chargeant la variable EXIT dans l'environement et traiter

99 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # le résultat.

100 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if glade2script -g ./mon_gui.glade; then
100 Mot inconnu : glade2script =>       if glade2script -g ./mon_gui.glade; then
100 Il manque un espace à côté du tiret. =>       if glade2script -g ./mon_gui.glade; then
100 Mot inconnu : mon_gui =>       if glade2script -g ./mon_gui.glade; then
100 Mot inconnu : glade =>       if glade2script -g ./mon_gui.glade; then
100 Il manque un espace insécable. =>       if glade2script -g ./mon_gui.glade; then
100 Mot inconnu : then =>       if glade2script -g ./mon_gui.glade; then

101 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          echo “le bouton ok a été clické”
101 Mot inconnu : echo =>          echo “le bouton ok a été clické”
101 Mot inconnu : ok =>          echo “le bouton ok a été clické”
101 Mot inconnu : clické =>          echo “le bouton ok a été clické”

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else
102 Mot inconnu : else =>       else

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>          echo “le bouton no a été clické”
103 Mot inconnu : echo =>          echo “le bouton no a été clické”
103 Mot inconnu : clické =>          echo “le bouton no a été clické”

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       fi

105 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # deuxième méthode, charger la variable EXIT
107 Accord de genre erroné : « la variable » est féminin, « EXIT » est masculin. =>       # deuxième méthode, charger la variable EXIT

108 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       GUI=$(glade2script -g ./mon_gui.glade)
108 Mot inconnu : glade2script =>       GUI=$(glade2script -g ./mon_gui.glade)
108 Il manque un espace à côté du tiret. =>       GUI=$(glade2script -g ./mon_gui.glade)
108 Mot inconnu : mon_gui =>       GUI=$(glade2script -g ./mon_gui.glade)
108 Mot inconnu : glade =>       GUI=$(glade2script -g ./mon_gui.glade)

109 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       eval “${GUI}”
109 Mot inconnu : eval =>       eval “${GUI}”

110 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       If [[ “${EXIT}” == “yes” ]]; then
110 Pas d’espace après ce signe. =>       If [[ “${EXIT}” == “yes” ]]; then
110 Mot inconnu : yes =>       If [[ “${EXIT}” == “yes” ]]; then
110 Pas d’espace avant ce signe. =>       If [[ “${EXIT}” == “yes” ]]; then
110 Mot inconnu : then =>       If [[ “${EXIT}” == “yes” ]]; then

111 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         echo “le bouton ok a été clické”
111 Mot inconnu : echo =>         echo “le bouton ok a été clické”
111 Mot inconnu : ok =>         echo “le bouton ok a été clické”
111 Mot inconnu : clické =>         echo “le bouton ok a été clické”

112 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else
112 Mot inconnu : else =>       else

113 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         echo “le bouton no a été clické”
113 Mot inconnu : echo =>         echo “le bouton no a été clické”
113 Mot inconnu : clické =>         echo “le bouton no a été clické”

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       fi

115 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # Il est possible de faire différent, à savoir qu'en sortie,

116 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1
116 Mot inconnu : yes =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1
116 Guillemets ouvrants introuvables dans ce paragraphe. =>       # il y a EXIT=”yes” ou EXIT=”no”, et le code de sortie 0 ou 1

117 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       # selon le choix de l'utilisateur.

121 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash.
121 Mot inconnu : HIZO =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash.
121 Mot inconnu : bash =>  - Les * combinés avec les commandes HIZO peuvent poser problèmes, elles seront interprétées dans le shell bash.

122 Il manque un espace à côté du tiret. => Indiquer la commande set -f avant la boucle de fin pour y remedier, set +f pour inverser le comportement.
122 Mot inconnu : remedier => Indiquer la commande set -f avant la boucle de fin pour y remedier, set +f pour inverser le comportement.

124 Mot inconnu : Glade => ====Glade:====

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les widgets qui doivent être modifiés, ou dont les valeurs seront récupérées via le script associé, devront commencer par _ pour être référencés.

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés.
126 Mot inconnu : statusbars =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés.
126 Mot inconnu : eventbox =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés.
126 Mot inconnu : treeviews =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés.
126 Mot inconnu : GtkAboutDialog =>  - Les windows, statusbars, eventbox, treeviews et GtkAboutDialog n'ont pas besoin d'être référencés.

127 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Par défaut, la visibilité d'une fenêtre est sur non, basculer cette option pour la voir au lancement de votre soft.

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - AboutDialog: Il faut que le nom du logiciel soit le même que le nom de la fenêtre.
130 Mot inconnu : AboutDialog =>  - AboutDialog: Il faut que le nom du logiciel soit le même que le nom de la fenêtre.
130 Il manque un espace insécable. =>  - AboutDialog: Il faut que le nom du logiciel soit le même que le nom de la fenêtre.

132 Mot inconnu : glade2script => Commandes glade2script:
132 Il manque un espace insécable. => Commandes glade2script:

133 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @
133 Mot inconnu : GET =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @
133 Mot inconnu : pygtk =>  - Les commandes GET@ et SET@ s'utilisent avec des commandes pygtk, c'est pour bien les différencier qu'elles n'ont qu'un seul @

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Il faut utiliser l'unicode pour représenter le &
136 Mot inconnu : unicode =>  - Il faut utiliser l'unicode pour représenter le &

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Les sauts de ligne s'écrivent \\n s'ils sont encadrés par des " et \n s'ils sont encadrés par des '
137 Guillemets isolés. =>  - Les sauts de ligne s'écrivent \\n s'ils sont encadrés par des " et \n s'ils sont encadrés par des '

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft.
138 Mot inconnu : echo =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft.
138 Il manque un espace avant la parenthèse. =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft.
138 Mot inconnu : glade2script =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft.
138 Mot inconnu : echo =>  - Tous les echo du script associé passeront par le script python qui gère GTK(glade2script), les @ ou les echo sans arguments feront planter le soft.

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :)
139 Mot inconnu : echo =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :)
139 Mot inconnu : eval =>  - En cas d'utilisation statique, chaque echo sera également évalué dans l'environnement, donc plantage assuré en cas d'eval :)

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application.
140 Mot inconnu : callbacks =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application.
140 Mot inconnu : gtk_widget_destroy =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application.
140 Mot inconnu : echo =>  - En cas d'utilisation de sous-processus et la sortie via les callbacks gtk_widget_destroy, il faudra ajouter un echo après la boucle finale pour éviter le gel de l'application.

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  - Pour un affichage en console sans passer par le script python, il suffit de rediriger vers un autre fd.
141 Mot inconnu : fd =>  - Pour un affichage en console sans passer par le script python, il suffit de rediriger vers un autre fd.

142 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       exec 4>$(tty)
142 Mot inconnu : exec =>       exec 4>$(tty)
142 Mot inconnu : tty =>       exec 4>$(tty)

143 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       echo 'un truc qui ne passera pas par python' >&4
143 Mot inconnu : echo =>       echo 'un truc qui ne passera pas par python' >&4
143 Guillemets typographiques ouvrants. =>       echo 'un truc qui ne passera pas par python' >&4
143 Guillemets typographiques fermants. =>       echo 'un truc qui ne passera pas par python' >&4

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       #Penser à refermer le fd en fin de script:
144 Mot inconnu : fd =>       #Penser à refermer le fd en fin de script:
144 Il manque un espace insécable. =>       #Penser à refermer le fd en fin de script:

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       exec 4<&-
145 Mot inconnu : exec =>       exec 4<&-

147 S’il s’agit de la préposition « à », il faut accentuer la majuscule. => <note>**A savoir :**

148 Mot inconnu : PID => Le PID de glade2script et du terminal sont accessibles via une commande GET@
148 Mot inconnu : glade2script => Le PID de glade2script et du terminal sont accessibles via une commande GET@
148 Mot inconnu : GET => Le PID de glade2script et du terminal sont accessibles via une commande GET@

149 Mot inconnu : GET => GET@glade2script_PID et GET@terminal_PID</note>
149 Mot inconnu : GET => GET@glade2script_PID et GET@terminal_PID</note>
151 Mot inconnu : callback => ====Signaux Gtk et callback====

153 Mot inconnu : glade => **Dans le glade**, pour chaque widget auquel vous voulez associer une action, il faut renseigner un signal. Ce signal, auquel on aura assigné un callback, lancera une fonction du script associé correspondant au nom du widget, avec un argument.
153 Mot inconnu : callback => **Dans le glade**, pour chaque widget auquel vous voulez associer une action, il faut renseigner un signal. Ce signal, auquel on aura assigné un callback, lancera une fonction du script associé correspondant au nom du widget, avec un argument.

155 Mot inconnu : callbacks => Quelques callbacks n'ont pas de retour, ils agissent directement sur l'interface.

157 Accord de genre erroné avec « utilisateurs ». => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback.
157 Accord de genre erroné entre « données » et « utilisateurs ». => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback.
157 Mot inconnu : callback => Il peut être utile de renseigner les données utilisateurs. Le widget renseigné dans ces données, lancera le callback.

158 Accord de genre erroné avec « utilisateur ». => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Accord de genre erroné avec « données ». => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Il manque un espace. => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : clicked => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : callback => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : on_entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.
158 Mot inconnu : entry => Par exemple, si on renseigne, en données utilisateur un widget entry sur le signal d'un bouton,signal clicked, callback on_entry, c'est la fonction de l'entry qui sera lancée avec son contenu en argument lorsque le bouton sera enfoncé. En gros, le bouton se fait passer pour l'entry.

159 Accord de genre erroné avec « utilisateurs ». => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface.
159 Accord de genre erroné entre « données » et « utilisateurs ». => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface.
159 Accord erroné : “données” et “nécessaire” ne sont pas accordés. Mettez au pluriel. => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface.
159 Mot inconnu : callbacks => Les données utilisateurs sont aussi nécessaire au fonctionnement des callbacks qui agissent directement sur l'interface.

161 Mot inconnu : Callbacks => ===Callbacks qui lancent une fonction avec argument:===

162 Mot inconnu : FIXME => FIXME

163 Mot inconnu : Callbacks => ===Callbacks sans retour:(pour modifier interface directement)===

164 Mot inconnu : FIXME => FIXME

165 Mot inconnu : callback => ===Détails callback===

166 Accord avec “sont”. => Les signaux, lorsqu'il sont renseignés, ne sont là que pour l'exemple, d'autres peuvent être utilisés.
166 Conjugaison erronée. Accord avec “il”. Le verbe devrait être à la 3ᵉ personne du singulier. => Les signaux, lorsqu'il sont renseignés, ne sont là que pour l'exemple, d'autres peuvent être utilisés.

167 Mot inconnu : FIXME => FIXME

169 Mot inconnu : pyGtk => ====Commandes pyGtk====

170 Mot inconnu : pyGtk => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ...
170 Il manque un espace. => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ...
170 Typographie : points de suspension. Utilisez le caractère dédié. => Les commandes pyGtk agissent sur un widget, modifient sa valeur, sa taille, etc,etc ...

171 Mot inconnu : pyGTK => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : devhelp => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : glade => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : Lucid => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : The => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : Class => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).
171 Mot inconnu : Reference => Vous trouverez ces commandes dans la doc pyGTK (dans devhelp, installer avec glade sous Lucid, The gtk Class Reference).

172 Mot inconnu : glade => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés.
172 Accord avec la forme verbale “serait” : “compliquées” devrait être au singulier. => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés.
172 Mot inconnu : Reference => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés.
172 Accord de nombre erroné avec « les principaux » : « widget » devrait être au pluriel. => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés.
172 Mot inconnu : callback => Une grande partie de ces commandes ne nous sont pas nécessaires/disponibles. Certaines sont réglées dans glade, d'autres serait trop compliquées à l'utilisation pour être implantées. Dans la section Gtk Widget Reference, sont rassemblés les principaux widget avec leurs commandes, callback et signaux les plus utilisés.

174 Mot inconnu : pyGtk => Pour lancer les commandes pyGtk depuis le script associé, il faut passer par des commandes glade2script.
174 Mot inconnu : glade2script => Pour lancer les commandes pyGtk depuis le script associé, il faut passer par des commandes glade2script.

176 Mot inconnu : glade2script => ====Commandes glade2script====

177 Mot inconnu : FIXME => FIXME

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://code.google.com/p/glade2script/|Site officiel de glade2script]]
180 Mot inconnu : glade2script =>   * [[http://code.google.com/p/glade2script/|Site officiel de glade2script]]
