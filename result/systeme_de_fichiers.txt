6 Mot inconnu : macOS => ======= Les systèmes de fichiers sous GNU-Linux / macOS / Windows ======

7 Typographie : points de suspension. Utilisez le caractère dédié. => Les **systèmes de fichiers** (il en existe de multiples) gèrent l'organisation des informations mémorisées sur les périphériques de stockage de l'ordinateur. Chacun offre des avantages pour certains types d'utilisation... mais des désavantages pour d'autres utilisations. Connaître leurs principales caractéristiques est nécessaire pour l'utilisation optimale d'un équipement. C'est comme un classeur.

9 Il manque un espace insécable. => ===== Qu'est-ce qu'un système de fichiers ? =====

12 Il manque un espace insécable. => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Il manque un espace insécable. => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Mot inconnu : kibibyte => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Il manque un espace insécable. => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Il manque un espace avant la parenthèse. => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Mot inconnu : mebibyte => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.
12 Il manque un espace insécable. => Un **bit** est un 1 ou un 0 ; un **octet** (//byte// en anglais) est composé de huit bits ; un kilo-octet binaire (**kibioctet**, ou //kibibyte//) est un groupe de 1024 octets ; un méga-octet binaire(**mébioctet**, ou //mebibyte//) se constitue de 1024 kilo-octets binaires ; et ainsi de suite.

14 Mot inconnu : disk => Un disque dur (//hard drive// ou //hard disk//) stocke vos données : à chaque fois que vous enregistrez un fichier, vous écrivez des milliers de 1 et de 0 sur un disque métallique, le piquant littéralement et créant une indentation qui pourra plus tard être relue en tant que 1 ou 0 par votre ordinateur. En réalité, vous magnétisez des milliers de petits bâtons (que nous appellerons //clusters//) qui seront polarisés dans un sens ou dans un autre (N-S ou S-N) ; cette polarisation différente sera ré-interprétée plus tard par l'ordinateur en tant que 1 ou 0.
14 Il manque un espace insécable. => Un disque dur (//hard drive// ou //hard disk//) stocke vos données : à chaque fois que vous enregistrez un fichier, vous écrivez des milliers de 1 et de 0 sur un disque métallique, le piquant littéralement et créant une indentation qui pourra plus tard être relue en tant que 1 ou 0 par votre ordinateur. En réalité, vous magnétisez des milliers de petits bâtons (que nous appellerons //clusters//) qui seront polarisés dans un sens ou dans un autre (N-S ou S-N) ; cette polarisation différente sera ré-interprétée plus tard par l'ordinateur en tant que 1 ou 0.
14 Il manque un espace insécable. => Un disque dur (//hard drive// ou //hard disk//) stocke vos données : à chaque fois que vous enregistrez un fichier, vous écrivez des milliers de 1 et de 0 sur un disque métallique, le piquant littéralement et créant une indentation qui pourra plus tard être relue en tant que 1 ou 0 par votre ordinateur. En réalité, vous magnétisez des milliers de petits bâtons (que nous appellerons //clusters//) qui seront polarisés dans un sens ou dans un autre (N-S ou S-N) ; cette polarisation différente sera ré-interprétée plus tard par l'ordinateur en tant que 1 ou 0.

17 Il manque un espace insécable. => <note>C'est un peu comme les anciens classeurs de cartes d'identification de livres dans une bibliothèque municipale, dans lesquels tous les livres sont recensés : sans ces index, il serait impossible de retrouver facilement les livres que nous recherchons.  Les bibliothèques utilisent pour la plupart le système de classement décimal Dewey pour organiser les livres en sujets ; il existe aussi d'autres systèmes de classification arrivant à un résultat similaire, bien qu'aucun d'entre eux n'ait atteint la même popularité que le système de Dewey.</note>
17 Espace(s) surnuméraire(s) à supprimer. => <note>C'est un peu comme les anciens classeurs de cartes d'identification de livres dans une bibliothèque municipale, dans lesquels tous les livres sont recensés : sans ces index, il serait impossible de retrouver facilement les livres que nous recherchons.  Les bibliothèques utilisent pour la plupart le système de classement décimal Dewey pour organiser les livres en sujets ; il existe aussi d'autres systèmes de classification arrivant à un résultat similaire, bien qu'aucun d'entre eux n'ait atteint la même popularité que le système de Dewey.</note>
17 Mot inconnu : Dewey => <note>C'est un peu comme les anciens classeurs de cartes d'identification de livres dans une bibliothèque municipale, dans lesquels tous les livres sont recensés : sans ces index, il serait impossible de retrouver facilement les livres que nous recherchons.  Les bibliothèques utilisent pour la plupart le système de classement décimal Dewey pour organiser les livres en sujets ; il existe aussi d'autres systèmes de classification arrivant à un résultat similaire, bien qu'aucun d'entre eux n'ait atteint la même popularité que le système de Dewey.</note>
17 Il manque un espace insécable. => <note>C'est un peu comme les anciens classeurs de cartes d'identification de livres dans une bibliothèque municipale, dans lesquels tous les livres sont recensés : sans ces index, il serait impossible de retrouver facilement les livres que nous recherchons.  Les bibliothèques utilisent pour la plupart le système de classement décimal Dewey pour organiser les livres en sujets ; il existe aussi d'autres systèmes de classification arrivant à un résultat similaire, bien qu'aucun d'entre eux n'ait atteint la même popularité que le système de Dewey.</note>
17 Mot inconnu : Dewey => <note>C'est un peu comme les anciens classeurs de cartes d'identification de livres dans une bibliothèque municipale, dans lesquels tous les livres sont recensés : sans ces index, il serait impossible de retrouver facilement les livres que nous recherchons.  Les bibliothèques utilisent pour la plupart le système de classement décimal Dewey pour organiser les livres en sujets ; il existe aussi d'autres systèmes de classification arrivant à un résultat similaire, bien qu'aucun d'entre eux n'ait atteint la même popularité que le système de Dewey.</note>

18 Il manque un espace insécable. => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Espace(s) surnuméraire(s) à supprimer. => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : FAT32 => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : NTFS => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Il manque un espace insécable. => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : ext2 => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : ext3 => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : ext4 => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : ReiserFS => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : JFS => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : XFS => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : Btrfs => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Mot inconnu : ZFS => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Erreur de numérisation ? Virgules au lieu de points ? => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....
18 Typographie : points de suspension. Utilisez le caractère dédié. => Les systèmes de fichiers jouent exactement le même rôle que ces index : organiser les fichiers de votre ordinateur sur votre disque dur de façon à pouvoir les retrouver lorsque vous en aurez besoin.  Les systèmes de fichiers les plus répandus à l'heure actuelle sont sûrement le FAT32 et le NTFS, qui sont les deux seuls systèmes de fichiers que Microsoft(r) Windows(r) peut nativement lire. Mais, tout comme il existe d'autres systèmes pour classer des livres dans une bibliothèque, il existe de nombreux autres systèmes de fichiers : ext2, ext3, ext4, ReiserFS, JFS, XFS, Btrfs, ZFS,....

21 Espace(s) surnuméraire(s) à supprimer. => Des attributs différents sont nécessaires afin de définir un système de fichiers.  Ils incluent entre autres la **taille maximale que peut avoir un fichier** dans ce système de fichiers, la **taille maximale d'une partition** et la **journalisation ou non** du système de fichiers.

24 Espace(s) surnuméraire(s) à supprimer. => Ce critère définit la taille maximale qu'un fichier quelconque enregistré sur un système de fichiers peut avoir.  Ainsi, si vous possédez un fichier de 100 mégaoctets et que vous tentez de l'enregistrer sur un système de fichiers n'acceptant pas les fichiers plus grands que 90 mégaoctets, l'opération d'enregistrement ne pourra pas être complétée et vous disposerez d'un fichier corrompu, incomplet.

29 Espace(s) surnuméraire(s) à supprimer. => De nombreuses caractéristiques techniques causent des limitations plus ou moins grandes quant à la taille d'une partition formatée dans un système de fichiers donné.  Vous retrouverez, plus bas dans cette page, un tableau résumé des principaux systèmes de fichiers rencontrés dans le monde linuxien; nous y avons indiqué la taille maximale que peut avoir une partition selon chacun de ces systèmes de fichiers.
29 Il manque un espace insécable. => De nombreuses caractéristiques techniques causent des limitations plus ou moins grandes quant à la taille d'une partition formatée dans un système de fichiers donné.  Vous retrouverez, plus bas dans cette page, un tableau résumé des principaux systèmes de fichiers rencontrés dans le monde linuxien; nous y avons indiqué la taille maximale que peut avoir une partition selon chacun de ces systèmes de fichiers.

36 Espace(s) surnuméraire(s) à supprimer. => Les [[:permissions|droits d'accès]] que l'on trouve habituellement sont la **lecture** du fichier ou répertoire, l'**écriture** dans celui-ci et son **exécution**.  Par exemple, l'utilisateur //toto// dispose des droits de lecture et d'exécution sur le répertoire ''foo'', mais pas d'écriture; //toto// peut donc lancer les programmes présents dans ce répertoire et ouvrir les fichiers qu'il contient, mais ne peut pas les modifier ni en créer de nouveaux.
36 Guillemets typographiques ouvrants. => Les [[:permissions|droits d'accès]] que l'on trouve habituellement sont la **lecture** du fichier ou répertoire, l'**écriture** dans celui-ci et son **exécution**.  Par exemple, l'utilisateur //toto// dispose des droits de lecture et d'exécution sur le répertoire ''foo'', mais pas d'écriture; //toto// peut donc lancer les programmes présents dans ce répertoire et ouvrir les fichiers qu'il contient, mais ne peut pas les modifier ni en créer de nouveaux.
36 Mot inconnu : foo => Les [[:permissions|droits d'accès]] que l'on trouve habituellement sont la **lecture** du fichier ou répertoire, l'**écriture** dans celui-ci et son **exécution**.  Par exemple, l'utilisateur //toto// dispose des droits de lecture et d'exécution sur le répertoire ''foo'', mais pas d'écriture; //toto// peut donc lancer les programmes présents dans ce répertoire et ouvrir les fichiers qu'il contient, mais ne peut pas les modifier ni en créer de nouveaux.
36 Guillemets typographiques fermants. => Les [[:permissions|droits d'accès]] que l'on trouve habituellement sont la **lecture** du fichier ou répertoire, l'**écriture** dans celui-ci et son **exécution**.  Par exemple, l'utilisateur //toto// dispose des droits de lecture et d'exécution sur le répertoire ''foo'', mais pas d'écriture; //toto// peut donc lancer les programmes présents dans ce répertoire et ouvrir les fichiers qu'il contient, mais ne peut pas les modifier ni en créer de nouveaux.
36 Il manque un espace insécable. => Les [[:permissions|droits d'accès]] que l'on trouve habituellement sont la **lecture** du fichier ou répertoire, l'**écriture** dans celui-ci et son **exécution**.  Par exemple, l'utilisateur //toto// dispose des droits de lecture et d'exécution sur le répertoire ''foo'', mais pas d'écriture; //toto// peut donc lancer les programmes présents dans ce répertoire et ouvrir les fichiers qu'il contient, mais ne peut pas les modifier ni en créer de nouveaux.

39 Espace(s) surnuméraire(s) à supprimer. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Espace(s) surnuméraire(s) à supprimer. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Il manque un espace insécable. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Il manque un espace insécable. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Espace(s) surnuméraire(s) à supprimer. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Il manque un espace insécable. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.
39 Il manque un espace insécable. => Parlons maintenant de la journalisation.  Un système de fichiers journalisé est **plus fiable** lorsqu'on entre dans le domaine du stockage des données.  Il a été expliqué plus haut ce qui se produit réellement lorsqu'un fichier est enregistré sur un disque dur (une suite de 1 et de 0 est inscrite sur le disque) ; mais que se produit-il si l'écriture de la chaîne est interrompue avant son terme (ce qui se produit, par exemple, lors d'une coupure de courant) ?  Votre fichier devient « corrompu », incomplet.

41 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  Un système de fichiers journalisé travaille de façon à prévenir une telle corruption : lors de la sauvegarde d'un fichier, au lieu d'écrire immédiatement sur le disque dur les données à l'endroit exact où elles devraient être enregistrées, le système de fichiers écrit les données dans une autre partie du disque dur et note les changements nécessaires dans un journal, et ensuite, en arrière-plan, il repasse chacune des entrées du journal et termine le travail commencé ; lorsque la tâche est accomplie, il raye la tâche de la liste.
41 Il manque un espace insécable. =>  Un système de fichiers journalisé travaille de façon à prévenir une telle corruption : lors de la sauvegarde d'un fichier, au lieu d'écrire immédiatement sur le disque dur les données à l'endroit exact où elles devraient être enregistrées, le système de fichiers écrit les données dans une autre partie du disque dur et note les changements nécessaires dans un journal, et ensuite, en arrière-plan, il repasse chacune des entrées du journal et termine le travail commencé ; lorsque la tâche est accomplie, il raye la tâche de la liste.
41 Il manque un espace insécable. =>  Un système de fichiers journalisé travaille de façon à prévenir une telle corruption : lors de la sauvegarde d'un fichier, au lieu d'écrire immédiatement sur le disque dur les données à l'endroit exact où elles devraient être enregistrées, le système de fichiers écrit les données dans une autre partie du disque dur et note les changements nécessaires dans un journal, et ensuite, en arrière-plan, il repasse chacune des entrées du journal et termine le travail commencé ; lorsque la tâche est accomplie, il raye la tâche de la liste.

43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Espace(s) surnuméraire(s) à supprimer. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Guillemets typographiques ouvrants. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Mot inconnu : foo => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Mot inconnu : txt => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Guillemets typographiques fermants. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Espace(s) surnuméraire(s) à supprimer. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Guillemets typographiques ouvrants. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Mot inconnu : foo => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Mot inconnu : txt => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Guillemets typographiques fermants. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Espace(s) surnuméraire(s) à supprimer. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Espace(s) surnuméraire(s) à supprimer. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Espace(s) surnuméraire(s) à supprimer. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.
43 Il manque un espace insécable. => Mais comment cela prévient-il la perte de données ?  Prenons un exemple : disons que vous cliquez sur le bouton //Enregistrer// de votre logiciel d'édition de texte pour sauvegarder le fichier ''foo.txt''.  L'ordinateur écrit d'abord un « brouillon » de ''foo.txt'' dans une partie différente du disque dur et écrit le changement dans le journal du système de fichiers.  Une fois cela effectué, l'ordinateur commence à retranscrire le fichier //(la suite de 1 et de 0)// à son endroit définitif sur le disque dur.  Soudain, il survient une panne de courant ; alors la transcription du fichier est interrompue.  Lorsque le courant revient, même si le « propre », la version finale de votre fichier est incomplète, vous possédez toujours votre brouillon dans le journal du système de fichiers ; l'ordinateur recommence donc la retranscription du fichier, écrasant les données corrompues.

47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Espace(s) surnuméraire(s) à supprimer. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Espace(s) surnuméraire(s) à supprimer. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Il manque un espace insécable. => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.
47 Mot inconnu : memory => //« Mais,// direz-vous,// il est beaucoup plus avantageux d'utiliser un système de fichiers journalisé !  C'est bien plus sécurisé !  Pourquoi utiliserais-je un système de fichiers non journalisé ? »//  L'utilisation d'un journal requiert des capacités de stockage importantes sur vos périphériques ; ces systèmes de fichiers ne sont donc pas adaptés aux médias de faible capacité, telles les cartes mémoires (//memory sticks//) et les disquettes.

49 Mot inconnu : nix => ==== Particularité des systèmes de fichiers *nix : inode ====
49 Il manque un espace insécable. => ==== Particularité des systèmes de fichiers *nix : inode ====
49 Mot inconnu : inode => ==== Particularité des systèmes de fichiers *nix : inode ====

50 Typographie : points de suspension. Utilisez le caractère dédié. => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Il manque un espace insécable. => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Mot inconnu : ext2 => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Mot inconnu : ext3 => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Mot inconnu : ReiserFS => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Typographie : points de suspension. Utilisez le caractère dédié. => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 
50 Espace(s) en fin de ligne à supprimer. => Les utilisateurs habitués de Microsoft Windows savent qu'il n'est normalement pas possible de modifier les propriétés d'un fichier (renommer, déplacer, supprimer...) quand celui-ci est ouvert par un programme ; cette restriction n'existe pas sur les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). 

52 Mot inconnu : nix => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : inode => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : i-node => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : inode => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : inode => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Il manque un espace insécable. => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Il manque un espace insécable. => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : inode => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.
52 Mot inconnu : inode => La raison est que sur les systèmes de fichiers *nix, les fichiers sont indexés selon un numéro, appelé **inode** ou //i-node//, et que chaque inode possède de nombreux attributs associés à lui, tels **les droits d'accès, l'horodatage, la taille du fichier**, etc. Lorsque vous supprimez un fichier, ce qui se produit réellement est que l'inode est « délié » du système de fichiers (c'est-à-dire qu'il n'est plus indexé), mais si des programmes ont un lien avec l'inode (par exemple, si un document texte est ouvert dans un éditeur de texte, il a un lien avec cet éditeur de texte), le fichier auquel l'inode est associé continue d'exister dans le système d'exploitation et continue d'être mis à jour.

54 Mot inconnu : inodes => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Il manque un espace insécable. => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Mot inconnu : sdxx => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Il manque un espace insécable. => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Mot inconnu : sda => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Mot inconnu : sdb => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)
54 Typographie : points de suspension. Utilisez le caractère dédié. => <note>Il est possible de connaître l'utilisation en inodes d'une partition avec : (**sdxx** : nom de votre partition sda, sdb ...)

55 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  <code bash>df -i /dev/sdxx</code>
55 Mot inconnu : df =>  <code bash>df -i /dev/sdxx</code>
55 Il manque un espace à côté du tiret. =>  <code bash>df -i /dev/sdxx</code>

56 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Mot inconnu : sudo =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Mot inconnu : tune2fs =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Il manque un espace à côté du tiret. =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Mot inconnu : grep =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Il manque un espace à côté du tiret. =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>
56 Mot inconnu : inode =>  <code bash>sudo tune2fs -l /dev/sdxx | grep -i inode</code></note>

58 Mot inconnu : inode => Un fichier n'est réellement effacé que lorsque tous les liens avec son inode ont été coupés //(et encore, les données résident encore sur le disque dur, mais comme elles ne sont plus indexées, il est difficile de les récupérer)//. Ce que tout ceci signifie est que vous pouvez supprimer des programmes alors qu'ils sont en fonctionnement sans faire planter votre système d'exploitation, renommer ou déplacer des fichiers avant qu'ils aient fini d'être téléchargés sans les corrompre et supprimer un fichier alors qu'il est encore ouvert dans un logiciel.

63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Il manque un espace insécable. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Il manque un espace insécable. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^
63 Espace(s) surnuméraire(s) à supprimer. => ^   Nom du système de fichiers   ^   Taille maximale d'un fichier   ^   Taille maximale d'une partition   ^   Journalisée ou non ?  ^  Gestion des droits d'accès?  ^   Notes   ^

64 Mot inconnu : ext2FS => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : Extended => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : System => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : TiB => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : TiB => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : Extended => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : System => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Espace(s) surnuméraire(s) à supprimer. => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Espace(s) surnuméraire(s) à supprimer. => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : Ext2 => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |
64 Mot inconnu : ½ => |  **ext2FS**\\ (Extended File System)  | 2 TiB | 4 TiB | Non | Oui | Extended File System est le système de fichiers natif de Linux.  En ses versions 1 et 2, on peut le considérer comme désuet, car il ne dispose pas de la journalisation.  Ext2 peut tout de même s'avérer utile sur des disquettes 3½ et sur les autres périphériques dont l'espace de stockage est restreint, car aucun espace ne doit être réservé à un journal. |

65 Mot inconnu : ext3FS => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : TiB => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : TiB => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : ext3 => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : ext2 => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Espace(s) surnuméraire(s) à supprimer. => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : ext2 => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
65 Mot inconnu : ext3 => |  **ext3FS**  | 2 TiB | 4 TiB | Oui | Oui | ext3 est essentiellement ext2 avec la gestion de la journalisation.  Il est possible de [[http://qliu.free.fr/Linux/ext3.html#s4|passer une partition formatée en ext2 vers le système de fichiers ext3]] (et //vice versa//) sans formatage. |
66 Mot inconnu : TiB => |  **[[:ext4|ext4FS]]**  | 16 TiB | 1 EiB | Oui | Oui | ext4 est le successeur du système de fichiers ext3. Il est cependant considéré par ses propres concepteurs comme une solution intermédiaire en attendant le vrai système de nouvelle génération que sera BtrFS|
66 Mot inconnu : EiB => |  **[[:ext4|ext4FS]]**  | 16 TiB | 1 EiB | Oui | Oui | ext4 est le successeur du système de fichiers ext3. Il est cependant considéré par ses propres concepteurs comme une solution intermédiaire en attendant le vrai système de nouvelle génération que sera BtrFS|
66 Mot inconnu : ext3 => |  **[[:ext4|ext4FS]]**  | 16 TiB | 1 EiB | Oui | Oui | ext4 est le successeur du système de fichiers ext3. Il est cependant considéré par ses propres concepteurs comme une solution intermédiaire en attendant le vrai système de nouvelle génération que sera BtrFS|
66 Mot inconnu : BtrFS => |  **[[:ext4|ext4FS]]**  | 16 TiB | 1 EiB | Oui | Oui | ext4 est le successeur du système de fichiers ext3. Il est cependant considéré par ses propres concepteurs comme une solution intermédiaire en attendant le vrai système de nouvelle génération que sera BtrFS|

67 Mot inconnu : ReiserFS => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : TiB => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : TiB => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : Reiser => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : Namesys => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : ReiserFS => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Si “ko” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Espace(s) surnuméraire(s) à supprimer. => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : ReiserFS => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : ext3 => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Il manque un espace insécable. => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Espace(s) surnuméraire(s) à supprimer. => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |
67 Mot inconnu : ReiserFS => |  **ReiserFS**  | 8 TiB | 16 TiB | Oui | Oui | Développé par Hans Reiser et la société Namesys, ReiserFS est reconnu particulièrement pour bien gérer les fichiers de moins de 4 ko.  Un avantage du ReiserFS, par rapport à ext3, est qu'il ne nécessite pas une hiérarchisation aussi poussée: il s'avère intéressant pour le stockage de plusieurs fichiers temporaires provenant d'Internet.  Par contre, ReiserFS n'est pas recommandé pour les ordinateurs portables, car le disque dur tourne en permanence, ce qui consomme beaucoup d'énergie. |

68 Mot inconnu : BtrFS => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |
68 Il manque un espace insécable. => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |
68 Mot inconnu : EiB => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |
68 Il manque un espace insécable. => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |
68 Il manque un espace insécable. => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |
68 Mot inconnu : snapshot => | **[[BtrFS]]** | ??? | 16 EiB | ??? | ??? | Fonction de snapshot et de sauvegarde incrémentale |

69 Mot inconnu : GiB => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |
69 Mot inconnu : GiB => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |
69 Espace(s) surnuméraire(s) à supprimer. => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |
69 Mot inconnu : ½ => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |
69 Espace(s) surnuméraire(s) à supprimer. => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |
69 Mot inconnu : memory => |  **FAT**\\ (File Allocation Table)  | 2 GiB | 2 GiB | Non | Non* | Développé par Microsoft, ce système de fichiers se rencontre moins fréquemment aujourd'hui.  Il reste néanmoins utilisé sur les disquettes 3½ formatées sous Windows et devrait être utilisé sous Linux si une disquette doit aussi être lue sous Windows.  Il est aussi utilisé par plusieurs constructeurs comme système de fichiers pour cartes mémoires (//memory sticks//), car, bien documenté, ce système de fichiers reste le plus universellement utilisé et accessible. |

70 Mot inconnu : FAT32 => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : GiB => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : TiB => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : SP4 => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : XP => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : FAT32 => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Si “Go” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Espace(s) surnuméraire(s) à supprimer. => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Mot inconnu : FAT32 => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Si “Go” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |
70 Accord de genre erroné entre « Go » et « formatée ». => |  **FAT32**  | 4 GiB | 8 TiB | Non | Non* | Ce système de fichiers, aussi créé par Microsoft, est une évolution de son prédécesseur. Depuis ses versions 2000 SP4 et XP, Windows ne peut pas formater (ou bloque volontairement le formatage) une partition en FAT32 d'une taille supérieure à 32 Go. Cette limitation ne s'applique pas sous Linux, de même qu'avec des versions antérieures de Windows.  Une partition FAT32 d'une taille supérieure à 32 Go déjà formatée pourra être lue par Windows, peu importe sa version. |

71 Mot inconnu : NTFS => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |
71 Mot inconnu : Technology => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |
71 Mot inconnu : System => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |
71 Mot inconnu : TiB => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |
71 Mot inconnu : TiB => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |
71 Il manque un espace. => |  **NTFS**\\ (New Technology File System)  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft, et il reste très peu documenté. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **[[:tutoriel:ntfs|ntfs-3g]]**. Ce pilote est inclus de base dans Ubuntu, et disponible en paquets dans les [[:dépôts]] pour les versions antérieures. |

72 Mot inconnu : exFAT => | **[[exFAT]]**  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **exfat-fuse**.  |
72 Mot inconnu : TiB => | **[[exFAT]]**  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **exfat-fuse**.  |
72 Mot inconnu : TiB => | **[[exFAT]]**  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **exfat-fuse**.  |
72 Mot inconnu : exfat-fuse => | **[[exFAT]]**  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **exfat-fuse**.  |
72 Espace(s) surnuméraire(s) à supprimer. => | **[[exFAT]]**  | 16 TiB | 256 TiB | Oui | Oui* | Ce système de fichiers a aussi été développé par Microsoft. L'écriture depuis Linux sur ce système de fichiers est stable à l'aide du pilote **exfat-fuse**.  |

73 Mot inconnu : EiB => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Une de ces ponctuations est superflue. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Mot inconnu : PiB => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Accord de nombre erroné avec « 1024 » : « tébioctet » devrait être au pluriel. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Une de ces ponctuations est superflue. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Mot inconnu : TiB => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Une de ces ponctuations est superflue. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Mot inconnu : GiB => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Mot inconnu : mibioctets => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Pas d’espace après ce signe. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Mot inconnu : Wikipedia => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^
73 Pas d’espace avant ce signe. => ^ EiB = Exbioctets (1024 pébioctets) :: PiB = Pébioctet (1024 tébioctet) :: TiB = Tébioctet (1024 gibioctets) :: GiB = Gibioctet (1024 mibioctets) [ [[wpfr>Octet|Plus d'informations sur la Wikipedia]] ]   ^^^^^^

77 Mot inconnu : FAT32 => ==== Systèmes de fichiers FAT32 et NTFS ====
77 Mot inconnu : NTFS => ==== Systèmes de fichiers FAT32 et NTFS ====

78 Mot inconnu : NTFS => Parmi les systèmes de fichiers précédents, les seuls sur lesquels on ne peut pas installer Linux sont le NTFS, la FAT et la FAT32.  En théorie, il pourrait être possible d'installer Linux sur l'un de ces systèmes de fichiers, mais comme ce système de fichiers ne gère pas les droits d'accès, il résulterait un système d'exploitation hautement non-sécurisé.
78 Mot inconnu : FAT32 => Parmi les systèmes de fichiers précédents, les seuls sur lesquels on ne peut pas installer Linux sont le NTFS, la FAT et la FAT32.  En théorie, il pourrait être possible d'installer Linux sur l'un de ces systèmes de fichiers, mais comme ce système de fichiers ne gère pas les droits d'accès, il résulterait un système d'exploitation hautement non-sécurisé.
78 Espace(s) surnuméraire(s) à supprimer. => Parmi les systèmes de fichiers précédents, les seuls sur lesquels on ne peut pas installer Linux sont le NTFS, la FAT et la FAT32.  En théorie, il pourrait être possible d'installer Linux sur l'un de ces systèmes de fichiers, mais comme ce système de fichiers ne gère pas les droits d'accès, il résulterait un système d'exploitation hautement non-sécurisé.

80 Mot inconnu : FAT32 => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Mot inconnu : NTFS => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Mot inconnu : ext2 => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Mot inconnu : ext3 => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Mot inconnu : ReiserFS => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Typographie : points de suspension. Utilisez le caractère dédié. => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.
80 Il manque un espace insécable. => Les systèmes de fichiers créés par Microsoft (FAT, FAT32 et NTFS) **ne gèrent pas les droits d'accès aux fichiers** comme les systèmes de fichiers de type Unix (ext2, ext3, ReiserFS...). Toutefois, pour être accessible sous Linux, un système de fichiers doit disposer du système de droits d'accès; pour contourner cette limitation, les droits d'accès de type Unix sont émulés sur ces systèmes de fichiers. Cette émulation est effectuée au montage d'une partition de disque dur formatée selon l'un de ces systèmes de fichiers, et ces droits sont immuables tout le temps que ce système de fichiers est en cours d'utilisation.

82 Mot inconnu : NTFS => Il n'est pas possible de modifier les permissions ou les propriétés d'un fichier ou d'un dossier situé dans un système de fichiers NTFS ou FAT32. Le seul moyen de changer ce comportement est de démonter le système de fichiers puis le remonter avec des options de montage différentes.
82 Mot inconnu : FAT32 => Il n'est pas possible de modifier les permissions ou les propriétés d'un fichier ou d'un dossier situé dans un système de fichiers NTFS ou FAT32. Le seul moyen de changer ce comportement est de démonter le système de fichiers puis le remonter avec des options de montage différentes.

84 Mot inconnu : NTFS => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.
84 Mot inconnu : ACL => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.
84 Mot inconnu : ACL => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.
84 Mot inconnu : NTFS => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.
84 Mot inconnu : ACL => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.
84 Mot inconnu : NTFS => Sous Microsoft(r) Windows(r), le système de fichiers NTFS gère les droits d'accès basé sur une liste de contrôle (ACL) qui n'est pas prise en compte sous Linux. Linux peut aussi prendre en charge une forme d'ACL, mais celle-ci est différente de celle implantée dans NTFS. Pour cette raison, les ACL des systèmes de fichiers NTFS sont simplement ignorées.

86 Il manque un espace insécable. => <note help>**//«Je désire créer une partition d'échange de fichiers entre Ubuntu et Microsoft(r) Windows(r). Quel système de fichiers devrais-je préférer ?»//**
86 Il manque un espace insécable. => <note help>**//«Je désire créer une partition d'échange de fichiers entre Ubuntu et Microsoft(r) Windows(r). Quel système de fichiers devrais-je préférer ?»//**
86 Il manque un espace insécable. => <note help>**//«Je désire créer une partition d'échange de fichiers entre Ubuntu et Microsoft(r) Windows(r). Quel système de fichiers devrais-je préférer ?»//**

88 Mot inconnu : NTFS => Vous devriez faire une partition d'échange formatée en NTFS. Elle sera pleinement gérée par Windows NT/2000/XP/Vista et Ubuntu. \\
88 Mot inconnu : NT => Vous devriez faire une partition d'échange formatée en NTFS. Elle sera pleinement gérée par Windows NT/2000/XP/Vista et Ubuntu. \\
88 Mot inconnu : XP => Vous devriez faire une partition d'échange formatée en NTFS. Elle sera pleinement gérée par Windows NT/2000/XP/Vista et Ubuntu. \\
88 Mot inconnu : Vista => Vous devriez faire une partition d'échange formatée en NTFS. Elle sera pleinement gérée par Windows NT/2000/XP/Vista et Ubuntu. \\

91 Mot inconnu : ext3 => Il n'existe aucun moyen de contourner ce problème, vous pouvez créer une partition d'échange formatée en ext3, mais le problème se retrouvera sous Windows ce coup ci, avec des problèmes de sécurités plus importants encore.
91 Il manque probablement un trait d’union. => Il n'existe aucun moyen de contourner ce problème, vous pouvez créer une partition d'échange formatée en ext3, mais le problème se retrouvera sous Windows ce coup ci, avec des problèmes de sécurités plus importants encore.

94 Mot inconnu : exFAT => ==== Systèmes de fichiers exFAT ====

96 Mot inconnu : ZFS => ==== Systèmes de fichiers ZFS ====

97 Espace(s) surnuméraire(s) à supprimer. => **Ce système de fichier est maintenant géré de  façon standard avec la version 20.04.0**

99 Espace(s) surnuméraire(s) à supprimer. => Il n'y a pas encore une documentation dédiée.   En attendant,  voila un avis:    
99 Espace(s) surnuméraire(s) à supprimer. => Il n'y a pas encore une documentation dédiée.   En attendant,  voila un avis:    
99 Il manque un espace insécable. => Il n'y a pas encore une documentation dédiée.   En attendant,  voila un avis:    
99 Espace(s) en fin de ligne à supprimer. => Il n'y a pas encore une documentation dédiée.   En attendant,  voila un avis:    

100 Mot inconnu : RAID0 => En une seule commande on dispose d'un équivalent RAID0 ou RAID1 dans lequel il suffit d'écrire car le montage se fait dès la création.
100 Mot inconnu : RAID1 => En une seule commande on dispose d'un équivalent RAID0 ou RAID1 dans lequel il suffit d'écrire car le montage se fait dès la création.
100 Si « car » est la conjonction de coordination, une virgule est peut-être souhaitable. => En une seule commande on dispose d'un équivalent RAID0 ou RAID1 dans lequel il suffit d'écrire car le montage se fait dès la création.

102 Il manque un espace insécable. => Préparation:  Créer au moins deux partitions de taille identique formatées ou non  sur un disque ou deux disques.  Ce n'est pas limité à deux disques!
102 Espace(s) surnuméraire(s) à supprimer. => Préparation:  Créer au moins deux partitions de taille identique formatées ou non  sur un disque ou deux disques.  Ce n'est pas limité à deux disques!
102 Espace(s) surnuméraire(s) à supprimer. => Préparation:  Créer au moins deux partitions de taille identique formatées ou non  sur un disque ou deux disques.  Ce n'est pas limité à deux disques!
102 Espace(s) surnuméraire(s) à supprimer. => Préparation:  Créer au moins deux partitions de taille identique formatées ou non  sur un disque ou deux disques.  Ce n'est pas limité à deux disques!
102 Il manque un espace insécable. => Préparation:  Créer au moins deux partitions de taille identique formatées ou non  sur un disque ou deux disques.  Ce n'est pas limité à deux disques!

104 Il manque un espace insécable. => Fabrication en mode sécurisé avec par exemple cette commande:

105 Mot inconnu : sudo => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Mot inconnu : zpool => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Mot inconnu : create => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Il manque un espace à côté du tiret. => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Mot inconnu : mirror => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Espace(s) surnuméraire(s) à supprimer. => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>
105 Espace(s) surnuméraire(s) à supprimer. => <code bash>sudo zpool create -f pool-test mirror  /dev/sda16 /dev/sda17  </code>

107 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Il faut laisser l'option **-f**  si les partitions avaient été formatées sinon elle est inutile.

109 Dialogues et énumérations : un tiret cadratin [1] ou demi-cadratin [2], suivi d’un espace insécable, est requis. => - Il faut supprimer l'option **mirror** si on veut du  non sécurisé.
109 Mot inconnu : mirror => - Il faut supprimer l'option **mirror** si on veut du  non sécurisé.
109 Espace(s) surnuméraire(s) à supprimer. => - Il faut supprimer l'option **mirror** si on veut du  non sécurisé.

112 Il manque un espace insécable. => Il ne reste plus qu'à l'utiliser par exemple:

113 Mot inconnu : sudo => <code bash>sudo mkdir  /pool-test/MyDATA
113 Mot inconnu : mkdir => <code bash>sudo mkdir  /pool-test/MyDATA
113 Espace(s) surnuméraire(s) à supprimer. => <code bash>sudo mkdir  /pool-test/MyDATA
113 Mot inconnu : MyDATA => <code bash>sudo mkdir  /pool-test/MyDATA

114 Mot inconnu : sudo => sudo cp -Rv /DATA/R*/*  /pool-test/MyDATA </code>
114 Mot inconnu : cp => sudo cp -Rv /DATA/R*/*  /pool-test/MyDATA </code>
114 Il manque un espace à côté du tiret. => sudo cp -Rv /DATA/R*/*  /pool-test/MyDATA </code>
114 Mot inconnu : Rv => sudo cp -Rv /DATA/R*/*  /pool-test/MyDATA </code>
114 Mot inconnu : MyDATA => sudo cp -Rv /DATA/R*/*  /pool-test/MyDATA </code>

117 Guillemets isolés. => Et suive le taux de remplissage avec la commande standard " **df -h** " ou la commande dédiée.
117 Mot inconnu : df => Et suive le taux de remplissage avec la commande standard " **df -h** " ou la commande dédiée.
117 Il manque un espace à côté du tiret. => Et suive le taux de remplissage avec la commande standard " **df -h** " ou la commande dédiée.
117 Guillemets isolés. => Et suive le taux de remplissage avec la commande standard " **df -h** " ou la commande dédiée.

118 Mot inconnu : zpool => <code bash>zpool list
118 Mot inconnu : list => <code bash>zpool list

119 Mot inconnu : NAME => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : SIZE => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : CKPOINT => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : EXPANDSZ => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : FRAG => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : DEDUP => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : HEALTH => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Espace(s) surnuméraire(s) à supprimer. => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
119 Mot inconnu : ALTROOT => NAME        SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT

120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Si “G” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Si “G” est une unité de mesure, il manque un espace insécable. Si le nombre se rapporte au mot suivant, c’est aussi valable. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Avec une unité de mesure, mettez un espace insécable. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Avec une unité de mesure, mettez un espace insécable. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Mot inconnu : ONLINE => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -
120 Espace(s) surnuméraire(s) à supprimer. => pool-test    61G  36,8G  24,2G        -         -     0%    60%  1.00x    ONLINE  -

122 Mot inconnu : df => df -h | grep pool
122 Il manque un espace à côté du tiret. => df -h | grep pool
122 Mot inconnu : grep => df -h | grep pool

123 Espace(s) surnuméraire(s) à supprimer. => pool-test           60G     37G   23G  63% /pool-test </code>
123 Espace(s) surnuméraire(s) à supprimer. => pool-test           60G     37G   23G  63% /pool-test </code>
123 Espace(s) surnuméraire(s) à supprimer. => pool-test           60G     37G   23G  63% /pool-test </code>
123 Espace(s) surnuméraire(s) à supprimer. => pool-test           60G     37G   23G  63% /pool-test </code>
123 Avec une unité de mesure, mettez un espace insécable. => pool-test           60G     37G   23G  63% /pool-test </code>

126 Mot inconnu : sudo => <code bash>sudo zpool import pool-test</code>
126 Mot inconnu : zpool => <code bash>sudo zpool import pool-test</code>

128 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

130 Il manque un espace insécable. => Pour plus de détails voir un site anglais: https://ubuntu.com/tutorials/setup-zfs-storage-pool#1-overview

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>                  

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>      

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>  

146 Espace(s) en fin de ligne à supprimer. => Afficher le système de fichier d'une partition 

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * partition montée

149 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>        df -h
149 Mot inconnu : df =>        df -h
149 Il manque un espace à côté du tiret. =>        df -h

151 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>    * partition quelconque (nécessite que le paquet **parted** soit installé et que le disque /dev/sda existe)
151 Mot inconnu : parted =>    * partition quelconque (nécessite que le paquet **parted** soit installé et que le disque /dev/sda existe)

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>        sudo parted /dev/sda print all  
153 Mot inconnu : sudo =>        sudo parted /dev/sda print all  
153 Mot inconnu : parted =>        sudo parted /dev/sda print all  
153 Mot inconnu : print =>        sudo parted /dev/sda print all  
153 Mot inconnu : all =>        sudo parted /dev/sda print all  
153 Espace(s) en fin de ligne à supprimer. =>        sudo parted /dev/sda print all  

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Mot inconnu : Comparison_of_file_systems =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Mot inconnu : Wikipedia =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Il manque un espace insécable. =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Mot inconnu : Comparison =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Mot inconnu : of =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)
158 Mot inconnu : Systems =>   * [[wp>Comparison_of_file_systems|Wikipedia : Comparison of File Systems]] (en)

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[wpfr>Système de fichiers]] (fr)

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[wpfr>Ext2]], [[wpfr>Ext3]], [[wpfr>Ext4]], [[wpfr>ReiserFS]] (fr)
160 Mot inconnu : Ext2 =>   * [[wpfr>Ext2]], [[wpfr>Ext3]], [[wpfr>Ext4]], [[wpfr>ReiserFS]] (fr)
160 Mot inconnu : Ext3 =>   * [[wpfr>Ext2]], [[wpfr>Ext3]], [[wpfr>Ext4]], [[wpfr>ReiserFS]] (fr)
160 Mot inconnu : Ext4 =>   * [[wpfr>Ext2]], [[wpfr>Ext3]], [[wpfr>Ext4]], [[wpfr>ReiserFS]] (fr)
160 Mot inconnu : ReiserFS =>   * [[wpfr>Ext2]], [[wpfr>Ext3]], [[wpfr>Ext4]], [[wpfr>ReiserFS]] (fr)

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://linuxgazette.net/122/TWDT.html#piszcz| Comparaison de performance]] (en)

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://plfnicolarius.free.fr/tutoriel_logiciel_linux_verifier_systeme_de_fichiers.php|Vérifier son système de fichiers sous Linux]]

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[http://www.opendedup.org/|OpenDedup]] (SDFS) : système de fichier supportant la déduplication.
163 Mot inconnu : SDFS =>   * [[http://www.opendedup.org/|OpenDedup]] (SDFS) : système de fichier supportant la déduplication.
163 Il manque un espace insécable. =>   * [[http://www.opendedup.org/|OpenDedup]] (SDFS) : système de fichier supportant la déduplication.

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   * [[:chemins|Les chemins d'accès sous Linux]]

167 Il manque un espace insécable. => //Contributeurs: [[utilisateurs:AlexandreP]],[[utilisateurs:fnx]] \\
167 Il manque un espace. => //Contributeurs: [[utilisateurs:AlexandreP]],[[utilisateurs:fnx]] \\
167 Il manque un espace. => //Contributeurs: [[utilisateurs:AlexandreP]],[[utilisateurs:fnx]] \\

168 Mot inconnu : Filesystems => Basé sur [[https://wiki.ubuntu.com/LinuxFilesystemsExplained|Linux Filesystems Explained]]//
168 Mot inconnu : Explained => Basé sur [[https://wiki.ubuntu.com/LinuxFilesystemsExplained|Linux Filesystems Explained]]//
