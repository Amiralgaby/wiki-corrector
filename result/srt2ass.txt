2 Mot inconnu : SubRip => ====== SubRip ======

3 Mot inconnu : SubRip => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant :
3 Mot inconnu : srt => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant :
3 Espace(s) surnuméraire(s) à supprimer. => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant :
3 Il manque un espace insécable. => Les sous-titres SubRip, d'extension //srt//, sont les plus répandus  sur Internet, notamment du fait de leur simplicité. Ces sous-titres sont au format suivant :

18 Mot inconnu : Advanced => ====== Advanced Sub Station Alpha ======
18 Mot inconnu : Sub => ====== Advanced Sub Station Alpha ======

19 Mot inconnu : Advanced => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Mot inconnu : Sub => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Mot inconnu : ass => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Mot inconnu : ssa => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Confusion probable : moi-même, toi-même, lui-même, elle-même, soi-même, elles-mêmes, eux-mêmes. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Il manque probablement un trait d’union. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…
19 Il manque probablement un trait d’union. => Les sous-titres Advanced Sub Station Alpha, d'extensions //ass// ou //ssa//, permettent en plus de styliser le texte affiché, avec de multiples styles que l'on peut créer soit même. Il est notamment possible de choisir la police à utiliser, la taille du texte, sa couleur d'avant plan, d'arrière plan, de contour, si le texte est gras, italique, souligné et bien d'autres choses comme des décalages ou des rotations…

21 Mot inconnu : Advanced => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-)
21 Mot inconnu : Sub => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-)
21 Mot inconnu : SubRip => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-)
21 Il manque un espace insécable. => L'intérêt minimal de l'Advanced Sub Station Alpha contre le SubRip est notamment celui de pouvoir définir un contour au texte. Texte blanc et contour noir par exemple et fini les horribles sous-titres blancs sur fonds blancs. ;-)

23 Il manque un espace insécable. => Ce sous-titre est également au format texte :

25 Il manque un espace insécable. => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.
25 Mot inconnu : Regular => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.
25 Une de ces ponctuations est superflue. => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.
25 Une de ces ponctuations est superflue. => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.
25 Mot inconnu : Npeut => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.
25 Mot inconnu : Nlignes => Dialogue: 0,0:03:54.70,0:03:59.23,Regular,,0000,0000,0000,,Texte du premier sous titre qui\Npeut s'étaler sur plusieurs\Nlignes.

26 Il manque un espace insécable. => Dialogue: 0,0:04:04.70,0:04:09.23,Regular,,0000,0000,0000,,On ne peut pas mettre du texte\Nen italique mot par mot.
26 Mot inconnu : Regular => Dialogue: 0,0:04:04.70,0:04:09.23,Regular,,0000,0000,0000,,On ne peut pas mettre du texte\Nen italique mot par mot.
26 Une de ces ponctuations est superflue. => Dialogue: 0,0:04:04.70,0:04:09.23,Regular,,0000,0000,0000,,On ne peut pas mettre du texte\Nen italique mot par mot.
26 Une de ces ponctuations est superflue. => Dialogue: 0,0:04:04.70,0:04:09.23,Regular,,0000,0000,0000,,On ne peut pas mettre du texte\Nen italique mot par mot.
26 Mot inconnu : Nen => Dialogue: 0,0:04:04.70,0:04:09.23,Regular,,0000,0000,0000,,On ne peut pas mettre du texte\Nen italique mot par mot.

27 Il manque un espace insécable. => Dialogue: 0,0:04:14.70,0:04:15.23,Italic,,0000,0000,0000,,Mais sur une ligne entière oui.\NOu sur plusieurs lignes aussi.
27 Mot inconnu : Italic => Dialogue: 0,0:04:14.70,0:04:15.23,Italic,,0000,0000,0000,,Mais sur une ligne entière oui.\NOu sur plusieurs lignes aussi.
27 Une de ces ponctuations est superflue. => Dialogue: 0,0:04:14.70,0:04:15.23,Italic,,0000,0000,0000,,Mais sur une ligne entière oui.\NOu sur plusieurs lignes aussi.
27 Une de ces ponctuations est superflue. => Dialogue: 0,0:04:14.70,0:04:15.23,Italic,,0000,0000,0000,,Mais sur une ligne entière oui.\NOu sur plusieurs lignes aussi.
27 Mot inconnu : NOu => Dialogue: 0,0:04:14.70,0:04:15.23,Italic,,0000,0000,0000,,Mais sur une ligne entière oui.\NOu sur plusieurs lignes aussi.

30 Il manque un espace insécable. => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note>
30 Accord de nombre erroné : « balise » devrait être au pluriel. => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note>
30 Mot inconnu : i1 => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note>
30 Mot inconnu : i0 => <note>note : il est en fait possible de mettre du texte en italique mot par mot via les balise {\i1} et {\i0}</note>

35 Il manque un espace insécable. => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help
35 Mot inconnu : srt2ass => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help
35 Mot inconnu : py => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help
35 Mot inconnu : srt2ass => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help
35 Mot inconnu : py => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help
35 Mot inconnu : help => Pour obtenir de l'aide : srt2ass.py -h ou srt2ass.py --help

37 Mot inconnu : SRT => Supporte les fichiers SRT encodés en ISO-8859-1, UTF-8, UTF-16 (LE/BE), UTF-32 (LE/BE)

39 Mot inconnu : SRT => Converti les fichiers SRT en ASS et les encodes en UTF-8.
39 Mot inconnu : ASS => Converti les fichiers SRT en ASS et les encodes en UTF-8.
39 Incohérence. Ceci est un verbe à la 2ᵉ personne du singulier. Sujet (“tu” ou “toi qui”) introuvable. => Converti les fichiers SRT en ASS et les encodes en UTF-8.

43 Il manque un espace insécable. => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.
43 Mot inconnu : srt2ass => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.
43 Mot inconnu : py => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.
43 Mot inconnu : executé => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.
43 Mot inconnu : SRT => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.
43 Mot inconnu : SRT => Comportement par défaut : srt2ass.py executé sans arguments convertira tous les fichiers SRT du dossier courant. Les fichiers SRT ne seront pas supprimés.

46 Il manque un espace insécable. => #!/usr/bin/env python

47 Mot inconnu : coding => # -*- coding: utf-8 -*-
47 Il manque un espace insécable. => # -*- coding: utf-8 -*-
47 Mot inconnu : utf-8 => # -*- coding: utf-8 -*-

50 Mot inconnu : argparse => import argparse

51 Mot inconnu : sys => import sys, os, glob
51 Mot inconnu : glob => import sys, os, glob

53 Mot inconnu : this => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : list => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : to => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : delete => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : automatically => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : subs => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : containing => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : one => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : of => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : the => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : following => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : words => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : All => # Use this list to delete automatically subs containing one of the following words. All in lower case.
53 Mot inconnu : lower => # Use this list to delete automatically subs containing one of the following words. All in lower case.

54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : subtitles => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : by => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : by => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : transcript => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : subtitles => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : subtitle => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques ouvrants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : sync => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Mot inconnu : and => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]
54 Guillemets typographiques fermants. => exclusion = ["subtitles by", "sync by", "<font", "synchro:", "sync:", "transcript:", "subtitles:", "subtitle:", "sync and corrections"]

56 Mot inconnu : class => class Console:
56 Il manque un espace insécable. => class Console:

57 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   verbose = False
57 Mot inconnu : verbose =>   verbose = False
57 Mot inconnu : False =>   verbose = False

58 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

59 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod

60 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def l(c, message, linefeed = True):
60 Mot inconnu : def =>   def l(c, message, linefeed = True):
60 Il manque un espace avant la parenthèse. =>   def l(c, message, linefeed = True):
60 Mot inconnu : linefeed =>   def l(c, message, linefeed = True):
60 Mot inconnu : True =>   def l(c, message, linefeed = True):

61 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     sys.stdout.write(message)
61 Il manque un espace avant la parenthèse. =>     sys.stdout.write(message)

62 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if linefeed:
62 Mot inconnu : linefeed =>     if linefeed:
62 Il manque un espace insécable. =>     if linefeed:

63 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       sys.stdout.write("\n")
63 Il manque un espace avant la parenthèse. =>       sys.stdout.write("\n")
63 Guillemets typographiques fermants. =>       sys.stdout.write("\n")

64 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

65 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod

66 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def v(c, message, linefeed = True):
66 Mot inconnu : def =>   def v(c, message, linefeed = True):
66 Il manque un espace avant la parenthèse. =>   def v(c, message, linefeed = True):
66 Mot inconnu : linefeed =>   def v(c, message, linefeed = True):
66 Mot inconnu : True =>   def v(c, message, linefeed = True):

67 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if c.verbose:
67 Mot inconnu : verbose =>     if c.verbose:
67 Il manque un espace insécable. =>     if c.verbose:

68 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       c.l(message, linefeed)
68 Il manque un espace avant la parenthèse. =>       c.l(message, linefeed)
68 Mot inconnu : linefeed =>       c.l(message, linefeed)

69 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

70 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod

71 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def w(c, message, linefeed = True):
71 Mot inconnu : def =>   def w(c, message, linefeed = True):
71 Il manque un espace avant la parenthèse. =>   def w(c, message, linefeed = True):
71 Mot inconnu : linefeed =>   def w(c, message, linefeed = True):
71 Mot inconnu : True =>   def w(c, message, linefeed = True):

72 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     c.v("## Warning ## " + message, linefeed)
72 Il manque un espace avant la parenthèse. =>     c.v("## Warning ## " + message, linefeed)
72 Guillemets isolés. =>     c.v("## Warning ## " + message, linefeed)
72 Mot inconnu : linefeed =>     c.v("## Warning ## " + message, linefeed)

73 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

74 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   @classmethod

75 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def nl(c):
75 Mot inconnu : def =>   def nl(c):

76 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if c.verbose:
76 Mot inconnu : verbose =>     if c.verbose:
76 Il manque un espace insécable. =>     if c.verbose:

77 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       sys.stdout.write("\n")
77 Il manque un espace avant la parenthèse. =>       sys.stdout.write("\n")
77 Guillemets typographiques fermants. =>       sys.stdout.write("\n")

79 Mot inconnu : class => class SubElement:
79 Mot inconnu : SubElement => class SubElement:
79 Il manque un espace insécable. => class SubElement:

80 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

81 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, start, end, text):
81 Mot inconnu : def =>   def __init__(self, start, end, text):
81 Mot inconnu : __init__ =>   def __init__(self, start, end, text):
81 Il manque un espace avant la parenthèse. =>   def __init__(self, start, end, text):
81 Mot inconnu : start =>   def __init__(self, start, end, text):
81 Mot inconnu : end =>   def __init__(self, start, end, text):
81 Mot inconnu : text =>   def __init__(self, start, end, text):

82 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.timeStart = start
82 Mot inconnu : timeStart =>     self.timeStart = start
82 Mot inconnu : start =>     self.timeStart = start

83 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.timeEnd = end
83 Mot inconnu : timeEnd =>     self.timeEnd = end
83 Mot inconnu : end =>     self.timeEnd = end

84 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.text = text
84 Mot inconnu : text =>     self.text = text
84 Mot inconnu : text =>     self.text = text

85 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

86 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def appendLine(self, text):
86 Mot inconnu : def =>   def appendLine(self, text):
86 Mot inconnu : appendLine =>   def appendLine(self, text):
86 Il manque un espace avant la parenthèse. =>   def appendLine(self, text):
86 Mot inconnu : text =>   def appendLine(self, text):

87 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = text.lstrip().rstrip()
87 Mot inconnu : text =>     text = text.lstrip().rstrip()
87 Mot inconnu : text =>     text = text.lstrip().rstrip()
87 Mot inconnu : lstrip =>     text = text.lstrip().rstrip()
87 Mot inconnu : rstrip =>     text = text.lstrip().rstrip()

88 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if text != '':
88 Mot inconnu : text =>     if text != '':
88 Il manque un espace insécable. =>     if text != '':

89 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if self.text != '':
89 Mot inconnu : text =>       if self.text != '':
89 Il manque un espace insécable. =>       if self.text != '':

90 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         self.text += "\n"
90 Mot inconnu : text =>         self.text += "\n"
90 Guillemets typographiques fermants. =>         self.text += "\n"

91 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.text += text
91 Mot inconnu : text =>       self.text += text
91 Mot inconnu : text =>       self.text += text

92 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

93 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __repr__(self):
93 Mot inconnu : def =>   def __repr__(self):
93 Mot inconnu : __repr__ =>   def __repr__(self):
93 Il manque un espace avant la parenthèse. =>   def __repr__(self):

94 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return self.text
94 Mot inconnu : return =>     return self.text
94 Mot inconnu : text =>     return self.text

96 Mot inconnu : class => class AdvancedSubStationAlphaWriter:
96 Mot inconnu : AdvancedSubStationAlphaWriter => class AdvancedSubStationAlphaWriter:
96 Il manque un espace insécable. => class AdvancedSubStationAlphaWriter:

97 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

98 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : def =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : __init__ =>   def __init__(self, filename, subElements, regular, size):
98 Il manque un espace avant la parenthèse. =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : filename =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : subElements =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : regular =>   def __init__(self, filename, subElements, regular, size):
98 Mot inconnu : size =>   def __init__(self, filename, subElements, regular, size):

99 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Writing "' + filename + '"')
99 Il manque un espace avant la parenthèse. =>     Console.v('Writing "' + filename + '"')
99 Mot inconnu : Writing =>     Console.v('Writing "' + filename + '"')
99 Mot inconnu : filename =>     Console.v('Writing "' + filename + '"')

100 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.fontRegular = regular
100 Mot inconnu : fontRegular =>     self.fontRegular = regular
100 Mot inconnu : regular =>     self.fontRegular = regular

101 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.fontSize = size
101 Mot inconnu : fontSize =>     self.fontSize = size
101 Mot inconnu : size =>     self.fontSize = size

102 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.filename = filename
102 Mot inconnu : filename =>     self.filename = filename
102 Mot inconnu : filename =>     self.filename = filename

103 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.elements = subElements
103 Mot inconnu : elements =>     self.elements = subElements
103 Mot inconnu : subElements =>     self.elements = subElements

104 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.write()
104 Mot inconnu : write =>     self.write()

105 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

106 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def write(self):
106 Mot inconnu : def =>   def write(self):
106 Mot inconnu : write =>   def write(self):
106 Il manque un espace avant la parenthèse. =>   def write(self):

107 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f = open(self.filename, 'w')
107 Il manque un espace avant la parenthèse. =>     f = open(self.filename, 'w')
107 Mot inconnu : filename =>     f = open(self.filename, 'w')
107 Guillemets typographiques ouvrants. =>     f = open(self.filename, 'w')

108 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.write(codecs.BOM_UTF8)
108 Mot inconnu : write =>     f.write(codecs.BOM_UTF8)
108 Il manque un espace avant la parenthèse. =>     f.write(codecs.BOM_UTF8)
108 Mot inconnu : BOM_UTF8 =>     f.write(codecs.BOM_UTF8)

109 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.write(self.getHeader())
109 Mot inconnu : write =>     f.write(self.getHeader())
109 Il manque un espace avant la parenthèse. =>     f.write(self.getHeader())
109 Mot inconnu : getHeader =>     f.write(self.getHeader())

110 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for e in self.elements:
110 Mot inconnu : elements =>     for e in self.elements:
110 Il manque un espace insécable. =>     for e in self.elements:

111 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f.write(self.getLine(e))
111 Mot inconnu : write =>       f.write(self.getLine(e))
111 Il manque un espace avant la parenthèse. =>       f.write(self.getLine(e))
111 Mot inconnu : getLine =>       f.write(self.getLine(e))

112 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.close()
112 Il manque un espace. =>     f.close()

113 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

114 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getLine(self, element):
114 Mot inconnu : def =>   def getLine(self, element):
114 Mot inconnu : getLine =>   def getLine(self, element):
114 Il manque un espace avant la parenthèse. =>   def getLine(self, element):
114 Mot inconnu : element =>   def getLine(self, element):

115 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     start = self.getTime(element.timeStart)
115 Mot inconnu : start =>     start = self.getTime(element.timeStart)
115 Mot inconnu : getTime =>     start = self.getTime(element.timeStart)
115 Il manque un espace avant la parenthèse. =>     start = self.getTime(element.timeStart)
115 Mot inconnu : element =>     start = self.getTime(element.timeStart)
115 Mot inconnu : timeStart =>     start = self.getTime(element.timeStart)

116 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     end = self.getTime(element.timeEnd)
116 Mot inconnu : end =>     end = self.getTime(element.timeEnd)
116 Mot inconnu : getTime =>     end = self.getTime(element.timeEnd)
116 Il manque un espace avant la parenthèse. =>     end = self.getTime(element.timeEnd)
116 Mot inconnu : element =>     end = self.getTime(element.timeEnd)
116 Mot inconnu : timeEnd =>     end = self.getTime(element.timeEnd)

117 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = element.text.replace("\n", "\\N")
117 Mot inconnu : text =>     text = element.text.replace("\n", "\\N")
117 Il manque un espace avant la parenthèse. =>     text = element.text.replace("\n", "\\N")
117 Guillemets typographiques fermants. =>     text = element.text.replace("\n", "\\N")
117 Guillemets typographiques fermants. =>     text = element.text.replace("\n", "\\N")

118 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     font = "Regular"
118 Guillemets typographiques ouvrants. =>     font = "Regular"
118 Mot inconnu : Regular =>     font = "Regular"
118 Guillemets typographiques fermants. =>     font = "Regular"

119 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

120 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Mot inconnu : text =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Mot inconnu : text =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Il manque un espace. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Il manque un espace avant la parenthèse. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Mot inconnu : i1 =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Il manque un espace avant la parenthèse. =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")
120 Mot inconnu : i0 =>     text = text.replace("<i>", "{\\i1}").replace("</i>", "{\\i0}")

121 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     # Fixes the subtitle
121 Mot inconnu : the =>     # Fixes the subtitle
121 Mot inconnu : subtitle =>     # Fixes the subtitle

122 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : text =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : find =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Il manque un espace avant la parenthèse. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : i1 =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Il manque un espace insécable. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : and =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : text =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : find =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Il manque un espace avant la parenthèse. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Mot inconnu : i0 =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:
122 Il manque un espace insécable. =>     if text.find("{\\i1}") != -1 and text.find("{\\i0}") == -1:

123 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       text += "{\\i0}"
123 Mot inconnu : text =>       text += "{\\i0}"
123 Mot inconnu : i0 =>       text += "{\\i0}"

124 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

125 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Mot inconnu : return =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Guillemets typographiques ouvrants. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Il manque un espace insécable. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Une de ces ponctuations est superflue. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Une de ces ponctuations est superflue. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Guillemets typographiques fermants. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Il manque un espace avant la parenthèse. =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Mot inconnu : start =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Mot inconnu : end =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)
125 Mot inconnu : text =>     return "Dialogue: 0,{0},{1},{2},,0000,0000,0000,,{3}\n".format(start, end, font, text)

126 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

127 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getTime(self, t):
127 Mot inconnu : def =>   def getTime(self, t):
127 Mot inconnu : getTime =>   def getTime(self, t):
127 Il manque un espace avant la parenthèse. =>   def getTime(self, t):

128 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms = t % 1000

129 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     t = (t - ms) / 1000
129 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     t = (t - ms) / 1000

130 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     s = t % 60

131 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     t = (t - s) / 60
131 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     t = (t - s) / 60

132 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     m = t % 60

133 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     h = (t - m) / 60
133 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” [3], s’il s’agit d’une soustraction.) =>     h = (t - m) / 60

134 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

135 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms /= 10

136 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms)
136 Mot inconnu : return =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms)
136 Il manque un espace avant la parenthèse. =>     return '{0:01}:{1:02}:{2:02}.{3:02}'.format(h, m, s, ms)

137 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

138 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def getHeader(self):
138 Mot inconnu : def =>   def getHeader(self):
138 Mot inconnu : getHeader =>   def getHeader(self):
138 Il manque un espace avant la parenthèse. =>   def getHeader(self):

139 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return "[Script Info]\n" \
139 Mot inconnu : return =>     return "[Script Info]\n" \
139 Guillemets typographiques fermants. =>     return "[Script Info]\n" \

140 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "ScriptType: V4.00+\n" \
140 Guillemets typographiques ouvrants. =>         + "ScriptType: V4.00+\n" \
140 Mot inconnu : ScriptType =>         + "ScriptType: V4.00+\n" \
140 Il manque un espace insécable. =>         + "ScriptType: V4.00+\n" \
140 Mot inconnu : V4 =>         + "ScriptType: V4.00+\n" \
140 Guillemets typographiques fermants. =>         + "ScriptType: V4.00+\n" \

141 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "\n"                   \
141 Guillemets typographiques fermants. =>         + "\n"                   \

142 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "[V4+ Styles]\n"       \
142 Mot inconnu : V4 =>         + "[V4+ Styles]\n"       \
142 Guillemets typographiques fermants. =>         + "[V4+ Styles]\n"       \

143 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Guillemets typographiques ouvrants. =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Il manque un espace insécable. =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Name =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Fontname =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Fontsize =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : PrimaryColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : SecondaryColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : OutlineColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : BackColour =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Bold =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Italic =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Underline =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : StrikeOut =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : ScaleX =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : ScaleY =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Spacing =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : BorderStyle =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Outline =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Shadow =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Alignment =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : MarginL =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : MarginR =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : MarginV =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Mot inconnu : Encoding =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \
143 Guillemets typographiques fermants. =>         + "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n" \

144 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets typographiques ouvrants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Il manque un espace insécable. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : Regular =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : fontRegular =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : fontSize =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : H00FFFFFF =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : H0000FFFF =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : H00000000 =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Mot inconnu : H00000000 =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
144 Guillemets typographiques fermants. =>         + "Style: Regular," + self.fontRegular + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \

145 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "\n" \
145 Guillemets typographiques fermants. =>         + "\n" \

146 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "[Events]\n" \
146 Mot inconnu : Events =>         + "[Events]\n" \
146 Guillemets typographiques fermants. =>         + "[Events]\n" \

147 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Guillemets typographiques ouvrants. =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Il manque un espace insécable. =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : Start =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : End =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : Actor =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : MarginL =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : MarginR =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : MarginV =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : Effect =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Mot inconnu : Text =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"
147 Guillemets typographiques fermants. =>         + "Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text\n"

149 Guillemets typographiques ouvrants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Il manque un espace insécable. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : Italic => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : fontItalic => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Guillemets fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : fontSize => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Guillemets fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : H00FFFFFF => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : H0000FFFF => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : H00000000 => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Mot inconnu : H00000000 => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \
149 Guillemets typographiques fermants. => #+ "Style: Italic," + self.fontItalic + "," + self.fontSize + ",&H00FFFFFF,&H0000FFFF,&H00000000,&H00000000,-1,-1,0,0,100,100,0,0,1,1,1,2,20,20,20,0\n" \

150 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         

152 Mot inconnu : class => class SubRipReader:
152 Mot inconnu : SubRipReader => class SubRipReader:
152 Il manque un espace insécable. => class SubRipReader:

153 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

154 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, filename):
154 Mot inconnu : def =>   def __init__(self, filename):
154 Mot inconnu : __init__ =>   def __init__(self, filename):
154 Il manque un espace avant la parenthèse. =>   def __init__(self, filename):
154 Mot inconnu : filename =>   def __init__(self, filename):

155 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Reading "' + filename + '"')
155 Il manque un espace avant la parenthèse. =>     Console.v('Reading "' + filename + '"')
155 Mot inconnu : Reading =>     Console.v('Reading "' + filename + '"')
155 Mot inconnu : filename =>     Console.v('Reading "' + filename + '"')

156 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.filename = filename
156 Mot inconnu : filename =>     self.filename = filename
156 Mot inconnu : filename =>     self.filename = filename

157 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.bomLength = 0
157 Mot inconnu : bomLength =>     self.bomLength = 0

158 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.encoding = 'utf-8'
158 Mot inconnu : encoding =>     self.encoding = 'utf-8'
158 Guillemets typographiques ouvrants. =>     self.encoding = 'utf-8'
158 Mot inconnu : utf-8 =>     self.encoding = 'utf-8'
158 Guillemets typographiques fermants. =>     self.encoding = 'utf-8'

159 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.lines = []
159 Mot inconnu : lines =>     self.lines = []

160 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.elements = []
160 Mot inconnu : elements =>     self.elements = []

161 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.detectBomAndEncoding()
161 Mot inconnu : detectBomAndEncoding =>     self.detectBomAndEncoding()

162 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.read()
162 Mot inconnu : read =>     self.read()

163 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     self.parse()
163 Il manque un espace. =>     self.parse()

164 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

165 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def detectBomAndEncoding(self):
165 Mot inconnu : def =>   def detectBomAndEncoding(self):
165 Mot inconnu : detectBomAndEncoding =>   def detectBomAndEncoding(self):
165 Il manque un espace avant la parenthèse. =>   def detectBomAndEncoding(self):

166 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f = open(self.filename, 'r')
166 Il manque un espace avant la parenthèse. =>     f = open(self.filename, 'r')
166 Mot inconnu : filename =>     f = open(self.filename, 'r')
166 Guillemets typographiques ouvrants. =>     f = open(self.filename, 'r')

167 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     begin = f.read(4)
167 Mot inconnu : begin =>     begin = f.read(4)
167 Mot inconnu : read =>     begin = f.read(4)

168 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     f.close()
168 Il manque un espace. =>     f.close()

169 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if begin.startswith(codecs.BOM_UTF8):
169 Mot inconnu : begin =>     if begin.startswith(codecs.BOM_UTF8):
169 Mot inconnu : startswith =>     if begin.startswith(codecs.BOM_UTF8):
169 Il manque un espace avant la parenthèse. =>     if begin.startswith(codecs.BOM_UTF8):
169 Mot inconnu : BOM_UTF8 =>     if begin.startswith(codecs.BOM_UTF8):

170 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-8'
170 Mot inconnu : encoding =>       self.encoding = 'utf-8'
170 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-8'
170 Mot inconnu : utf-8 =>       self.encoding = 'utf-8'
170 Guillemets typographiques fermants. =>       self.encoding = 'utf-8'

171 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 3
171 Mot inconnu : bomLength =>       self.bomLength = 3

172 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF16_LE):
172 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF16_LE):
172 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF16_LE):
172 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF16_LE):
172 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF16_LE):
172 Mot inconnu : BOM_UTF16_LE =>     elif begin.startswith(codecs.BOM_UTF16_LE):

173 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-16-le'
173 Mot inconnu : encoding =>       self.encoding = 'utf-16-le'
173 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-16-le'
173 Mot inconnu : utf-16-le =>       self.encoding = 'utf-16-le'
173 Guillemets typographiques fermants. =>       self.encoding = 'utf-16-le'

174 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 2
174 Mot inconnu : bomLength =>       self.bomLength = 2

175 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF16_BE):
175 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF16_BE):
175 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF16_BE):
175 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF16_BE):
175 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF16_BE):
175 Mot inconnu : BOM_UTF16_BE =>     elif begin.startswith(codecs.BOM_UTF16_BE):

176 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-16-be'
176 Mot inconnu : encoding =>       self.encoding = 'utf-16-be'
176 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-16-be'
176 Mot inconnu : utf-16-be =>       self.encoding = 'utf-16-be'
176 Guillemets typographiques fermants. =>       self.encoding = 'utf-16-be'

177 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 2
177 Mot inconnu : bomLength =>       self.bomLength = 2

178 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF32_LE):
178 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF32_LE):
178 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF32_LE):
178 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF32_LE):
178 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF32_LE):
178 Mot inconnu : BOM_UTF32_LE =>     elif begin.startswith(codecs.BOM_UTF32_LE):

179 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-32-le'
179 Mot inconnu : encoding =>       self.encoding = 'utf-32-le'
179 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-32-le'
179 Mot inconnu : utf-32-le =>       self.encoding = 'utf-32-le'
179 Guillemets typographiques fermants. =>       self.encoding = 'utf-32-le'

180 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 4
180 Mot inconnu : bomLength =>       self.bomLength = 4

181 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     elif begin.startswith(codecs.BOM_UTF32_BE):
181 Mot inconnu : elif =>     elif begin.startswith(codecs.BOM_UTF32_BE):
181 Mot inconnu : begin =>     elif begin.startswith(codecs.BOM_UTF32_BE):
181 Mot inconnu : startswith =>     elif begin.startswith(codecs.BOM_UTF32_BE):
181 Il manque un espace avant la parenthèse. =>     elif begin.startswith(codecs.BOM_UTF32_BE):
181 Mot inconnu : BOM_UTF32_BE =>     elif begin.startswith(codecs.BOM_UTF32_BE):

182 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'utf-32-be'
182 Mot inconnu : encoding =>       self.encoding = 'utf-32-be'
182 Guillemets typographiques ouvrants. =>       self.encoding = 'utf-32-be'
182 Mot inconnu : utf-32-be =>       self.encoding = 'utf-32-be'
182 Guillemets typographiques fermants. =>       self.encoding = 'utf-32-be'

183 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.bomLength = 4
183 Mot inconnu : bomLength =>       self.bomLength = 4

184 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

185 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if self.bomLength > 0:
185 Mot inconnu : bomLength =>     if self.bomLength > 0:
185 Il manque un espace insécable. =>     if self.bomLength > 0:

186 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Il manque un espace avant la parenthèse. =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Mot inconnu : BOM =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Mot inconnu : detected =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Il manque un espace insécable. =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Mot inconnu : Encoding =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Il manque un espace insécable. =>       Console.v('BOM detected! Encoding: ' + self.encoding)
186 Mot inconnu : encoding =>       Console.v('BOM detected! Encoding: ' + self.encoding)

187 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     else:
187 Mot inconnu : else =>     else:
187 Il manque un espace insécable. =>     else:

188 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Il manque un espace avant la parenthèse. =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : BOM =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : found =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : Using =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : utf-8 =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : default =>       Console.v('No BOM found. Using utf-8 as default encoding.')
188 Mot inconnu : encoding =>       Console.v('No BOM found. Using utf-8 as default encoding.')

189 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

190 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def read(self):
190 Mot inconnu : def =>   def read(self):
190 Mot inconnu : read =>   def read(self):
190 Il manque un espace avant la parenthèse. =>   def read(self):

191 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if not self.read2():
191 Mot inconnu : not =>     if not self.read2():
191 Mot inconnu : read2 =>     if not self.read2():

192 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Il manque un espace avant la parenthèse. =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : Fail =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : to =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : read =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : the =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : with =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : encoding =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : Trying =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')
192 Mot inconnu : iso-8859-1 =>       Console.v('Fail to read the file with ' + self.encoding + '. Trying iso-8859-1.')

193 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.encoding = 'iso-8859-1'
193 Mot inconnu : encoding =>       self.encoding = 'iso-8859-1'
193 Guillemets typographiques ouvrants. =>       self.encoding = 'iso-8859-1'
193 Mot inconnu : iso-8859-1 =>       self.encoding = 'iso-8859-1'
193 Guillemets typographiques fermants. =>       self.encoding = 'iso-8859-1'

194 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.read2()
194 Mot inconnu : read2 =>       self.read2()

195 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

196 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def read2(self):
196 Mot inconnu : def =>   def read2(self):
196 Mot inconnu : read2 =>   def read2(self):
196 Il manque un espace avant la parenthèse. =>   def read2(self):

197 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     try:
197 Mot inconnu : try =>     try:
197 Il manque un espace insécable. =>     try:

198 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f = codecs.open(self.filename, 'r', self.encoding)
198 Il manque un espace. =>       f = codecs.open(self.filename, 'r', self.encoding)
198 Il manque un espace avant la parenthèse. =>       f = codecs.open(self.filename, 'r', self.encoding)
198 Mot inconnu : filename =>       f = codecs.open(self.filename, 'r', self.encoding)
198 Guillemets typographiques ouvrants. =>       f = codecs.open(self.filename, 'r', self.encoding)
198 Mot inconnu : encoding =>       f = codecs.open(self.filename, 'r', self.encoding)

199 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.lines = f.readlines()
199 Mot inconnu : lines =>       self.lines = f.readlines()
199 Mot inconnu : readlines =>       self.lines = f.readlines()

200 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       f.close()
200 Il manque un espace. =>       f.close()

201 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Mot inconnu : len =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Il manque un espace avant la parenthèse. =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Mot inconnu : lines =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Mot inconnu : and =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Mot inconnu : bomLength =>       if len(self.lines) > 0 and self.bomLength > 0:
201 Il manque un espace insécable. =>       if len(self.lines) > 0 and self.bomLength > 0:

202 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Mot inconnu : lines =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Mot inconnu : lines =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Il manque un espace avant la parenthèse. =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Mot inconnu : utf-8 =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Mot inconnu : decode =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Il manque un espace avant la parenthèse. =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')
202 Mot inconnu : utf-8-sig =>         self.lines[0] = self.lines[0].encode('utf-8').decode('utf-8-sig')

203 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     except:
203 Mot inconnu : except =>     except:
203 Il manque un espace insécable. =>     except:

204 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       return False
204 Mot inconnu : return =>       return False
204 Mot inconnu : False =>       return False

205 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return True
205 Mot inconnu : return =>     return True
205 Mot inconnu : True =>     return True

206 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

207 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def parse(self):
207 Mot inconnu : def =>   def parse(self):
207 Il manque un espace avant la parenthèse. =>   def parse(self):

208 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     el = None
208 Mot inconnu : el =>     el = None

209 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     isJustNew = False
209 Mot inconnu : isJustNew =>     isJustNew = False
209 Mot inconnu : False =>     isJustNew = False

210 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     nextCountReady = True
210 Mot inconnu : nextCountReady =>     nextCountReady = True
210 Mot inconnu : True =>     nextCountReady = True

211 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     count = 0
211 Mot inconnu : count =>     count = 0

212 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     emptySub = []
212 Mot inconnu : emptySub =>     emptySub = []

213 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     skip = False
213 Mot inconnu : skip =>     skip = False
213 Mot inconnu : False =>     skip = False

214 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for line in self.lines:
214 Mot inconnu : line =>     for line in self.lines:
214 Mot inconnu : lines =>     for line in self.lines:
214 Il manque un espace insécable. =>     for line in self.lines:

215 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       l = line.encode('utf-8')    \
215 Mot inconnu : line =>       l = line.encode('utf-8')    \
215 Il manque un espace. =>       l = line.encode('utf-8')    \
215 Il manque un espace avant la parenthèse. =>       l = line.encode('utf-8')    \
215 Mot inconnu : utf-8 =>       l = line.encode('utf-8')    \

216 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         .replace("\n", "")        \
216 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>         .replace("\n", "")        \
216 Il manque un espace avant la parenthèse. =>         .replace("\n", "")        \
216 Guillemets typographiques fermants. =>         .replace("\n", "")        \

217 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         .replace("\r", "")
217 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>         .replace("\r", "")
217 Il manque un espace avant la parenthèse. =>         .replace("\r", "")
217 Guillemets typographiques fermants. =>         .replace("\r", "")

218 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if isJustNew:
218 Mot inconnu : isJustNew =>       if isJustNew:
218 Il manque un espace insécable. =>       if isJustNew:

219 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         skip = False
219 Mot inconnu : skip =>         skip = False
219 Mot inconnu : False =>         skip = False

220 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         isJustNew = False
220 Mot inconnu : isJustNew =>         isJustNew = False
220 Mot inconnu : False =>         isJustNew = False

221 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         nextCountReady = False
221 Mot inconnu : nextCountReady =>         nextCountReady = False
221 Mot inconnu : False =>         nextCountReady = False

222 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         times = l.split(' --> ')
222 Mot inconnu : times =>         times = l.split(' --> ')
222 Mot inconnu : split =>         times = l.split(' --> ')
222 Il manque un espace avant la parenthèse. =>         times = l.split(' --> ')

223 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el.timeStart = self.parseTime(times[0])
223 Mot inconnu : el =>         el.timeStart = self.parseTime(times[0])
223 Mot inconnu : timeStart =>         el.timeStart = self.parseTime(times[0])
223 Mot inconnu : parseTime =>         el.timeStart = self.parseTime(times[0])
223 Il manque un espace avant la parenthèse. =>         el.timeStart = self.parseTime(times[0])
223 Mot inconnu : times =>         el.timeStart = self.parseTime(times[0])

224 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el.timeEnd = self.parseTime(times[1])
224 Mot inconnu : el =>         el.timeEnd = self.parseTime(times[1])
224 Mot inconnu : timeEnd =>         el.timeEnd = self.parseTime(times[1])
224 Mot inconnu : parseTime =>         el.timeEnd = self.parseTime(times[1])
224 Il manque un espace avant la parenthèse. =>         el.timeEnd = self.parseTime(times[1])
224 Mot inconnu : times =>         el.timeEnd = self.parseTime(times[1])

225 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       elif nextCountReady and l.isdigit():
225 Mot inconnu : elif =>       elif nextCountReady and l.isdigit():
225 Mot inconnu : nextCountReady =>       elif nextCountReady and l.isdigit():
225 Mot inconnu : and =>       elif nextCountReady and l.isdigit():
225 Mot inconnu : isdigit =>       elif nextCountReady and l.isdigit():

226 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         count += 1
226 Mot inconnu : count =>         count += 1

227 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Il manque un espace avant la parenthèse. =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Guillemets typographiques ouvrants. =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Mot inconnu : Reading =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Mot inconnu : SRT =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Mot inconnu : str =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Guillemets typographiques fermants. =>         Console.v("Reading SRT #" + str(l) + "\r", False)
227 Mot inconnu : False =>         Console.v("Reading SRT #" + str(l) + "\r", False)

228 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if int(l) != count:
228 Mot inconnu : int =>         if int(l) != count:
228 Il manque un espace insécable. =>         if int(l) != count:
228 Mot inconnu : count =>         if int(l) != count:
228 Il manque un espace insécable. =>         if int(l) != count:

229 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.nl()

230 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Il manque un espace avant la parenthèse. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Guillemets typographiques ouvrants. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : SRT =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : number =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Il manque un espace insécable. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : Found =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Il manque un espace insécable. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : str =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Guillemets fermants. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : should =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : str =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Il manque un espace avant la parenthèse. =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))
230 Mot inconnu : count =>           Console.w("Bad SRT number! Found: #" + str(l) + ", but should be #" + str(count))

231 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if el != None:
231 Mot inconnu : el =>         if el != None:
231 Il manque un espace insécable. =>         if el != None:
231 Il manque un espace insécable. =>         if el != None:

232 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           if el.text == '':
232 Mot inconnu : el =>           if el.text == '':
232 Mot inconnu : text =>           if el.text == '':

233 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             emptySub.append(count - 1)
233 Mot inconnu : emptySub =>             emptySub.append(count - 1)
233 Il manque un espace. =>             emptySub.append(count - 1)
233 Il manque un espace avant la parenthèse. =>             emptySub.append(count - 1)
233 Mot inconnu : count =>             emptySub.append(count - 1)
233 Tiret d’incise : un tiret demi-cadratin [1] ou cadratin [2] est requis. (Ou éventuellement le signe “moins” s’il s’agit d’une soustraction [3] ou de représenter un nombre négatif [4].) =>             emptySub.append(count - 1)

234 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           else:
234 Mot inconnu : else =>           else:
234 Il manque un espace insécable. =>           else:

235 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             self.elements.append(el)
235 Mot inconnu : el =>             self.elements.append(el)

236 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         el = SubElement(0, 0, '')
236 Mot inconnu : el =>         el = SubElement(0, 0, '')
236 Mot inconnu : SubElement =>         el = SubElement(0, 0, '')
236 Il manque un espace avant la parenthèse. =>         el = SubElement(0, 0, '')

237 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         isJustNew = True
237 Mot inconnu : isJustNew =>         isJustNew = True
237 Mot inconnu : True =>         isJustNew = True

238 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       else:
238 Mot inconnu : else =>       else:
238 Il manque un espace insécable. =>       else:

239 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if not skip:
239 Mot inconnu : not =>         if not skip:
239 Mot inconnu : skip =>         if not skip:
239 Il manque un espace insécable. =>         if not skip:

240 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           skip = self.exclude(l)
240 Mot inconnu : skip =>           skip = self.exclude(l)
240 Mot inconnu : exclude =>           skip = self.exclude(l)

241 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         if skip:
241 Mot inconnu : skip =>         if skip:
241 Il manque un espace insécable. =>         if skip:

242 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.nl()

243 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           Console.w("Skipping SRT '" + l + "'")
243 Il manque un espace avant la parenthèse. =>           Console.w("Skipping SRT '" + l + "'")
243 Guillemets typographiques ouvrants. =>           Console.w("Skipping SRT '" + l + "'")
243 Mot inconnu : Skipping =>           Console.w("Skipping SRT '" + l + "'")
243 Mot inconnu : SRT =>           Console.w("Skipping SRT '" + l + "'")

244 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         elif len(l) > 0:
244 Mot inconnu : elif =>         elif len(l) > 0:
244 Mot inconnu : len =>         elif len(l) > 0:
244 Il manque un espace insécable. =>         elif len(l) > 0:

245 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           l = l.replace("", "œ")   \
245 Il manque un espace. =>           l = l.replace("", "œ")   \
245 Il manque un espace avant la parenthèse. =>           l = l.replace("", "œ")   \
245 Guillemets typographiques ouvrants. =>           l = l.replace("", "œ")   \
245 Guillemets typographiques fermants. =>           l = l.replace("", "œ")   \

246 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "’")      \
246 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "’")      \
246 Il manque un espace avant la parenthèse. =>             .replace("", "’")      \

247 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "“")      \
247 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "“")      \
247 Il manque un espace avant la parenthèse. =>             .replace("", "“")      \

248 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "”")      \
248 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "”")      \
248 Il manque un espace avant la parenthèse. =>             .replace("", "”")      \

249 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("", "€")      \
249 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("", "€")      \
249 Il manque un espace avant la parenthèse. =>             .replace("", "€")      \

250 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("´´", '"')      \
250 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("´´", '"')      \
250 Il manque un espace avant la parenthèse. =>             .replace("´´", '"')      \

251 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("´", "'")       \
251 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("´", "'")       \
251 Il manque un espace avant la parenthèse. =>             .replace("´", "'")       \

252 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("....", "…")    \
252 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("....", "…")    \
252 Il manque un espace avant la parenthèse. =>             .replace("....", "…")    \
252 Typographie : points de suspension. Utilisez le caractère dédié. =>             .replace("....", "…")    \
252 Guillemets typographiques fermants. =>             .replace("....", "…")    \
252 Guillemets typographiques fermants. =>             .replace("....", "…")    \

253 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace("...", "…")     \
253 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace("...", "…")     \
253 Il manque un espace avant la parenthèse. =>             .replace("...", "…")     \
253 Typographie : points de suspension. Utilisez le caractère dédié. =>             .replace("...", "…")     \
253 Guillemets typographiques fermants. =>             .replace("...", "…")     \
253 Guillemets typographiques fermants. =>             .replace("...", "…")     \

254 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>             .replace(". . .", "…")
254 L’espace se place après le point, et non avant (ou bien sert de liant entre deux lettres). =>             .replace(". . .", "…")
254 Il manque un espace avant la parenthèse. =>             .replace(". . .", "…")
254 Pas d’espace avant un point. =>             .replace(". . .", "…")
254 Guillemets typographiques fermants. =>             .replace(". . .", "…")
254 Guillemets typographiques fermants. =>             .replace(". . .", "…")

255 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           l = self.applyLanguageOnLine(l)
255 Mot inconnu : applyLanguageOnLine =>           l = self.applyLanguageOnLine(l)

256 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>           el.appendLine(l)
256 Mot inconnu : el =>           el.appendLine(l)
256 Mot inconnu : appendLine =>           el.appendLine(l)

257 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         nextCountReady = True
257 Mot inconnu : nextCountReady =>         nextCountReady = True
257 Mot inconnu : True =>         nextCountReady = True

258 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

259 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if el != None and len(str(el)) > 0:
259 Mot inconnu : el =>     if el != None and len(str(el)) > 0:
259 Il manque un espace insécable. =>     if el != None and len(str(el)) > 0:
259 Mot inconnu : and =>     if el != None and len(str(el)) > 0:
259 Mot inconnu : len =>     if el != None and len(str(el)) > 0:
259 Il manque un espace avant la parenthèse. =>     if el != None and len(str(el)) > 0:
259 Mot inconnu : str =>     if el != None and len(str(el)) > 0:
259 Mot inconnu : el =>     if el != None and len(str(el)) > 0:
259 Il manque un espace insécable. =>     if el != None and len(str(el)) > 0:

260 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       self.elements.append(el)
260 Mot inconnu : el =>       self.elements.append(el)

261 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     

262 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : Parsing =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : complete =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Il manque un espace insécable. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : str =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : len =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Il manque un espace avant la parenthèse. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : elements =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : subtitles =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Mot inconnu : found =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')
262 Il manque un espace insécable. =>     Console.v('Parsing complete: ' + str(len(self.elements)) + ' subtitles found!')

263 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : str =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : len =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : emptySub =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : subtitles =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : were =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : empty =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Il manque un espace insécable. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : str =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Il manque un espace avant la parenthèse. =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))
263 Mot inconnu : emptySub =>     Console.v(str(len(emptySub)) + ' subtitles were empty: ' + str(emptySub))

264 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

265 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def parseTime(self, time):
265 Mot inconnu : def =>   def parseTime(self, time):
265 Mot inconnu : parseTime =>   def parseTime(self, time):
265 Il manque un espace avant la parenthèse. =>   def parseTime(self, time):
265 Mot inconnu : time =>   def parseTime(self, time):

266 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     r1  = time.split(":")
266 Mot inconnu : r1 =>     r1  = time.split(":")
266 Espace(s) surnuméraire(s) à supprimer. =>     r1  = time.split(":")
266 Mot inconnu : time =>     r1  = time.split(":")
266 Mot inconnu : split =>     r1  = time.split(":")
266 Il manque un espace avant la parenthèse. =>     r1  = time.split(":")

267 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     h   = int(r1[0])
267 Espace(s) surnuméraire(s) à supprimer. =>     h   = int(r1[0])
267 Mot inconnu : int =>     h   = int(r1[0])
267 Il manque un espace avant la parenthèse. =>     h   = int(r1[0])
267 Mot inconnu : r1 =>     h   = int(r1[0])

268 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     m   = int(r1[1])
268 Espace(s) surnuméraire(s) à supprimer. =>     m   = int(r1[1])
268 Mot inconnu : int =>     m   = int(r1[1])
268 Il manque un espace avant la parenthèse. =>     m   = int(r1[1])
268 Mot inconnu : r1 =>     m   = int(r1[1])

269 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     r2  = r1[2].split(',')
269 Mot inconnu : r2 =>     r2  = r1[2].split(',')
269 Espace(s) surnuméraire(s) à supprimer. =>     r2  = r1[2].split(',')
269 Mot inconnu : r1 =>     r2  = r1[2].split(',')
269 Mot inconnu : split =>     r2  = r1[2].split(',')
269 Il manque un espace avant la parenthèse. =>     r2  = r1[2].split(',')

270 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     s   = int(r2[0])
270 Espace(s) surnuméraire(s) à supprimer. =>     s   = int(r2[0])
270 Mot inconnu : int =>     s   = int(r2[0])
270 Il manque un espace avant la parenthèse. =>     s   = int(r2[0])
270 Mot inconnu : r2 =>     s   = int(r2[0])

271 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ms  = int(r2[1])
271 Espace(s) surnuméraire(s) à supprimer. =>     ms  = int(r2[1])
271 Mot inconnu : int =>     ms  = int(r2[1])
271 Il manque un espace avant la parenthèse. =>     ms  = int(r2[1])
271 Mot inconnu : r2 =>     ms  = int(r2[1])

272 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return ((h * 60 + m) * 60 + s) * 1000 + ms
272 Mot inconnu : return =>     return ((h * 60 + m) * 60 + s) * 1000 + ms

273 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

274 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def applyLanguageOnLine(self, line):
274 Mot inconnu : def =>   def applyLanguageOnLine(self, line):
274 Mot inconnu : applyLanguageOnLine =>   def applyLanguageOnLine(self, line):
274 Il manque un espace avant la parenthèse. =>   def applyLanguageOnLine(self, line):
274 Mot inconnu : line =>   def applyLanguageOnLine(self, line):

275 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return line
275 Mot inconnu : return =>     return line
275 Mot inconnu : line =>     return line

276 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

277 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def exclude(self, line):
277 Mot inconnu : def =>   def exclude(self, line):
277 Mot inconnu : exclude =>   def exclude(self, line):
277 Il manque un espace avant la parenthèse. =>   def exclude(self, line):
277 Mot inconnu : line =>   def exclude(self, line):

278 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     l = line.lower()
278 Mot inconnu : line =>     l = line.lower()
278 Mot inconnu : lower =>     l = line.lower()

279 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     for x in exclusion:
279 Il manque un espace insécable. =>     for x in exclusion:

280 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       if l.find(x) != -1:
280 Mot inconnu : find =>       if l.find(x) != -1:
280 Il manque un espace insécable. =>       if l.find(x) != -1:
280 S’il s’agit de représenter un nombre négatif, utilisez le signe typographique “moins” [1]. S’il s’agit d’une incise, utilisez un tiret demi-cadratin [2] ou un tiret cadratin [3]. =>       if l.find(x) != -1:
280 Il manque un espace insécable. =>       if l.find(x) != -1:

281 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>         return True
281 Mot inconnu : return =>         return True
281 Mot inconnu : True =>         return True

282 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     return False
282 Mot inconnu : return =>     return False
282 Mot inconnu : False =>     return False

284 Mot inconnu : class => class Srt2Ass:
284 Mot inconnu : Srt2Ass => class Srt2Ass:
284 Il manque un espace insécable. => class Srt2Ass:

285 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

286 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : def =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : __init__ =>   def __init__(self, srt, fregular, fsize, delete):
286 Il manque un espace avant la parenthèse. =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : srt =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : fregular =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : fsize =>   def __init__(self, srt, fregular, fsize, delete):
286 Mot inconnu : delete =>   def __init__(self, srt, fregular, fsize, delete):

287 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     ass = srt.replace('.srt', '.ass')
287 Mot inconnu : ass =>     ass = srt.replace('.srt', '.ass')
287 Mot inconnu : srt =>     ass = srt.replace('.srt', '.ass')
287 Il manque un espace. =>     ass = srt.replace('.srt', '.ass')
287 Il manque un espace avant la parenthèse. =>     ass = srt.replace('.srt', '.ass')
287 Mot inconnu : srt =>     ass = srt.replace('.srt', '.ass')
287 Mot inconnu : ass =>     ass = srt.replace('.srt', '.ass')

288 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     subs = SubRipReader(srt)
288 Mot inconnu : subs =>     subs = SubRipReader(srt)
288 Mot inconnu : SubRipReader =>     subs = SubRipReader(srt)
288 Il manque un espace avant la parenthèse. =>     subs = SubRipReader(srt)
288 Mot inconnu : srt =>     subs = SubRipReader(srt)

289 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : AdvancedSubStationAlphaWriter =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Il manque un espace avant la parenthèse. =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : ass =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : subs =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : elements =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : fregular =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)
289 Mot inconnu : fsize =>     AdvancedSubStationAlphaWriter(ass, subs.elements, fregular, fsize)

290 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     if delete:
290 Mot inconnu : delete =>     if delete:
290 Il manque un espace insécable. =>     if delete:

291 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       Console.l("Removing " + srt + "…")
291 Il manque un espace avant la parenthèse. =>       Console.l("Removing " + srt + "…")
291 Guillemets typographiques ouvrants. =>       Console.l("Removing " + srt + "…")
291 Mot inconnu : Removing =>       Console.l("Removing " + srt + "…")
291 Guillemets isolés. =>       Console.l("Removing " + srt + "…")
291 Mot inconnu : srt =>       Console.l("Removing " + srt + "…")
291 Guillemets typographiques fermants. =>       Console.l("Removing " + srt + "…")

292 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>       os.remove(srt)
292 Mot inconnu : remove =>       os.remove(srt)
292 Il manque un espace avant la parenthèse. =>       os.remove(srt)
292 Mot inconnu : srt =>       os.remove(srt)

294 Mot inconnu : __name__ => if __name__ == "__main__":
294 Guillemets typographiques ouvrants. => if __name__ == "__main__":
294 Mot inconnu : __main__ => if __name__ == "__main__":
294 Guillemets typographiques fermants. => if __name__ == "__main__":

296 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : argparse =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : ArgumentParser =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Il manque un espace avant la parenthèse. =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : Convert =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : SubRip =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : srt =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : to =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : Advanced =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : Sub =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')
296 Mot inconnu : ass =>   parser = argparse.ArgumentParser(description='Convert SubRip (srt) files to Advanced Sub Station Alpha (ass) files.')

297 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : add_argument =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Il manque un espace avant la parenthèse. =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : metavar =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : nargs =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : help =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : the =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : SubRip =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')
297 Mot inconnu : srt =>   parser.add_argument('file', metavar='file', nargs='*', help='the SubRip (srt) file')

298 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : add_argument =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Il manque un espace avant la parenthèse. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : font-regular =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : metavar =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : fontr =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : nargs =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : help =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : Name =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : of =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : the =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : to =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : regular =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : text =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : Default =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : is =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : Cronos =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Guillemets typographiques fermants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : default =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Mot inconnu : Cronos =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")
298 Guillemets typographiques fermants. =>   parser.add_argument('--font-regular', metavar='fontr', nargs='?', help='Name of the font to use for regular text. Default is "Cronos Pro".', default="Cronos Pro")

299 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Majuscule en début de phrase, sauf éventuellement lors d’une énumération. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : add_argument =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Il manque un espace avant la parenthèse. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : font-size =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : metavar =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : nargs =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : help =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : size =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : both =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : regular =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : and =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : italic =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : Default =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : is =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Mot inconnu : default =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Guillemets typographiques ouvrants. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")
299 Guillemets typographiques fermants. =>   parser.add_argument('--font-size', metavar='fonts', nargs='?', help='Font\'s size for both regular and italic fonts. Default is 24.', default="24")

300 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : add_argument =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Il manque un espace avant la parenthèse. =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : delete =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : store_true =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : help =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : delete =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : the =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : SubRip =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')
300 Mot inconnu : srt =>   parser.add_argument('--delete', '-d', action='store_true', help='delete the original SubRip (srt) file')

301 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : add_argument =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Il manque un espace avant la parenthèse. =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : verbose =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : store_true =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : help =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : print =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')
301 Mot inconnu : the =>   parser.add_argument('--verbose', '-v', action='store_true', help='print information about the process')

302 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   args = parser.parse_args()
302 Mot inconnu : args =>   args = parser.parse_args()
302 Mot inconnu : parse_args =>   args = parser.parse_args()

303 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

304 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   Console.verbose = args.verbose
304 Mot inconnu : verbose =>   Console.verbose = args.verbose
304 Mot inconnu : args =>   Console.verbose = args.verbose
304 Mot inconnu : verbose =>   Console.verbose = args.verbose

305 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

306 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   srtfiles = []
306 Mot inconnu : srtfiles =>   srtfiles = []

307 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   if len(args.file) == 0:
307 Mot inconnu : len =>   if len(args.file) == 0:
307 Il manque un espace avant la parenthèse. =>   if len(args.file) == 0:
307 Mot inconnu : args =>   if len(args.file) == 0:
307 Il manque un espace. =>   if len(args.file) == 0:
307 Il manque un espace insécable. =>   if len(args.file) == 0:

308 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     os.chdir(".")
308 Mot inconnu : chdir =>     os.chdir(".")
308 Il manque un espace avant la parenthèse. =>     os.chdir(".")
308 Guillemets typographiques fermants. =>     os.chdir(".")

309 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = glob.glob("*.srt")
309 Mot inconnu : srtfiles =>     srtfiles = glob.glob("*.srt")
309 Mot inconnu : glob =>     srtfiles = glob.glob("*.srt")
309 Mot inconnu : glob =>     srtfiles = glob.glob("*.srt")
309 Il manque un espace avant la parenthèse. =>     srtfiles = glob.glob("*.srt")
309 Mot inconnu : srt =>     srtfiles = glob.glob("*.srt")
309 Guillemets typographiques fermants. =>     srtfiles = glob.glob("*.srt")

310 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   elif len(args.file) == 1:
310 Mot inconnu : elif =>   elif len(args.file) == 1:
310 Mot inconnu : len =>   elif len(args.file) == 1:
310 Il manque un espace avant la parenthèse. =>   elif len(args.file) == 1:
310 Mot inconnu : args =>   elif len(args.file) == 1:
310 Il manque un espace. =>   elif len(args.file) == 1:
310 Il manque un espace insécable. =>   elif len(args.file) == 1:

311 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     os.chdir(".")
311 Mot inconnu : chdir =>     os.chdir(".")
311 Il manque un espace avant la parenthèse. =>     os.chdir(".")
311 Guillemets typographiques fermants. =>     os.chdir(".")

312 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = glob.glob(args.file[0])
312 Mot inconnu : srtfiles =>     srtfiles = glob.glob(args.file[0])
312 Mot inconnu : glob =>     srtfiles = glob.glob(args.file[0])
312 Mot inconnu : glob =>     srtfiles = glob.glob(args.file[0])
312 Il manque un espace avant la parenthèse. =>     srtfiles = glob.glob(args.file[0])
312 Mot inconnu : args =>     srtfiles = glob.glob(args.file[0])
312 Il manque un espace. =>     srtfiles = glob.glob(args.file[0])

313 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   else:
313 Mot inconnu : else =>   else:
313 Il manque un espace insécable. =>   else:

314 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     srtfiles = args.file
314 Mot inconnu : srtfiles =>     srtfiles = args.file
314 Mot inconnu : args =>     srtfiles = args.file
314 Il manque un espace. =>     srtfiles = args.file

315 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   

316 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>   for srt in srtfiles:
316 Mot inconnu : srt =>   for srt in srtfiles:
316 Mot inconnu : srtfiles =>   for srt in srtfiles:
316 Il manque un espace insécable. =>   for srt in srtfiles:

317 Espace(s) en début de ligne à supprimer : utilisez les retraits de paragraphe (ou les tabulations à la rigueur). =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : Srt2Ass =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Il manque un espace avant la parenthèse. =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : srt =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : font_regular =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : font_size =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : args =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)
317 Mot inconnu : delete =>     Srt2Ass(srt, args.font_regular, args.font_size, args.delete)

321 Mot inconnu : SRT => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note>
321 Mot inconnu : SRT => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note>
321 Mot inconnu : Subtitle => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note>
321 Mot inconnu : Editor => <note>Les erreurs d'encodage du fichier SRT ne sont pas gérées par ce script. En cas de problème de conversion, ouvrez le fichier SRT avec Subtitle Editor et faites Enregistrer. La conversion fonctionnera alors parfaitement.</note>
