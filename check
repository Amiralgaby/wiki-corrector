#!/usr/bin/env python3

import sys
import os
from os.path import join
from datetime import datetime

import fnmatch

from scrapy.selector import Selector
from pygrammalecte import grammalecte_text

from wiki_c.state import State

DIR_ORIGIN = 'cache'
DIR_DESTINATION = 'result'


def get_errors(content):
    errors = ""
    content_list = content.splitlines()
    last_line = 0
    try:
        messages = grammalecte_text(content)
    except Error as e:
        print("Error: {0}".format(e))
        print("content : {0}".format(content))
        exit(0)
    for message in messages:
        cr = ''
        if last_line != 0 and last_line != message.line:
            cr = '\n'
        last_line = message.line
        error = "{0}{1} {2} => {3}\n".format(
            cr,
            message.line,
            message.message,
            content_list[message.line - 1]
        )
        errors += error
    return errors

if __name__ == '__main__':
    full = False
    len_dir_cache = len(DIR_ORIGIN)
    state = State(DIR_DESTINATION)
    index = state.get_index()

    if '-f' in sys.argv or '--full' in sys.argv:
        full = True

    state.create_index(full)

    for root, _dir, files in os.walk(DIR_ORIGIN):
        for _file in fnmatch.filter(files, '*'):
            if not _file.endswith('.dokuwiki'):
                continue

            with open(join(root, _file), 'r') as f:
                content = f.read()

            errors = get_errors(content)
            path = DIR_DESTINATION + root[len_dir_cache:] + '/' + _file.replace('.dokuwiki', '.txt')
            os.makedirs(
                DIR_DESTINATION + '/' + root[len_dir_cache:],
                exist_ok=True
            )
            
            file_date = datetime.fromtimestamp(os.path.getmtime(path))
            if not full and index and index['last_date'] > file_date:
                print(path, '[exist]')
                continue

            print(path, '[created]')
            with open(path, 'w') as f:
                f.write(errors)
