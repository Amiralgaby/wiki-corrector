#!/usr/bin/env python3

import sys
import os
from pathlib import Path
from os.path import join, isfile

import click

import fnmatch

from wiki_c.checkers import (
    GrammalecteChecker,
    DokuwikiChecker,
    NotAllowedChecker,
    UrlChecker,
    ShellCodeChecker,
)

DIR_ORIGIN = 'cache'

class FakeMessage:
    def __init__(self, line, message):
        self.line = line
        self.message = message


def detect_redirection(content):
    if content.startswith('\n~~REDIRECT>') or content.startswith('~~REDIRECT>'):
        return True
    return False


def analyse_file(list_checkers, root, _file, len_dir_cache, full=False):
    if not _file.endswith('.dokuwiki'):
        return
    if not isfile(join(root, _file)):
        return
    content = Path(join(root, _file)).read_text(encoding='UTF-8')

    if detect_redirection(content):
        return

    for checker in list_checkers:
        checker.set_path(root, _file, len_dir_cache)
        if checker.exist():
            continue
        checker.parse(content)
        checker.write()


def walk(list_checkers, full=False):
    len_dir_cache = len(DIR_ORIGIN)
    for root, _dir, files in os.walk(DIR_ORIGIN):
        for _file in fnmatch.filter(files, '*'):
            analyse_file(list_checkers, root, _file, len_dir_cache, full)


@click.command()
@click.option('-f','--full', is_flag=True, help="")
@click.option('--file', 
    prompt=False, 
    prompt_required=True,
     default="", 
     help="cette option à besoin d'une valeur associée. par exemple ./check --file cache/truc.dokuwiki")
@click.option("--url/--no-url", is_flag=True, help="UrlChecker. utiliser/ne pas utiliser", default=True, show_default=True)
@click.option("-g", is_flag=True, help="GrammalecteChecker")
@click.option("-n", is_flag=True, help="NotAllowedChecker")
@click.option("-p", is_flag=True, help="AptUrlChecker (indisponible)")
@click.option("--doku/--no-doku", is_flag=True, help="DokuwiChecker. utiliser/ne pas utiliser", default=True,show_default=True)
@click.option("-s", is_flag=True, help="ShellCodeChecker")
@click.option("-a", "--all", is_flag=True, help="Utiliser tout les checkers existant")
def check_app_main(full, file, url, g, n, p, doku, s, all):
    
    # dictionnaire de correspondance entre checker et valeur du flag qui lui est associé
    dictCorrespondanceChecker = {
        UrlChecker(full): url,
        GrammalecteChecker(full): g,
        NotAllowedChecker(full): n,
        # AptUrlChecker(full): p,
        DokuwikiChecker(full): doku,
        ShellCodeChecker(full): s
    }
    
    # on checker l'option "all" pour savoir si on les prends tous
    list_checkers = None
    if all:
        list_checkers = list(dictCorrespondanceChecker.keys())
    else:
        list_checkers = [checkerInstance for checkerInstance, valOption in dictCorrespondanceChecker.items() if valOption]
    
    # si on a 0 checkers, ne rien faire
    if len(list_checkers) == 0:
        print("Les options données à la ligne de commande ne permettent pas d'avoir de checkers.")
        exit(1)
    
    # check if shellcheck is installed
    if any(isinstance(x, ShellCodeChecker) for x in list_checkers):
        from distutils.spawn import find_executable
        if find_executable("shellcheck") is None:
            print("You need to have the shellcheck binary installed to use this checker") 
            exit(-1)

    if file == '':
        walk(list_checkers, full)
    else:
        filename = os.path.basename(file)

        directory_base = os.path.dirname(file)

        directory_base = os.path.relpath(directory_base, ".") # éviter un crash si "./" est renseigné

        analyse_file(list_checkers, directory_base, filename, len(DIR_ORIGIN), full)

if __name__ == '__main__':
    
    # point d'entrée du main
    # les variables sont auto complétées par la bibliothèque "click"
    check_app_main()    
