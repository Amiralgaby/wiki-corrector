#!/usr/bin/env python3

import sys
import os
from os.path import join, isfile
from datetime import datetime

import fnmatch

from scrapy.selector import Selector
from pygrammalecte import grammalecte_text

from wiki_c.state import State

DIR_ORIGIN = 'cache'
DIR_DESTINATION = 'result'


def get_anomalies(content):
    anomalies = ""
    content_list = content.splitlines()
    last_line = 0
    for message in grammalecte_text(content):
        cr = ''
        if last_line != 0 and last_line != message.line:
            cr = '\n'
        last_line = message.line
        anomalie = "{0}{1} {2} => {3}\n".format(
            cr,
            message.line,
            message.message,
            content_list[message.line - 1]
        )
        anomalies += anomalie
    return anomalies


def create_file(anomalies, path):
    print(path, '[created]')
    with open(path, 'w') as f:
        f.write(anomalies)


def detect_redirection(content):
    if content.startswith('\n~~REDIRECT>'):
        return True
    return False


def write_error(path, e, content):
    error = "path: {0}".format(path)
    error += "exception: {0}".format(e)
    error += "content : {0}".format(content)
    with open(join(DIR_ORIGIN, 'crash.log'), 'a') as f:
        f.write(error)


def analyse_file(root, _file, full=False):
    if not _file.endswith('.dokuwiki'):
        return

    with open(join(root, _file), 'r') as f:
        content = f.read()

    if detect_redirection(content):
        return

    path = DIR_DESTINATION + root[len_dir_cache:] + '/' + _file.replace('.dokuwiki', '.txt')
    try:
        anomalies = get_anomalies(content)
    except Exception as e:
        write_error(path, e, content)
        return

    os.makedirs(
        DIR_DESTINATION + '/' + root[len_dir_cache:],
        exist_ok=True
    )

    if not isfile(path):
        create_file(anomalies, path)
        return

    file_date = datetime.fromtimestamp(os.path.getmtime(path))
    if not full and index and index['last_date'] > file_date:
        print(path, '[exist]')
        return
    
    create_file(anomalies, path)


def walk(full=False):
    for root, _dir, files in os.walk(DIR_ORIGIN):
        for _file in fnmatch.filter(files, '*'):
            analyse_file(root, _file, full)


if __name__ == '__main__':
    full = False
    len_dir_cache = len(DIR_ORIGIN)
    state = State(DIR_DESTINATION)
    index = state.get_index()

    if '-f' in sys.argv or '--full' in sys.argv:
        full = True

    state.create_index(full)

    walk(full)
